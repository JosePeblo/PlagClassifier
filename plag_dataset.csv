,original,untrusted,plagiarism
0," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," import java.util.Scanner; public class Soal1 {     public static void main(String[] args) {         for(int i = 0; i<5; i++)                 System.out.println(""Welcome to Java"");              } } ",0
1," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Kasus1L1 {          public static void main(String[] args) {                  System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");     } } ",1
2," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Kasus1L3 {          public static void main(String[] args) {          String teks = ""Welcome to Java"";         System.out.println(teks);         System.out.println(teks);         System.out.println(teks);         System.out.println(teks);         System.out.println(teks);     }      } ",1
3," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Kasus1L6 {               public static void main(String[] args) {                  cetakTeks(""Welcome to Java"");     }     private static void cetakTeks(String teks) {         int i = 5;         while(i > 0){             System.out.println(teks);             i--;         }     } } ",1
4," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class L1 {     public static void main(String[] args) {         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");     } } ",1
5," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class L2 {      public static void main(String[] args) {         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");     } } ",1
6," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class L3 {     public static void main(String[] args) {         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");     } } ",1
7," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class L4 {     public static void print() {         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");     }     public static void main(String[] args) {                  print();     } } ",1
8," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class L5 {     public static void print() {         for (int i = 0; i < 5; i++) {             System.out.print(""Welcome to Java\n"");         }     }     public static void main(String[] args) {         print();     } } ",1
9," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class L6 {     public static void print() {         for (int i = 5; i > 0; i--) {             System.out.print(""Welcome to Java\n"");         }     }     public static void main(String[] args) {         print();     } } ",1
10," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Level1 {     public static void main(String[] args)     {                  System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");         System.out.println(""Welcome to Java"");     } } ",1
11," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Level3  {     public static void main(String[] args)      {         System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java"");     } } ",1
12," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Level4 {     public static void main(String[] args) {         String kal = ""Welcome to Java"";         tampil(kal);     }          private static void tampil(String kalimat) {         System.out.println(kalimat);         System.out.println(kalimat);         System.out.println(kalimat);         System.out.println(kalimat);         System.out.println(kalimat);     } } ",1
13," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Level6  {     public static void main(String[] args)      {         String input = ""Welcome to Java\n"";         keluaran(input);     }          private static void keluaran(String kal)      {         int limit=0;          while(limit!=5)          {             System.out.print(kal);             limit++;         }     } } ",1
14," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {          public static void main(String[] args) {         String a = ""Welcome To Java"";         for(int i=0;i<6;i++)         {             System.out.println(a);         }              }      } ",0
15," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void main(String[] args) {                          System.out.println(""Welcome to Java"");             System.out.println(""Welcome to Java"");             System.out.println(""Welcome to Java"");             System.out.println(""Welcome to Java"");             System.out.println(""Welcome to Java"");     } } ",1
16," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void main(String[] args) {              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");     } } ",1
17," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void main(String[] args) {              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");     } } ",1
18," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void main(String[] args) {              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");              System.out.println(""Welcome to Java"");     } } ",1
19," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void main(String[] args) {          cetak();     }     public static void cetak(){         System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");     } } ",1
20," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void main(String[] args) {          cetak();     }     public static void cetak(){         for (int i = 0; i < 5; i++) {             System.out.println(""Welcome to Java"");                       }     } } ",1
21," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void main(String[] args) {          cetak();     }     public static void cetak(){         for (int i = 5; i > -1; i--) {             System.out.println(""Welcome to Java"");                       }     } } ",1
22," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void main(String[] args) {     for(int i=0;i<5;i++){         System.out.println(""Welcome To Java"");         }     } } ",0
23," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Main {     public static void printOut(){         System.out.println(""Welcome to Java"");     }     public static void main(String[] args) {                  printOut();         printOut();         printOut();         printOut();         printOut();     } } ",1
24," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class No1 {          public static void main(String[] args) {                  System.out.println(""Welcome To Java"");         System.out.println(""Welcome To Java"");         System.out.println(""Welcome To Java"");         System.out.println(""Welcome To Java"");         System.out.println(""Welcome To Java"");     }      } ",0
25," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class Nomor1_2451041557A22145B3701B0184109CAB013 {          public static void main(String[] args) {         for(int i=0;i<5;i++)         {             System .out.println(""Welcome To Java"");         }     }      } ",0
26," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class PrintJava {     public static void main(String[] args) {                          System.out.println(""Welcome to Java"");             System.out.println(""Welcome to Java"");             System.out.println(""Welcome to Java"");             System.out.println(""Welcome to Java"");             System.out.println(""Welcome to Java"");     } } ",1
27," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class PrintJava {     public static void main(String[] args) {         printAll();     }     public static void printAll() {                  for (int i = 0; i < 5; i++) {             System.out.print(""Welcome to Java"");             System.out.println("""");         }     } } ",1
28," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class PrintJava {     public static void main(String[] args) {         printAll();     }     public static void printAll() {                  for (int i = 5; i > 0; i--) {             System.out.print(""Welcome to Java"");             System.out.println("""");         }     } } ",1
29," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T01 {          public static void main(String[] args) {         for(int i=0;i<5;i++)             System.out.println(""Welcome To Java"");     }      } ",0
30," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T01 {     public static void main(String[] args) {         for (int i = 0; i < 5; i++) {             System.out.println(""Welcome To Java"");         }     } } ",0
31," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T01 {     public static void main(String[] args) {         for (int i = 0; i < 5; i++) {             System.out.println(""Welcome To Java"");         }     } } ",0
32," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T01 {     public static void main(String[] args) {         for (int i = 0; i < 5; i++) {             System.out.println(""Welcome To Java"");         }     } } ",0
33," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T01 {     public static void main(String[] args) {         for (int i = 0; i < 5; i++) {             System.out.println(""Welcome To Java"");         }     } } ",0
34," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T01 {     public static void main(String[] args) {         for (int i=0;i<5;i++){             System.out.println(""Welcome To Java"");         }     } } ",0
35," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T01 {     public static void main(String[] args) {         for(int i = 0; i < 5; i++) {             System.out.println(""Welcome To Java"");         }     } } ",0
36," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T01 {     public static void main(String[] args){                  for(int i = 0; i < 5; i++){             System.out.println(""Welcome To Java"");         }              } } ",0
37," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ",1
38," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class WelcomeToJava {     public static String test(int i) {         if(i>0) {             System.out.println(""Welcome To Java"");             return test(--i);         }         else             return """";     }          public static void main(String[] args) {         int i=5;         test(i);     } } ",1
39," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class WelcomeToJava {     public static void main(String[] args) { {             System.out.println(""Welcome To Java""); System.out.println(""Welcome To Java""); System.out.println(""Welcome To Java""); System.out.println(""Welcome To Java""); System.out.println(""Welcome To Java"");         }     } } ",1
40," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class WelcomeToJava {     public static void test(int i) {         while(i>0) {             System.out.println(""Welcome To Java"");             i--;         }     }          public static void main(String[] args) {         test(5);     } } ",1
41," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class hellow {     public static void main(String[] args) {         printHello();     }     private static void printHello() {         System.out.print(""Welcome to Java \n"");          System.out.print(""Welcome to Java \n"");          System.out.print(""Welcome to Java \n"");          System.out.print(""Welcome to Java \n"");          System.out.print(""Welcome to Java \n"");      } } ",1
42," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class hellow {     public static void main(String[] args) {         printHello();     }     private static void printHello() {         System.out.print(""Welcome to Java \n"");          System.out.print(""Welcome to Java \n"");          System.out.print(""Welcome to Java \n"");          System.out.print(""Welcome to Java \n"");          System.out.print(""Welcome to Java \n"");      } } ",1
43," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class hellow {     public static void main(String[] args) {         printHello();     }     private static void printHello() {         System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");      } } ",1
44," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } "," public class t01 {     public static void main(String[] args) {         for (int i = 0; i < 5; i++) {             System.out.println(""Welcome To Java"");         }     } } ",0
45," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","class HelloWorld { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } }",1
46," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","class HelloWorld { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } }",1
47," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","class HelloWorld { static String s; static void Cetak() { System.out.println(s); System.out.println(s); System.out.println(s); System.out.println(s); System.out.println(s); } public static void main(String[] args) { s = ""Welcome to Java""; Cetak(); } }",1
48," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","class HelloWorld { static String s; static void Cetak() { for(int a=5;a>0;a--) System.out.println(s); } public static void main(String[] args) { s = ""Welcome to Java""; Cetak(); } }",1
49," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","public class HelloWorld {     public static void main(String[] args) {         System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");      } } ",1
50," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","public class Main {     public static void main(String[] args) {              System.out.println(""Welcome to Java"");     System.out.println(""Welcome to Java"");     System.out.println(""Welcome to Java"");     System.out.println(""Welcome to Java"");     System.out.println(""Welcome to Java"");     } } ",1
51," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","public class Main {     public static void main(String[] args) {     String java=""Welcome To Java""; for(int baris=9;baris>=0;baris-=2){     System.out.print(java);     System.out.println(); }     } } ",1
52," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","public class T01 {    public static void main(String[] args)    {       for(int i=0;i < 5;i++)       {          System.out.println(""Welcome To Java"");       }           } }",0
53," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","public class hellow {     public static void main(String[] args) {         System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");      } } ",1
54," public class T1 { public static void main(String[] args) { System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); System.out.println(""Welcome to Java""); } } ","public class hellow {     public static void main(String[] args) {         System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");          System.out.println(""Welcome to Java"");      } } ",1
55," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","   import java.util.Scanner; public class looping {    public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         int mil ;         print(mil=1);    }        public static void print(int mil)    {        for(int i=mil;i<=10;i++) {             System.out.println(i + ""\t\t"" + i * 1.609);                  }    } }",1
56," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","   import java.util.Scanner; public class looping {    public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         int mil ;         print(mil=1);    }        public static void print(int mil)    {        while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }    } }",1
57," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","   import java.util.Scanner; public class looping {    public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         print(1);    }        public static void print(int mil)    {        int x;        for(int i=mil;i<=10;i++) {             x=(int)(i*1.609);             System.out.println(i + ""\t\t"" + x);                  }    } }",1
58," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," import java.text.DecimalFormat; import java.text.NumberFormat; public class T04 {     public static void main(String[] args) {         NumberFormat formatter = new DecimalFormat(""#0"");         System.out.println(""Miles"" + ""\t"" + ""Kilometers"");         System.out.println(""1"" + ""\t"" + (1 * 1.609));         System.out.println(""2"" + ""\t"" + (2 * 1.609));         System.out.println(""3"" + ""\t"" + (3 * 1.609));         System.out.println(""4"" + ""\t"" + (4 * 1.609));         System.out.println(""5"" + ""\t"" + (5 * 1.609));         System.out.println(""6"" + ""\t"" + (6 * 1.609));         System.out.println(""7"" + ""\t"" + (7 * 1.609));         System.out.println(""8"" + ""\t"" + (8 * 1.609));         System.out.println(""9"" + ""\t"" + (9 * 1.609));         System.out.println(""10"" + ""\t"" + (10 * 1.609) + formatter.format(0.0));     } } ",0
59," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," import java.text.DecimalFormat; public class Soal4 {     public static void main(String[] args) {         int arr[][] = new int[11][2];         DecimalFormat df = new DecimalFormat(""#.###"");         for(int i = 0; i<11; i++){             if(i==0)                 System.out.println(""Miles \t Kilometers"");             else                 System.out.println(i + ""\t"" + df.format(i*1.609));         }     } } ",0
60," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," import java.text.DecimalFormat; public class T04 {     public static void main(String[] args) {         DecimalFormat d = new DecimalFormat(""0.000"");                  System.out.println(""Miles\tKilometers"");         for(int i = 1; i <= 10; i++) {             System.out.println(i + ""\t"" + d.format(i * 1.609));         }     } } ",0
61," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," import java.util.Scanner; public class T04 {     public static void main(String[] args) {         double kilo;         double milToKilo = 1.609;         System.out.println(""Miles\tKilometers"");         for (int i = 1; i < 11; i++) {             kilo = i * milToKilo;             System.out.println(i + ""\t"" + kilo);         }     } } ",0
62," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4 {     public static double Konversi(int miles) {             return miles * 1.609;     }          public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  for(int miles=1 ; miles<=10 ; miles++)             System.out.println(miles + ""\t\t"" + Konversi(miles));     } } ",1
63," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4 {     public static double Konversi(int miles) {         if(miles <=10) {             System.out.println(miles + ""\t\t"" + miles * 1.609);             return Konversi(++miles);         }         return 0;     }          public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  Konversi(1);     } } ",1
64," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4 {     public static void Konversi() {         for (int miles = 1 ; miles <= 10 ; miles++) {             System.out.println(miles + ""\t\t"" + miles * 1.609);         }     }          public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  Konversi();     } } ",1
65," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4 {     public static void Konversi(int miles) {             System.out.println(miles + ""\t\t"" + miles * 1.609);     }          public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  for(int miles=1 ; miles<=10 ; miles++)             Konversi(miles);     } } ",1
66," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4 {     public static void Konversi(int n) {         int miles = 1;         while (miles <= n) {             System.out.println(miles + ""\t\t"" + miles * 1.609);             miles++;         }     }          public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  Konversi(10);     } } ",1
67," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4 {     public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ",1
68," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4L1 {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  int miles = 1;         while (miles <= 10) {                          System.out.println(miles + ""\t\t"" + miles * 1.609);             miles++;         }     } } ",1
69," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4L2 {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  int counter = 1;         while (counter <= 10) {                                       System.out.println(counter + ""\t\t"" + counter * 1.609);             counter++;         }     } } ",1
70," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4L3 {     public static void main(String[] args) {         int counter = 1;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  while (counter <= 10) {                                       System.out.println(counter + ""\t\t"" + counter * 1.609);             counter++;         }     } } ",1
71," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4L4 {     public static void main(String[] args) {         int counter = 1;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  while (counter <= 10) {                                       System.out.println(counter + ""\t\t"" + ConvertMilesToKilo(counter));             counter++;         }     }          private static double ConvertMilesToKilo(int miles){         return miles * 1.609;     } } ",1
72," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4L5 {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  for (int i = 1; i <= 10; i++) {                                       System.out.println(i + ""\t\t"" + ConvertMilesToKilo(i));         }     }     private static double ConvertMilesToKilo(int miles) {         return miles * 1.609;     } } ",1
73," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Kasus4L6 {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         ShowTable(10);     }     private static void ShowTable(int jumlahData) {         for (int i = jumlahData; i >= 1; i--) {                          int temp = jumlahData + 1 - i;             System.out.println(temp + ""\t\t"" + ConvertMilesToKilo(temp));         }     }     private static double ConvertMilesToKilo(int miles) {         return miles * 1.609;     } } ",1
74," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class L1 {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         int miles = 1;         while (miles <= 10) {             System.out.println(miles + ""\t\t"" + miles * 1.609);             miles++;         }     } } ",1
75," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class L2 {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         int mil = 1;         while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     } } ",1
76," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class L3 {     public static void main(String[] args) {         int mil = 0 ;         System.out.println(""Miles\t\tKilometers"");                  System.out.println(""-------------------------------"");         mil = 1;         while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     } } ",1
77," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class L4 {     public static void print(int mil)     {           while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     }     public static void main(String[] args) {                  int mil = 1 ;         System.out.println(""Miles\t\tKilometers"");                  System.out.println(""-------------------------------"");         print(mil);     } } ",1
78," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class L5 {     public static void print(int mil)     {           for ( int i = 0 ; i < 10 ; i ++){             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     }     public static void main(String[] args) {                  int mil = 1 ;         System.out.println(""Miles\t\tKilometers"");                  System.out.println(""-------------------------------"");         print(mil);     } } ",1
79," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class L6 {     public static void print(int mil)     {           for ( int i = 10 ; i > 0 ; i --){             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     }     public static void main(String[] args) {                  int mil = 1 ;         System.out.println(""Miles\t\tKilometers"");                  System.out.println(""-------------------------------"");         print(mil);     } } ",1
80," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Level1  {     public static void main(String[] args)      {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         int miles = 1;         while (miles <= 10)          {             System.out.println(miles + ""\t\t"" + miles * 1.609);             miles++;         }     } } ",1
81," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Level2 {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  int mil = 1;         while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     } } ",1
82," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Level3 {     public static void main(String[] args) {                  int mile = 1;                  System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         while (mile <= 10) {             System.out.println(mile + ""\t\t"" + mile * 1.609);             mile++;         }     } } ",1
83," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Level4  {     public static void main(String[] args)      {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         tabelKonversi();     }     private static void tabelKonversi()      {         int mil = 1;         while (mil <= 10)          {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     } } ",1
84," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Level5 {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         convert();     }          private static void convert() {         for(int mill = 1; mill <=10; mill++)             System.out.println(mill + ""\t\t"" + mill * 1.609);     } } ",1
85," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Level6 {     public static void konversi(int mile) {         if (mile != 11) {             System.out.println(mile + ""\t\t"" + mile * 1.609);             mile++;             konversi(mile);         }     }          public static void main(String[] args) {         int mile = 1;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         konversi(mile);     } } ",1
86," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {          public static void main(String[] args) {         int miles = 1;         System.out.print(""Miles    Kilometer"");         for(int i=0;i<10;i++)         {             double kilo = miles*1.609;             System.out.println("""");             System.out.print(miles+""        ""+kilo);             miles++;         }              }      } ",0
87," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     private static int mile;     public static void main(String[] args) {         mile = 1;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         loops();     }          public static void loops(){                  for (int i = 10; i > 0; i--) {             System.out.println(mile + ""\t\t"" + mile * 1.609);                 mile++;                      }     } } ",1
88," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     private static int mile;     public static void main(String[] args) {         mile = 1;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         loops();     }          public static void loops(){                  for (int i = 1; i <= 10; i++) {             System.out.println(mile + ""\t\t"" + mile * 1.609);                 mile++;                      }     } } ",1
89," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     private static int mile;     public static void main(String[] args) {         mile = 1;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         loops();     }          public static void loops(){                  while (mile <= 10) {                 System.out.println(mile + ""\t\t"" + mile * 1.609);                 mile++;         }     } } ",1
90," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {                  System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                     int miles = 1;         while (miles <= 10) {             System.out.println(miles + ""\t\t"" + miles * 1.609);             miles++;             }         }     } ",1
91," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         System.out.println(""Miles    Kilometers"");         for(int i=1;i<=10;i++){             System.out.println(i+""        ""+i*1609);         }     } } ",0
92," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                           int mile = 1;         while (mile <= 10) {                 System.out.println(mile + ""\t\t"" + mile * 1.609);                 mile++;         }     } } ",1
93," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                           int miles = 1;         while (miles <= 10) {                 System.out.println(miles + ""\t\t"" + miles * 1.609);                 miles++;         }     } } ",1
94," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  int jarak = 1;         while (jarak <= 10) {                          System.out.println(jarak + ""\t\t"" + jarak * 1.609);             jarak++;         }     } } ",1
95," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  int miles = 1;         while (miles <= 10) {                          System.out.println(miles + ""\t\t"" + miles * 1.609);             miles++;         }     } } ",1
96," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         int jarak;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  jarak = 1;         printJarakDalamMilDanKilo(jarak);              }         public static void printJarakDalamMilDanKilo(int jarak){         for(jarak = jarak; jarak <= 10; jarak = jarak + 1){                          System.out.println(jarak + ""\t\t"" + jarak * 1.609);         }     } } ",1
97," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         int jarak;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  jarak = 1;         printJarakDalamMilDanKilo(jarak);              }         public static void printJarakDalamMilDanKilo(int jarak){         for(jarak = jarak; jarak <= 10; jarak++){                          System.out.println(jarak + ""\t\t"" + jarak * 1.609);         }     } } ",1
98," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         int jarak;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  jarak = 1;         printJarakDalamMilDanKilo(jarak);              }         public static void printJarakDalamMilDanKilo(int jarak){         while (jarak <= 10) {                          System.out.println(jarak + ""\t\t"" + jarak * 1.609);             jarak++;         }     } } ",1
99," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         int jarak;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  jarak = 1;         while (jarak <= 10) {                          System.out.println(jarak + ""\t\t"" + jarak * 1.609);             jarak++;         }     } } ",1
100," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void main(String[] args) {         int mile = 1;         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                           while (mile <= 10) {                 System.out.println(mile + ""\t\t"" + mile * 1.609);                 mile++;         }     } } ",1
101," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Main {     public static void printMil (){         for(int i =1;i<=10;i++){             System.out.println(i + ""\t\t"" + i * 1.609);         }     }     public static void main(String[] args) {                  System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  printMil();     } } ",1
102," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class No4 {          public static void main(String[] args) {                  int mil = 1609;         System.out.println(""Miles\tKilometers"");         for(int i=1;i<=10;i++){             System.out.println(i + ""\t"" + i*mil);     }     }      } ",0
103," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class Nomor4_2451041557A22145B3701B0184109CAB013 {          public static void main(String[] args) {         System.out.println(""Miles \t Kilometers"");         for(int i = 1 ; i<=10;i++){             System.out.println(i+"" \t ""+i*1.069);         }     }      } ",0
104," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class T04 {          public static void main(String[] args) {         int mil = 1609;         System.out.println(""Miles\tKilometers"");         for(int i=1;i<=10;i++){             System.out.println(i + ""\t"" + i*mil);         }     }      } ",0
105," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class T04 {     public static void main(String[] args) {         System.out.println(""Miles           Kilometers"");         for (int i = 1; i < 10; i++) {             System.out.println(i+""               ""+i*1.609);         }         System.out.println(10+""              ""+10*1.609);     } } ",0
106," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class T04 {     public static void main(String[] args) {         System.out.println(""Miles       Kilometers"");         for (int i = 1; i <= 10; i++) {             if (i == 10) {                 System.out.println(i + ""          "" + i * 1609);             } else {                 System.out.println(i + ""           "" + i * 1609);             }         }     } } ",0
107," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class T04 {     public static void main(String[] args) {         System.out.println(""miles \t kilometers"");         for (int i = 0; i < 10; i++) {             System.out.println(i+1+""\t""+((i+1)*1.609));         }     } } ",0
108," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class T04 {     public static void main(String[] args){                  System.out.println(""Miles\tKilometers"");                  for(int i = 1; i <= 10; i++){             System.out.printf(i + ""\t%.3f"", (i * 1.609));             System.out.println();         }              } } ",0
109," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } "," public class t04 {     public static void main(String[] args) {         System.out.println(""Miles\tKilometers"");         for (int i = 1; i < 11; i++) {             System.out.println(i + ""\t"" + i * 1.609);         }     } } ",0
110," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.*; class inputoutput{ public static void main(String[] args)  { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int m = 1; while (m <= 10) { System.out.println(m + ""\t\t"" + m * 1.609); m++; } } }",1
111," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.*; class inputoutput{ public static void main(String[] args)  { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } }",1
112," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.*; class inputoutput{ public static void main(String[] args)  { int m = 1; System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); while (m <= 10) { System.out.println(m + ""\t\t"" + m * 1.609); m++; } } }",1
113," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.*; class inputoutput{ static void hitHasil(int a) { for(;a<=10;a++) { System.out.println(a + ""\t\t"" + a * 1.609); } } public static void main(String[] args)  { System.out.print(""Miles\t\tKilometers\n""); System.out.print(""-------------------------------\n""); hitHasil(1); } }",1
114," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.*; class inputoutput{ static void hitHasil(int m) { for(int a=m;a<=10;a++) { System.out.println(a + ""\t\t"" + a * 1.609); } } public static void main(String[] args)  { int m = 1; System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); hitHasil(m); } }",1
115," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.*; class inputoutput{ static void hitHasil(int m) { while (m <= 10)  { System.out.println(m + ""\t\t"" + m * 1.609); m++; } } public static void main(String[] args)  { int m = 1; System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); hitHasil(m); } }",1
116," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.Scanner; public class T04 {    public static void main(String[] args)    {       System.out.println(""Miles       Kilometers"");       for(int i=1;i < 11;i++)       {          if(i < 10)          {             System.out.println(i+""           ""+i*1609);          }          else          {             System.out.println(i+""          ""+i*1609);          }       }    } }",0
117," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.Scanner; public class looping {    public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         int mil ;         mil= 1;         while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }    } }",1
118," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.Scanner; public class looping {    public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         int mil = 1;         while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }    } }",1
119," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","import java.util.Scanner; public class pengulangan {    public static void main(String[] args) {         System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");         int miles = 1;         while (miles <= 10) {             System.out.println(miles + ""\t\t"" + miles * 1.609);             miles++;         }    } }",1
120," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","public class Main {     public static void main(String[] args) {                  System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  int mil = 1;         while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     } } ",1
121," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","public class Main {     public static void main(String[] args) {                  int mil=1;                  System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     } } ",1
122," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","public class Main {     public static void printMil (int mil){             for(int i =1;i<=10;i++){             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     }     public static void main(String[] args) {                  int mil=1;                  System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  printMil(mil);     } } ",1
123," public class T4 { public static void main(String[] args) { System.out.println(""Miles\t\tKilometers""); System.out.println(""-------------------------------""); int miles = 1; while (miles <= 10) { System.out.println(miles + ""\t\t"" + miles * 1.609); miles++; } } } ","public class Main {     public static void printMil (int mil){         while (mil <= 10) {             System.out.println(mil + ""\t\t"" + mil * 1.609);             mil++;         }     }     public static void main(String[] args) {                  int mil=1;                  System.out.println(""Miles\t\tKilometers"");         System.out.println(""-------------------------------"");                  printMil(mil);     } } ",1
124," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class fungsi {     public static void main(String[] args) {          System.out.print(""Enter an integer: "");                  Scanner sc = new Scanner(System.in);         int   input;         input =    sc.nextInt();         terbalik(input);     }     public static void terbalik(int angka)  {         List arr =new ArrayList();         for(int i=0;i<=angka;i++) {              int   sisa ;              sisa= angka % 10;              arr.add(sisa);              angka = angka / 10;              i=0;         }         for(int i=0;i<arr.size();i++)         {             System.out.print(arr.get(i));         }                  System.out.println();     } } ",1
125," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Kasus5L2 {     public static void main(String[] args) {                  System.out.print(""Enter an integer: "");         Scanner inp = new Scanner(System.in);         int angka = inp.nextInt();         reverseNumber(angka);     }     public static void reverseNumber(int angka) {                  while (angka != 0) {                          int temp = angka % 10;                          System.out.print(temp);                          angka = angka / 10;         }         System.out.println();     } } ",1
126," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Kasus5L3 {     public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int angka = inp.nextInt();         reverseNumber(angka);     }     public static void reverseNumber(int angka) {                  while (angka != 0) {                          int temp = angka % 10;                          angka = angka / 10;                          System.out.print(temp);         }         System.out.println();     } } ",1
127," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Kasus5L4 {     public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int angka = inp.nextInt();                  while (angka != 0) {                          int temp = angka % 10;                          angka = angka / 10;                          System.out.print(temp);         }         System.out.println();     } } ",1
128," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Kasus5L5 {          public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int angka = inp.nextInt();                           while (angka != 0) {                          System.out.print(angka % 10);                          angka = angka / 10;         }         System.out.println();     } } ",1
129," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Kasus5L6 {     public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         System.out.print(""Enter an integer: "");         String angka = inp.next();         for (int i = angka.length() - 1; i >= 0; i--) {             System.out.print(angka.charAt(i));         }         System.out.println();     } } ",1
130," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Level5 {     public static void main(String[] args) {         Scanner masukkan = new Scanner(System.in);         int angka, sisaBagi;         System.out.print(""Enter an integer: "");         angka = masukkan.nextInt();         while (angka != 0) {              sisaBagi = angka % 10;             System.out.print(sisaBagi);             angka = angka / 10;         }         System.out.println();     } } ",1
131," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Main {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int number = sc.nextInt();         reverse(number);     }     public static void reverse(int number)     {         int tempDigit = 0;         while (number > 0){             tempDigit = number % 10;             System.out.print(tempDigit);             number = number / 10;         }     } }           ",0
132," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Main {     public  static void reverse(int number){         String angka=number+"""";         for(int i=angka.length()-1;i>=0;i--){             System.out.print(angka.charAt(i));         }     }     public static void main(String[] args) {     Scanner sc=new Scanner(System.in);     System.out.print(""Enter an integer: "");     int number=sc.nextInt();     reverse(number);     } } ",0
133," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class No5 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer: "");         String inp= sc.next();         reverse(inp);     }          public static void reverse(String a){         for(int i=a.length()-1; i>=0; i--) {             System.out.print(a.charAt(i));         }     }      } ",0
134," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Nomor5_2451041557A22145B3701B0184109CAB013 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer : "");         int number = sc.nextInt();         reverse(number);     }          public static void reverse(int number){         String strNumber = Integer.toString(number);         String temp = """";         for(int i = strNumber.length(); i>0;i--){             temp +=i;         }         int tempNumber = Integer.parseInt(temp);         System.out.println((tempNumber));     }      } ",0
135," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class Soal5 {          public static void reverse(int number){         String a = String.valueOf(number);                  for(int i = a.length()-1; i>-1; i--){             System.out.print(a.charAt(i));         }         System.out.println("""");     }          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int number = sc.nextInt();         reverse(number);     } } ",0
136," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class T05 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int inp = sc.nextInt();         reverse(inp);     }          public static void reverse(int number){         int a = 0;         int i = (int)(Math.log10(number));         while(number!=0){             int b = number%10;             a += b * Math.pow(10, i--);             number/=10;         }         System.out.println(a);     } } ",0
137," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class T05 {     public static void main(String[] args) {           Scanner s = new Scanner(System.in);           System.out.print(""Enter an integer "");           int a= s.nextInt();           reverse(a);     }     public  static  void reverse(int number){         String cek = String.valueOf(number);         for (int i = 0; i < cek.length(); i++) {             System.out.print(cek.charAt(cek.length()-1-i));         }         System.out.println("""");     } } ",0
138," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class T05 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         System.out.print(""Enter a integer: "");         int a = s.nextInt();         reverse(a);     }     public static void reverse(int number) {         String temp=String.valueOf(number);         for(int i=temp.length();i>0;i--){             System.out.print(temp.charAt(i-1));         }     } } ",0
139," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class T05 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer : "");         int number = sc.nextInt();         reverse(number);     }     public static void reverse(int number) {         String numberString = String.valueOf(number);                 for (int i = numberString.length(); i > 0; i--) {             System.out.print(numberString.charAt(i-1));         }         System.out.println("""");     } } ",0
140," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class T05 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int a = sc.nextInt();         String b = String.valueOf(a);         for (int i = 0; i < b.length(); i++) {             System.out.print(b.charAt(b.length()-1-i));         }     } } ",0
141," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class T05 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int angka = sc.nextInt();         reverse(angka);     }          public static void reverse(int number) {         int tamp = number;         int hit = 0;         while(number != 0) {             number = number / 10;             hit++;         }         number = tamp;         int jumlah = 0;         for(int i = hit; i > 0; i--) {             int jumlah10 = 1;             int akhir = number % 10;             for(int j = 1; j < i; j++) {                 jumlah10 = jumlah10 * 10;             }             jumlah = jumlah + (akhir * jumlah10);             number = number / 10;         }         System.out.println(jumlah);     } } ",0
142," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class T05 {     public static void main(String[] args){                  Scanner sc = new Scanner(System.in);                  System.out.print(""Enter an integer: "");         int number = sc.nextInt();                  reverse(number);              }          public static void reverse(int number){         while(number > 0){             System.out.print(number % 10);             number /= 10;         }         System.out.println();     } } ",0
143," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class T05 {     static int a;     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer:"");         int a = sc.nextInt();         reverse(a);     }     public static void reverse(int number) {         int reverse = 0;         while (number != 0) {             reverse = reverse * 10;             reverse = reverse + number % 10;             number = number / 10;         }         System.out.println(reverse);     } } ",0
144," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class fungsi {     public static void main(String[] args) {          System.out.print(""Enter an integer: "");                  Scanner sc = new Scanner(System.in);         int    input =    sc.nextInt();           terbalik(input);     }     public static void terbalik(int angka)  {         while (angka != 0) {              int   sisa = angka % 10;             System.out.print(sisa);             angka = angka / 10;         }                  System.out.println();     } } ",1
145," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class fungsi {     public static void main(String[] args) {          System.out.print(""Enter an integer: "");                  Scanner sc = new Scanner(System.in);         int   input;         input =    sc.nextInt();         terbalik(input);     }     public static void terbalik(int angka)  {         for(int i=0;i<=angka;i++) {              int   sisa ;              sisa= angka % 10;             System.out.print(sisa);             angka = angka / 10;             i=0;         }                  System.out.println();     } } ",1
146," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class fungsi {     public static void main(String[] args) {          System.out.print(""Enter an integer: "");                  Scanner sc = new Scanner(System.in);         int   input;         input =    sc.nextInt();         terbalik(input);     }     public static void terbalik(int angka)  {         while (angka != 0) {              int   sisa ;              sisa= angka % 10;             System.out.print(sisa);             angka = angka / 10;         }                  System.out.println();     } } ",1
147," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class fungsi {     public static void main(String[] args) {          System.out.print(""Enter an integer: "");                  Scanner sc = new Scanner(System.in);         int   input;         input =    sc.nextInt();         while (input != 0) {                int sisa ;                sisa= input % 10;                System.out.print(sisa);                input = input / 10;         }     } } ",1
148," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class method {     public static void main(String[] args) {          System.out.print(""Enter an integer: "");                  java.util.Scanner input = new java.util.Scanner(System.in);         int    number =    input.nextInt();           reverse(number);     }     public static void reverse(int number)  {         while (number != 0) {              int   remainder = number % 10;             System.out.print(remainder);             number = number / 10;         }                  System.out.println();     } } ",1
149," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," import java.util.Scanner; public class t05 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter an integer: "");         int num = sc.nextInt();         reverse(num);     }     public static void reverse(int number) {         String tmpNumber = String.valueOf(number);         for (int i = tmpNumber.length() - 1; i > -1; i--) {             System.out.print(tmpNumber.charAt(i));         }         System.out.println("""");     } } ",0
150," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Kasus5 {          public static int reverse(int number) {         return number%10;     }          public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();                  for( ; number>0 ; number/=10)             System.out.print(reverse(number));         System.out.println("""");     } } ",1
151," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Kasus5 {          public static void reverse(int number) {         System.out.print(number%10);     }          public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();                  for( ; number>0 ; number/=10)             reverse(number);         System.out.println("""");     } } ",1
152," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Kasus5 {          public static void reverse(int number) {         if(number>0) {             System.out.print(number%10);             reverse(number/=10);         }     }          public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();                  reverse(number);         System.out.println("""");     } } ",1
153," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Kasus5 {          public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); }          public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();                  reverse(number);     } } ",1
154," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Kasus5 {     public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();         while (number != 0) {             int remainder = number % 10;             System.out.print(remainder);             number = number / 10;         }         System.out.println();     } } ",1
155," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Kasus5L1 {     public static void main(String[] args) {                  System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();         reverse(number);     }     public static void reverse(int number) {                  while (number != 0) {                          int remainder = number % 10;                          System.out.print(remainder);                          number = number / 10;         }         System.out.println();     } } ",1
156," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class L1 {     public static void main(String[] args)      {         System.out.print(""Enter an integer: "");                  java.util.Scanner input = new java.util.Scanner(System.in);                  int number = input.nextInt();                  reverse(number);     }     public static void reverse(int number) {            while (number != 0)         {                 int remainder = number % 10;                 System.out.print(remainder);                 number = number / 10;         }         System.out.println();     } } ",1
157," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class L2 {     public static void main(String[] args)      {         System.out.print(""Enter an integer: "");                  java.util.Scanner input = new java.util.Scanner(System.in);                  int nomor = input.nextInt();                  balik(nomor);     }     public static void balik(int nomor) {            while (nomor != 0)         {                 int sisa = nomor % 10;                 System.out.print(sisa);                 nomor = nomor / 10;         }         System.out.println();     } } ",1
158," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class L3 {     public static void main(String[] args)      {         int nomor = 0;         System.out.print(""Enter an integer: "");                  java.util.Scanner input = new java.util.Scanner(System.in);                  nomor = input.nextInt();                  balik(nomor);     }     public static void balik(int nomor) {         int sisa = 0 ;            while (nomor != 0)               {                 sisa = nomor % 10;                 System.out.print(sisa);                 nomor = nomor / 10;         }         System.out.println();     } } ",1
159," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class L4 {     public static void main(String[] args)      {         int nomor = 0;         System.out.print(""Enter an integer: "");                  java.util.Scanner input = new java.util.Scanner(System.in);                  nomor = input.nextInt();                  int sisa = 0 ;            while (nomor != 0)               {                 sisa = nomor % 10;                 System.out.print(sisa);                 nomor = nomor / 10;         }         System.out.println();     } } ",1
160," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class L5 {     public static void main(String[] args)      {         int nomor, sisa = 0;         System.out.print(""Enter an integer: "");                  java.util.Scanner input = new java.util.Scanner(System.in);                  nomor = input.nextInt();                         while (nomor!=0)             {                 sisa = nomor % 10;                 System.out.print(sisa);                 nomor = nomor / 10;         }         System.out.println();     } } ",1
161," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class L6_fix {     public static void main(String[] args)      {         int nomor, sisa = 0;         System.out.print(""Enter an integer: "");                java.util.Scanner input = new java.util.Scanner(System.in);                  nomor = input.nextInt();                         while (nomor!=0)             {             if (nomor!=0){                 sisa = nomor % 10;                 System.out.print(sisa);                 nomor = nomor / 10;}         }         System.out.println();     } } ",1
162," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Level1 {     public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();         reverse(number);     }          public static void reverse(int number) {         while (number != 0) {             int remainder = number % 10;             System.out.print(remainder);             number = number / 10;         }         System.out.println();     } } ",1
163," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Level2 {     public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner in = new java.util.Scanner(System.in);         int angka = in.nextInt();         balik(angka);     }          public static void balik(int angka) {         while (angka != 0) {             int sisa = angka % 10;             System.out.print(sisa);             angka = angka / 10;         }         System.out.println();     } } ",1
164," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Level3 {     public static void main(String[] args) {                  java.util.Scanner input = new java.util.Scanner(System.in);         int angka;                  System.out.print(""Enter an integer: "");         angka = input.nextInt();         reverse(angka);     }          public static void reverse(int number) {         int sisa;         while (number != 0) {             sisa = number % 10;             System.out.print(sisa);             number = number / 10;         }         System.out.println();     } } ",1
165," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Level4 {     public static void main(String[] args) {         java.util.Scanner masukkan = new java.util.Scanner(System.in);         int number;         int sisaBagi;                  System.out.print(""Enter an integer: "");         number = masukkan.nextInt();                  while (number != 0) {             sisaBagi = number % 10;             System.out.print(sisaBagi);             number = number / 10;         }         System.out.println();     } } ",1
166," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     private static int number;     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         System.out.print(""Enter an integer: "");         number = input.nextInt();         for (int i = 0; number != 0; i++) {             int remainder = number % 10;             System.out.print(remainder);             number = number / 10;         }         System.out.println();     } } ",1
167," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     private static int number;     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         System.out.print(""Enter an integer: "");         number = input.nextInt();         for (int i = 99999; number != 0; i--) {             int remainder = number % 10;             System.out.print(remainder);             number = number / 10;         }         System.out.println();     } } ",1
168," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     private static int number;     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         System.out.print(""Enter an integer: "");         number = input.nextInt();         while (number != 0) {             int remainder = number % 10;             System.out.print(remainder);             number = number / 10;         }         System.out.println();     } } ",1
169," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int angka = input.nextInt();                  reverse(angka);     }     public static void reverse(int angka) {                  while (angka != 0) {             int remainder = angka % 10;             System.out.print(remainder);             angka = angka / 10;         }         System.out.println();     } } ",1
170," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();                  reverse(number);     }     public static void reverse(int number) {                  while (number != 0) {             int remainder = number % 10;             System.out.print(remainder);             number = number / 10;         }         System.out.println();     } } ",1
171," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();         balik(number);     }         public static void balik(int number) {             while (number != 0) {                 int remainder = number % 10;                 System.out.print(remainder);                 number = number / 10;             }                          System.out.println();         } } ",1
172," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();         reverse(number);     }         public static void reverse(int number) {             while (number != 0) {                 int remainder = number % 10;                 System.out.print(remainder);                 number = number / 10;             }                          System.out.println();         } } ",1
173," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         int angka;         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         angka = input.nextInt();                  for (angka = angka; angka != 0; angka = angka / 10) {             int remainder = angka % 10;             System.out.print(remainder);         }         System.out.println();     } } ",1
174," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         int angka;         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         angka = input.nextInt();                  for (angka = angka; angka > 0; angka = angka / 10) {             int remainder = angka % 10;             System.out.print(remainder);         }         System.out.println();     } } ",1
175," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         int angka;         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         angka = input.nextInt();                  reverse(angka);     }     public static void reverse(int angka) {                  while (angka != 0) {             int remainder = angka % 10;             System.out.print(remainder);             angka = angka / 10;         }         System.out.println();     } } ",1
176," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         int angka;         System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         angka = input.nextInt();                  while (angka != 0) {             int remainder = angka % 10;             System.out.print(remainder);             angka = angka / 10;         }         System.out.println();     } } ",1
177," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } "," public class Main {     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();         System.out.print(""Enter an integer: "");         balik(number);     }         public static void balik(int number) {             while (number != 0) {                 int remainder = number % 10;                 System.out.print(remainder);                 number = number / 10;             }                          System.out.println();         } } ",1
178," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.*; class method{ public static void beautyReverse(int num)  { for(;num !=0;num/=10) { int r = num % 10; System.out.print(r); } System.out.println(); } static void reverse(int n) { beautyReverse(n); } public static void main(String[] args)  { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int n = input.nextInt(); reverse(n); } }",1
179," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.*; class method{ public static void beautyReverse(int num)  { while (num != 0) { int r = num % 10; System.out.print(r); num = num / 10; } System.out.println(); } public static void main(String[] args)  { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int n = input.nextInt(); beautyReverse(n); } }",1
180," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.*; class method{ public static void beautyReverse(int num)  { while (num != 0) { int r = num % 10; System.out.print(r); num = num / 10; } System.out.println(); } static void reverse(int n) { beautyReverse(n); } public static void main(String[] args)  { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int n = input.nextInt(); reverse(n); } }",1
181," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.*; class method{ public static void main(String[] args)  { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int n = input.nextInt(); beautyReverse(n); } public static void beautyReverse(int num)  { while (num != 0) { int r = num % 10; System.out.print(r); num = num / 10; } System.out.println(); } }",1
182," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.*; class method{ public static void main(String[] args)  { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number)  { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } }",1
183," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.*; class method{ static java.util.Scanner input = new java.util.Scanner(System.in); public static void beautyReverse(int num)  { for(;num >0;num/=100*10) { System.out.print(num % 10); } System.out.println(); } static void reverse() { int n = input.nextInt(); beautyReverse(n); } public static void main(String[] args)  { System.out.print(""Enter an integer: ""); reverse(); } }",1
184," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.Scanner; public class Level6 {     public static void main(String[] args) {         System.out.print(""Enter an integer: "");         Scanner input = new Scanner(System.in);         int bil = input.nextInt();         rekursif(bil);         System.out.println("""");     }          public static int rekursif(int bil){         if(bil!=0){             int sisaMod = bil % 10;             System.out.print(sisaMod);             bil = bil / 10;             rekursif(bil);         }         return bil;     } } ",1
185," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.Scanner; public class Main {     static Scanner sc = new Scanner(System.in);     public static int input(){         System.out.print(""Enter an integer: "");         return sc.nextInt();     }     public static void main(String[] args) {         int nmb=input();                  reverse(nmb);     }     public static void reverse(int nmb) {         int get=0;         do {             get = nmb % 10;                          System.out.print(get);             nmb = nmb / 10;         } while (nmb != 0);         System.out.println();     } } ",1
186," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.Scanner; public class Main {     static Scanner sc = new Scanner(System.in);     public static int input(){         System.out.print(""Enter an integer: "");         return sc.nextInt();     }     public static void main(String[] args) {         int nmb=input();                  reverse(nmb);     }     public static void reverse(int nmb) {         int x=1;         String rev=String.valueOf(nmb);         do {             System.out.print(rev.charAt(rev.length()-x));             x++;             nmb = nmb / 10;         } while (nmb != 0);         System.out.println();     } } ",1
187," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","import java.util.Scanner; public class T05 {    public static void main(String[] args)    {       Scanner sc = new Scanner(System.in);       System.out.print(""Enter an integer: "");       int number= sc.nextInt();       reverse(number);    }    public static void reverse (int number)    {       String balik ="""";       while(number > 0)       {          balik = balik + (number%10);          number = number/ 10;       }       System.out.println(balik);    } }",0
188," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","public class Main {     public static void main(String[] args) {                  System.out.print(""Enter an integer: "");         java.util.Scanner input = new java.util.Scanner(System.in);         int number = input.nextInt();                  reverse(number);     }     public static void reverse(int number) {         while (number != 0) {             int remainder = number % 10;                          System.out.print(remainder);             number = number / 10;         }         System.out.println();     } } ",1
189," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","public class Main {     public static void main(String[] args) {                  System.out.print(""Enter an integer: "");         java.util.Scanner sc = new java.util.Scanner(System.in);         int nmb = sc.nextInt();                  reverse(nmb);     }     public static void reverse(int nmb) {         while (nmb != 0) {             int get = nmb % 10;                          System.out.print(get);             nmb = nmb / 10;         }         System.out.println();     } } ",1
190," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","public class Main {     public static void main(String[] args) {         java.util.Scanner sc = new java.util.Scanner(System.in);         int nmb=0;                  System.out.print(""Enter an integer: "");         nmb = sc.nextInt();                  reverse(nmb);     }     public static void reverse(int nmb) {         int get=0;         while (nmb != 0) {             get = nmb % 10;                          System.out.print(get);             nmb = nmb / 10;         }         System.out.println();     } } ",1
191," public class T5 { public static void main(String[] args) { System.out.print(""Enter an integer: ""); java.util.Scanner input = new java.util.Scanner(System.in); int number = input.nextInt(); reverse(number); } public static void reverse(int number) { while (number != 0) { int remainder = number % 10; System.out.print(remainder); number = number / 10; } System.out.println(); } } ","public class Main {     static java.util.Scanner sc = new java.util.Scanner(System.in);     public static int input(){         System.out.print(""Enter an integer: "");         return sc.nextInt();     }     public static void main(String[] args) {         int nmb=input();                  reverse(nmb);     }     public static void reverse(int nmb) {         int get=0;         while (nmb != 0) {             get = nmb % 10;                          System.out.print(get);             nmb = nmb / 10;         }         System.out.println();     } } ",1
192," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.*; public class L5 {     public static void print(int[] arr) {         int i = 9;         while (i >= 0) {             System.out.println(arr[i]);             i--;         }     }     public static void main(String[] args) {         int[] angka = new int[10];         Scanner sc = new java.util.Scanner(System.in);         int i = 0;         while (i != 10) {             System.out.print(""Read a number: "");             angka[i] = sc.nextInt();             i++;         }         print(angka);     } } ",1
193," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.*; public class L6 {     public static void print(int[] arr) {         int i = 9;         int j = 0;         while (j < 10) {             System.out.println(arr[i]);             i--;             j++;         }     }     public static void main(String[] args) {         int[] angka = new int[10];         Scanner sc = new java.util.Scanner(System.in);         int i = 0;         while (i != 10) {             System.out.print(""Read a number: "");             angka[i] = sc.nextInt();             i++;         }         print(angka);     } } ",1
194," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class TestSatuArray {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] arr = new int[10];                  printArr(inputArr(arr));     }          public static int[] inputArr(int[] arr)     {       Scanner sc = new Scanner(System.in);       int x=0;       int[] arr2=new int [10];       while(x<10) {             System.out.print( ""Read a number: "");             arr[x] = sc.nextInt();             x++;       }       x=9;       for(int i=0;i<10;i++){          arr2[i]=arr[x];          x--;       }       return arr2;     }          public static void printArr(int[] arr)     {          int x=0;          while(x<10)  {             System.out.println(arr[x]);             x++;          }     } } ",1
195," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class TestSatuArray {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] arr = new int[10];         arr=inputArr(arr);         printArr(arr);     }          public static int[] inputArr(int[] arr)     {       Scanner sc = new Scanner(System.in);       for (int x = 0; x < 10; x++) {             System.out.print( ""Read a number: "");             arr[x] = sc.nextInt();       }       return arr;     }          public static void printArr(int[] arr)     {          for (int x = 9; x >= 0; x--) {             System.out.println(arr[x]);          }     } } ",1
196," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class TestSatuArray {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] arr = new int[10];         arr=inputArr(arr);         printArr(arr);     }          public static int[] inputArr(int[] arr)     {       Scanner sc = new Scanner(System.in);       int x=0;       while(x<10) {             System.out.print( ""Read a number: "");             arr[x] = sc.nextInt();             x++;       }       return arr;     }          public static void printArr(int[] arr)     {          int x=9;          while(x>=0)  {             System.out.println(arr[x]);             x--;          }     } } ",1
197," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class TestSatuArray {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] arr = new int[10];         for (int x = 0; x < 10; x++) {             System.out.print( ""Read a number: "");             arr[x] = sc.nextInt();         }         for (int x = 9; x >= 0; x--) {             System.out.println(arr[x]);         }     } } ",1
198," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class TestSatuArray {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] arr = new int[10];         for (int x = 0; x < 10; x++) {             System.out.print( ""Read a number: "");             arr[x] = sc.nextInt();         }         for (int x = 9; x >= 0; x--) {             System.out.println(arr[x]);         }     } } ",1
199," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class singlearray {     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         int[] num = new int[10];         for (int i = 0; i < 10; i++) {             System.out.print( ""Read a number: "");             num[i] = input.nextInt();         }         for (int i = 9; i >= 0; i--) {             System.out.println(num[i]);         }     } } ",1
200," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Kasus6L2 {     public static void main (String[] args) {                  Scanner inp = new Scanner(System.in);         int[] arrNum = new int[10];                  for (int i = 0; i < 10; i++) {                          System.out.print(""Read a number: "");             arrNum[i] = inp.nextInt();         }                  for (int i = 9; i >= 0; i--) {                          System.out.println(arrNum[i]);         }     } } ",1
201," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Kasus6L3 {     public static void main (String[] args) {                  int[] arrNum = new int[10];         Scanner inp = new Scanner(System.in);                  for (int i = 0; i < 10; i++) {                          System.out.print(""Read a number: "");             arrNum[i] = inp.nextInt();         }                  for (int i = 9; i >= 0; i--) {                          System.out.println(arrNum[i]);         }     } } ",1
202," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Kasus6L4 {     public static void main (String[] args) {                  int[] arrNum = new int[10];         Scanner inp = new Scanner(System.in);                  for (int i = 0; i < 10; i++) {                          System.out.print(""Read a number: "");             arrNum[i] = inp.nextInt();         }                  Reverse(arrNum);     }          private static void Reverse(int[] arr){         for (int i = 9; i >= 0; i--) {                          System.out.println(arr[i]);         }     } } ",1
203," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Kasus6L5 {     public static void main(String[] args) {                  int[] arrNum = new int[10];         Scanner inp = new Scanner(System.in);                  int i = 0;         while(i < 10){                          System.out.print(""Read a number: "");             arrNum[i] = inp.nextInt();             i++;         }                  Reverse(arrNum);     }     private static void Reverse(int[] arr) {         int i = 9;         while (i >= 0) {                          System.out.println(arr[i]);             i--;         }     } } ",1
204," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Kasus6L6 {          public static void main(String[] args) {                  int[] arrNum = new int[10];         Scanner inp = new Scanner(System.in);                  int i = 9;         while(i >= 0){                          System.out.print(""Read a number: "");             arrNum[i] = inp.nextInt();             i--;         }                           Reverse(arrNum);     }     private static void Reverse(int[] arr) {         int i = 0;         while (i < 10) {                          System.out.println(arr[i]);             i++;         }     } } ",1
205," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Level6  {     static Scanner sc = new Scanner(System.in);          public static void tampil(int[]angka){         for (int x = 10; x > 0; x--)             System.out.println(angka[x]);     }          public static void main(String[] args)      {         int arrAngka[] = new int[10];         for (int x = 0; x < arrAngka.length; x++)          {             System.out.print(""Read a number: "");             arrAngka[x] = sc.nextInt();         }         tampil(arrAngka);     } } ",1
206," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Main {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int a[]=new int[10];                  for (int i=0;i<10;i++)         {             System.out.print(""Read a number: "");             int number = sc.nextInt();             a[i]=number;         }                  for (int i=9;i>=0;i--)         {             System.out.println(a[i]);         }     }      } ",0
207," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         int[] numbers=new int[10];         for(int i=0;i<10;i++){             System.out.print(""Read a number: "");             numbers[i]=sc.nextInt();         }         for(int i=9;i>=0;i--){             System.out.println(numbers[i]);         }     } } ",0
208," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class No6 {          public static void main(String[] args) {                  int[] arr = new int[10];         Scanner sc = new Scanner(System.in);         for(int i=0;i<10;i++){             System.out.print(""Read a number: "");             arr[i] = sc.nextInt();         }         for(int i=9;i>=0;i--){             System.out.println(arr[i]);         }     }      } ",0
209," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Nomor6_2451041557A22145B3701B0184109CAB013 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int Array[] = new int[10];         for(int i = 0 ; i<10;i++){             System.out.print(""Read a number: "");             Array[i] = sc.nextInt();         }         for(int i = 9 ; i >= 0 ; i--){             System.out.println(Array[i]);         }              }      } ",0
210," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class Soal6 {     public static void reverse(String number){                  for(int i = number.length()-1; i>-1; i--){             System.out.println(number.charAt(i));         }     }     public static void main(String[] args) {         Scanner sc = new Scanner (System.in);         String input = """";         int a;         for (int i = 0; i < 10; i++) {             System.out.print(""Read a number: "");             a = sc.nextInt();             input+=a;         }         reverse(input);     } } ",0
211," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class T06 {          public static void main(String[] args) {         int[] arr = new int[10];         Scanner sc = new Scanner(System.in);         for(int i=0;i<10;i++){             System.out.print(""Read a number: "");             arr[i] = sc.nextInt();         }         for(int i=9;i>=0;i--){             System.out.println(arr[i]);         }     }      } ",0
212," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class T06 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         int[] a = new int[10];         for (int i = 0; i < a.length; i++) {             System.out.print(""Read a number: "");             a[i] = s.nextInt();         }         for (int i = a.length-1; i >= 0 ; i--) {             System.out.println(a[i]);         }              } } ",0
213," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class T06 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         int[] a=new int[10];         for(int i=0;i<10;i++){             System.out.print(""Read a number: "");             a[i]=s.nextInt();         }         for(int i=9;i>=0;i--){             System.out.println(a[i]);         }     } } ",0
214," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class T06 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int a[] = new int[10];         for (int i = 0; i < 10; i++) {             System.out.print(""Read a number"");             a[i] = sc.nextInt();         }         for (int i = 0; i < 10; i++) {             System.out.println(a[9-i]);         }     } } ",0
215," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class T06 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] arr = new int[10];                  for(int i = 0; i < 10; i++) {             System.out.print(""Read a number: "");             arr[i] = sc.nextInt();         }                  for(int i = 9; i >= 0; i--) {             System.out.println(arr[i]);         }     } } ",0
216," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class T06 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] array = new int[10];         for (int i = 0; i < array.length; i++) {             System.out.print(""Read a number: "");             array[i] = sc.nextInt();         }         System.out.println(array[9]);         System.out.println(array[8]);         System.out.println(array[7]);         System.out.println(array[6]);         System.out.println(array[5]);         System.out.println(array[4]);         System.out.println(array[3]);         System.out.println(array[2]);         System.out.println(array[1]);         System.out.println(array[0]);     } } ",0
217," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class T06 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] numbers = new int[10];         for (int i = 0; i < 10; i++) {             System.out.print(""Read a number : "");             numbers[i] = sc.nextInt();         }         for (int i = 9; i > -1; i--) {             System.out.println(numbers[i]);         }     } } ",0
218," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class T06 {     public static void main(String[] args){                  Scanner sc = new Scanner(System.in);                  int[] input = new int[10];                  for(int i = 0; i < input.length; i++){             System.out.print(""Read a number: "");             input[i] = sc.nextInt();         }                  for(int i = 9; i >= 0; i--){             System.out.println(input[i]);         }              } } ",0
219," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," import java.util.Scanner; public class t06 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int[] arrNum = new int[10];         for (int i = 0; i < 10; i++) {             System.out.print(""Read a number: "");             arrNum[i] = sc.nextInt();         }         for (int i = 9; i > -1; i--) {             System.out.println(arrNum[i]);         }     } } ",0
220," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Kasus6 {          public static void simpanArray(int[] arr, int i) {         java.util.Scanner sc = new java.util.Scanner(System.in);                  if(i>0) {             simpanArray(arr, --i);             System.out.print(""Read a number: "");             arr[i] = sc.nextInt();         }              }          public static void tampilArray(int[] arr, int i) {         if(i>=0){             System.out.println(arr[i]);             tampilArray(arr, --i);         }     }          public static void main(String[] args) {         int n=10;         int[] arr = new int[n];         simpanArray(arr, n);         tampilArray(arr, --n);     } } ",1
221," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Kasus6 {          public static void simpanArray(int[] arr, int n) {         java.util.Scanner sc = new java.util.Scanner(System.in);                  for (int i = 0; i < n; i++) {             System.out.print(""Read a number: "");             arr[i] = sc.nextInt();         }              }          public static void tampilArray(int[] arr, int n) {         for (int i = n-1 ; i >= 0 ; i--) {             System.out.println(arr[i]);         }     }          public static void main(String[] args) {         int n=10;         int[] arr = new int[n];         simpanArray(arr, n);         tampilArray(arr, n);     } } ",1
222," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Kasus6 {          public static void simpanArray(int[] arr, int n) {         java.util.Scanner sc = new java.util.Scanner(System.in);                  for (int i = 0; i < n; i++) {             System.out.print(""Read a number: "");             arr[i] = sc.nextInt();         }     }          public static void tampilArray(int[] arr, int i) {         System.out.println(arr[i]);     }          public static void main(String[] args) {         int n=10;         int[] arr = new int[n];         simpanArray(arr, n);         for (int i = n-1 ; i >= 0 ; i--) {             tampilArray(arr, i);         }     } } ",1
223," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Kasus6L1 {     public static void main (String[] args) {                  java.util.Scanner input = new java.util.Scanner(System.in);         int[] num = new int[10];                  for (int i = 0; i < 10; i++) {                          System.out.print(""Read a number: "");             num[i] = input.nextInt();         }                  for (int i = 9; i >= 0; i--) {                          System.out.println(num[i]);         }     } } ",1
224," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class L1 {     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         int[] num = new int[10];                  for (int i = 0; i < 10; i++)          {             System.out.print(""Read a number: "");             num[i] = input.nextInt();         }         for (int i = 9; i >= 0; i--)         {                          System.out.println(num[i]);         }     } } ",1
225," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class L2_6 {     public static void main(String[] args) {         java.util.Scanner sc = new java.util.Scanner(System.in);         int[] angka = new int[10];                  for (int i = 0; i < 10; i++)          {             System.out.print(""Read a number: "");             angka[i] = sc.nextInt();         }         for (int i = 9; i >= 0; i--)         {                          System.out.println(angka[i]);         }     } } ",1
226," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Level1  {     public static void main(String[] args)      {         java.util.Scanner input = new java.util.Scanner(System.in);         int[] num = new int[10];         for (int i = 0; i < 10; i++)          {             System.out.print(                     ""Read a number: "");             num[i] = input.nextInt();         }                           for (int i = 9; i >= 0; i--)          {             System.out.println(num[i]);         }     } } ",1
227," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Level2 {     public static void main(String[] args) {         java.util.Scanner masukkan = new java.util.Scanner(System.in);         int[] number = new int[10];                           for (int a = 0; a < 10; a++) {             System.out.print(                     ""Read a number: "");             number[a] = masukkan.nextInt();         }                  for (int a = 9; a >= 0; a--) {             System.out.println(number[a]);         }     } } ",1
228," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Level3 {     public static void main(String[] args) {         java.util.Scanner in = new java.util.Scanner(System.in);         int[] arrAngka;         arrAngka = new int[10];                  for (int x = 0; x < 10; x++) {             System.out.print(                     ""Read a number: "");             arrAngka[x] = in.nextInt();         }         for (int x = 9; x >= 0; x--) {             System.out.println(arrAngka[x]);         }     } } ",1
229," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Level4 {     public static void main(String[] args) {         proses();     }          public static void proses(){         java.util.Scanner in;         in = new java.util.Scanner(System.in);         int[] angka;         angka = new int[10];         for (int a = 0; a < 10; a++) {             System.out.print(""Read a number: "");             angka[a] = in.nextInt();         }         for (int b = 9; b >= 0; b--) {             System.out.println(angka[b]);         }     } } ",1
230," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static int[] nums;     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         nums = new int[10];                  for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             nums[i] = input.nextInt();         }                  outputs();     }          public static void outputs(){                  for (int i = 9; i >= 0; i--) {             System.out.println(nums[i]);         }     } } ",1
231," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static int[] nums;     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         nums = new int[10];                  for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             nums[i] = input.nextInt();         }                  outputs();     }          public static void outputs(){                  int i = 9;         while(i >= 0){             System.out.println(nums[i--]);         }     } } ",1
232," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static int[] nums;     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         nums = new int[10];                  for (int i = 10; i >= 0; i--) {                          System.out.print(                     ""Read a number: "");             nums[i] = input.nextInt();         }                  outputs();     }          public static void outputs(){                  int i = 9;         while(i >= 0){             System.out.println(nums[i--]);         }     } } ",1
233," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {             java.util.Scanner input = new java.util.Scanner(System.in);             int[] num = new int[10];                  for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             num[i] = input.nextInt();         }                           for (int i = 9; i >= 0; i--) {             System.out.println(num[i]);         }     } } ",1
234," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {         int[] angka;         java.util.Scanner input = new java.util.Scanner(System.in);         angka = new int[10];         for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             angka[i] = input.nextInt();         }                  for (int i = 9; i >= 0; i--) {             System.out.println(angka[i]);         }     } } ",1
235," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {         int[] angka;         java.util.Scanner input = new java.util.Scanner(System.in);         angka = new int[10];         for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             angka[i] = input.nextInt();         }         showArray(angka);     }          public static void showArray(int[] angka){                   for (int i = 9; i >= 0; i--) {             System.out.println(angka[i]);         }     } } ",1
236," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {         int[] angka;         java.util.Scanner input = new java.util.Scanner(System.in);         angka = new int[10];         for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             angka[i] = input.nextInt();         }         showArray(angka);     }          public static void showArray(int[] angka){                   int i = 0;         while ( i <= 9) {             System.out.println(angka[i]);              i++;         }     } } ",1
237," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {         int[] angka;         java.util.Scanner input = new java.util.Scanner(System.in);         angka = new int[10];         for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             angka[i] = input.nextInt();         }         showArray(angka);     }          public static void showArray(int[] angka){                   int i = 9;         while ( i >= 0) {             System.out.println(angka[i]);              i--;         }     } } ",1
238," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         int[] angka = new int[10];         for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             angka[i] = input.nextInt();         }                  for (int i = 9; i >= 0; i--) {             System.out.println(angka[i]);         }     } } ",1
239," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         int[] num = new int[10];         for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             num[i] = input.nextInt();         }                  for (int i = 9; i >= 0; i--) {             System.out.println(num[i]);         }     } } ",1
240," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         int[] nums = new int[10];                  for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             nums[i] = input.nextInt();         }                           for (int i = 9; i >= 0; i--) {             System.out.println(nums[i]);         }     } } ",1
241," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } "," public class Main {     public static void main(String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         int[] nums = new int[10];                  for (int i = 0; i < 10; i++) {                          System.out.print(                     ""Read a number: "");             nums[i] = input.nextInt();         }                           for (int i = 9; i >= 0; i--) {             System.out.println(nums[i]);         }     } } ",1
242," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.*; class singlearray { public static void main (String[] args) { java.util.Scanner inp = new java.util.Scanner(System.in); int[] n = new int[10]; for (int i = 0; i < 10; i++)  { System.out.print(""Read a number: ""); n[i] = inp.nextInt(); } for (int a = 9; a >= 0; a--)  { System.out.println(n[a]); } } }",1
243," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.*; class singlearray { public static void main (String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++)  { System.out.print( ""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--)  { System.out.println(num[i]); } } }",1
244," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.*; class singlearray { static int[] n = new int[10]; public static void main (String[] args) { java.util.Scanner inp = new java.util.Scanner(System.in); for (int i = 0; i < 10; i++)  { System.out.print(""Read a number: ""); n[i] = inp.nextInt(); } for (int a = 9; a >= 0; a--)  { System.out.println(n[a]); } } }",1
245," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.*; class singlearray { static int[] n = new int[10]; public static void main (String[] args) { java.util.Scanner inp = new java.util.Scanner(System.in); int i=9; int a=0; while (i >=0)  { System.out.print(""Read a number: ""); n[a] = inp.nextInt(); a++; i--; } print(); } static void print() { for (int a = 0; a <=9; a++)  { System.out.println(n[9-a]); } } }",1
246," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.*; class singlearray { static int[] n = new int[10]; static void print() { for (int a = 9; a >= 0; a--)  { System.out.println(n[a]); } } public static void main (String[] args) { java.util.Scanner inp = new java.util.Scanner(System.in); for (int i = 0; i < 10; i++)  { System.out.print(""Read a number: ""); n[i] = inp.nextInt(); } print(); } }",1
247," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.*; class singlearray { static int[] n = new int[10]; static void print() { for (int a = 9; a >= 0; a--)  { System.out.println(n[a]); } } public static void main (String[] args) { java.util.Scanner inp = new java.util.Scanner(System.in); int i=0; while (i < 10)  { System.out.print(""Read a number: ""); n[i] = inp.nextInt(); i++; } print(); } }",1
248," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.*; public class L3 {     public static void main(String[] args) {         int[] angka = new int[10];         Scanner sc = new java.util.Scanner(System.in);                  for (int i = 0; i < 10; i++)          {             System.out.print(""Read a number: "");             angka[i] = sc.nextInt();         }         for (int i = 9; i >= 0; i--)         {                          System.out.println(angka[i]);         }     } } ",1
249," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.*; public class L4 { public static void print (int [] arr) {              for (int i = 9; i >= 0; i--)         {                          System.out.println(arr[i]);         } }     public static void main(String[] args) {         int[] angka = new int[10];         Scanner sc = new java.util.Scanner(System.in);                  for (int i = 0; i < 10; i++)          {             System.out.print(""Read a number: "");             angka[i] = sc.nextInt();         }        print(angka);     } } ",1
250," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.Scanner; public class Level5 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);          int arrAngka[] = new int[10];         for (int x = 0; x < 10; x++) {             System.out.print(""Read a number: "");             arrAngka[x] = sc.nextInt();         }         for (int x = 9; x >= 0; x--)             System.out.println(arrAngka[x]);     } } ",1
251," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.Scanner; public class Main {     public static void main (String[] args) {         int[] number = new int[10];      Scanner s = new Scanner(System.in);         for (int i = 0; i < 10; i++) {                          System.out.print(""Read a number: "");             number[i] = s.nextInt();         }                  for (int i = 9; i >= 0; i--) {             System.out.println(number[i]);         }     } } ",1
252," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","import java.util.Scanner; public class T06 {    public static void main(String[] args)    {              Scanner sc = new Scanner(System.in);       int[] numbers = new int[10];       for(int i=0;i < 10;i++)       {          System.out.print(""Read a number: "");          numbers[i]= sc.nextInt();       }       for(int i=9;i > -1 ;i--)       {          System.out.println(numbers[i]);       }    } }",0
253," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","public class Main {     public static void main (String[] args) {         java.util.Scanner input = new java.util.Scanner(System.in);         int[] num = new int[10];         for (int i = 0; i < 10; i++) {                            System.out.print(""Read a number: "");             num[i] = input.nextInt();         }                    for (int i = 9; i >= 0; i--) {               System.out.println(num[i]);           }     } } ",1
254," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","public class Main {     public static void main (String[] args) {         java.util.Scanner s = new java.util.Scanner(System.in);         int[] number = new int[10];         for (int i = 0; i < 10; i++) {                          System.out.print(""Read a number: "");             number[i] = s.nextInt();         }                  for (int i = 9; i >= 0; i--) {             System.out.println(number[i]);         }     } } ",1
255," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","public class Main {     public static void printNumber(int[] number){         for (int i = 0; i < 10; i++) {             System.out.println(number[i]);         }     }     public static void main (String[] args) {         java.util.Scanner s = new java.util.Scanner(System.in);         int[] number = new int[10];         int i=9;         while(i>=0){                          System.out.print(""Read a number: "");             number[i] = s.nextInt();             i--;         }                  printNumber(number);     } } ",1
256," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","public class Main {     public static void printNumber(int[] number){         for (int i = 9; i >= 0; i--) {             System.out.println(number[i]);         }     }     public static void main (String[] args) {         java.util.Scanner s = new java.util.Scanner(System.in);         int[] number = new int[10];         for (int i = 0; i < 10; i++) {                          System.out.print(""Read a number: "");             number[i] = s.nextInt();         }                  printNumber(number);     } } ",1
257," public class T6 { public static void main(String[] args) { java.util.Scanner input = new java.util.Scanner(System.in); int[] num = new int[10]; for (int i = 0; i < 10; i++) { System.out.print(""Read a number: ""); num[i] = input.nextInt(); } for (int i = 9; i >= 0; i--) { System.out.println(num[i]); } } } ","public class Main {     public static void printNumber(int[] number){         for (int i = 9; i >= 0; i--) {             System.out.println(number[i]);         }     }     public static void main (String[] args) {         java.util.Scanner s = new java.util.Scanner(System.in);         int[] number = new int[10];         int i=0;         while(i<10){                          System.out.print(""Read a number: "");             number[i] = s.nextInt();             i++;         }                  printNumber(number);     } } ",1
258,"import  java.math.*; import java.util.*; import java.lang.*; import java.io.*; public final class Main {     FastReader s;     public static void main (String[] args) throws java.lang.Exception     {         new Main().run();     }     void run()     {         s = new FastReader();         solve();     }    StringBuffer sb;         void solve()     {          sb = new StringBuffer();         for(int T = s.nextInt();T > 0;T--)         {             start();         }             }     void start()     {         int n = s.nextInt();          int mat[][] = new int[n][5];         for(int i = 0; i<n; i++)         {             char [] x = s.nextLine().toCharArray();             for(char c : x)             {                 mat[i][c-'a']++;             }             int p[] = new int[5];             int to = 0;             for(int j : mat[i])                 to+=j;             for(int j = 0; j<5; j++)             {                 mat[i][j]=2*mat[i][j]-to;             }         }         int ans  = 0;         for(int i = 0; i<5; i++)         {             int g = check(i,mat, n);             ans = Math.max(g,ans);         }         System.out.println(ans);     }     int check(int i, int mat[][], int n)     {         ArrayList<Integer> x = new ArrayList<>();         for(int j = 0; j<n; j++)         {             x.add(mat[j][i]);         }         Collections.sort(x);         int s = 0;         int cnt = 0;         int l = n-1;         while(l>=0)         {             int u = x.get(l);             if(s+u>0)             {                 s+=u;                 cnt++;             }             else                 break;             l--;         }         return cnt;     }                         static void sort(int[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             int tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);     }     static void sort(long[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             long tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);     }     static String sort(String s) {         Character ch[]=new Character[s.length()];         for(int i=0;i<s.length();i++) {             ch[i]=s.charAt(i);         }         Arrays.sort(ch);         StringBuffer st=new StringBuffer("""");         for(int i=0;i<s.length();i++) {             st.append(ch[i]);         }         return st.toString();     }                          } ","import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.*; import static java.lang.Math.*; import static java.lang.System.out; import static java.lang.Long.MAX_VALUE; public final class Main {     FastReader in;     StringBuffer sb;     public static void main(String[] args) {         new Main().run();     }     void run(){         in= new FastReader();         start();     }     void start(){         sb= new StringBuffer();         for(int t=in.nextInt();t>0;t--)             solve();         out.print(sb);     }     void solve(){         int n = in.nextInt();         int[][] mat = new int[n][5];         for(int i = 0; i<n; i++) {             char[] pp =in.nextLine().toCharArray();             for(char c : pp) {                 mat[i][c-'a']++;             }             int[] p = new int[5];             int tt = 0;             for(int j : mat[i])                 tt +=j;             for(int j = 0; j<5; j++) {                 mat[i][j]=2*mat[i][j]-tt;             }         }         int ans  = 0;         for(int i = 0; i<5; i++) {             int g = check(i,mat, n);             ans = Math.max(g,ans);         }         sb.append(ans).append(""\n"");     }     int check(int i, int[][] mat, int n) {         ArrayList<Integer> x = new ArrayList<>();         for(int j = 0; j<n; j++) {             x.add(mat[j][i]);         }         Collections.sort(x);         int s = 0;         int cnt = 0;         int l = n-1;         while(l>=0) {             int u = x.get(l);             if(s+u>0) {                 s+=u;                 cnt++;             }             else                 break;             l--;         }         return cnt;     }               void sort(long[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             long tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);     }               long MAX= MAX_VALUE;     int[] precomp= new int[(int) (MAX+1)];                                              } ",1
259,"import com.sun.security.jgss.GSSUtil; import javax.swing.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; public class Main {    static int inf=Integer.MAX_VALUE/2;     public static void main(String[] args) {        Scanner input=new Scanner(System.in);        int nn=input.nextInt();         int a[]=new int[nn];         ArrayList<Integer> one=new ArrayList<>();         ArrayList<Integer> zero=new ArrayList<>();         for (int i = 0; i <nn ; i++) {             a[i]=input.nextInt();             if(a[i]==1){                 one.add(i);             }else zero.add(i);         }         if (one.size()==0) {             System.out.println(0);             return;         }         int n=one.size();         int m=zero.size();         int dp[][]=new int[n+1][m+1];         int ans=0;         for (int i = 1; i <=n ; i++) {              dp[i][0]=inf;             for (int j = 1; j <=m ; j++) {                 dp[i][j]=inf;                                  dp[i][j]=Math.min(dp[i][j],dp[i-1][j-1]+Math.abs(one.get(i-1)-zero.get(j-1)));                                  dp[i][j]=Math.min(dp[i][j],dp[i][j-1]);             }         }         ans=inf;         for (int i = 1; i <=m ; i++) {             ans=Math.min(ans,dp[n][i]);         }         System.out.println(ans);     } } ","import java.util.*; import java.io.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int n = sc.nextInt(); ArrayList<Integer>  o=new ArrayList<Integer>(); ArrayList<Integer>  e=new ArrayList<Integer>(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++){ dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } } System.out.println(dp[o.size()][e.size()]); } } ",0
260,"import com.sun.security.jgss.GSSUtil; import javax.swing.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; public class Main {    static int inf=Integer.MAX_VALUE/2;     public static void main(String[] args) {        Scanner input=new Scanner(System.in);        int nn=input.nextInt();         int a[]=new int[nn];         ArrayList<Integer> one=new ArrayList<>();         ArrayList<Integer> zero=new ArrayList<>();         for (int i = 0; i <nn ; i++) {             a[i]=input.nextInt();             if(a[i]==1){                 one.add(i);             }else zero.add(i);         }         if (one.size()==0) {             System.out.println(0);             return;         }         int n=one.size();         int m=zero.size();         int dp[][]=new int[n+1][m+1];         int ans=0;         for (int i = 1; i <=n ; i++) {              dp[i][0]=inf;             for (int j = 1; j <=m ; j++) {                 dp[i][j]=inf;                                  dp[i][j]=Math.min(dp[i][j],dp[i-1][j-1]+Math.abs(one.get(i-1)-zero.get(j-1)));                                  dp[i][j]=Math.min(dp[i][j],dp[i][j-1]);             }         }         ans=inf;         for (int i = 1; i <=m ; i++) {             ans=Math.min(ans,dp[n][i]);         }         System.out.println(ans);     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codeforces { public static void main (String[] args) throws java.lang.Exception { FastReader sc=new FastReader(); int n=sc.nextInt(); int a[]=new int[n]; ArrayList<Integer> arr0=new ArrayList<>(); ArrayList<Integer> arr1=new ArrayList<>(); for(int i=0;i<n;i++) {     a[i]=sc.nextInt();     if(a[i]==0)     arr0.add(i);     else     arr1.add(i); } n=arr0.size(); int m=arr1.size(); int dp[][]=new int[m+1][n+1]; for(int i=0;i<=n;i++) {     dp[0][i]=0; } for(int i=1;i<=m;i++) {     dp[i][i]=dp[i-1][i-1]+Math.abs(arr0.get(i-1)-arr1.get(i-1));     for(int j=i+1;j<=n;j++)     {         dp[i][j]=Math.min(dp[i-1][j-1]+Math.abs(arr0.get(j-1)-arr1.get(i-1)),dp[i][j-1]);     } } System.out.println(dp[m][n]); } } ",0
261,"import java.awt.*; import java.io.*; import java.util.*; public class Main { static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); static StringBuilder str = new StringBuilder(); public static void main(String[] args) throws NumberFormatException, IOException { int t = Integer.parseInt(reader.readLine()); while (t-- > 0) { solve(); } printRes(); } public static void printRes() { System.out.println(str); } public static void solve() throws IOException { int n = Integer.parseInt(reader.readLine()); String[] s = reader.readLine().split("" ""); int[] nums = new int[n]; for (int i = 0; i < n; i++) { nums[i] = Integer.parseInt(s[i]); } int i = 0; if (n % 2 == 1) { if (nums[1] + nums[2] != 0) { str.append(-(nums[1] + nums[2]) + "" "" + nums[0] + "" "" + nums[0] + "" ""); } else if (nums[0] + nums[2] != 0) { str.append(nums[1] + "" "" + -(nums[0] + nums[2]) + "" "" + nums[1] + "" ""); } else { str.append(nums[2] + "" "" + nums[2] + "" "" + -(nums[0] + nums[1]) + "" ""); } i = 3; } for (; i < n; i+=2) { if (nums[i] > 0 && nums[i+1] > 0) { str.append(nums[i+1] + "" "" + (-nums[i]) + "" ""); } else if (nums[i] < 0 && nums[i+1] < 0) { str.append(nums[i+1] + "" "" + Math.abs(nums[i]) + "" ""); } else { str.append(Math.abs(nums[i+1]) + "" "" + Math.abs(nums[i]) + "" ""); } } str.append(""\n""); } } ","import java.io.PrintWriter; import java.util.*; public class Main {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int tc = sc.nextInt();         while(tc-->0){             int n = sc.nextInt();             int[] arr = new int[n]; for(int i = 0; i<n; i++)arr[i] = sc.nextInt();             if(n % 2 == 0){                 for(int i = 0; i<n; i+=2){                     pw.print((-arr[i + 1]) + "" "" + arr[i] + "" "");                 }                 pw.println();             }else{                 if(arr[0] + arr[1] != 0) pw.print(arr[2] + "" "" + arr[2] + "" "" + (-(arr[0] + arr[1])) + "" "");                 else if(arr[0] + arr[2] != 0)pw.println(arr[1] + "" "" + (-(arr[0] + arr[2]))+"" "" + arr[1]);                 else pw.println(-(arr[1] + arr[2]) + "" "" + arr[0]+"" "" + arr[0]);                 for(int i = 3; i<n; i+=2){                     pw.print((-arr[i + 1]) + "" "" + arr[i] + "" "");                 }                 pw.println();             }         }         pw.flush();     } } ",0
262,"import java.awt.Container; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileNotFoundException; import java.io.FileWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.math.BigInteger;   import java.util.*;   public class Main {     public static int check(String a,String b)     {         int zero1 = 0,one0 = 0;         for (int i = 0; i <a.length(); i++) {             if(a.charAt(i)=='1'&&a.charAt(i)!=b.charAt(i))             {                 one0++;             }             else if(a.charAt(i)=='0'&&a.charAt(i)!=b.charAt(i))             {                 zero1++;             }         }         if(zero1!=one0)         {             return -1;         }         else             return zero1+one0;     }     public static int changeandAns(String a ,String b,int index)     {                char newa[] = new char[a.length()];         for (int i = 0; i <a.length(); i++) {             if(i!=index)             {                 if(a.charAt(i)=='0')                 {                     newa[i]='1';                                      }                 else                 {                     newa[i]= '0';                 }             }             else             {                 newa[i]= a.charAt(i);             }         }         String ra = new String(newa);         return check(ra, b);              }          public static void main(String[] args)     {         FastScanner input = new FastScanner();                 int tc = input.nextInt();         StringBuilder result = new StringBuilder();         work:         while (tc-- > 0) {             int n = input.nextInt();         String a = input.next();         String b = input.next();         int ans = Integer.MAX_VALUE;                  int noChange = check(a,b);         if(noChange!=-1)         {             ans = Math.min(ans, noChange);         }                  boolean have = false;         int index = -1;             for (int i = 0; i <n; i++) {             if(a.charAt(i)=='1'&&b.charAt(i)==a.charAt(i))             {                 have  = true;                 index = i;                 break;                              }         }             if(have)             {                                                   int onetone = changeandAns(a,b,index);                 if(onetone!=-1)                 {                     ans = Math.min(ans,1+ onetone);                 }                                               }                          have = false;             index = -1;                                  for (int i = 0; i <n; i++) {             if(a.charAt(i)=='1'&&b.charAt(i)!=a.charAt(i))             {                 have  = true;                 index = i;                 break;                              }         }             if(have)             {                                                   int onetozero = changeandAns(a,b,index);                 if(onetozero!=-1)                 {                     ans = Math.min(ans, 1+onetozero);                 }                                               }             if(ans==Integer.MAX_VALUE)             {                result.append(""-1\n"");             }             else             {                 result.append(ans+""\n"");             }         }         System.out.println(result);                }          } ","import java.awt.Container; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileNotFoundException; import java.io.FileWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class Main {     public static int check(String a,String b)     {         int zero1 = 0,one0 = 0;         for (int i = 0; i <a.length(); i++) {             if(a.charAt(i)=='1'&&a.charAt(i)!=b.charAt(i))             {                 one0++;             }             else if(a.charAt(i)=='0'&&a.charAt(i)!=b.charAt(i))             {                 zero1++;             }         }         if(zero1!=one0)         {             return -1;         }         else             return zero1+one0;     }     public static int changeandAns(String a ,String b,int index)     {                char newa[] = new char[a.length()];         for (int i = 0; i <a.length(); i++) {             if(i!=index)             {                 if(a.charAt(i)=='0')                 {                     newa[i]='1';                                      }                 else                 {                     newa[i]= '0';                 }             }             else             {                 newa[i]= a.charAt(i);             }         }         String ra = new String(newa);         return check(ra, b);              }          public static void main(String[] args)     {         FastScanner input = new FastScanner();                 int tc = input.nextInt();         StringBuilder result = new StringBuilder();         work:         while (tc-- > 0) {             int n = input.nextInt();         String a = input.next();         String b = input.next();         int ans = Integer.MAX_VALUE;                  int noChange = check(a,b);         if(noChange!=-1)         {             ans = Math.min(ans, noChange);         }                  boolean have = false;         int index = -1;             for (int i = 0; i <n; i++) {             if(a.charAt(i)=='1'&&b.charAt(i)==a.charAt(i))             {                 have  = true;                 index = i;                 break;                              }         }             if(have)             {                                                   int onetone = changeandAns(a,b,index);                 if(onetone!=-1)                 {                     ans = Math.min(ans,1+ onetone);                 }                                               }                          have = false;             index = -1;                                  for (int i = 0; i <n; i++) {             if(a.charAt(i)=='1'&&b.charAt(i)!=a.charAt(i))             {                 have  = true;                 index = i;                 break;                              }         }             if(have)             {                                                   int onetozero = changeandAns(a,b,index);                 if(onetozero!=-1)                 {                     ans = Math.min(ans, 1+onetozero);                 }                                               }             if(ans==Integer.MAX_VALUE)             {                result.append(""-1\n"");             }             else             {                 result.append(ans+""\n"");             }         }         System.out.println(result);              }      } ",1
263,"import java.awt.Container; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileNotFoundException; import java.io.FileWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class Main {         public static boolean check(int a[],int value)     {            int b[]= new int[a.length];            for (int i = a.length-1; i >=2; i--) {             if(a[i]+b[i]<value)             {                 return false;             }             int d = Math.min(a[i], (a[i]+b[i]-value));             b[i-1]+=d/3;             b[i-2]+=(2*(d/3));                      }                                    if(a[0]+b[0]<value||a[1]+b[1]<value)         {             return false;         }         return true;              }         public static void main(String[] args)     {         FastScanner input = new FastScanner();         StringBuilder result = new StringBuilder();         int tc = input.nextInt();         work:         while (tc-- > 0) {           int n = input.nextInt();         int a[]= new int[n];               int min = Integer.MAX_VALUE;         int max = Integer.MIN_VALUE;         for (int i = 0; i < n; i++) {             a[i] = input.nextInt();             min = Math.min(min, a[i]);             max = Math.max(max, a[i]);                      }         int low = min;         int high  = max;         int ans = 0;         while(low<=high)         {             int mid = low+(high-low)/2;             if(check(a, mid))             {                 ans = mid;                 low = mid+1;             }             else             {                 high = mid-1;             }                                   }         result.append(ans+""\n"");                     }         System.out.println(result);                      }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Example {          public static void main(String[] args) {         FastReader sc = new FastReader();         int t= sc.nextInt();         while(t>0){             t--;             int ans=Integer.MAX_VALUE;             int n=sc.nextInt();             int[] ar= new int[n];             int l=Integer.MAX_VALUE;             int h=Integer.MIN_VALUE;             for(int i=0;i<n;i++){                 ar[i]=sc.nextInt();                 l=Math.min(l,ar[i]);                 h=Math.max(h,ar[i]);             }             int[] extra;             while(l<=h){                 int mid=l+(h-l)/2;                 if(possibleans(ar,mid)){                     ans=mid;                     l=mid+1;                 }else{                     h=mid-1;                 }             }             System.out.println(ans);         }     }     private static boolean possibleans(int[] ar, int mid) { int[] extra=new int[ar.length];         for(int i=ar.length-1;i>=2;i--){             if((ar[i]+extra[i]-mid)<0){                 return false;             }             int d=Math.min(ar[i],extra[i]+ar[i]-mid);             extra[i-1]=extra[i-1]+d/3;             extra[i-2]+=2*(d/3);         }         int a=ar[0]+extra[0];         int b=ar[1]+extra[1];         return (a>=mid && b>=mid);     }      } ",1
264,"import java.io.*;  import java.util.*;  public class D   {    public static ArrayList<Integer> adj[];    public static int node;    public static int dist = 0;    public static void main(String[] args) throws IOException    {       FastScanner sc = new FastScanner();       int T = sc.nextInt();       PrintWriter out = new PrintWriter(System.out);       for(int t = 0; t < T; t++){          int N = sc.nextInt();          int a = sc.nextInt(); int b = sc.nextInt();          int da = sc.nextInt(); int db = sc.nextInt();          adj = new ArrayList[N+1];          for(int i = 0; i <= N; i++){             adj[i] = new ArrayList<Integer>();          }          for(int i = 0; i < N-1; i++){             int v = sc.nextInt();             int u = sc.nextInt();             adj[v].add(u);             adj[u].add(v);          }          if(db > 2*da){             dfs1(a, 0, b, 0);             if(dist <= da){                out.println(""Alice"");             }             else{                node = 0;                dist = 0;                dfs(1, 0, 0);                dfs(node, 0, 0);                if(dist > 2*da){                   out.println(""Bob"");                }                else{                   out.println(""Alice"");                }             }          }          else{             out.println(""Alice"");          }       }       out.close();    }      public static void dfs1(int a, int p, int b, int d){       if(a == b){          dist = d;       }       for(int next : adj[a]){          if(next != p){             dfs1(next, a, b, d+1);          }         }    }    public static void dfs(int i, int p, int d){       if(d > dist){          node = i;          dist = d;       }       for(int next : adj[i]){          if(next != p){             dfs(next, i, d+1);          }         }    }         } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.LinkedList; import java.util.StringTokenizer; public class problemD {     static ArrayList<Integer>[] adj;     static boolean found = false;     static int[] D = new int[212345];     private static void solve() throws Exception {         int n = fs.nextInt();         int a = fs.nextInt();         int b = fs.nextInt();         int da = fs.nextInt();         int db = fs.nextInt();         adj = new ArrayList[n+1];         for (int i = 0 ; i <= n ; i ++ ) adj[i] = new ArrayList<Integer>();         for (int i = 0 ; i < n-1; i ++ ) {             int u = fs.nextInt();             int v = fs.nextInt();             adj[u].add(v);             adj[v].add(u);         }         found = false;         dfs(a, 0, 0, da, b);         if (found) {             out.println(""Alice"");             return;         }         dfs(b,0,0);         int maxD = -1;         int node = -1;         for (int i = 1; i <= n; i ++ ) {             if (D[i] > maxD) {                 maxD = D[i];                 node = i;             }         }         dfs(node, 0, 0);         maxD = -1;         for (int i = 1; i <= n; i ++ ) {             if (D[i] > maxD) {                 maxD = D[i];             }         }         boolean bob = db > da * 2 && maxD > da * 2;         out.println(bob ? ""Bob"" : ""Alice"");     }     private static void dfs(int node, int parent, int dist) {         D[node] = dist;         for (int x: adj[node]) {             if (x != parent) {                 dfs(x, node, dist+1);             }         }     }     private  static void dfs(int node, int parent, int dist, int da, int b) {         if (node == b) { found = true; return; }         for (int x: adj[node]) {             if (x != parent) {                 if (dist+1 <= da) {                     dfs(x, node, dist + 1, da, b);                 }             }         }     }     private static FastScanner fs = new FastScanner();     private static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) throws Exception {         int T = 1;         T = fs.nextInt();         for (int t = 0; t < T; t++) {             solve();         }         out.close();     }           } ",0
265,"import java.io.*;  import java.util.*; public class one {   static Scanner sc=new Scanner(System.in);   boolean prime[];   static int prev=-1;   static int dp[][];      public static void main(String[] args) {          int testcase=sc.nextInt();            while(testcase-->0){                                  solve();        System.out.println();     }       }    public static void solve(){     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     int size=sc.nextInt();     int arr[][]=new int[size-1][2];     for(int i=0;i<size-1;i++){       arr[i][0]=sc.nextInt();       arr[i][1]=sc.nextInt();     }     for(int x[]:arr){       map.put(x[0],map.getOrDefault(x[0], 0)+1);       map.put(x[1],map.getOrDefault(x[1], 0)+1);       if(map.get(x[0])>2||map.get(x[1])>2){         System.out.println(-1);         return;       }     }     List<List<Integer>> adj=new ArrayList<>();     for(int i=0;i<=size;i++)     adj.add(new ArrayList<Integer>());     for(int x[]:arr){       adj.get(x[0]).add(x[1]);       adj.get(x[1]).add(x[0]);     }          int vist[]=new int[size+1];     HashMap<String,Integer> ans=new HashMap<String,Integer>();     for(int i=1;i<=size;i++){       if(vist[i]==0){         dfs(i,vist,adj,ans,2);       }     }          for(int x[]:arr){              int a=Math.min(x[0],x[1]);       int b=Math.max(x[0],x[1]);       String s=a+"" ""+b;       System.out.print(ans.get(s)+"" "");     }                                                                                   }   public static void dfs(int node,int vist[],List<List<Integer>> adj,HashMap<String,Integer> ans,int val){     vist[node]=1;     for(int i:adj.get(node)){       if(vist[i]==1)       continue;       int x=Math.min(i, node);       int y=Math.max(i, node);       ans.put(x+"" ""+y,val);       dfs(i,vist,adj,ans,5-val);       val=5-val;     }   } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.util.concurrent.ThreadLocalRandom; public class A {     private static void sport(List<Integer>[] g, Map<W, Integer> map) {         int n = g.length;         for (int i = 0; i < n; i++) {             if (g[i].size() > 2) {                 System.out.println(-1);                 return;             }         }         int[] ans = new int[n - 1];                  Queue<int[]> queue = new LinkedList<>();         Set<Integer> seen = new HashSet<>();         int val = 3;         for (Integer integer : g[0]) {             Integer idx = map.get(new W(0, integer));             ans[idx] = val;             queue.add(new int[]{val, integer});             seen.add(integer);             val = val == 2 ? 3 : 2;         }         seen.add(0);         while (!queue.isEmpty()) {             int[] poll = queue.poll();             for (Integer u : g[poll[1]]) {                 if (!seen.contains(u)) {                     seen.add(u);                     int curr = poll[0] == 2 ? 3 : 2;                     Integer integer = map.get(new W(poll[1], u));                     ans[integer] = curr;                     queue.add(new int[]{curr, u});                 }             }         }         for (int an : ans) {             System.out.print(an + "" "");         }         System.out.println();     }     static class W {         int u;         int v;         public W(int u, int v) {             this.u = u;             this.v = v;         }                       }               public static void main(String[] args) throws IOException {         FastScanner sc = new FastScanner();         int t = sc.nextInt();         for (int i = 0; i < t; i++) {             int n = sc.nextInt();             List<Integer>[] g = new ArrayList[n];             for (int j = 0; j < n; j++) {                 g[j] = new ArrayList<>();             }             Map<W, Integer> map = new HashMap<>();             for (int j = 0; j < n - 1; j++) {                 int u = sc.nextInt() - 1;                 int v = sc.nextInt() - 1;                 g[u].add(v);                 g[v].add(u);                 map.put(new W(u, v), j);                 map.put(new W(v, u), j);             }             sport(g, map);         }     }           } ",0
266,"import java.io.*;  import java.util.*; public class one {   static Scanner sc=new Scanner(System.in);   boolean prime[];   static int prev=-1;   static int dp[][];      public static void main(String[] args) {          int testcase=sc.nextInt();            while(testcase-->0){                                  solve();        System.out.println();     }       }    public static void solve(){     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     int size=sc.nextInt();     int arr[][]=new int[size-1][2];     for(int i=0;i<size-1;i++){       arr[i][0]=sc.nextInt();       arr[i][1]=sc.nextInt();     }     for(int x[]:arr){       map.put(x[0],map.getOrDefault(x[0], 0)+1);       map.put(x[1],map.getOrDefault(x[1], 0)+1);       if(map.get(x[0])>2||map.get(x[1])>2){         System.out.println(-1);         return;       }     }     List<List<Integer>> adj=new ArrayList<>();     for(int i=0;i<=size;i++)     adj.add(new ArrayList<Integer>());     for(int x[]:arr){       adj.get(x[0]).add(x[1]);       adj.get(x[1]).add(x[0]);     }          int vist[]=new int[size+1];     HashMap<String,Integer> ans=new HashMap<String,Integer>();     for(int i=1;i<=size;i++){       if(vist[i]==0){         dfs(i,vist,adj,ans,2);       }     }          for(int x[]:arr){              int a=Math.min(x[0],x[1]);       int b=Math.max(x[0],x[1]);       String s=a+"" ""+b;       System.out.print(ans.get(s)+"" "");     }                                                                                   }   public static void dfs(int node,int vist[],List<List<Integer>> adj,HashMap<String,Integer> ans,int val){     vist[node]=1;     for(int i:adj.get(node)){       if(vist[i]==1)       continue;       int x=Math.min(i, node);       int y=Math.max(i, node);       ans.put(x+"" ""+y,val);       dfs(i,vist,adj,ans,5-val);       val=5-val;     }   } } ","import java.util.*; import java.io.*; public class Main{     static final Random random=new Random();     static long mod=1000000007L;     static HashMap<String,Integer>map=new HashMap<>();               public static void main(String[] args) {         try {             FastReader in=new FastReader();             FastWriter out = new FastWriter();             int testCases=in.nextInt();                                       while(testCases-- > 0){                 solve(in);             }             out.close();         } catch (Exception e) {             return;         }     }     public static void solve( FastReader in){         int n=in.nextInt();                 List<List<Pair>> graph=new ArrayList<>();                 for(int i=0;i<n;i++){                     graph.add(new ArrayList<>());                 }                                  for(int i=0;i<n-1;i++){                     int u=in.nextInt();                     int v=in.nextInt();                     u--;v--;                     graph.get(u).add(new Pair(v,i));                     graph.get(v).add(new Pair(u,i));                 }                 int start=0;                 for(int i=0;i<n;i++){                     if(graph.get(i).size()>2){                         System.out.println(""""+-1);                         return;                     }                     else if(graph.get(i).size()==1){                         start=i;                     }                 }                 int[] ans=new int[n-1];                 int[] vis=new int[n+1];                 vis[start]=1;                 int w=2;                 Queue<Integer> q=new LinkedList<>();                 q.add(start);                 while(!q.isEmpty()){                     int x=q.poll();                     for(Pair p:graph.get(x)){                         if(vis[p.node]==0){                             vis[p.node]=1;                             q.add(p.node);                             int idx=p.eg_indx;                             ans[idx]=w;                             if(w==2)w=5;                             else w=2;                             }                     }                 }                 for(int i:ans){                     System.out.print(i+"" "");                 }                 System.out.println("""");     }     static class Pair{         int node;         int eg_indx;         Pair(int node,int eg_indx){             this.node=node;             this.eg_indx=eg_indx;         }     }      } ",0
267,"import java.io.*; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.util.HashMap; import java.util.Map; import java.util.*; import java.io.*; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.*; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.math.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Vector; import static java.lang.Math.sqrt; import static java.lang.Math.floor; public class topcoder {     static class pairr implements  Comparable<pairr>{ Integer value; Integer index;    public pairr(Integer value, Integer index) {     this.value = value;     this.index = index;    }     }                                                                                                              public static int add(long n, long num, long a, int i) {   if(num > n)return -1;   if(num == n) {      return i;   }    if(a < 2050)return -1;        long temp = num+a;      if(temp <= n) { return  add(n,temp,a,i+1);   }else if(temp > n){   a /= 10;   return add(n,num,a,i);   }          return -1;   }                                                    public static void main(String args[])throws IOException{             BufferedReader ob = new BufferedReader(new InputStreamReader(System.in));                     int t = Integer.parseInt(ob.readLine());                  while( t--> 0) {          StringTokenizer st = new StringTokenizer(ob.readLine());      int n = Integer.parseInt(st.nextToken());      int m = Integer.parseInt(st.nextToken());      int x = Integer.parseInt(st.nextToken());            int []ar = new int[n];      st = new StringTokenizer(ob.readLine());      PriorityQueue<Integer>pq = new PriorityQueue<>();            for(int i = 0; i < n; i++) {      ar[i] = Integer.parseInt(st.nextToken());      pq.add(ar[i]);      }                 PriorityQueue<pairr>p = new PriorityQueue<>();     for(int i =0; i < n; i++) {     p.add(new pairr(ar[i],i));     }     int []ans = new int[n];               for(int i = 0; i < n; i++) {     pairr a = p.poll();     ans[a.index] = (i%m)+1;     }          System.out.println(""YES"");     for(int i = 0; i < n; i++ ) {     System.out.print(ans[i]+"" "");     }     System.out.println();      }     } } ","import java.io.*; import java.util.*;   public class Codeforces { public static class Tower implements Comparable<Tower>{ int val; int index; public Tower(int ind, int v) { val = v; index = ind; } } public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int cases = Integer.parseInt(br.readLine()); while(cases-- > 0) { String[] str = br.readLine().split("" ""); int n = Integer.parseInt(str[0]); int m = Integer.parseInt(str[1]); int x = Integer.parseInt(str[2]); int[] h = new int[n]; str = br.readLine().split("" ""); for(int i=0; i<n; i++) { h[i] = Integer.parseInt(str[i]); } PriorityQueue<Tower> q = new PriorityQueue<>(m); int[] ans = new int[n]; for(int i=0; i<m; i++) { q.add(new Tower(i, h[i])); ans[i] = i; } for(int i=m; i<n; i++) { Tower lowest = q.poll(); lowest.val += h[i]; ans[i] = lowest.index; q.add(lowest); } System.out.println(""YES""); for(int i=0; i<n; i++) { System.out.print((ans[i]+1) + "" ""); } System.out.println(); } } } ",0
268,"import java.io.*; import java.lang.*; import java.util.*; public class C1499 {     public static void main(String[] args) throws IOException{         StringBuffer ans = new StringBuffer();         StringTokenizer st;         BufferedReader f = new BufferedReader(new InputStreamReader(System.in));         st = new StringTokenizer(f.readLine());         int t = Integer.parseInt(st.nextToken());         for(int i = 0; i < t; i++){             st = new StringTokenizer(f.readLine());             int n = Integer.parseInt(st.nextToken());             long op = Long.MAX_VALUE;             long[] arr = new long[n];             st = new StringTokenizer(f.readLine());             for(int x = 0; x < n; x++){                 arr[x] = Integer.parseInt(st.nextToken());             }             long sum = arr[0];             long min = arr[0];             long min1 = arr[1];             long howMany = 1;             long howMany1 = 0;             long osum = sum;             for(int x = 1; x < n; x++){                 osum+=arr[x];                 if(x % 2 != 0){                     sum+= (n - howMany1) *arr[x];                     sum+=( min *(n-howMany));                     min1 = Math.min(arr[x], min1);                     howMany1++;                 }else{                     sum+= (n - howMany) *arr[x];                     sum+=( min1 *(n-howMany1));                     min = Math.min(arr[x], min);                     howMany++;                 }                                                   op = Math.min(op, sum);                 sum = osum;             }             ans.append(op);             ans.append(""\n"");         }         f.close();         System.out.println(ans);     }      } ","import java.io.*; import java.util.*; public class C {     public static void main (String[] args) throws IOException {         BufferedReader f = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st = new StringTokenizer(f.readLine());         int t = Integer.parseInt(st.nextToken());         while (t-->0) {             st = new StringTokenizer(f.readLine());             int n = Integer.parseInt(st.nextToken());             st = new StringTokenizer(f.readLine());             long[] arr = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = Long.parseLong(st.nextToken());             }             solve(n, arr);         }     }     static void solve(long n, long[] arr) {         long minEven = Integer.MAX_VALUE;         long minOdd = arr[0];         long evenSum = 0;         long oddSum = arr[0];         long finans = Long.MAX_VALUE;         long oddAns, evenAns;         long oddcount=1;         long evencount=0;         for (int k = 1; k < n; k++) {             if (k%2==1) {                 evenSum+=arr[k];                 evencount++;                 minEven = Math.min(minEven, arr[k]);             } else {                 oddSum+=arr[k];                 oddcount++;                 minOdd = Math.min(minOdd, arr[k]);             }             oddAns = oddSum+(n-oddcount)*minOdd;             evenAns = evenSum+(n-evencount)*minEven;             finans = Math.min(finans, oddAns+evenAns);         }         System.out.println(finans);     } } ",0
269,"import java.io.*; import java.lang.*; import java.util.*; public class E1578 {     public static void main(String[] args) throws IOException{         StringBuffer ans = new StringBuffer();         StringTokenizer st;         BufferedReader f = new BufferedReader(new InputStreamReader(System.in));         st = new StringTokenizer(f.readLine());         int q = Integer.parseInt(st.nextToken());         for(; q > 0; q--){             st = new StringTokenizer(f.readLine());             st = new StringTokenizer(f.readLine());             int n = Integer.parseInt(st.nextToken());             int k = Integer.parseInt(st.nextToken());             int[] a = new int[k];             st = new StringTokenizer(f.readLine());             for(int i = 0; i < k; i++){                 a[i] = Integer.parseInt(st.nextToken()) - 1;             }             int[] arr = new int[n];             int[] b = new int[k];             st = new StringTokenizer(f.readLine());             Arrays.fill(arr, Integer.MAX_VALUE-1);             for(int i = 0; i < k; i++){                 b[i] = Integer.parseInt(st.nextToken());                 arr[a[i]] = b[i];             }             int[] l = new int[n];             int[] r = new int[n];             for(int i = 0; i < n; i++){                 if(i == 0)                     l[i] = arr[i];                 else                     l[i] = Math.min(l[i-1]+1, arr[i]);             }             for(int i = n-1; i > -1; i--){                 if(i == n-1)                     r[i] = arr[i];                 else                     r[i] = Math.min(r[i+1]+1, arr[i]);             }             for(int i = 0; i  < n; i++)                 ans.append(Math.min(l[i], r[i])).append("" "");             ans.append(""\n"");         }         f.close();         System.out.println(ans);     }      } ","import java.util.*; import java.io.*; public class _1547_E {     public static void main(String[] args) throws IOException {         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int t = Integer.parseInt(in.readLine());         while(t-- > 0) {             in.readLine();             StringTokenizer line1 = new StringTokenizer(in.readLine());             int n = Integer.parseInt(line1.nextToken());             int k = Integer.parseInt(line1.nextToken());             int[] x = new int[n];             line1 = new StringTokenizer(in.readLine());             StringTokenizer line2 = new StringTokenizer(in.readLine());             TreeSet<AC> after = new TreeSet<AC>();             for(int i = 0; i < k; i++) {                 int ai = Integer.parseInt(line1.nextToken()) - 1;                 int ti = Integer.parseInt(line2.nextToken());                 x[ai] = ti;                 after.add(new AC(ti, ai));             }             TreeSet<AC> before = new TreeSet<AC>();             int[] res = new int[n];             for(int i = 0; i < n; i++) {                 if(x[i] > 0) {                     after.remove(new AC(x[i], i));                     before.add(new AC(x[i], n - i));                 }                 AC be = before.size() == 0 ? null : before.first();                 AC af = after.size() == 0 ? null : after.first();                 if(be == null) {                     res[i] = af.d + af.t - i;                 }else if(af == null) {                     res[i] = be.d + be.t - (n - i);                 }else {                     res[i] = Math.min(af.d + af.t - i, be.d + be.t - (n - i));                 }             }             StringBuilder sb = new StringBuilder();             for(int i = 0; i < n; i++) {                 sb.append(res[i]);                 sb.append(' ');             }             out.println(sb.toString());         }         in.close();         out.close();     }     static class AC implements Comparable<AC> {         int t, d;         AC(int tt, int dd) {             t = tt;             d = dd;         }              } } ",0
270,"import java.io.*; import java.lang.*; import java.util.*; public class MinGridPath { public static void main(String[] args) { Scanner s=new Scanner(System.in); int t=s.nextInt(); while(t-->0){ int n = s.nextInt(); long[] aa =new long[n]; for(int i=0;i<n;i++) aa[i]=s.nextLong();   long minEven = aa[0]; long minOdd = aa[1]; long sum = aa[0]+aa[1]; long best = n*minEven + n*minOdd; int numOdd = 1; int numEven = 1; for(int i=2; i<n; ++i) { if(i%2 == 0) { minEven = Math.min(aa[i], minEven); numEven++; }else { minOdd = Math.min(aa[i], minOdd); numOdd++; } sum += aa[i]; long score = sum; score += minEven*(n-numEven); score += minOdd*(n-numOdd); best = Math.min(best, score); } System.out.println(best); } } } ","import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.nio.file.Paths; import java.util.ArrayList; import java.util.Arrays; import java.util.InputMismatchException; import java.util.List; import java.util.Map.Entry; import java.util.TreeMap; public class Main { public Main() throws FileNotFoundException { long t = System.currentTimeMillis(); InputReader reader = new InputReader(); int ttt = reader.nextInt(); for (int tt = 0; tt < ttt; tt++) { int n=reader.nextInt(); long[] s=new long[n]; for(int i=0;i<n;i++) { s[i]=reader.nextLong(); } long smallest1=s[0]; long smallest2=s[1]; long val=n*s[0]+n*s[1]; int left1=n-1; int left2=n-1; long base=s[0]+s[1]; for(int i=2;i<n;i++) { if(i%2==0) { val=Math.min(val, base+left2*smallest2+left1*s[i]); base+=s[i]; smallest1=Math.min(smallest1, s[i]); left1--; }else { val=Math.min(val, base+left1*smallest1+left2*s[i]); base+=s[i]; smallest2=Math.min(smallest2, s[i]); left2--; } } System.out.println(val); } } public static void main(String[] args) throws FileNotFoundException { new Main(); } } ",0
271,"import java.io.*; import java.lang.*; import java.util.*; public class c {   public static int[] ia(int n) {     int ar[]=new int[n];     return ar; } static class pair implements Comparable<pair>{     int ht;     int id;     pair(int ht, int id) {     this.ht=ht;     this.id=id; } } public static void main(String args[]) throws java.lang.Exception { FastScanner sc=new FastScanner();  int t=sc.ni(); while(t-->0) {     int n=sc.ni();     int m=sc.ni();     int x=sc.ni();     int ar[]=ia(n); for(int i=0;i<n;i++) { ar[i]=sc.ni(); } System.out.println(""YES""); PriorityQueue<pair> pq=new PriorityQueue<>();  for(int i=0;i<m;i++)  { pq.add(new pair(0,i+1));  }                       int i=0;  while(i<n)  {      pair pp=pq.remove(); pp.ht+=ar[i]; System.out.print(pp.id+"" ""); pq.add(pp); i++;  }    System.out.println(); } } } ","import java.io.BufferedReader; import java.io.DataInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     static int modulo=998244353;     public static void main(String[] args) {                 FastScanner in = new FastScanner();         int test=in.nextInt();         while(test-->0){             int n=in.nextInt();             int m=in.nextInt();             int x=in.nextInt();              PriorityQueue<pair> pq=new PriorityQueue<>();             int arr[]=new int[n];             for(int i=1;i<=m;i++){                 pq.add(new pair(i,0));             }             System.out.println(""YES"");             for(int i=0;i<n;i++){                 pair p=pq.poll();                 int a=in.nextInt();                 p.y+=a;                 pq.add(p);                 System.out.print(p.x+"" "");             }                                                    System.out.println();         }                                                 }                                                                  } class pair implements Comparable<pair>     {         int x;         int y;           pair(int x, int y) {             this.x = x;             this.y = y;         }          } ",0
272,"import java.io.*; import java.lang.*; import java.util.*; public class c {   public static int[] ia(int n) {     int ar[]=new int[n];     return ar; } static class pair implements Comparable<pair>{     int ht;     int id;     pair(int ht, int id) {     this.ht=ht;     this.id=id; } } public static void main(String args[]) throws java.lang.Exception { FastScanner sc=new FastScanner();  int t=sc.ni(); while(t-->0) {     int n=sc.ni();     int m=sc.ni();     int x=sc.ni();     int ar[]=ia(n); for(int i=0;i<n;i++) { ar[i]=sc.ni(); } System.out.println(""YES""); PriorityQueue<pair> pq=new PriorityQueue<>();  for(int i=0;i<m;i++)  { pq.add(new pair(0,i+1));  }                       int i=0;  while(i<n)  {      pair pp=pq.remove(); pp.ht+=ar[i]; System.out.print(pp.id+"" ""); pq.add(pp); i++;  }    System.out.println(); } } } ","import java.util.*; import java.io.*;          @SuppressWarnings(""unchecked"") public class Main {     public static void main(String args[]) {             FastReader input = new FastReader();         PrintWriter out = new PrintWriter(System.out);         int t = input.nextInt();         while(t-- > 0) {         int n = input.nextInt();         int m = input.nextInt();         int x = input.nextInt();         int arr[] = new int[n];         for(int i = 0; i < n; i++) arr[i] = input.nextInt();          PriorityQueue<Pair> queue = new PriorityQueue();         out.println(""YES"");         int res[] = new int[n];         for(int i = 1; i <= m; i++) {             queue.add(new Pair(0, i));         }         for(int i = 0; i < n; i++) {             Pair p = queue.remove();             out.print(p.second()+"" "");             queue.add(new Pair(p.first()+arr[i], p.second()));             }         out.println();         out.flush();         }     }    }   class Pair implements Comparable<Pair> {         public int x;     public int y;       public Pair(int x, int y) {         this.x = x;         this.y = y;     }       public int first() {         return x;     }     public int second() {         return y;     }         }   ",0
273,"import java.io.*; import java.lang.*; import java.util.*; public class c {   public static int[] ia(int n) {     int ar[]=new int[n];     return ar; } static class pair implements Comparable<pair>{     int ht;     int id;     pair(int ht, int id) {     this.ht=ht;     this.id=id; } } public static void main(String args[]) throws java.lang.Exception { FastScanner sc=new FastScanner();  int t=sc.ni(); while(t-->0) {     int n=sc.ni();     int m=sc.ni();     int x=sc.ni();     int ar[]=ia(n); for(int i=0;i<n;i++) { ar[i]=sc.ni(); } System.out.println(""YES""); PriorityQueue<pair> pq=new PriorityQueue<>();  for(int i=0;i<m;i++)  { pq.add(new pair(0,i+1));  }                       int i=0;  while(i<n)  {      pair pp=pq.remove(); pp.ht+=ar[i]; System.out.print(pp.id+"" ""); pq.add(pp); i++;  }    System.out.println(); } } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Scanner; import java.io.*; public class ieee1{          public static void main(String[] args) {            Scanner scn=new Scanner(System.in);            int t=scn.nextInt();            while(t-->0){                HashMap<Integer,Integer> map=new HashMap<>();                               int b=scn.nextInt();                int m=scn.nextInt();                int x=scn.nextInt();                int[] arr=new int[b];                PriorityQueue<Node> pq=new PriorityQueue<>(new pqc());                for(int i=0;i<b;i++){                    int ele=scn.nextInt();                                                           arr[i]=ele;                }                for(int i=1;i<=m;i++){                    pq.add(new Node(i,0));                }                System.out.println(""YES"");                for(int i=0;i<arr.length;i++){                    int ele=arr[i];                    Node n=pq.poll();                    System.out.print(n.ind+"" "");                    n.data+=ele;                    pq.add(n);                }                System.out.println();                                   } }     public static class Node{         int ind;         int data;         Node(int ind,int data){             this.ind=ind;             this.data=data;         }     }     public static class pqc implements Comparator<Node>{                       } } ",0
274,"import java.io.*; import java.lang.reflect.Array; import java.math.BigInteger; import java.util.*; import java.util.BitSet; import java.util.function.BinaryOperator; public class D {          static FastReader s = new FastReader();     static PrintWriter out = new PrintWriter(System.out);     private static int[] rai(int n) {         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = s.nextInt();         }         return arr;     }     private static int[][] rai(int n, int m) {         int[][] arr = new int[n][m];         for (int i = 0; i < n; i++) {             for (int j = 0; j < m; j++) {                 arr[i][j] = s.nextInt();             }         }         return arr;     }               private static int ri() {         return s.nextInt();     }                    static int MOD=(int)1e9+7;               public static void main(String[] args) {         StringBuilder ans = new StringBuilder();         int t = ri();         while(t-- >0)         {             int n=ri();             int[] arr=rai(n);             int[] res = new int[n];             if(n%2==0)             {                 for(int i=0;i<n;i+=2)                 {                     res[i] = -arr[i+1];                     res[i+1]=arr[i];                 }             }             else {                 for(int i=0;i<n-3;i+=2)                 {                     res[i] = -arr[i+1];                     res[i+1]=arr[i];                 }                 int val = arr[n-1]+arr[n-2];                 if(val!=0) {                     res[n - 3] = -val;                     res[n - 2] = arr[n - 3];                     res[n - 1] = arr[n - 3];                 }                 else                 {                     val = arr[n-1]+arr[n-3];                     if(val!=0) {                         res[n - 2] = -val;                         res[n - 1] = arr[n - 2];                         res[n - 3] = arr[n - 2];                     }                     else                     {                         val = arr[n-2]+arr[n-3];                         res[n-1] = -val;                         res[n-2]=arr[n-1];                         res[n-3]=arr[n-1];                     }                 }             }             for(int i:res)             {                 ans.append(i).append("" "");             }             ans.append(""\n"");         }         out.print(ans.toString());         out.flush();     } } ","import java.util.Scanner; public class D {     public static void main(String[] args) {         Scanner scn = new Scanner(System.in);         int t = scn.nextInt();         StringBuilder sb = new StringBuilder();         while (t-- > 0) {             int n = scn.nextInt();             int[] arr = new int[n];             int[] ans = new int[n];             for (int i = 0; i < n; i++) {                 arr[i] = scn.nextInt();             }             if (n % 2 != 0) {                 if (arr[n - 2] + arr[n - 3] == 0) {                     ans[n - 3] = -2 * arr[n - 1];                     ans[n - 2] = -arr[n - 1];                     ans[n - 1] = arr[n - 2] + arr[n - 3] * 2;                 } else {                     ans[n - 3] = -arr[n - 1];                     ans[n - 2] = -arr[n - 1];                     ans[n - 1] = arr[n - 2] + arr[n - 3];                 }                 n -= 3;             }             for (int i = 0; i < n; i += 2) {                 int div = 1;                 if (arr[i] % 2 == 0 && arr[i + 1] % 2 == 0)                     div = 2;                 ans[i] = arr[i + 1] / div;                 ans[i + 1] = -arr[i] / div;             }             for (int v : ans) {                 sb.append(v);                 sb.append("" "");             }             sb.append(""\n"");         }         System.out.println(sb);     } } ",0
275,"import java.io.*; import java.lang.reflect.Array; import java.util.*; public class Main {     public static void main(String[] args) {         FastScanner in=new FastScanner();         PrintWriter out=new PrintWriter(System.out);         int t=in.nextInt();         while(t-->0)         solve(in,out);         out.close();     }     static void solve(FastScanner in,PrintWriter out){         int n=in.nextInt();         long a[]=new long[n];         for (int i = 0; i < n; i++) {             a[i]=in.nextLong();         }         long odd=Integer.MAX_VALUE,even=Integer.MAX_VALUE;         even=a[0];         long sum=a[0];         long ans=Long.MAX_VALUE;         for (int i = 1; i < n; i++) {             if(i%2==0) {                 ans=Math.min(ans,(n-i/2)*a[i] + odd*(n-i/2) +sum);                 even=Math.min(even,a[i]);             } else {                 ans=Math.min(ans,(n-i/2)*a[i] + even*(n-i/2-1) +sum);                 odd=Math.min(odd,a[i]);             }             sum+=a[i];         }         out.println(ans);     }                } ","import java.io.BufferedOutputStream; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; public class Main {     static class Clock {         protected long start, stop;         public void start() {             start = System.currentTimeMillis();         }                       }     public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));               static long mod = 1000000007;                         static int parent[];     static int rank[];               public static long arr[];     public static int arr1[];                         public static void main(String[] args) throws Exception {         FastReader sc = new FastReader();         Clock clock = new Clock();         clock.start();        int t1=sc.nextInt();         for (int t = 0; t <t1 ; t++) {           int n=sc.nextInt();           long arr[]=new long[n];             for (int i = 0; i < n; i++) {                 arr[i]=sc.nextLong();             }           long sum1=0;           long sum2=0;           long min1 =Long.MAX_VALUE;           long min2 =Long.MAX_VALUE;           long brr[]=new long[n];             for (int i = 0; i <n ; i+=2) {                 int nn =i/2;                 min1=Math.min(arr[i],min1);                 sum1+=arr[i];                 long x =(sum1-min1) + min1*(n-nn);                                brr[i]=x;             }             for (int i = 1; i <n ; i+=2) {                 int nn =i/2;                                  min2=Math.min(arr[i],min2);                 sum2+=arr[i];                 long x =(sum2-min2) + min2*(n-nn);                 brr[i]=x;             }             long min=Long.MAX_VALUE;             for (int i = 1; i < n; i++) {                 min=Math.min(brr[i]+brr[i-1],min);             }             out.println(min);                                  }         out.close();     } } ",0
276,"import java.io.*; import java.lang.reflect.Array; import java.util.*; public class Main {     public static void main(String[] args) {         FastScanner in=new FastScanner();         PrintWriter out=new PrintWriter(System.out);         int t=in.nextInt();         while(t-->0)         solve(in,out);         out.close();     }     static void solve(FastScanner in,PrintWriter out){         int n=in.nextInt();         long a[]=new long[n];         for (int i = 0; i < n; i++) {             a[i]=in.nextLong();         }         long odd=Integer.MAX_VALUE,even=Integer.MAX_VALUE;         even=a[0];         long sum=a[0];         long ans=Long.MAX_VALUE;         for (int i = 1; i < n; i++) {             if(i%2==0) {                 ans=Math.min(ans,(n-i/2)*a[i] + odd*(n-i/2) +sum);                 even=Math.min(even,a[i]);             } else {                 ans=Math.min(ans,(n-i/2)*a[i] + even*(n-i/2-1) +sum);                 odd=Math.min(odd,a[i]);             }             sum+=a[i];         }         out.println(ans);     }                } ","import java.util.*; import java.io.*; import java.math.*; public class C { private static long INF = 2000000000000000000L; public static void process() throws IOException { int n = sc.nextInt(); PriorityQueue<Integer> odd = new PriorityQueue<Integer>(); PriorityQueue<Integer> even = new PriorityQueue<Integer>(); int arr[] = sc.readArray(n); long min = INF; long sumOdd = 0; long sumEven = 0; for (int i = 0; i < n; i++) { int x = arr[i]; if (i % 2 == 0) { even.add(x); sumEven += x; } else { odd.add(x); sumOdd += x; } if (i > 0) { long ans = 0; ans += 1l * even.peek() * (n - (even.size())); ans += 1l * odd.peek() * (n - (odd.size())); ans += sumOdd + sumEven; min = Math.min(ans, min); } } System.out.println(min); } static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; t = sc.nextInt(); while (t-- > 0) { process(); } out.flush(); out.close(); } } ",0
277,"import java.io.*; import java.math.*; import java.util.*; public class test {                                  public static void main(String args[]) throws Exception {     Scanner sc = new Scanner();    StringBuffer res = new StringBuffer();        int tc = 1;        while(tc-->0) {      int n = sc.nextInt();          ArrayList<Integer> one = new ArrayList<>();     ArrayList<Integer> zero = new ArrayList<>();          for(int i=0;i<n;i++) {           int x = sc.nextInt();          if(x==1) {      one.add(i);     }     else {      zero.add(i);     }     }          int dp[][] = new int[one.size()+1][zero.size()+1];           for(int i=1;i<=one.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(zero.get(i-1)-one.get(i-1));          for(int j=i+1;j<=zero.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(one.get(i-1)-zero.get(j-1)));          }      }      System.out.println(dp[one.size()][zero.size()]);    } System.out.println(res);    } } ","import java.util.*; import java.io.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int n = sc.nextInt(); ArrayList<Integer>  o=new ArrayList<Integer>(); ArrayList<Integer>  e=new ArrayList<Integer>(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++){ dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } } System.out.println(dp[o.size()][e.size()]); } } ",1
278,"import java.io.*; import java.math.*; import java.util.*; public class test {                                  public static void main(String args[]) throws Exception {     Scanner sc = new Scanner();    StringBuffer res = new StringBuffer();        int tc = 1;        while(tc-->0) {      int n = sc.nextInt();          ArrayList<Integer> one = new ArrayList<>();     ArrayList<Integer> zero = new ArrayList<>();          for(int i=0;i<n;i++) {           int x = sc.nextInt();          if(x==1) {      one.add(i);     }     else {      zero.add(i);     }     }          int dp[][] = new int[one.size()+1][zero.size()+1];           for(int i=1;i<=one.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(zero.get(i-1)-one.get(i-1));          for(int j=i+1;j<=zero.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(one.get(i-1)-zero.get(j-1)));          }      }      System.out.println(dp[one.size()][zero.size()]);    } System.out.println(res);    } } ","import java.util.*; public class Longjumps {  public static void main(String[] args){  Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]);  } } ",1
279,"import java.io.*; import java.math.*; import java.util.*; public class test {                                public static void main(String args[]) throws Exception {         Scanner sc = new Scanner();    StringBuilder res = new StringBuilder();      int tc = sc.nextInt();       while(tc-->0) {     int n=sc.nextInt(); int k=sc.nextInt(); int[] ac=new int[k]; long[] ans=new long[n]; Arrays.fill(ans, Integer.MAX_VALUE/2); for(int i=0;i<k;i++) { ac[i]=sc.nextInt()-1; } for(int i=0;i<k;i++) { long x = sc.nextLong(); ans[ac[i]] = x; } for(int i=1;i<n;i++) { ans[i]=Math.min(ans[i], ans[i-1]+1); } for(int i=n-2;i>=0;i--) { ans[i]=Math.min(ans[i], ans[i+1]+1); }                for(int i=0;i<n;i++) {                res.append(ans[i]+"" "");                }                                res.append(""\n"");    } System.out.println(res);        } } ","import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class a{      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(),k=s.nextInt(); int pos[]=s.readArray(k); int temp[]=s.readArray(k); long ans[]=new long[n]; Arrays.fill(ans,Integer.MAX_VALUE); for(int i=0;i<k;i++){ ans[pos[i]-1]=temp[i]; } for(int i=1;i<n;i++){ ans[i]=Math.min(ans[i-1]+1,ans[i]); } for(int i=n-2;i>=0;i--){ ans[i]=Math.min(ans[i],ans[i+1]+1); } for(int i=0;i<n;i++){ out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ",1
280,"import java.io.*; import java.math.*; import java.util.*; public class test {                                static boolean function(long a[],long x) { long arr[] = new long[a.length]; for(int i=0;i<arr.length;i++) { arr[i] = a[i]; } for(int i=arr.length-1;i>=2;i--) { if(arr[i] < x) { return false; } long d = Math.min(a[i],(arr[i]-x))/3; arr[i-1] += d; arr[i-2] += 2*d; } return (arr[0]>=x && arr[1]>=x); }    public static void main(String args[]) throws Exception {     Scanner sc = new Scanner();    StringBuilder res = new StringBuilder();    int tc = sc.nextInt();       while(tc-->0) {     int n = sc.nextInt(); long a[] = new long[n]; for(int i=0;i<n;i++) { a[i] = sc.nextLong(); } long l = 1; long r = 1000000000; long ans = 1; while(l<=r){ long mid = l + (r-l)/2; if(function(a,mid)){ ans = mid; l = mid+1; } else { r = mid-1; } } res.append(ans+""\n"");    }    System.out.println(res);    } } ","import java.util.Scanner; public class BalancedStoneHeaps {     static boolean check(long[] a, long k) {         int n = a.length;         long[] temp = new long[n];         for (int i = 0; i < n; i++) {             temp[i] = a[i];         }         for (int i = n - 1; i >= 2; i--) {             if (temp[i] < k) {                                  return false;             }             long p = Math.min(a[i] / 3, (temp[i] - k) / 3);             temp[i - 1] += p;             temp[i - 2] += 2 * p;         }         if (temp[0] >= k && temp[1] >= k) {             return true;         }         return false;     }     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         while (t-- > 0) {             int n = scan.nextInt();             long[] a = new long[n];             for (int i = 0; i < n; i++) {                 a[i] = scan.nextInt();             }             long l = 0;             long r = a[n - 1];             long res = 0;             while (l <= r) {                 long mid = (l + r) / 2;                 if (check(a, mid)) {                     l = mid + 1;                     res = Math.max(res, mid);                 } else {                     r = mid - 1;                 }             }             System.out.println(res);         }     } } ",1
281,"import java.io.*; import java.math.*; import java.util.*; public class test {                        public static void main(String args[]) throws Exception {         Scanner sc = new Scanner();    StringBuilder res = new StringBuilder();        int tc = sc.nextInt();        while(tc-->0) {  int n = sc.nextInt(); long c[] = new long[n]; for(int i=0;i<n;i++) {  c[i] = sc.nextLong(); } long min_odd = Integer.MAX_VALUE; long min_even = Integer.MAX_VALUE;     long ans = Long.MAX_VALUE;     long sum = 0;      int cnt1 = n; int cnt2 = n;     for(int i = 0; i < n; i++){         sum += c[i];         if(i % 2 == 0){             cnt1--;             min_odd = Math.min(min_odd, c[i]);         }         else{             cnt2--;             min_even = Math.min(min_even, c[i]);         }         if(i > 0){             long temp = sum + (min_odd * cnt1) + (min_even * cnt2);             ans = Math.min(ans, temp);         }       }          System.out.println(ans);    }        System.out.println(res);    } } ","import java.io.*; import java.util.*; public class GFG {                public static void main (String[] args) {     Scanner sc = new Scanner(System.in);     int t = sc.nextInt();      while(t-- > 0){          int n = sc.nextInt();          long pre = 0,ans = Long.MAX_VALUE;          long[] arr = new long[n];          PriorityQueue<Long> epq = new PriorityQueue<>();          PriorityQueue<Long> opq = new PriorityQueue<>();          for(int i=0;i<n;i++)          {              arr[i] = sc.nextLong();              if(i%2==0)              epq.add(arr[i]);              else              opq.add(arr[i]);              pre+=arr[i];              if(i>0)              ans = Math.min(ans,pre+(n-epq.size())*epq.peek()+(n-opq.size())*opq.peek());          }          System.out.println(ans);      }     } } ",0
282,"import java.io.*; import java.math.*; import java.util.*; public class test {      static class Pair{     long x;    long y;        Pair(long x,long y){     this.x = x;    this.y = y;        }    }                  static void dfs(int cur , int prnt , ArrayList<Integer> graph[],long dp[][],Pair p[]) {         for(int i : graph[cur]) {         if(i!=prnt) {     dfs(i,cur,graph,dp,p);        dp[cur][0] += Math.max(Math.abs(p[cur].x - p[i].x)+ dp[i][0], Math.abs(p[cur].x - p[i].y)+dp[i][1]);    dp[cur][1] += Math.max(Math.abs(p[cur].y -p[i].x) + dp[i][0], Math.abs(p[cur].y - p[i].y)+dp[i][1]);    }    }    }    public static void main(String args[]) throws Exception {         Scanner sc = new Scanner();    StringBuffer res = new StringBuffer();        int tc = sc.nextInt();        while(tc-->0) {  int n = sc.nextInt(); Pair p[] = new Pair[n+1]; for(int i=1;i<=n;i++) {  p[i] = new Pair(0,0); p[i].x = sc.nextLong(); p[i].y = sc.nextLong(); } ArrayList<Integer> graph[] = new ArrayList[n+1]; for(int i=0;i<n+1;i++) {  graph[i] = new ArrayList<>(); } for(int i=0;i<n-1;i++) {  int u = sc.nextInt(); int v = sc.nextInt(); graph[u].add(v); graph[v].add(u); } long dp[][] = new long[n+1][2]; dfs(1,0,graph,dp,p); System.out.println(Math.max(dp[1][0], dp[1][1]));    } System.out.println(res);        } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; public class ParsasHumongousTree {     public static void main(String args[]) throws IOException {         Reader scan = new Reader();         StringBuilder sb = new StringBuilder();         int t = scan.nextInt();         while (t-- > 0) {             int n = scan.nextInt();             int[] l = new int[n + 1];             int[] r = new int[n + 1];             for (int i = 1; i <= n; i++) {                 l[i] = scan.nextInt();                 r[i] = scan.nextInt();             }             Graph g = new Graph(n);             for (int i = 0; i < n - 1; i++) {                 g.addEdge(scan.nextInt(), scan.nextInt());             }             sb.append(g.dfs(l, r) + ""\n"");         }         System.out.println(sb);     } } class Graph {     ArrayList<Integer>[] node;     int n;     int c = 0;     boolean[] vis;     Graph(int s) {         n = s + 1;         vis = new boolean[n + 1];         node = new ArrayList[n + 1];         for (int i = 0; i < n + 1; i++) {             node[i] = new ArrayList<>();         }     }     void addEdge(int u, int v) {         node[u].add(v);         node[v].add(u);         if (node[u].size() == 1) {             c = u;         }         if (node[v].size() == 1) {             c = v;         }     }     void cleanVisArray() {         for (int i = 0; i < n + 1; i++) {             vis[i] = false;         }     }     long dfs(int[] l, int[] r) {         cleanVisArray();         long[][] dp = new long[n][2];         dfsMain(1, dp, l, r);         return Math.max(dp[1][0], dp[1][1]);     }     void dfsMain(int v, long[][] dp, int[] l, int[] r) {         vis[v] = true;         for (int i : node[v]) {             if (!vis[i]) {                 dfsMain(i, dp, l, r);                 dp[v][0] += Math.max(Math.abs(l[v] - l[i]) + dp[i][0], Math.abs(l[v] - r[i]) + dp[i][1]);                 dp[v][1] += Math.max(Math.abs(r[v] - l[i]) + dp[i][0], Math.abs(r[v] - r[i]) + dp[i][1]);             }         }     } } ",0
283,"import java.io.*; import java.math.BigDecimal; import java.math.MathContext; import java.math.RoundingMode; import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.util.Collections; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.*; public class Main1 {     public static void main(String[] args) throws IOException {         FastScanner in = new FastScanner();         PrintWriter out = new PrintWriter(System.out);             int t = in.nextInt() ;             while (t-- > 0){                 int n = in.nextInt() ;                 int dp[][] = new int[n][5] ;                 String tt[] = new String[n] ;                 for (int i = 0; i <n ; i++) {                     String  s= in.next() ;                     tt[i] = s ;                     for (int j = 0; j <s.length() ; j++) {                         dp[i][s.charAt(j)-'a']++ ;                     }                 }                 int max = 0 ;                 for (int i = 0; i <5 ; i++) {                     ArrayList<Integer>list = new ArrayList<>() ;                     for (int j = 0; j <n ; j++) {                         list.add(dp[j][i] - (tt[j].length()-dp[j][i]) );                     }                     list.sort(Collections.reverseOrder());                     int ans = 0 ;                     int sum = 0 ;                     for (int curr : list){                         sum+= curr ;                         if (sum > 0){                             ans++ ;                             max = max(max , ans) ;                         }                         else break;                     }                 }                 System.out.println(max);             }             out.flush();             out.close(); }               static void sort(int ar[]) {         int n = ar.length;         ArrayList<Integer> a = new ArrayList<>();         for (int i = 0; i < n; i++)             a.add(ar[i]);         Collections.sort(a);         for (int i = 0; i < n; i++)             ar[i] = a.get(i);     }                          } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ",0
284,"import java.io.*; import java.math.BigInteger; import java.util.*; public class Main {     static boolean[] primecheck = new boolean[1000002];     public static void main(String[] args) throws IOException {         OutputStream outputStream = System.out;         FastReader in = new FastReader();         PrintWriter out = new PrintWriter(outputStream);         PROBLEM solver = new PROBLEM();         int t = 1;         t = in.nextInt();         for (int i = 0; i < t; i++) {             solver.solve(in, out);         }         out.close();     }     static class PROBLEM {         public void solve(FastReader in, PrintWriter out) {             int n = in.nextInt();             int[] a = in.readArray(n);             char[] c = in.nextLine().toCharArray();             int cur = 1;             ArrayList<Pair> p = new ArrayList<>();             for (int i = 0; i < n; i++) {                 p.add(new Pair(c[i], a[i]));             }             Collections.sort(p);             for (int i = 0; i < n; i++) {                 if(p.get(i).x == 'B' && p.get(i).y < i+1){                     out.println(""NO"");                     return;                 }                 if(p.get(i).x == 'R' && p.get(i).y > i+1){                     out.println(""NO"");                     return;                 }             }             out.println(""YES"");         }     }                                                  static class Pair implements Comparable<Pair>{         char x;         int y;         Pair(char x, int y){             this.x = x;             this.y = y;         }              }                          } ","import java.io.*; import java.util.*; public class D { static class Pair implements Comparable<Pair>{ int a; char b; public Pair(int a, char b) { this.a = a; this.b = b; } } public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); PrintWriter output = new PrintWriter(System.out); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); int arr[] = scan.readArray(n); char line[] = scan.next().toCharArray(); ArrayList<Pair> pairs = new ArrayList<Pair>(); for(int i = 0;i<n;i++) { pairs.add(new Pair(arr[i], line[i])); } Collections.sort(pairs); boolean possible = true; for(int i = 1;i<=n;i++) { if(pairs.get(i-1).a == i) { continue; } else if(pairs.get(i-1).a < i && pairs.get(i-1).b == 'R') { continue; } else if(pairs.get(i-1).a > i && pairs.get(i-1).b == 'B') { continue; } else { possible = false; break; } } output.println(possible == true ? ""YES"" : ""NO""); } output.flush(); } public static int[] sort(int arr[]) { List<Integer> list = new ArrayList<>(); for(int i:arr) list.add(i); Collections.sort(list); for(int i = 0;i<list.size();i++) arr[i] = list.get(i); return arr; } } ",0
285,"import java.io.*; import java.math.BigInteger; import java.util.*; public class Main {     static boolean[] primecheck = new boolean[1000002];     public static void main(String[] args) throws IOException {         OutputStream outputStream = System.out;         FastReader in = new FastReader();         PrintWriter out = new PrintWriter(outputStream);         PROBLEM solver = new PROBLEM();         int t = 1;         t = in.nextInt();         for (int i = 0; i < t; i++) {             solver.solve(in, out);         }         out.close();     }     static class PROBLEM {         public void solve(FastReader in, PrintWriter out) {             int n = in.nextInt();             int[] a = in.readArray(n);             char[] c = in.nextLine().toCharArray();             int cur = 1;             ArrayList<Pair> p = new ArrayList<>();             for (int i = 0; i < n; i++) {                 p.add(new Pair(c[i], a[i]));             }             Collections.sort(p);             for (int i = 0; i < n; i++) {                 if(p.get(i).x == 'B' && p.get(i).y < i+1){                     out.println(""NO"");                     return;                 }                 if(p.get(i).x == 'R' && p.get(i).y > i+1){                     out.println(""NO"");                     return;                 }             }             out.println(""YES"");         }     }                                                  static class Pair implements Comparable<Pair>{         char x;         int y;         Pair(char x, int y){             this.x = x;             this.y = y;         }              }                          } ","import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int  t=sc.nextInt(); while(t-- >0) { int n=sc.nextInt(); int[] arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextInt(); } String str=sc.next(); ArrayList<Pair> plist=new ArrayList<>(); for(int i=0;i<n;i++) { char ch=str.charAt(i); plist.add(new Pair(arr[i],ch)); } Collections.sort(plist); int counter=1; boolean flag=false; for(int i=0;i<plist.size();i++) { int val=plist.get(i).number; int clr=plist.get(i).color; if(clr=='B') { if(val<counter) { flag=true; break; } } else { if(val>counter) { flag=true; break; } } counter++; } System.out.println(flag?""NO"":""YES""); } } public static class Pair implements Comparable<Pair>{ int number; char color; Pair(int number,char color){ this.number=number; this.color=color; } } } ",0
286,import java.io.*; import java.math.BigInteger; import java.util.*; public class Main {     static int MOD = 1000000007;                                        void solve() throws IOException {         int n = ri();         int[] h = ril(n);                  List<List<Integer>> adj = new ArrayList<>(n);         for (int i = 0; i < n; i++) adj.add(new ArrayList<>());         int[] nextGe = new int[n];         nextGe[n-1] = n;         for (int i = n-2; i >= 0; i--) {             int j = i+1;             while (j != n && h[j] < h[i]) j = nextGe[j];             nextGe[i] = j;         }         int[] nextLe = new int[n];         nextLe[n-1] = n;         for (int i = n-2; i >= 0; i--) {             int j = i+1;             while (j != n && h[j] > h[i]) j = nextLe[j];             nextLe[i] = j;         }         int[] prevGe = new int[n];         prevGe[0] = -1;         for (int i = 1; i < n; i++) {             int j = i-1;             while (j != -1 && h[j] < h[i]) j = prevGe[j];             prevGe[i] = j;         }         int[] prevLe = new int[n];         prevLe[0] = -1;         for (int i = 1; i < n; i++) {             int j = i-1;             while (j != -1 && h[j] > h[i]) j = prevLe[j];             prevLe[i] = j;         }         for (int i = 0; i < n; i++) {             if (prevLe[i] != -1) adj.get(prevLe[i]).add(i);             if (prevGe[i] != -1) adj.get(prevGe[i]).add(i);             if (nextLe[i] != n) adj.get(i).add(nextLe[i]);             if (nextGe[i] != n) adj.get(i).add(nextGe[i]);         }         int dist = 0;         Deque<Integer> q = new ArrayDeque<>();         boolean[] visited = new boolean[n];         q.addLast(0);         visited[0] = true;         while (!q.isEmpty()) {             int sz = q.size();             for (int i = 0; i < sz; i++) {                 int u = q.removeFirst();                 if (u == n-1) {                     q.clear();                     break;                 }                 for (int v : adj.get(u)) {                     if (!visited[v]) {                         visited[v] = true;                         q.addLast(v);                     }                 }             }             dist++;         }         pw.println(dist-1);     }          BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     PrintWriter pw = new PrintWriter(System.out);     public static void main(String[] args) throws IOException {         Main m = new Main();         m.solve();         m.close();     }     void close() throws IOException {         pw.flush();         pw.close();         br.close();     }     int ri() throws IOException {         return Integer.parseInt(br.readLine());     }          int[] ril(int n) throws IOException {         int[] nums = new int[n];         int c = 0;         for (int i = 0; i < n; i++) {             int sign = 1;             c = br.read();             int x = 0;             if (c == '-') {                 sign = -1;                 c = br.read();             }             while (c >= '0' && c <= '9') {                 x = x * 10 + c - '0';                 c = br.read();             }             nums[i] = x * sign;         }         while (c != '\n' && c != -1) c = br.read();         return nums;     }                          } ,"import java.util.*; import java.io.*; public class EdD { public static void main(String[] args) throws Exception{ int num = 998244353;  BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));  PrintWriter out = new PrintWriter(System.out);  int n = Integer.parseInt(bf.readLine());  int[] array = new int[n];  StringTokenizer st = new StringTokenizer(bf.readLine());  for(int j = 0;j<n;j++){  array[j] = Integer.parseInt(st.nextToken());  }  Map<Integer, Set<Integer>> mp = new HashMap<Integer, Set<Integer>>();  for(int j =0;j<n;j++)  mp.put(j, new HashSet<Integer>());  int[] nextge = new int[n];  int[] nextle = new int[n];  int[] prevge = new int[n];  int[] prevle = new int[n];  nextge[n-1] = -1;  nextle[n-1] = -1;  prevge[0] = -1;  prevle[0] = -1;  for(int j = n-2;j>=0;j--){  if (array[j+1] < array[j]){  nextle[j] = j+1;  mp.get(j).add(j+1);  int temp = j+1;  while(temp!= -1 && array[temp] < array[j])  temp = nextge[temp];  nextge[j] = temp;  if (temp!= -1)  mp.get(j).add(temp);  }  else if (array[j+1] > array[j]){  nextge[j] = j+1;  mp.get(j).add(j+1);  int temp = j+1;  while(temp!= -1 && array[temp] > array[j])  temp = nextle[temp];  nextle[j] = temp;  if (temp!= -1)  mp.get(j).add(temp);  }  else{  nextge[j] = j+1;  mp.get(j).add(j+1);  nextle[j] = j+1;  mp.get(j).add(j+1);  }  }  for(int j = 1;j<n;j++){  if (array[j] < array[j-1]){    prevge[j] = j-1;  mp.get(j-1).add(j);  int temp = j-1;  while(temp!= -1 && array[temp] > array[j])  temp = prevle[temp];  prevle[j] = temp;  if (temp!= -1)  mp.get(temp).add(j);  }  else if (array[j] > array[j-1]){  prevle[j] = j-1;  mp.get(j-1).add(j);  int temp = j-1;  while(temp!= -1 && array[temp] < array[j])  temp = prevge[temp];  prevge[j] = temp;  if (temp!= -1)  mp.get(temp).add(j);  }  else{  prevge[j] = j-1;  prevle[j] = j-1;  mp.get(j-1).add(j);  }  }  int[] depth = new int[n+1];  Set<Integer> seen = new HashSet<Integer>();  Queue<Integer> bfs = new LinkedList<Integer>();  bfs.add(0);  seen.add(0);  while(!bfs.isEmpty()){  int v = bfs.remove();  for(int child : mp.get(v)){  if (!seen.contains(child)){  bfs.add(child);  seen.add(child);  depth[child] = depth[v]+1;  }  }  }      out.println(depth[n-1]);    out.close();        } } ",0
287,"import java.io.*; import java.sql.SQLOutput; import java.util.*; public class Main {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int numCases = Integer.parseInt(br.readLine());         for (int i = 0; i < numCases; i++) {             int length = Integer.parseInt(br.readLine());             int found = 0;             int[] ret = new int[length + 1];             for (int j = 1; j <= length; j++) {                 if (found == length - 1) {                     break;                 }                 if (ret[j] == 0) {                     System.out.println(""? "" + j);                     System.out.flush();                     int start = Integer.parseInt(br.readLine());                     int lastNum = start;                     boolean cont = true;                     while (cont) {                         System.out.println(""? "" + j);                         System.out.flush();                         int num = Integer.parseInt(br.readLine());                         ret[lastNum] = num;                         found++;                         lastNum = num;                         if (num == start)                             cont = false;                     }                 }             }             for (int j = 0; j <= length; j++)                 if (ret[j] == 0) ret[j] = j;             System.out.print(""! "");             for (int j = 1; j <= length; j++)                 System.out.print(ret[j] + "" "");             System.out.println();         }         br.close();     } } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class B {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); static ArrayList<Integer> g[]; static long mod=(long)998244353,INF=Long.MAX_VALUE; static int par[],partial[]; static int Days[],P[][]; static int sum=0,size[]; static int seg[],col[]; static char X[][]; static boolean set[][]; static int D[],min[],A[]; static long dp[][]; public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int f[]=new int[N+5]; int ask=ask(1); HashSet<Integer> set=new HashSet<>(); int cnt=0; for(int i=1; i<=N; i++) { if(cnt+1==N) { set=new HashSet<>(); for( i=0; i<=N; i++)set.add(i); for( i=1; i<=N; i++)set.remove(f[i]); int a=-1; for(int v:set) { a=v; } for(i=1; i<=N; i++) { if(f[i]==0)f[i]=a; } break; } if(f[i]==0) { int last=0; set=new HashSet<>(); while(true) { int a=ask(i); f[last]=a; if(set.contains(a)) { break; } last=a; set.add(a); } cnt+=set.size(); } } for(int i=1; i<=N; i++) { ans.append(f[i]+"" ""); } System.out.println(""! ""+ans); ans=new StringBuilder(); } out.println(ans); out.close(); } static int ask(int a) { System.out.println(""? ""+a); return i(); } static long fact[]; static int ask(int v,int tl,int tr,int l,int r) { if(l>r)return Integer.MAX_VALUE; if(tl==l && tr==r)return seg[v]; int tm=(tl+tr)/2; int a=ask(v*2,tl,tm,l,Math.min(tm, r)); int b=ask(v*2+1,tm+1,tr,Math.max(l, tm+1),r); return Math.min(a, b); } static int ask(int a,int b) { System.out.println(""? ""+a+"" ""+b); return i(); }           static int i() { return in.nextInt(); } } ",0
288,"import java.io.*; import java.sql.SQLOutput; import java.util.*; public class airconditioner {          public static class compare implements Comparator<int[]> {         public int compare(int[] o1, int[] o2) {             return o1[0] - o2[0];         }     }     public static void main(String[] args) throws IOException {         FastReader input = new FastReader();         int testcases = input.nextInt();         for (int t = 0; t < testcases; t++) {             int length = input.nextInt();             int conditioners = input.nextInt();             int[] array = new int[length];             int[][] conpositions = new int[conditioners][2];              for (int i = 0; i < length; i++) {                 array[i] = 2000000069;             }             for (int i = 0; i < conditioners; i++) {                 conpositions[i][0] = input.nextInt() - 1;             }             for (int i = 0; i < conditioners; i++) {                 conpositions[i][1] = input.nextInt();                 array[conpositions[i][0]] = conpositions[i][1];             }             Arrays.sort(conpositions, new compare());             int position = conditioners - 2;             int counter = conpositions[conditioners - 1][1];             for (int i = conpositions[conditioners - 1][0]; i >= 0; i--) {                  array[i] = counter;                 if (position >= 0 && i == conpositions[position][0]) {                     if (conpositions[position][1] < counter) {                         counter = conpositions[position][1];                         array[i] = counter;                     }                     position--;                 }                 counter++;             }             position = 1;             counter = conpositions[0][1];             for (int i = conpositions[0][0]; i < length; i++) {                 if (counter < array[i]) {                     array[i] = counter;                 }                 if (position < conditioners && i == conpositions[position][0]) {                     if (conpositions[position][1] < counter) {                         counter = conpositions[position][1];                         if (counter < array[i]) {                             array[i] = counter;                         }                     }                     position++;                 }                 counter++;             }             for (int i = 0; i < length; i++) {                 System.out.print(array[i] + "" "");             }             System.out.println();         }     } } ","import java.util.*; public class D{     private static Scanner scanner = new Scanner(System.in);     public static void main(String[] args){         int q = scanner.nextInt();         while(q-- > 0){             int n = scanner.nextInt(),             k = scanner.nextInt();             int[] a = new int[k];             for(int i=0;i<k;i++){                 a[i] = scanner.nextInt();             }             int[] t = new int[k];             for(int j=0;j<k;j++){                 t[j] = scanner.nextInt();             }             long[] L = new long[n];             long[] R = new long[n];             for(int i=0;i<n;i++){                 L[i] = Integer.MAX_VALUE;                 R[i] = Integer.MAX_VALUE;             }             for(int i=0;i<k;i++){                 L[a[i]-1] = t[i];                 R[a[i]-1] = t[i];             }                          long min = Integer.MAX_VALUE;             for(int i=0;i<n;i++){                 L[i] = Math.min(min+1,L[i]);                 min = L[i];             }             min = Integer.MAX_VALUE;             for(int i=n-1;i>=0;i--){                 R[i] = Math.min(min+1,R[i]);                 min = R[i];             }             for(int i=0;i<n;i++){                 System.out.print(Math.min(L[i],R[i]) + "" "");             }             System.out.println();         }     } } ",0
289,"import java.io.*; import java.text.DecimalFormat; import java.util.*; public class E {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         int t= in.nextInt();         while(t-->0) {             int n = in.nextInt();             int k = in.nextInt();             int[] a= in.readArray(k);             int[] temp = in.readArray(k);             int[] pre = new int[n];             Arrays.fill(pre,Integer.MAX_VALUE);             int[] suf = new int[n];             Arrays.fill(suf,Integer.MAX_VALUE);             for(int i = 0;i<k;i++){                 pre[a[i]-1]=temp[i];                 suf[a[i]-1]=temp[i];             }             int min = Integer.MAX_VALUE;             Arrays.sort(a);             for(int i=a[0]-1;i<n;i++){                 min = Math.min(min,pre[i]);                 pre[i] = min;                 min++;             }             min = Integer.MAX_VALUE;             for(int i = a[k-1]-1;i>=0;i--){                 min = Math.min(min,suf[i]);                 suf[i] = min;                 min++;             }             for(int i=0;i<n;i++)                 out.print(Math.min(pre[i],suf[i])+"" "");             out.println();         }         out.close();     }                                         } ","import java.io.*; import java.util.*; import java.util.concurrent.atomic.AtomicInteger; import java.util.concurrent.atomic.AtomicLong; import java.util.logging.Logger; import java.util.stream.Collectors; public class Trial {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int q = sc.nextInt();         while (q-- > 0) {             int n = sc.nextInt();             int k = sc.nextInt();             int[] arr = new int[k];             int[] t = new int[k];             HashMap<Integer, Integer> hm = new HashMap<>();             for (int i = 0; i < k; i++) {                 arr[i] = sc.nextInt() - 1;             }             for (int i = 0; i < k; i++) {                 t[i] = sc.nextInt();                 hm.put(arr[i], t[i]);             }             int[] left = new int[n];             int[] right = new int[n];             left[0] = hm.getOrDefault(0, -1);             right[n - 1] = hm.getOrDefault(n - 1, -1);             for (int i = 1; i < n; i++) {                 if (hm.containsKey(i)) {                     if (left[i - 1] < 0) {                         left[i] = hm.get(i);                     } else {                         left[i] = Math.min(hm.get(i), left[i - 1] + 1);                     }                 } else {                     left[i] = left[i - 1] < 0 ? -1 : left[i - 1] + 1;                 }             }             for (int i = n - 2; i >= 0; i--) {                 if (hm.containsKey(i)) {                     if (right[i + 1] < 0) {                         right[i] = hm.get(i);                     } else {                         right[i] = Math.min(hm.get(i), right[i + 1] + 1);                     }                 } else {                     right[i] = right[i + 1] < 0 ? -1 : right[i + 1] + 1;                 }             }             for (int i = 0; i < n; i++) {                 if (left[i] < 0) {                     pw.print(right[i] + "" "");                 } else if (right[i] < 0) {                     pw.print(left[i] + "" "");                 } else {                     pw.print(Math.min(left[i], right[i]) + "" "");                 }             }             pw.println();         }         pw.flush();         pw.close();     }                     } ",0
290,"import java.io.*; import java.util.*;    public class C{ static FastReader fs=null; static Scanner sc=null; public static void main(String[] args) { sc=new Scanner(System.in); int t=sc.nextInt(); for(int tt=0;tt<t;tt++) { int n=sc.nextInt(); boolean visited[]=new boolean[n+1]; int p[]=new int[n+1]; for(int i=1;i<=n;i++) { if(visited[i])continue; while(true) { int val=Query(i); if(val==i)break; } int cur=i; while(!visited[cur]) { int val=Query(i); visited[cur]=true; p[cur]=val; cur=val; } } System.out.print(""! ""); for(int i=1;i<=n;i++)System.out.print(p[i]+"" ""); System.out.println(); } } static int Query(int id) { System.out.println(""? ""+id); int val=sc.nextInt(); return val; } static void print(int a[]) { for(int e:a) { System.out.print(e+"" ""); } System.out.println(); } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.io.PrintStream; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.StringTokenizer; import java.io.Writer; import java.io.OutputStreamWriter; import java.io.BufferedReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         OutputWriter out = new OutputWriter(outputStream);         CHiddenPermutations solver = new CHiddenPermutations();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CHiddenPermutations {         public void solve(int testNumber, InputReader in, OutputWriter out) {             int n = in.nextInt();             int[] arr = new int[n];             boolean[] vis = new boolean[n];             for (int i = 0; i < n; i++) {                 if (vis[i]) continue;                 ArrayList<Integer> cycle = new ArrayList<>();                 int ans = query(i, in);                 int now = query(i, in);                 cycle.add(now);                 while (now != ans) {                     now = query(i, in);                     cycle.add(now);                 }                 for (int j = 0; j < cycle.size(); j++) {                     arr[cycle.get(j)] = cycle.get((j + 1) % cycle.size()) + 1;                     vis[cycle.get(j)] = true;                 }             }             out.print(""! "");             out.println(arr);             out.flush();         }         int query(int ind, InputReader in) {             System.out.println(""? "" + (ind + 1));             return in.nextInt() - 1;         }     }           } ",0
291,"import java.io.*; import java.util.*;    public class C{ static FastReader sc=null; public static void main(String[] args) { sc=new FastReader(); int t=sc.nextInt(); for(int tt=0;tt<t;tt++) { int n=sc.nextInt(); long k=sc.nextLong(); int a[]=sc.readArray(n); ruffleSort(a); long sum=0; for(int e:a)sum+=e; if(sum<=k) { System.out.println(0); continue; } long l=-1,r=sum-k+1; while(l+1<r) { long mid=(l+r)/2; if(pos(mid,k,a,sum))r=mid; else l=mid; } System.out.println(r); } } static boolean pos(long m,long k,int a[],long sum) { int n=a.length; long min=sum-m,suf=sum-a[0],moves=m; for(int i=n-1;i>0;i--) { moves--; if(moves<0)break; long val=a[0]-moves; suf-=a[i]; long tot=suf+val*(n-i+1); min=Math.min(min, tot); } return min<=k; } static int[] ruffleSort(int a[]) { ArrayList<Integer> al=new ArrayList<>(); for(int i:a)al.add(i); Collections.sort(al); for(int i=0;i<a.length;i++)a[i]=al.get(i); return a; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class SetOrDecrease {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while(t>0){             String []nk=br.readLine().split("" "");             int n=Integer.parseInt(nk[0]);             long k=Long.parseLong(nk[1]);             String []str=br.readLine().split("" "");             List<Integer> list=new ArrayList<>();             for(int i=0;i<n;i++)                 list.add(Integer.parseInt(str[i]));             Collections.sort(list);             long sum=0;             for(int i=0;i<n;i++)                 sum+=list.get(i);             if(sum<=k)                 System.out.println(0);             else {                 long minSteps = sum - k;                 long drop=0;                 long targetDrop = sum-k;                 for (int i = n - 1; i > 0; i--) {                                          drop += list.get(i) - list.get(0);                     if (drop >= targetDrop) {                         if (minSteps > n - i)                             minSteps = n - i;                     } else {                         long diff = targetDrop - drop;                         long div = diff / (n - i + 1);                         long rem = diff % (n - i + 1);                         long steps = rem > 0 ? (div + 1) + n - i : div + n - i;                         if (minSteps > steps)                             minSteps = steps;                     }                 }                 System.out.println(minSteps);             }             t--;         }     } } ",0
292,"import java.io.*; import java.util.*;   import java.math.*; import java.awt.Point;   public class Main {     static final long MOD = 1000000007L;                    static final int INF =   1000000005;     static final int NINF = -1000000005;          static FastScanner sc;     static PrintWriter pw;     static final int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};       public static void main(String[] args) {         sc = new FastScanner();         pw = new PrintWriter(System.out);             int Q = sc.ni();         for (int q = 0; q < Q; q++) {             int N = sc.ni();             int[] nums = sc.intArray(N,0);             Integer[] less = new Integer[N];             Integer[] more = new Integer[N];             TreeSet<Integer> ts = new TreeSet<Integer>();             for (int i = 0; i < N; i++) {                 ts.add(nums[i]);                 less[i] = ts.lower(nums[i]);                 more[i] = ts.higher(nums[i]);             }                          String ans = ""YES"";             for (int i = 1; i < N; i++) {                 if (nums[i-1]==nums[i]) continue;                                  if (nums[i-1] < nums[i]) {                     if (more[i-1]!=null && more[i-1] < nums[i]) {                         ans = ""NO"";                         break;                     }                 } else {                     if (less[i-1]!=null && less[i-1] > nums[i]) {                         ans = ""NO"";                         break;                     }                 }             }             pw.println(ans);         }         pw.close();      }                               public static void sort(int[][] arr) {         Random rgen = new Random();         for (int i = 0; i < arr.length; i++) {             int r = rgen.nextInt(arr.length);             int[] temp = arr[i];             arr[i] = arr[r];             arr[r] = temp;         }         Arrays.sort(arr, new Comparator<int[]>() {                      });     }          public static void sort(long[][] arr) {         Random rgen = new Random();         for (int i = 0; i < arr.length; i++) {             int r = rgen.nextInt(arr.length);             long[] temp = arr[i];             arr[i] = arr[r];             arr[r] = temp;         }         Arrays.sort(arr, new Comparator<long[]>() {                      });     }        } ","import java.io.*; import java.util.*;   import java.math.*; import java.awt.Point;   public class Main {     static final long MOD = 1000000007L;                    static final int INF =   1000000005;     static final int NINF = -1000000005;          static FastScanner sc;     static PrintWriter pw;     static final int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};       public static void main(String[] args) {         sc = new FastScanner();         pw = new PrintWriter(System.out);             int Q = sc.ni();         for (int q = 0; q < Q; q++) {             int N = sc.ni();             int[] nums = sc.intArray(N,0);             Integer[] less = new Integer[N];             Integer[] more = new Integer[N];             TreeSet<Integer> ts = new TreeSet<Integer>();             for (int i = 0; i < N; i++) {                 ts.add(nums[i]);                 less[i] = ts.lower(nums[i]);                 more[i] = ts.higher(nums[i]);             }                          String ans = ""YES"";             for (int i = 1; i < N; i++) {                 if (nums[i-1]==nums[i]) continue;                                  if (nums[i-1] < nums[i]) {                     if (more[i-1]!=null && more[i-1] < nums[i]) {                         ans = ""NO"";                         break;                     }                 } else {                     if (less[i-1]!=null && less[i-1] > nums[i]) {                         ans = ""NO"";                         break;                     }                 }             }             pw.println(ans);         }         pw.close();      }                               public static void sort(int[][] arr) {         Random rgen = new Random();         for (int i = 0; i < arr.length; i++) {             int r = rgen.nextInt(arr.length);             int[] temp = arr[i];             arr[i] = arr[r];             arr[r] = temp;         }         Arrays.sort(arr, new Comparator<int[]>() {                      });     }          public static void sort(long[][] arr) {         Random rgen = new Random();         for (int i = 0; i < arr.length; i++) {             int r = rgen.nextInt(arr.length);             long[] temp = arr[i];             arr[i] = arr[r];             arr[r] = temp;         }         Arrays.sort(arr, new Comparator<long[]>() {                      });     }        } ",1
293,"import java.io.*; import java.util.*;   public class ArmChairs {            public static int solution(int n, int[] arr) {           ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();           for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }           int[][] dp = new int[one.size() + 1][zero.size() + 1];           for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }           return dp[one.size()][zero.size()];     }         public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));           int n = Integer.parseInt(br.readLine());           String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }            log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              }   } ","import java.util.*; public class Longjumps {  public static void main(String[] args){  Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]);  } } ",1
294,"import java.io.*; import java.util.*;   public class ArmChairs {            public static int solution(int n, int[] arr) {           ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();           for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }           int[][] dp = new int[one.size() + 1][zero.size() + 1];           for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }           return dp[one.size()][zero.size()];     }         public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));           int n = Integer.parseInt(br.readLine());           String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }            log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              }   } ","import java.util.*; public class Solution { public static int minMoves(int[] input) { List<Integer> people = new ArrayList<Integer>(); List<Integer> chairs = new ArrayList<Integer>(); for (int i = 0; i < input.length; i++) { if (input[i] == 1) { people.add(i); } else { chairs.add(i); } } int[] memo = new int[chairs.size() + 1]; for (int p = 1; ((!people.isEmpty()) && (p <= people.size())); p++) { int prev = memo[p]; memo[p] = memo[p - 1] + Math.abs(people.get(p - 1) - chairs.get(p - 1)); for (int c = p + 1; c <= chairs.size(); c++) { int tmp = memo[c]; memo[c] = Math.min(memo[c - 1], prev + Math.abs(people.get(p - 1) - chairs.get(c - 1))); prev = tmp; } } return memo[memo.length - 1]; } public static void main(String[] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); int[] input = new int[n]; for (int i = 0; i < n; i++) { input[i] = sc.nextInt(); } System.out.println(Solution.minMoves(input)); } } ",0
295,"import java.io.*; import java.util.*;   public class Codeforces { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int cases = Integer.parseInt(br.readLine()); while(cases-- > 0) { br.readLine(); String[] str = br.readLine().split("" ""); int n = Integer.parseInt(str[0]); int k = Integer.parseInt(str[1]); int[] a = new int[k]; int[] t = new int[k]; str = br.readLine().split("" ""); for(int i=0; i<k; i++) { a[i] = Integer.parseInt(str[i]) - 1; } str = br.readLine().split("" ""); for(int i=0; i<k; i++) { t[i] = Integer.parseInt(str[i]); } int[] temp = new int[n]; Arrays.fill(temp, Integer.MAX_VALUE); int[] left = new int[n]; int[] right = new int[n]; Arrays.fill(left, Integer.MAX_VALUE); Arrays.fill(right, Integer.MAX_VALUE); int ind = 0; for(int i=0; i<k; i++) { left[a[i]] = t[i]; right[a[i]] = t[i]; } int minleft = Integer.MAX_VALUE; for(int i=0; i<n; i++) { left[i] = Math.min(left[i], minleft); minleft = left[i] == Integer.MAX_VALUE ? Integer.MAX_VALUE : left[i]+1; } int minright = Integer.MAX_VALUE; for(int i=n-1; i>=0; i--) { right[i] = Math.min(right[i], minright); minright = right[i] == Integer.MAX_VALUE ? Integer.MAX_VALUE : right[i]+1; } for(int i=0; i<n; i++) { temp[i] = Math.min(right[i], left[i]); System.out.print(temp[i]+"" ""); } System.out.println(); } } } ","import java.io.*; import java.util.*; public class E_Air_Conditioners{     public static void main(String Args[]) throws Exception{         BufferedReader br = new BufferedReader (new InputStreamReader(System.in));         int t= Integer.parseInt(br.readLine());         StringTokenizer st;         while(t-->0){             String gap=br.readLine();                          st=new StringTokenizer(br.readLine());             int n= Integer.parseInt(st.nextToken());             int k= Integer.parseInt(st.nextToken());             int pos[]=new int[k];             st=new StringTokenizer(br.readLine());             for(int i=0;i<k;i++){                 pos[i]=Integer.parseInt(st.nextToken())-1;             }             int temp[]=new int[k];             st=new StringTokenizer(br.readLine());             int ans[]=new int[n];             int l[]=new int[n];             int r[]=new int[n];             Arrays.fill(ans,Integer.MAX_VALUE);             for(int i=0;i<k;i++){                 temp[i]=Integer.parseInt(st.nextToken());                 ans[pos[i]]=temp[i];             }             int min=Integer.MAX_VALUE;             for(int i=0;i<n;i++){                 if(min==Integer.MAX_VALUE){                     min=ans[i];                 }                 else{                     min=Math.min(min+1,ans[i]);                 }                 l[i]=min;             }             min=Integer.MAX_VALUE;             for(int i=n-1;i>=0;i--){                 if(min==Integer.MAX_VALUE){                     min=ans[i];                 }                 else{                     min=Math.min(min+1,ans[i]);                 }                 r[i]=min;             }             for(int i=0;i<n;i++){                 System.out.print(Math.min(l[i],r[i])+"" "");             }             System.out.println();         }     } } ",0
296,"import java.io.*; import java.util.*;   public class Codeforces { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(br.readLine()); String[] str = br.readLine().split("" ""); int[] a = new int[n]; int k = 0; ArrayList<Integer> pos = new ArrayList<>(); for(int i=0; i<n; i++) { a[i] = Integer.parseInt(str[i]); if(a[i] == 1) { k++; pos.add(i); } } int[][] dp = new int[n+1][k+1]; for(int i=0; i<=n; i++) { Arrays.fill(dp[i], Integer.MAX_VALUE); } dp[0][0] = 0; for(int i=0; i<n; i++) { for(int j=0; j<=k; j++) { if(dp[i][j] == Integer.MAX_VALUE) { continue; } dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]); if(j < k && a[i] == 0) { dp[i+1][j+1] = Math.min(dp[i+1][j+1], dp[i][j]+Math.abs(pos.get(j)-i)); } } } System.out.println(dp[n][k]); } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
297,"import java.io.*; import java.util.*;   public class Codeforces { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(br.readLine()); String[] str = br.readLine().split("" ""); int[] a = new int[n]; int k = 0; ArrayList<Integer> pos = new ArrayList<>(); for(int i=0; i<n; i++) { a[i] = Integer.parseInt(str[i]); if(a[i] == 1) { k++; pos.add(i); } } int[][] dp = new int[n+1][k+1]; for(int i=0; i<=n; i++) { Arrays.fill(dp[i], Integer.MAX_VALUE); } dp[0][0] = 0; for(int i=0; i<n; i++) { for(int j=0; j<=k; j++) { if(dp[i][j] == Integer.MAX_VALUE) { continue; } dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]); if(j < k && a[i] == 0) { dp[i+1][j+1] = Math.min(dp[i+1][j+1], dp[i][j]+Math.abs(pos.get(j)-i)); } } } System.out.println(dp[n][k]); } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.util.StringTokenizer; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class Main {   public static void main(String[] args) {     InputStream inputStream = System.in;     OutputStream outputStream = System.out;     FastScanner in = new FastScanner(inputStream);     PrintWriter out = new PrintWriter(outputStream);     DArmchairs solver = new DArmchairs();     solver.solve(1, in, out);     out.close();   }   static class DArmchairs {     public void solve(int testNumber, FastScanner in, PrintWriter out) {       int n = in.nextInt();       int[] a = in.nextIntArray(n);       int[] pos = new int[n];       int ptr = 0;       for (int i = 0; i < n; ++i) {         if (a[i] == 1) {           pos[ptr++] = i;         }       }       pos = Arrays.copyOf(pos, ptr);       int[][] dp = new int[n + 1][ptr + 1];       ArrayUtils.fill(dp, Integer.MAX_VALUE);       dp[0][0] = 0;       for (int i = 0; i < n; ++i) {         for (int j = 0; j <= ptr; ++j) {           if (dp[i][j] == Integer.MAX_VALUE) continue;           dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);           if (j < ptr && a[i] == 0) {             dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i][j] + Math.abs(pos[j] - i));           }         }       }       out.println(dp[n][ptr]);     }   }   static class ArrayUtils {     public static void fill(int[][] array, int value) {       for (int[] row : array) {         Arrays.fill(row, value);       }     }   }    } ",1
298,"import java.io.*; import java.util.*;   public class Codeforces { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(br.readLine()); String[] str = br.readLine().split("" ""); int[] a = new int[n]; int k = 0; ArrayList<Integer> pos = new ArrayList<>(); for(int i=0; i<n; i++) { a[i] = Integer.parseInt(str[i]); if(a[i] == 1) { k++; pos.add(i); } } int[][] dp = new int[n+1][k+1]; for(int i=0; i<=n; i++) { Arrays.fill(dp[i], Integer.MAX_VALUE); } dp[0][0] = 0; for(int i=0; i<n; i++) { for(int j=0; j<=k; j++) { if(dp[i][j] == Integer.MAX_VALUE) { continue; } dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]); if(j < k && a[i] == 0) { dp[i+1][j+1] = Math.min(dp[i+1][j+1], dp[i][j]+Math.abs(pos.get(j)-i)); } } } System.out.println(dp[n][k]); } } ","import java.util.*; import java.io.*; public class CF_1525_D{ public static void main(String[] args) throws Exception{ BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out)); StringBuilder sb = new StringBuilder(); StringTokenizer st; int n = Integer.parseInt(br.readLine()); int a[] = new int[n]; ArrayList<Integer> pos = new ArrayList<Integer>(); st = new StringTokenizer(br.readLine()); for(int i=0;i<n;i++){ a[i] = Integer.parseInt(st.nextToken()); if(a[i]==1) pos.add(i); } int z = pos.size(); int dp[][] = new int[n+1][z+1]; for(int i=0;i<=n;i++) Arrays.fill(dp[i], Integer.MAX_VALUE); dp[0][0] = 0; for(int i=0;i<n;i++){ for(int j=0;j<=z;j++){ if(dp[i][j] == Integer.MAX_VALUE) continue; dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]); if(j<z && a[i]==0) dp[i+1][j+1] = Math.min(dp[i+1][j+1], dp[i][j]+Math.abs(pos.get(j)-i)); } } pw.print(dp[n][z]); pw.flush(); pw.close(); } } ",1
299,"import java.io.*; import java.util.*;   public class Codeforces { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(br.readLine()); String[] str = br.readLine().split("" ""); int[] a = new int[n]; int k = 0; ArrayList<Integer> pos = new ArrayList<>(); for(int i=0; i<n; i++) { a[i] = Integer.parseInt(str[i]); if(a[i] == 1) { k++; pos.add(i); } } int[][] dp = new int[n+1][k+1]; for(int i=0; i<=n; i++) { Arrays.fill(dp[i], Integer.MAX_VALUE); } dp[0][0] = 0; for(int i=0; i<n; i++) { for(int j=0; j<=k; j++) { if(dp[i][j] == Integer.MAX_VALUE) { continue; } dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]); if(j < k && a[i] == 0) { dp[i+1][j+1] = Math.min(dp[i+1][j+1], dp[i][j]+Math.abs(pos.get(j)-i)); } } } System.out.println(dp[n][k]); } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int n=sc.nextInt(); int[] a=new int[n]; for(int i=0;i<n;i++) a[i]=sc.nextInt(); ArrayList<Integer> pos=new ArrayList<>(n); for(int i=0;i<n;i++) if(a[i]==1) pos.add(i); int k=pos.size(); int[][] dp=new int[n+1][k+1]; for(int i=0;i<n+1;i++) Arrays.fill(dp[i], Integer.MAX_VALUE); dp[0][0]=0; for(int i=0;i<n;i++) for(int j=0;j<=k;j++) { if(dp[i][j]==Integer.MAX_VALUE) continue; dp[i+1][j]=Math.min(dp[i+1][j], dp[i][j]); if(j<k && a[i]==0) dp[i+1][j+1]=Math.min(dp[i+1][j+1], dp[i][j]+Math.abs(pos.get(j)-i)); } System.out.println(dp[n][k]);     } } ",1
300,"import java.io.*; import java.util.*;   public class Contest1615C {          static InputReader r = new InputReader(System.in);     static PrintWriter pw = new PrintWriter(System.out);     static long mod = 1000000007;     public static void main(String[] args)     {     int t = r.nextInt();          while (t > 0)     {     t--;     int n = r.nextInt();     String a = r.next();     String b = r.next();     int sum1 = 0; int sum2 = 0;     for (int i = 0; i < n; i ++)     {     sum1 += (a.charAt(i) == '1'?1:0);     sum2 += (b.charAt(i) == '1'?1:0);     }     if (sum1!=sum2 && sum1+sum2 != n+1)     {     pw.println(-1);     continue;     }     int[][] count = new int[2][2];     for (int i = 0; i < n; i ++)     {     count[(int)a.charAt(i)-(int)'0'][(int)b.charAt(i)-(int)'0']++;     }     int min = 10000000;     if (count[0][1] == count[1][0])     {     min = Math.min(min, count[0][1]*2);     }     if (count[1][1] == count[0][0] + 1)     {     min = Math.min(min, count[1][1] + count[0][0]);     }     pw.println(min == 10000000 ? -1:min);     }         pw.close();     } } ","import java.io.*; import java.util.*;    public class A{ static FastReader sc=null; public static void main(String[] args) { sc=new FastReader(); int t=sc.nextInt(); for(int tt=0;tt<t;tt++) { int n=sc.nextInt(); char a[]=sc.next().toCharArray(),b[]=sc.next().toCharArray(); int fa=0,fb=0,da=0,db=0,sum=0; boolean dif=false; for(int i=0;i<n;i++) { sum+=a[i]-'0'; if(a[i]!=b[i]) { dif=true; if(a[i]=='1')fa++; else fb++; } else { if(a[i]=='1')da++; else db++; } } if(sum==0) { System.out.println(dif?-1:0); continue; } int ans=n+1; if(fa==fb) ans=(fa+fb); if(da==db+1) ans=Math.min(da+db, ans); System.out.println(ans==(n+1)?-1:ans); } } } ",0
301,"import java.io.*; import java.util.*;   public class Contest1627C {          static InputReader r = new InputReader(System.in);     static PrintWriter pw = new PrintWriter(System.out);     static long mod = 1000000007; static ArrayList<Integer>[] adj; static ArrayList<Integer>[] num; static int[] ans;     public static void main(String[] args)     {     int t = r.nextInt();     while (t > 0)     {     t--;     int n = r.nextInt();     adj = new ArrayList[n];     num = new ArrayList[n];     for (int i = 0; i < n; i ++)     {     adj[i] = new ArrayList<Integer>();     num[i] = new ArrayList<Integer>();     }     int[] deg = new int[n];     boolean flag = false;     for (int i = 0; i < n - 1; i ++)     {     int a = r.nextInt()-1;     int b = r.nextInt()-1;     adj[a].add(b);     adj[b].add(a);     num[a].add(i);     num[b].add(i);     deg[a] ++;     deg[b] ++;     if (deg[a] > 2 || deg[b] > 2)     {     flag = true;     }     }     if (flag)     {     pw.println(-1);     continue;     }     ans = new int[n];     for (int i = 0; i < n; i ++)     {     if (deg[i] == 1)     {     dfs(i,3,-1);     }     }     for (int i = 0; i < n - 1; i ++)     {     pw.println(ans[i]);     }     }         pw.close();     }     static void dfs(int node, int x, int p)     {     for (int j = 0; j < adj[node].size(); j ++)     {     int i = adj[node].get(j);     if (i == p)     {     continue;     }     ans[num[node].get(j)] = x;     dfs(i,5-x,node);     }     } } ","import java.io.*; import java.util.*; public class Solution{          public static class Edge     {         int index; int u, v;         Edge(int u, int v, int index)         {             this.index=index;             this.u = u;             this.v = v;         }              } public static void main (String[] args) throws Exception  { BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); StringBuilder sb=new StringBuilder(); int t=Integer.parseInt(br.readLine()); while(t-->0) {     int n=Integer.parseInt(br.readLine());     ArrayList<Edge> graph[] = new ArrayList[n];     for(int i=0; i<n; i++) graph[i] = new ArrayList<>();          for(int i=0; i<n-1; i++)     {         StringTokenizer st=new StringTokenizer(br.readLine());         int u = Integer.parseInt(st.nextToken());         int v = Integer.parseInt(st.nextToken());                  u--; v--;         graph[u].add(new Edge(u,v,i));         graph[v].add(new Edge(v,u,i));     }          int start_i = 0;     boolean poss = true;     for(int i =0; i<n; i++)     {         if(graph[i].size()>2)          {             poss = false;         }         else if(graph[i].size() == 1) start_i = i;     }          if(!poss)      {         sb.append(""-1\n"");         continue;     }          int wts[] = new int[n-1];          ArrayList<Edge> edges = new ArrayList<>();          Edge first = graph[start_i].get(0);     wts[first.index] = 2;          edges = graph[first.v];          while(edges.size()>1)     {                  Edge firste = edges.get(0);         Edge sece = edges.get(1);         if(wts[firste.index] != 0 )          {             wts[sece.index] = 5 - wts[firste.index];             edges = graph[sece.v];         }         else          {             wts[firste.index] = 5 - wts[sece.index];             edges = graph[firste.v];         }     }          for(int i=0; i<n-1; i++)         sb.append(wts[i]+"" "");         sb.append(""\n"");           } System.out.println(sb); } } ",0
302,"import java.io.*; import java.util.*;   public class Contest1627C {          static InputReader r = new InputReader(System.in);     static PrintWriter pw = new PrintWriter(System.out);     static long mod = 1000000007; static ArrayList<Integer>[] adj; static ArrayList<Integer>[] num; static int[] ans;     public static void main(String[] args)     {     int t = r.nextInt();     while (t > 0)     {     t--;     int n = r.nextInt();     adj = new ArrayList[n];     num = new ArrayList[n];     for (int i = 0; i < n; i ++)     {     adj[i] = new ArrayList<Integer>();     num[i] = new ArrayList<Integer>();     }     int[] deg = new int[n];     boolean flag = false;     for (int i = 0; i < n - 1; i ++)     {     int a = r.nextInt()-1;     int b = r.nextInt()-1;     adj[a].add(b);     adj[b].add(a);     num[a].add(i);     num[b].add(i);     deg[a] ++;     deg[b] ++;     if (deg[a] > 2 || deg[b] > 2)     {     flag = true;     }     }     if (flag)     {     pw.println(-1);     continue;     }     ans = new int[n];     for (int i = 0; i < n; i ++)     {     if (deg[i] == 1)     {     dfs(i,3,-1);     }     }     for (int i = 0; i < n - 1; i ++)     {     pw.println(ans[i]);     }     }         pw.close();     }     static void dfs(int node, int x, int p)     {     for (int j = 0; j < adj[node].size(); j ++)     {     int i = adj[node].get(j);     if (i == p)     {     continue;     }     ans[num[node].get(j)] = x;     dfs(i,5-x,node);     }     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef{     public static class Edge{         int node;         int index;         Edge(int node, int index){             this.node = node;             this.index = index;         }     }     static Scanner scn = new Scanner(System.in); public static void main (String[] args) throws java.lang.Exception{ int t = scn.nextInt(); while(t-->0){     solve(); } } public static void solve(){     int n = scn.nextInt();     ArrayList<Edge>[]graph = new ArrayList[n];     for(int i = 0; i < n; i++){         graph[i] = new ArrayList<>();     }     for(int i = 0; i < n - 1; i++){         int u = scn.nextInt() - 1;         int v = scn.nextInt() - 1;         graph[u].add(new Edge(v, i));         graph[v].add(new Edge(u, i));     }     int start = 0;     for(int i = 0; i < n; i++){         if(graph[i].size() > 2){             System.out.println(""-1"");             return;         }else if(graph[i].size() == 1){             start = i;         }     }     int[]weight = new int[n - 1];     int prevNode = -1, curNode = start, curWeight = 2;     while(true){         ArrayList<Edge>edges = graph[curNode];         Edge next = edges.get(0);         if(next.node == prevNode){             if(edges.size() == 1){                 break;             }else{                 next = edges.get(1);             }         }         weight[next.index] = curWeight;         prevNode = curNode;         curNode = next.node;         curWeight = 5 - curWeight;     }     for(int i = 0; i < n - 1; i++){         System.out.print(weight[i]);         System.out.print("" "");     }     System.out.println(); } } ",0
303,"import java.io.*; import java.util.*;   public class D  { static ArrayList<Integer> g[]; static int[] vis,dist; public static void main(String[] args) throws IOException { FastReader f=new FastReader(); StringBuffer sb=new StringBuffer(); int test=f.nextInt(); while(test-->0) { int n=f.nextInt(); g=new ArrayList[n+1]; vis=new int[n+1]; dist=new int[n+1]; int a=f.nextInt(); int b=f.nextInt(); int da=f.nextInt(); int db=f.nextInt(); for(int i=0;i<=n;i++) g[i]=new ArrayList<>(); for(int i=1;i<n;i++) { int x=f.nextInt(); int y=f.nextInt(); g[x].add(y); g[y].add(x); } dfs(a,0); if(-dist[a]+dist[b] <= da) { sb.append(""Alice\n""); continue; } int nr=1,mx=0; for(int i=1;i<=n;i++) { if(dist[i]>mx) { mx=dist[i]; nr=i; } } vis=new int[n+1]; dist=new int[n+1]; dfs(nr,0); int dm=0; for(int i : dist) dm=Math.max(dm,i); dm--; if(dm<= 2*da) { sb.append(""Alice\n""); continue; } if(db>2*da) { sb.append(""Bob\n""); continue; } else { sb.append(""Alice\n""); continue; } } System.out.println(sb); } static void dfs(int n,int par)  { dist[n]=dist[par]+1; vis[n] = 1; for (int child : g[n]) { if (vis[child] == 0) dfs(child,n); } }   } ","import java.io.BufferedReader; import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class D {    private static final String INPUT_FILE_PATH = """";    int n, a, b, da, db;    ArrayList<Integer>[] adj;    int[] depth;    boolean[] visited;    int diameter;    int dfs(int u, int parent, int currDepth) {       visited[u] = true;       depth[u] = currDepth;       ArrayList<Integer> childDepths = new ArrayList();       for (int v : adj[u]) {          if (v != parent && !visited[v]) {             int childDepth = dfs(v, u, currDepth + 1);             childDepths.add(childDepth);          }       }       Collections.sort(childDepths);              int n = childDepths.size();       if (n >= 2) {          int d1 = childDepths.get(n - 1) - currDepth;          int d2 = childDepths.get(n - 2) - currDepth;          diameter = Math.max(diameter, d1 + d2);       } else if (n == 1) {          diameter = Math.max(diameter, childDepths.get(n - 1) - currDepth);       } else {          diameter = Math.max(diameter, 1);       }       return childDepths.isEmpty() ? currDepth : childDepths.get(n - 1);    }    void solve() {       int t = in.nextInt();       while (t-- > 0) {          n = in.nextInt();          a = in.nextInt();          b = in.nextInt();          da = in.nextInt();          db = in.nextInt();          adj = new ArrayList[n + 1];          for (int i = 1; i <= n; i++) adj[i] = new ArrayList();          for (int i = 0; i < n - 1; i++) {             int u = in.nextInt(), v = in.nextInt();             adj[u].add(v);             adj[v].add(u);          }          depth = new int[n + 1];          visited = new boolean[n + 1];          diameter = 0;          dfs(a, -1, 0);          if (depth[b] <= da             || 2 * da >= db             || 2 * da >= diameter) {             out.println(""Alice"");          } else {             out.println(""Bob"");          }       }    }    private final InputReader in;    private final PrintWriter out;    private D(InputReader in, PrintWriter out) {       this.in = in;       this.out = out;    }        public static void main(String[] args) throws Exception {       InputStream inputStream = INPUT_FILE_PATH.isEmpty()          ? System.in          : new FileInputStream(new File(INPUT_FILE_PATH));       OutputStream outputStream = System.out;       InputReader inputReader = new InputReader(inputStream);       PrintWriter printWriter = new PrintWriter(outputStream);       new D(inputReader, printWriter).solve();       printWriter.close();    } } ",0
304,"import java.io.*; import java.util.*;   public class D  { static long mod=998244353; static long[] facts, factInvs; public static void main(String[] args)throws IOException  { FastReader f=new FastReader(); StringBuffer sb = new StringBuffer(); int n=f.nextInt(); int k=f.nextInt(); Time time[]=new Time[n]; for(int i=0;i<n;i++) { int x=f.nextInt(); int y=f.nextInt(); time[i]=new Time(x,y); } Arrays.sort(time); precomp(); int curr=0; long ans=0; Queue<Integer> pq=new PriorityQueue<>(); for(int i=0;i<n;i++) { int x=time[i].x; pq.add(time[i].y); curr++; while(!pq.isEmpty() && pq.peek()<x) { pq.poll(); curr--; } if(curr<k) continue; else { long add=getNcR(curr-1,k-1)%mod; ans=(ans%mod + add)%mod; } } System.out.println(ans); } static void precomp()  { facts=new long[1000000]; factInvs=new long[1000000]; factInvs[0]=facts[0]=1; for (int i=1; i<facts.length; i++) facts[i]=mul(facts[i-1], i); factInvs[facts.length-1]=modInv(facts[facts.length-1]); for (int i=facts.length-2; i>=0; i--) factInvs[i]=mul(factInvs[i+1], i+1); } static long getNcR(int n, int k) { return mul(facts[n], mul(factInvs[k], factInvs[n-k])); } static long mul(long a, long b) { return a*b%mod; } static long modInv(long x) { return exp(x, mod-2); } static long exp(long base, long e)  { if (e==0)  return 1; long half=exp(base, e/2); if (e%2==0)  return mul(half, half); else return mul(half, mul(half, base)); } static class Time implements Comparable<Time> { int x,y; Time(int x,int y) { this.x=x; this.y=y; } }   } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; public class D { static final int mod=998244353; static long[] facts, factInvs; public static void main(String[] args) { precomp(); FastScanner fs=new FastScanner(); int n=fs.nextInt(), k=fs.nextInt(); Seg[] segs=new Seg[n]; for (int i=0; i<n; i++) segs[i]=new Seg(fs.nextInt(), fs.nextInt()); Event[] events=new Event[n*2]; for (int i=0; i<n; i++) { events[2*i]=new Event(segs[i], true); events[2*i+1]=new Event(segs[i], false); } long ans=0; Arrays.sort(events); int counter=0; for (Event e:events) { if (e.start) { counter++; } else { counter--; if (counter+1<k) continue; else ans=add(ans, nCk(counter, k-1)); } } System.out.println(ans); } static final Random random=new Random(); static long add(long a, long b) { return (a+b)%mod; } static long mul(long a, long b) { return a*b%mod; } static long exp(long base, long e) { if (e==0) return 1; long half=exp(base, e/2); if (e%2==0) return mul(half, half); return mul(half, mul(half, base)); } static long modInv(long x) { return exp(x, mod-2); } static void precomp() { facts=new long[1_000_000]; factInvs=new long[1_000_000]; factInvs[0]=facts[0]=1; for (int i=1; i<facts.length; i++) facts[i]=mul(facts[i-1], i); factInvs[facts.length-1]=modInv(facts[facts.length-1]); for (int i=facts.length-2; i>=0; i--) factInvs[i]=mul(factInvs[i+1], i+1); } static long nCk(int n, int k) { return mul(facts[n], mul(factInvs[k], factInvs[n-k])); } static class Seg { int l, r; public Seg(int l, int r) { this.l=l; this.r=r; } } static class Event implements Comparable<Event> { boolean start; Seg s; public Event(Seg s, boolean start) { this.s=s; this.start=start; } } } ",0
305,"import java.io.*; import java.util.*;   public class MySolution {     public static void main(String[] args) throws Exception {         BufferedReader bu = new BufferedReader(new InputStreamReader(System.in));         StringBuilder out = new StringBuilder();         int numOfTestCases = Integer.parseInt(bu.readLine());         for (int tc = 1; tc <= numOfTestCases; tc++) {             int vertices = Integer.parseInt(bu.readLine());             connections = new ArrayList[vertices];             for (int i = 0; i < vertices; i++) {                 connections[i] = new ArrayList<Integer>();                 String st[] = bu.readLine().split("" "");                 a[i][0] = Integer.parseInt(st[0]);                 a[i][1] = Integer.parseInt(st[1]);                 s[i][0] = s[i][1] = 0;             }             for (int j = 0; j < vertices-1; j++) {                 String st[] = bu.readLine().split("" "");                 int u = Integer.parseInt(st[0]) - 1, v = Integer.parseInt(st[1]) - 1;                 connections[u].add(v);                 connections[v].add(u);             }             dfs(0, -1);             out.append(Math.max(s[0][0], s[0][1]) + ""\n"");         }         System.out.print(out);     }       static int N = 100000;     static int[][] a = new int[N][2];     static long[][] s = new long[N][2];     static ArrayList<Integer>[] connections;       public static void dfs(int n, int parent) {         for (int child : connections[n]) {             if (child != parent) {                 dfs(child, n);                 s[n][0] += Math.max(s[child][0] + Math.abs(a[n][0] - a[child][0]), s[child][1] + Math.abs(a[n][0] - a[child][1]));                 s[n][1] += Math.max(s[child][0] + Math.abs(a[n][1] - a[child][0]), s[child][1] + Math.abs(a[n][1] - a[child][1]));             }         }     } } ","import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int t=Integer.parseInt(bu.readLine());         while(t-->0)         {             int n=Integer.parseInt(bu.readLine());             g=new ArrayList[n];             int i;             for(i=0;i<n;i++)             {                 g[i]=new ArrayList<>();                 String st[]=bu.readLine().split("" "");                 a[i][0]=Integer.parseInt(st[0]); a[i][1]=Integer.parseInt(st[1]);                 s[i][0]=s[i][1]=0;             }             for(i=0;i<n-1;i++)             {                 String st[]=bu.readLine().split("" "");                 int u=Integer.parseInt(st[0])-1,v=Integer.parseInt(st[1])-1;                 g[u].add(v); g[v].add(u);             }             dfs(0,-1);             sb.append(Math.max(s[0][0],s[0][1])+""\n"");         }         System.out.print(sb);     }     static ArrayList<Integer> g[];     static int N=100000,a[][]=new int[N][2];     static long s[][]=new long[N][2];     static void dfs(int n,int p)     {         for(int x:g[n])         if(x!=p)         {             dfs(x,n);             s[n][0]+=Math.max(s[x][0]+Math.abs(a[x][0]-a[n][0]),s[x][1]+Math.abs(a[x][1]-a[n][0]));             s[n][1]+=Math.max(s[x][0]+Math.abs(a[x][0]-a[n][1]),s[x][1]+Math.abs(a[x][1]-a[n][1]));         }     } } ",1
306,"import java.io.*; import java.util.*;   public class MySolution {     public static void main(String[] args) throws Exception {         BufferedReader bu = new BufferedReader(new InputStreamReader(System.in));         StringBuilder out = new StringBuilder();         int numOfTestCases = Integer.parseInt(bu.readLine());         for (int tc = 1; tc <= numOfTestCases; tc++) {             int vertices = Integer.parseInt(bu.readLine());             connections = new ArrayList[vertices];             for (int i = 0; i < vertices; i++) {                 connections[i] = new ArrayList<Integer>();                 String st[] = bu.readLine().split("" "");                 a[i][0] = Integer.parseInt(st[0]);                 a[i][1] = Integer.parseInt(st[1]);                 s[i][0] = s[i][1] = 0;             }             for (int j = 0; j < vertices-1; j++) {                 String st[] = bu.readLine().split("" "");                 int u = Integer.parseInt(st[0]) - 1, v = Integer.parseInt(st[1]) - 1;                 connections[u].add(v);                 connections[v].add(u);             }             dfs(0, -1);             out.append(Math.max(s[0][0], s[0][1]) + ""\n"");         }         System.out.print(out);     }       static int N = 100000;     static int[][] a = new int[N][2];     static long[][] s = new long[N][2];     static ArrayList<Integer>[] connections;       public static void dfs(int n, int parent) {         for (int child : connections[n]) {             if (child != parent) {                 dfs(child, n);                 s[n][0] += Math.max(s[child][0] + Math.abs(a[n][0] - a[child][0]), s[child][1] + Math.abs(a[n][0] - a[child][1]));                 s[n][1] += Math.max(s[child][0] + Math.abs(a[n][1] - a[child][0]), s[child][1] + Math.abs(a[n][1] - a[child][1]));             }         }     } } ","import java.util.*; import java.io.*; public class C{ private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));     private static int vertices;     private static LinkedList<Integer> adj[];     private static long dp[][];     private static int l[];     private static int r[];     private static boolean vis[];     public static void dfs(int v) {         if(vis[v])             return;         vis[v] = true;         Iterator<Integer> iterator = adj[v].listIterator();         while(iterator.hasNext()) {             int child = iterator.next();             if(!vis[child]) {                 dfs(child);                 long left = dp[child][0] + Math.abs(l[v] - l[child]);                 dp[v][0] += Math.max(left, dp[child][1] + Math.abs(l[v] - r[child]));                 long right = dp[child][0] + Math.abs(r[v] - l[child]);                 dp[v][1] += Math.max(right, dp[child][1] + Math.abs(r[v] - r[child]));             }         }     } public static void main (String[] args) throws IOException {         int t = Integer.parseInt(br.readLine());         while(t-- > 0) {             int n = Integer.parseInt(br.readLine());             vertices = n;             dp = new long[n+1][2];             adj = new LinkedList[n+1];             vis = new boolean[n+1];             l = new int[n+1];             r = new int[n+1];             for(int i=1;i<=n;i++) {                 adj[i] = new LinkedList<>();             }             for(int i=1;i<=n;i++) {                 String lr[] = br.readLine().split("" "");                 l[i] = Integer.parseInt(lr[0]);                 r[i] = Integer.parseInt(lr[1]);             }             for(int i=0;i<n-1;i++) {                 String uv[] = br.readLine().split("" "");                 int u = Integer.parseInt(uv[0]);                 int v = Integer.parseInt(uv[1]);                 adj[u].add(v);                 adj[v].add(u);             }             dfs(1);             long ans = Math.max(dp[1][0], dp[1][1]);             bw.write(ans + ""\n"");         }         bw.flush();     } } ",0
307,"import java.io.*; import java.util.*;   public class MySolution {     public static void main(String[] args) throws Exception {         BufferedReader bu = new BufferedReader(new InputStreamReader(System.in));         StringBuilder out = new StringBuilder();         int numOfTestCases = Integer.parseInt(bu.readLine());         for (int tc = 1; tc <= numOfTestCases; tc++) {             int vertices = Integer.parseInt(bu.readLine());             connections = new ArrayList[vertices];             for (int i = 0; i < vertices; i++) {                 connections[i] = new ArrayList<Integer>();                 String st[] = bu.readLine().split("" "");                 a[i][0] = Integer.parseInt(st[0]);                 a[i][1] = Integer.parseInt(st[1]);                 s[i][0] = s[i][1] = 0;             }             for (int j = 0; j < vertices-1; j++) {                 String st[] = bu.readLine().split("" "");                 int u = Integer.parseInt(st[0]) - 1, v = Integer.parseInt(st[1]) - 1;                 connections[u].add(v);                 connections[v].add(u);             }             dfs(0, -1);             out.append(Math.max(s[0][0], s[0][1]) + ""\n"");         }         System.out.print(out);     }       static int N = 100000;     static int[][] a = new int[N][2];     static long[][] s = new long[N][2];     static ArrayList<Integer>[] connections;       public static void dfs(int n, int parent) {         for (int child : connections[n]) {             if (child != parent) {                 dfs(child, n);                 s[n][0] += Math.max(s[child][0] + Math.abs(a[n][0] - a[child][0]), s[child][1] + Math.abs(a[n][0] - a[child][1]));                 s[n][1] += Math.max(s[child][0] + Math.abs(a[n][1] - a[child][0]), s[child][1] + Math.abs(a[n][1] - a[child][1]));             }         }     } } ","import java.util.*; import java.io.*; public class Solution {     static LinkedList<Integer> graph[];     static long key[][];     static long value[][];     public static void main(String[] args) throws IOException {         Scanner in = new Scanner(System.in);         StringBuffer out=new StringBuffer();         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int t=Integer.parseInt(br.readLine());         String input[];         OUTER:         while(t--!=0) {             int n=Integer.parseInt(br.readLine());             value=new long[n][2];             key=new long[n][2];             for(int i=0; i<n; i++) {                 input= br.readLine().split(""\\s"");                 for(int j=0; j<2; j++) {                     key[i][j] = Integer.parseInt(input[j]);                 }             }             graph=new LinkedList[n];             for(int i=0; i<n; i++)                 graph[i]=new LinkedList();             for(int i=1; i<n; i++) {                 input= br.readLine().split(""\\s"");                 int u=Integer.parseInt(input[0])-1, v=Integer.parseInt(input[1])-1;                 graph[u].add(v);                 graph[v].add(u);             }             int root=-1;             for(int i=0; i<n; i++)                 if(graph[i].size()==1) {                     root=i;                     break;                 }             solve(root, -1);             out.append(Math.max(value[root][0], value[root][1])+""\n"");         }         System.out.print(out);     }     private static void solve(int vertex, int parent) {         for(int child: graph[vertex]) {             if(child!=parent) {                 solve(child, vertex);                 for(int i=0; i<2; i++) {                     long max=Long.MIN_VALUE;                     for(int j=0; j<2; j++) {                         max=Math.max(max, Math.abs(key[vertex][i]-key[child][j])+value[child][j]);                     }                     value[vertex][i]+=max;                 }             }         }     } } ",0
308,"import java.io.*; import java.util.*;  public class Solution {   static long res; public static void main(String[] args) throws Exception     { FastReader fr=new FastReader();         int n=fr.nextInt();         ArrayList<Integer> oc=new ArrayList<>();         ArrayList<Integer> em=new ArrayList<>();         res=Long.MAX_VALUE;         for(int i=0;i<n;i++) {         int v=fr.nextInt();         if(v==1)         oc.add(i);         else         em.add(i);         }         Collections.sort(oc);         Collections.sort(em);         long dp[][]=new long[5001][5001];         for(int i=0;i<dp.length;i++) {         for(int j=0;j<dp[i].length;j++) {         dp[i][j]=-1;         }         }         System.out.println(getMin(oc,em,0,0,dp));                       } public static long getMin(ArrayList<Integer> oc,ArrayList<Integer> em,int idx,int j,long dp[][]) {    if(idx==oc.size())    return 0; long available=em.size()-j; long req=oc.size()-idx; if(available<req) return Integer.MAX_VALUE; if(dp[idx][j]!=-1) return dp[idx][j]; long ch1=getMin(oc,em,idx,j+1,dp); long ch2=getMin(oc,em,idx+1,j+1,dp)+Math.abs(em.get(j)-oc.get(idx)); return dp[idx][j]=Math.min(ch1,ch2); }                                                                                  }          ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.StringTokenizer;   public class taskd {     public static void main(String[] args) {         FastScanner in = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         taskd sol = new taskd();         sol.solve(in, out);         out.flush();     }     void solve(FastScanner in, PrintWriter out) {         int n = in.nextInt();         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for (int i = 0; i < n; i++) {             int x = in.nextInt();             if (x == 1) {                 a.add(i);             } else {                 b.add(i);             }         }         long dp[][] = new long[a.size() + 5][b.size() + 5];         for (int i = a.size()-1; i >= 0; i--) {             dp[i][b.size()] = Integer.MAX_VALUE;             for (int j = b.size()-1; j >= 0; j--) {                 dp[i][j] = dp[i][j + 1];                 dp[i][j] = Math.min(dp[i][j], Math.abs(a.get(i) - b.get(j)) + dp[i + 1][j + 1]);             }         }         out.println(dp[0][0]);     }      } ",0
309,"import java.io.*; import java.util.*;  public class Solution {   static long res; public static void main(String[] args) throws Exception     { FastReader fr=new FastReader();         int n=fr.nextInt();         ArrayList<Integer> oc=new ArrayList<>();         ArrayList<Integer> em=new ArrayList<>();         res=Long.MAX_VALUE;         for(int i=0;i<n;i++) {         int v=fr.nextInt();         if(v==1)         oc.add(i);         else         em.add(i);         }         Collections.sort(oc);         Collections.sort(em);         long dp[][]=new long[5001][5001];         for(int i=0;i<dp.length;i++) {         for(int j=0;j<dp[i].length;j++) {         dp[i][j]=-1;         }         }         System.out.println(getMin(oc,em,0,0,dp));                       } public static long getMin(ArrayList<Integer> oc,ArrayList<Integer> em,int idx,int j,long dp[][]) {    if(idx==oc.size())    return 0; long available=em.size()-j; long req=oc.size()-idx; if(available<req) return Integer.MAX_VALUE; if(dp[idx][j]!=-1) return dp[idx][j]; long ch1=getMin(oc,em,idx,j+1,dp); long ch2=getMin(oc,em,idx+1,j+1,dp)+Math.abs(em.get(j)-oc.get(idx)); return dp[idx][j]=Math.min(ch1,ch2); }                                                                                  }          ","import java.util.*; import java.io.*; public class Main2 { static long mod = 998244353; static FastReader sc = new FastReader(); static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { int t = 1;     z : while(t-->0) {     int n = sc.nextInt();     int a[] = new int[n];     for(int i=0;i<n;i++) a[i] = sc.nextInt();     List<Integer> a1 = new ArrayList<>();     ArrayList<Integer> a2 = new ArrayList<>();     for (int i = 0; i < n; i++) {     if(a[i] == 0) a1.add(i);     else a2.add(i); }     long dp[][] = new long[n+1][n+1];     for (int i = 0; i <= n; i++) {     Arrays.fill(dp[i],-1); }     out.write(find(0,0,a1,a2,dp)+""\n"");     } out.close(); } private static long find(int i, int j, List<Integer> a1, ArrayList<Integer> a2, long[][] dp) { if(j == a2.size()) return 0; int req = a2.size()-j; int ava = a1.size()-i; if(ava<req) return Integer.MAX_VALUE/2; if(dp[i][j] != -1) return dp[i][j]; long ans1 = find(i+1,j,a1,a2,dp); long ans2 = Math.abs(a1.get(i)-a2.get(j)) + find(i+1,j+1,a1,a2,dp); return dp[i][j] = Math.min(ans1, ans2); } } ",1
310,"import java.io.*; import java.util.*;  public class Solution {   static long res; public static void main(String[] args) throws Exception     { FastReader fr=new FastReader();         int n=fr.nextInt();         ArrayList<Integer> oc=new ArrayList<>();         ArrayList<Integer> em=new ArrayList<>();         res=Long.MAX_VALUE;         for(int i=0;i<n;i++) {         int v=fr.nextInt();         if(v==1)         oc.add(i);         else         em.add(i);         }         Collections.sort(oc);         Collections.sort(em);         long dp[][]=new long[5001][5001];         for(int i=0;i<dp.length;i++) {         for(int j=0;j<dp[i].length;j++) {         dp[i][j]=-1;         }         }         System.out.println(getMin(oc,em,0,0,dp));                       } public static long getMin(ArrayList<Integer> oc,ArrayList<Integer> em,int idx,int j,long dp[][]) {    if(idx==oc.size())    return 0; long available=em.size()-j; long req=oc.size()-idx; if(available<req) return Integer.MAX_VALUE; if(dp[idx][j]!=-1) return dp[idx][j]; long ch1=getMin(oc,em,idx,j+1,dp); long ch2=getMin(oc,em,idx+1,j+1,dp)+Math.abs(em.get(j)-oc.get(idx)); return dp[idx][j]=Math.min(ch1,ch2); }                                                                                  }          ","import java.util.*; import java.io.*; public class Solution {          private static boolean[] isPrime;                                                                                     public static void main(String[] args) throws IOException {         FastReader sc = new FastReader();         PrintWriter out = new PrintWriter(System.out);                                                                                          int n = sc.nextInt();         int arr[] = new int[n];         for(int i=0;i<n;i++){             arr[i] = sc.nextInt();         }         out.println(solver(n, arr));                  out.flush();     }     public static long solver(int n, int[] arr) {         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i=0;i<n;i++){             if(arr[i] ==1){                 a.add(i);             }             else{                 b.add(i);             }         }                           long inf = (long)1e10;         int aLen = a.size(), bLen = b.size();         long[][] dp = new long[bLen+1][aLen+1];         for(int i=0;i<bLen+1;i++)Arrays.fill(dp[i],inf);                  for(int i=0;i<=bLen;i++){             dp[i][0] = 0;         }         for(int i=1;i<=bLen;i++){             for(int j=1;j<=i && j<=aLen;j++){                 int aa = a.get(j-1);                 int bb = b.get(i-1);                                  dp[i][j] = Math.min(                     Math.abs(aa-bb)+dp[i-1][j-1],                     dp[i-1][j]                 );                              }         }                                                               return dp[bLen][aLen]==inf?0:dp[bLen][aLen];     } } ",0
311,"import java.io.*; import java.util.*;  public class Solution{     public static void main (String[] args) throws java.lang.Exception {         FastReader sc = new FastReader();         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));         int testCase = sc.nextInt();         while (testCase-->0){             int n = sc.nextInt();             String[] strArr = new String[n];             for(int i=0; i<n; i++) {                 strArr[i]=sc.nextLine();             }             int[] total = new int[5];             ArrayList<int[]> al = new ArrayList<>();             for(int i=0; i<n; i++){                 int[] arr= new int[5];                 for(int j=0; j<strArr[i].length(); j++){                     arr[strArr[i].charAt(j)-'a']++;                 }                 for(int j=0; j<5; j++){                     total[j]+=arr[j];                 }                 al.add(arr);             }             int ans=0;             for(int i=0; i<5; i++){                 ArrayList<Integer> all = new ArrayList<>();                 for(int j=0; j<n; j++){                     all.add(strArr[j].length()-2*al.get(j)[i]);                 }                 java.util.Collections.sort(all);                 int c=0, d=0;                 for(int j=0; j<n; j++){                     c+=all.get(j);                     if(c<0) d=j+1;                 }                 ans = Math.max(ans,d);             }             System.out.println(ans);         }     }           } ","import java.io.*; import java.sql.Array; import java.util.*; public class P1551C {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Task solver = new Task();         solver.solve(in, out);         out.close();     }     static class Task {         public void solve(InputReader in, PrintWriter out) {             int t = in.nextInt();             while (t-- > 0) {                 int n = in.nextInt();                 String[] s = new String[n];                 int[][] freq = new int[n][6];                 for (int i = 0; i < n; i++) {                     s[i] = in.nextLine();                     for (char c : s[i].toCharArray()) {                         freq[i][c - 'a']++;                         freq[i][5]++;                     }                 }                 int totmax = 0;                 for (int i = 0; i < 5; i++) {                     List<Integer> diffs = new ArrayList<>(n);                     for (int j = 0; j < n; j++) {                         diffs.add(2 * freq[j][i] - freq[j][5]);                     }                     Collections.sort(diffs);                     Collections.reverse(diffs);                     int curr = 0, cnt = 0;                     while (cnt < diffs.size() && curr + diffs.get(cnt) > 0) {                         curr += diffs.get(cnt++);                     }                     totmax = Math.max(totmax, cnt);                 }                 out.println(totmax);             }         }     }      } ",0
312,"import java.io.*; import java.util.*;  public class Solution{     public static void main (String[] args) throws java.lang.Exception {         FastReader sc = new FastReader();         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));         int testCase = sc.nextInt();         while (testCase-->0){             int n = sc.nextInt();             String[] strArr = new String[n];             for(int i=0; i<n; i++) {                 strArr[i]=sc.nextLine();             }             int[] total = new int[5];             ArrayList<int[]> al = new ArrayList<>();             for(int i=0; i<n; i++){                 int[] arr= new int[5];                 for(int j=0; j<strArr[i].length(); j++){                     arr[strArr[i].charAt(j)-'a']++;                 }                 for(int j=0; j<5; j++){                     total[j]+=arr[j];                 }                 al.add(arr);             }             int ans=0;             for(int i=0; i<5; i++){                 ArrayList<Integer> all = new ArrayList<>();                 for(int j=0; j<n; j++){                     all.add(strArr[j].length()-2*al.get(j)[i]);                 }                 java.util.Collections.sort(all);                 int c=0, d=0;                 for(int j=0; j<n; j++){                     c+=all.get(j);                     if(c<0) d=j+1;                 }                 ans = Math.max(ans,d);             }             System.out.println(ans);         }     }           } ","import java.io.BufferedReader; import java.io.IOException; import java.io.*; import java.util.*; import javax.management.Query; public class Test{     public static void main(String[] args) throws IOException, InterruptedException{       Scanner sc = new Scanner(System.in);      int t = sc.nextInt();           while(t-->0){       int n = sc.nextInt();       String [] words = new String[n];             for(int i =0;i<n;i++){         words[i] = sc.nextLine();               }       int maxRes =0;       for(int i =0;i<5;i++){       int maxChar = 'a' +i;              PriorityQueue<Pair> pq = new PriorityQueue<>();       for (String word : words){           pq.add(new Pair(word,occOfMaxChar(word, maxChar)-occOfOtherChar(word, maxChar)));       }       int res = 0;       int curr = 0;       int maxCharCount = 0;       int otherCharCount =0;       while(!pq.isEmpty()){         String word = pq.poll().x;         maxCharCount +=occOfMaxChar(word, maxChar);          otherCharCount += occOfOtherChar(word, maxChar);          curr ++;          if(maxCharCount >otherCharCount){            res = curr;          }                  }       maxRes = Math.max(maxRes, res);     }     System.out.println(maxRes);}       }   public static int occOfMaxChar (String s, int maxChar){      int occ = 0;      for(int i =0 ;i<s.length();i++){        if(s.charAt(i)==maxChar){          occ++;        }       }       return occ;   }   public static int occOfOtherChar (String s, int maxChar){     int occ = 0;     for(int i =0 ;i<s.length();i++){       if(s.charAt(i)!=maxChar){         occ++;       }      }      return occ;  }     static int w;     static int n;     static long [][] memo;     static int [] depth ;     static long[] values;     static ArrayList<Pair> gold ;          static class Pair implements Comparable {       String x;       int y;       public Pair (String x, int y) {         this.x = x;         this.y = y;       }            }           } ",0
313,"import java.io.*; import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.util.Collections; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.*; public class Main1 {      static ArrayList<Integer> list1 = new ArrayList<>() ;      static ArrayList<Integer> list2 = new ArrayList<>() ;      static int n , m ;      static long dp[][] ;      static long solver(int i , int j ){                    if (j == m)return 0 ;          int tt1 = n-i ;          int tt2 = m-j ;          if (n-i < m-j)return  Long.MAX_VALUE/2  ;          if ( dp[i][j] != -1 )return dp[i][j] ;         long a = solver(i+1 , j) ;         long b = abs( list1.get(i) - list2.get(j)) + solver(i+1 , j+1) ;         return dp[i][j] = min(a , b) ;      }     public static void main(String[] args) throws IOException {             FastScanner in = new FastScanner();             PrintWriter out = new PrintWriter(System.out);             int N = in.nextInt() ;             int a[] = in.readArray(N) ;         for (int i = 0; i <N ; i++) {             if (a[i] == 1)list2.add(i) ;             else list1.add(i) ;         }          n = list1.size() ;          m = list2.size() ;             dp = new long[n][m] ;             for(int i=0 ; i<n ; i++)                 for(int j=0 ; j<m ; j++)                     dp[i][j] = -1 ;               System.out.println(solver(0 , 0 ));             out.flush();             out.close();     }          static ArrayList<Integer> list = new ArrayList<>();     static boolean A[] = new boolean[2 * 90000001];                                                             } ","import java.io.*; import java.util.*;   public class A{     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Task solver = new Task();         solver.solve(in, out);         out.close();     }          static class Task{         double eps= 0.00000001;         static final int MAXN = 10000001;                           static int spf[] = new int[MAXN];          Map<Integer,Set<Integer>> dp= new HashMap<>();                                                                                                                                                                      ArrayList<Integer>A = new ArrayList<>();         ArrayList<Integer>B = new ArrayList<>();         ArrayList<List<Integer>> L = new ArrayList<List<Integer>>();         public void solve(InputReader in, PrintWriter out) {                        int n= in.nextInt();             int[] A= new int[n];             final int INF= 1000000000;             List<Integer> pos= new ArrayList<>();             for (int i = 0; i < n; i++){                 A[i]= in.nextInt();                 if (A[i] == 1) pos.add(i);             }             int cnt = pos.size();             int[][] dp= new int[cnt][n+1];             for(int[] temp: dp) Arrays.fill(temp,INF);             if (cnt == 0){                 out.println(0);                 return;             }             for (int i = n - 1; i >= 0; i--){                 dp[cnt - 1][i] = dp[cnt - 1][i + 1];                 if (A[i] != 1){                     dp[cnt - 1][i] = Math.min(dp[cnt - 1][i], Math.abs(i - pos.get(pos.size()-1)));                 }             }             for (int i = cnt - 2; i >= 0; i--){                 for (int j = n - 1; j >= 0; j--){                     dp[i][j] = dp[i][j + 1];                     if (A[j] != 1){                         dp[i][j] = Math.min(dp[i][j], Math.abs(j - pos.get(i)) + dp[i + 1][j + 1]);                     }                 }             }             out.println(dp[0][0]);         }                       }                     } ",0
314,"import java.io.*; import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.util.Collections; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.*; public class Main1 {      static ArrayList<Integer> list1 = new ArrayList<>() ;      static ArrayList<Integer> list2 = new ArrayList<>() ;      static int n , m ;      static long dp[][] ;      static long solver(int i , int j ){                    if (j == m)return 0 ;          int tt1 = n-i ;          int tt2 = m-j ;          if (n-i < m-j)return  Long.MAX_VALUE/2  ;          if ( dp[i][j] != -1 )return dp[i][j] ;         long a = solver(i+1 , j) ;         long b = abs( list1.get(i) - list2.get(j)) + solver(i+1 , j+1) ;         return dp[i][j] = min(a , b) ;      }     public static void main(String[] args) throws IOException {             FastScanner in = new FastScanner();             PrintWriter out = new PrintWriter(System.out);             int N = in.nextInt() ;             int a[] = in.readArray(N) ;         for (int i = 0; i <N ; i++) {             if (a[i] == 1)list2.add(i) ;             else list1.add(i) ;         }          n = list1.size() ;          m = list2.size() ;             dp = new long[n][m] ;             for(int i=0 ; i<n ; i++)                 for(int j=0 ; j<m ; j++)                     dp[i][j] = -1 ;               System.out.println(solver(0 , 0 ));             out.flush();             out.close();     }          static ArrayList<Integer> list = new ArrayList<>();     static boolean A[] = new boolean[2 * 90000001];                                                             } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class P4 { static int dp[][]=new int[5000+1][5000+1]; public static void main(String[] args) { FastReader sc=new FastReader(); int t=1; StringBuilder s=new StringBuilder(); while(t--!=0) { int n=sc.nextInt(); int a[]=new int[n]; for(int i=0;i<=n;i++) { for(int j=0;j<=n;j++) { P4.dp[i][j]=-1; } } ArrayList<Integer> one=new ArrayList<>(); ArrayList<Integer> zero=new ArrayList<>(); for(int i=0;i<n;i++) { a[i]=sc.nextInt(); if(a[i]==0) { zero.add(i); }else { one.add(i); } } Collections.sort(zero); Collections.sort(one); long ans=sol(0,0,zero.size(),one.size(),a,zero,one); System.out.println(ans); } } private static long sol(int i, int j, int n, int m,int a[], ArrayList<Integer> zero, ArrayList<Integer> one) { if(j==m) { return 0; } int av=n-i; int rem=m-j; if(av<rem) { return Integer.MAX_VALUE-1; } if(dp[i][j]!=-1) { return dp[i][j]; } long ans1=sol(i+1,j,n,m,a, zero, one); long ans2=Math.abs(zero.get(i)-one.get(j))+sol(i+1,j+1,n,m,a, zero, one); dp[i][j]=(int) Math.min(ans1, ans2); return dp[i][j]; }   } ",1
315,"import java.io.*; import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.util.Collections; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.*; public class Main1 {      static ArrayList<Integer> list1 = new ArrayList<>() ;      static ArrayList<Integer> list2 = new ArrayList<>() ;      static int n , m ;      static long dp[][] ;      static long solver(int i , int j ){                    if (j == m)return 0 ;          int tt1 = n-i ;          int tt2 = m-j ;          if (n-i < m-j)return  Long.MAX_VALUE/2  ;          if ( dp[i][j] != -1 )return dp[i][j] ;         long a = solver(i+1 , j) ;         long b = abs( list1.get(i) - list2.get(j)) + solver(i+1 , j+1) ;         return dp[i][j] = min(a , b) ;      }     public static void main(String[] args) throws IOException {             FastScanner in = new FastScanner();             PrintWriter out = new PrintWriter(System.out);             int N = in.nextInt() ;             int a[] = in.readArray(N) ;         for (int i = 0; i <N ; i++) {             if (a[i] == 1)list2.add(i) ;             else list1.add(i) ;         }          n = list1.size() ;          m = list2.size() ;             dp = new long[n][m] ;             for(int i=0 ; i<n ; i++)                 for(int j=0 ; j<m ; j++)                     dp[i][j] = -1 ;               System.out.println(solver(0 , 0 ));             out.flush();             out.close();     }          static ArrayList<Integer> list = new ArrayList<>();     static boolean A[] = new boolean[2 * 90000001];                                                             } ","import java.util.*; import java.io.*; import java.math.*; public class A { private static long[][] dp; private static ArrayList<Integer> lis1,lis0; public static void process() throws IOException { int n = sc.nextInt(); int arr[] = sc.readArray(n); lis1 = new ArrayList<Integer>(); lis0 = new ArrayList<Integer>(); for(int i = 0; i<n; i++) { if(arr[i] == 1)lis1.add(i+1); else lis0.add(i+1); } Collections.sort(lis0); Collections.sort(lis1); int n0 = lis0.size(); int n1 = lis1.size(); dp = new long[n0+1][n1+1]; for(int i = 0; i<=n0; i++) { Arrays.fill(dp[i], -1); } long ans = solve(0,0,n0,n1); System.out.println(ans); } private static long solve(int i, int j, int n0, int n1) { if(j == n1)return 0; if(i == n0)return INF; if(dp[i][j] != -1)return dp[i][j]; long ans = solve(i+1, j, n0, n1); ans = Math.min(ans,Math.abs(lis0.get(i) - lis1.get(j)) + solve(i+1, j+1, n0, n1)); return dp[i][j] = ans; } private static long INF = 2000000000000000000L; static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; int TTT = 1; while (t-- > 0) { process(); } out.flush(); out.close(); } } ",0
316,"import java.io.*; import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.util.Collections; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.*; public class Main1 {      static ArrayList<Integer> list1 = new ArrayList<>() ;      static ArrayList<Integer> list2 = new ArrayList<>() ;      static int n , m ;      static long dp[][] ;      static long solver(int i , int j ){                    if (j == m)return 0 ;          int tt1 = n-i ;          int tt2 = m-j ;          if (n-i < m-j)return  Long.MAX_VALUE/2  ;          if ( dp[i][j] != -1 )return dp[i][j] ;         long a = solver(i+1 , j) ;         long b = abs( list1.get(i) - list2.get(j)) + solver(i+1 , j+1) ;         return dp[i][j] = min(a , b) ;      }     public static void main(String[] args) throws IOException {             FastScanner in = new FastScanner();             PrintWriter out = new PrintWriter(System.out);             int N = in.nextInt() ;             int a[] = in.readArray(N) ;         for (int i = 0; i <N ; i++) {             if (a[i] == 1)list2.add(i) ;             else list1.add(i) ;         }          n = list1.size() ;          m = list2.size() ;             dp = new long[n][m] ;             for(int i=0 ; i<n ; i++)                 for(int j=0 ; j<m ; j++)                     dp[i][j] = -1 ;               System.out.println(solver(0 , 0 ));             out.flush();             out.close();     }          static ArrayList<Integer> list = new ArrayList<>();     static boolean A[] = new boolean[2 * 90000001];                                                             } ","import javax.print.DocFlavor; import java.util.*; import java.lang.*; import java.io.*; public class Solution {     static int N = 5005;     static int[] arr = new int[N];     static long[][] memo = new long[N][N];     static List<Integer> occupiedSeats = new ArrayList<>();     static List<Integer> emptySeats = new ArrayList<>();     static int n, occSize, empSize;     public static void main(String[] args) throws java.lang.Exception {         out = new PrintWriter(new BufferedOutputStream(System.out));         sc = new FastReader();         int test = 1;         for (int t = 0; t < test; t++) {             solve();         }         out.close();     }     private static void solve() {         n = sc.nextInt();         for (int i = 1; i <= n; i++) {             arr[i] = sc.nextInt();             if (arr[i] == 1) {                 occupiedSeats.add(i);             }else {                 emptySeats.add(i);             }         }         occSize = occupiedSeats.size();         empSize = emptySeats.size();         for (long[] memset : memo) {             Arrays.fill(memset, -1);         }         out.println(minimumTime(0, 0));     }     private static long minimumTime(int occupied, int empty) {         if (occupied == occSize) {             return 0;         }         if (empty == empSize) {             return Integer.MAX_VALUE;         }         if (memo[occupied][empty] != -1) {             return memo[occupied][empty];         }         long curr = Math.abs(occupiedSeats.get(occupied) - emptySeats.get(empty)) + minimumTime(occupied + 1, empty + 1);         curr = Math.min(curr, minimumTime(occupied, empty + 1));         memo[occupied][empty] = curr;         return curr;     }     public static FastReader sc;     public static PrintWriter out;      } ",0
317,"import java.io.*; import java.util.*; import java.lang.*; public class C {   public static void main(String[] args) {     InputStream inputStream = System.in;     OutputStream outputStream = System.out;     InputReader in = new InputReader(inputStream);     PrintWriter out = new PrintWriter(outputStream);     Solver solver = new Solver();     solver.Main(in, out);     out.close();   }   static class Solver {     public void Main(InputReader in, PrintWriter out) {       int T = in.nextInt();       for (int t = 0; t < T; t++) {         int n = in.nextInt();         String[] A = new String[n];         for (int i = 0; i < n; i++) {           A[i] = in.next();         }         int ans = 0;         for (char c = 'a'; c <= 'e'; c++) {           int[] ls = new int[n];           for (int i = 0; i < n; i++) {             int delta = 0;             for (int j = 0; j < A[i].length(); j++) {               if (A[i].charAt(j) == c) {                 delta += 1;               } else {                 delta -= 1;               }             }             ls[i] = delta;           }           Arrays.sort(ls, 0, n);           int cur = 0;           int score = 0;           for (int i = n - 1; i >= 0; i--) {             if (cur + ls[i] >= 1) {               cur += ls[i];               score += 1;             }           }           ans = Math.max(ans, score);         }         out.println(ans);       }     }   }    } ","import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.util.Arrays; public class Main {     private static void run() throws IOException {         int n = in.nextInt();         char[][] a = new char[n][];         for (int i = 0; i < n; i++) {             a[i] = in.next().toCharArray();         }         int ans = Integer.MIN_VALUE;         for (char now = 'a'; now <= 'e'; now++) {             ans = Math.max(ans, check(a, now));         }         out.println(ans);     }     private static int check(char[][] a, char target) {         int[] count = new int[a.length];         for (int i = 0; i < a.length; i++) {             for (char c : a[i]) {                 if (c == target) {                     count[i]++;                 } else {                     count[i]--;                 }             }         }         Arrays.sort(count);         int ans = 0;         int sum = 0;         for (int i = a.length - 1; i >= 0; i--) {             if (count[i] <= 0) break;             ans++;             sum += count[i];         }         if (ans == 0) return 0;         for (int i = a.length - 1; i >= 0; i--) {             if (count[i] > 0) continue;             if (sum > -count[i]) {                 sum += count[i];                 ans++;             }         }         return ans;     }     public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));         int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }         out.flush();         in.close();         out.close();     }          static final long mod = 1000000007;               @SuppressWarnings(""FieldCanBeLocal"")     private static Reader in;     private static PrintWriter out;                          } ",0
318,"import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger;  public final class B {      static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); static ArrayList<Integer> g[]; static long L[],R[],dp[][]; public static void main(String args[])throws IOException {   int T=i(); outer:while(T-->0) { int N=i(); setGraph(N); for(int i=1; i<=N; i++) { L[i]=l(); R[i]=l(); } for(int i=1; i<N; i++) { int a=i(),b=i(); g[a].add(b); g[b].add(a); } f(1,-1); out.println(Math.max(dp[0][1], dp[1][1])); } out.close(); } static void f(int n,int p) { for(int c:g[n]) { if(c!=p) { f(c,n); long a=dp[0][c]+Math.abs(L[c]-L[n]); long b=dp[1][c]+Math.abs(R[c]-L[n]); dp[0][n]+=Math.max(a, b); a=dp[0][c]+Math.abs(L[c]-R[n]); b=dp[1][c]+Math.abs(R[c]-R[n]); dp[1][n]+=Math.max(a, b); } } } static void setGraph(int N) { g=new ArrayList[N+1]; dp=new long[2][N+1]; L=new long[N+1]; R=new long[N+1]; for(int i=0; i<=N; i++) { g[i]=new ArrayList<Integer>(); } } static int i() { return in.nextInt(); } static long l() { return in.nextLong(); } } ","import java.io.*; import java.text.DecimalFormat; import java.util.*; public class C {     static long mod = (long) 1e9 + 7;     static long mod1 = 998244353;     static ArrayList<Integer>[] adj;     static HashMap<String,Long> hmap;     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         int t = in.nextInt();         while (t-- > 0) {             int n = in.nextInt();             adj = new ArrayList[n + 1];             for (int i = 0; i <= n; i++)                 adj[i] = new ArrayList<>();             long[][] dp = new long[n + 1][2];             hmap=new HashMap<>();             for (int i = 1; i <= n; i++) {                 dp[i][0] = in.nextLong();                 dp[i][1] = in.nextLong();             }             for (int i = 0; i < n - 1; i++) {                 int u = in.nextInt();                 int v = in.nextInt();                 adj[u].add(v);                 adj[v].add(u);             }             long[] x=DFS(dp,1,-1);             out.println(Math.max(x[0],x[1]));         }         out.close();     }     static long[] DFS(long[][] dp,int s,int prev) {         long max=0;         long min=0;         for (int i : adj[s]) {             if (i != prev) {                 long[] dd=DFS(dp,i,s);                 min+=Math.max(Math.abs(dp[s][0]-dp[i][0])+dd[0],Math.abs(dp[s][0]-dp[i][1])+dd[1]);                 max+=Math.max(Math.abs(dp[s][1]-dp[i][0])+dd[0],Math.abs(dp[s][1]-dp[i][1])+dd[1]);             }         }         return new long[] {min,max};     }     static final Random random = new Random();                                              } ",0
319,"import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger;  public final class B {     static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); static ArrayList<ArrayList<Integer>> g; static long mod=(long)(1e9+7); static int D1[],D2[],par[]; static boolean set[]; static int value[]; static long INF=Long.MAX_VALUE; static int dp[][]; static int N,M; static int A[][],B[][]; static int s=1; public static void main(String args[])throws IOException {   int N=i(); int A[]=input(N); ArrayList<Integer> one=new ArrayList<Integer>(); ArrayList<Integer> zero=new ArrayList<Integer>(); for(int i=1; i<=N; i++) { if(A[i-1]==1)one.add(i); else zero.add(i); } int sum[][]=new int[N+5][N+5]; for(int i=1; i<=one.size(); i++) { for(int j=1; j<=zero.size(); j++) { sum[i][j]=Math.abs(one.get(i-1)-zero.get(j-1)); } } dp=new int[N+5][N+5]; Arrays.fill(dp[0], 0); for(int i=1; i<=one.size(); i++) { for(int j=i; j<=zero.size(); j++) { if(i==j) { dp[i][j]=dp[i-1][j-1]+sum[i][j]; } else { dp[i][j]=Math.min(dp[i][j-1], dp[i-1][j-1]+sum[i][j]); } } } System.out.println(dp[one.size()][zero.size()]); } static long min(long a,long b,long c) { return Math.min(a, Math.min(c, b)); } static int i() { return in.nextInt(); } static int[] input(int N){ int A[]=new int[N]; for(int i=0; i<N; i++) { A[i]=in.nextInt(); } return A; } } ","import java.io.*; import java.util.*; public class Armchairs {     static final int INF = 1000000000;     public static void main(String[] args) {         InputReader reader = new InputReader(System.in);         PrintWriter writer = new PrintWriter(System.out, false);         int N = reader.nextInt();         int[] A = new int[N];         for (int i = 0; i < N; i++) {             A[i] = reader.nextInt();         }         List<Integer> occupied = new ArrayList<>();         for (int i = 0; i < N; i++) {             if (A[i] == 1) occupied.add(i);         }         int K = occupied.size();         int[][] dp = new int[N + 1][K + 1];         for (int[] row : dp) Arrays.fill(row, INF);         dp[0][0] = 0;         for (int i = 0; i < N; i++) {             for (int j = 0; j <= K; j++) {                 int x = j < K ? occupied.get(j) : 0;                 dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);                 if (j + 1 <= K && A[i] == 0) {                     dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i][j] + Math.abs(i - x));                 }             }         }         writer.println(dp[N][K]);         writer.close();         System.exit(0);     }      } ",0
320,"import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[26]; for(int i=0; i<26; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[26]; for(char x:X)f[x-'a']++; for(int j=0; j<26; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<26; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[6]; for(int i=0; i<6; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[6]; for(char x:X)f[x-'a']++; for(int j=0; j<6; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<6; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ",1
321,"import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[26]; for(int i=0; i<26; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[26]; for(char x:X)f[x-'a']++; for(int j=0; j<26; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<26; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ","import java.util.*; import java.io.*; public class Solution {   static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));   public static void solve() throws IOException {     int n = Integer.parseInt(br.readLine());     ArrayList<int[]> words = new ArrayList<>();     ArrayList<Integer> lens = new ArrayList<>();          for (int i = 0; i < n; i++) {       String temp = br.readLine();       int[] word = new int[5];       for (int j = 0; j < temp.length(); j++) {         word[(int)(temp.charAt(j)) - 97]++;       }       words.add(word);       lens.add(temp.length());     }     int ans = 0;     for (int i = 0; i < 5; i++) {       ArrayList<Integer> sums = new ArrayList<>();              for (int j = 0; j < words.size(); j++) {         sums.add(words.get(j)[i] - (lens.get(j) - words.get(j)[i]));       }       Collections.sort(sums);       int loc = 0;       int run = 0;       for (int j = sums.size() - 1; j >= 0; j--) {         if(run + sums.get(j) > 0) {           loc++;           run += sums.get(j);         }         else break;       }       ans = Math.max(ans, loc);     }     System.out.println(ans);   }   public static void main(String[] args) throws IOException {     int t = Integer.parseInt(br.readLine());     for (int i = 0; i < t; i++) {       solve();     }   } } ",0
322,"import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[6]; for(int i=0; i<5; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[5]; for(char x:X)f[x-'a']++; for(int j=0; j<5; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<5; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[26]; for(int i=0; i<26; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[26]; for(char x:X)f[x-'a']++; for(int j=0; j<26; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<26; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ",1
323,"import java.io.*; import java.util.*; import java.math.BigInteger;  import java.lang.*; public class Main {                        public static String[] F(BufferedReader bf) throws Exception     {         return (bf.readLine().split("" ""));     }         public static void pr(PrintWriter out,Object o)    {            out.println(o.toString());         }                          public static void pr(Object o)     {         System.out.println(o.toString());     }                   public static int inInt(String s)     {         return Integer.parseInt(s);     }                                                                                              public static int F(String[] arr,char ch){       int[] nums = new int[arr.length];       for(int i=0;i<arr.length;i++){         String str = arr[i];int a=0;         for(int j=0;j<str.length();j++){               if(str.charAt(j) == ch){                 a++;               }         }                          nums[i] = (2*a - (str.length()));       }       Arrays.sort(nums);       int sum = 0;                  for(int i=arr.length-1;i>=0;i--){         if((sum+nums[i]) <= 0){           return  arr.length-1-i;         }         sum += nums[i];       }       return arr.length;     }     public static void main (String[] args) throws Exception {                  BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);;;                                 int yy=inInt(bf.readLine());                          for(int w=0;w<yy;w++)         {                         out.flush();                       String[] xlp = bf.readLine().split("" "");                                 int n;                        long k;long l;                                                  n =inInt(xlp[0]);       String[] arr = new String[n];       for(int i=0;i<n;i++){         arr[i] = bf.readLine();       }       int ans=0;       for(int i=0;i<5;i++){         int v = F(arr,(char)(i+'a'));                 ans = Math.max(ans,F(arr,(char)(i+'a')));       }       pr(out,ans);                  }     out.close();    bf.close();         }} ","import java.lang.reflect.Array; import java.util.*; public class Rough {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);            int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             sc.nextLine();             String s[] = new String[n];             int f[][] = new int[n][5];             for (int i = 0; i < n; i++) {                 s[i]  = sc.nextLine();                 for (int j = 0; j < s[i].length(); j++) {                     f[i][s[i].charAt(j)-'a']++;                 }             }             int ans = 0;             for ( int i = 0; i < 5; i++) {                 ArrayList<Integer> al = new ArrayList<>();                 for (int j = 0; j < n; j++) {                     int o = 0;                     for (int k = 0; k < 5; k++) {                         if(k != i)                             o+=f[j][k];                     }                     al.add(f[j][i]-o);                 }                 Collections.sort(al,Collections.reverseOrder());                 int max = 0;                 int x = 0;                 for (int j = 0; j < n; j++) {                     x+=al.get(j);                     if(x<=0)break;                     max++;                 }                 ans = Math.max(max,ans);             }             System.out.println(ans);         }         sc.close();     } } ",0
324,"import java.io.*; import java.util.*; import java.math.BigInteger; import java.util.InputMismatchException; public class Main { static PrintWriter out; static Reader in; public static void main(String[] args) throws IOException { input_output(); Main solver = new Main(); solver.solve(); out.close(); out.flush(); }  static long INF = (long)1e18; static int MAXN = (int)1e5 + 5; static int MOD = (int)1e9 + 7; static int q, t, n, m, k; static double pi = Math.PI; void solve() throws IOException { t = in.nextInt(); while (t --> 0) { n = in.nextInt(); String[] arr = new String[n]; for (int i = 0; i < n; i++) { arr[i] = in.next(); } int ans = 0; for (int i = 0; i < 26; i++) { List<Integer> list = new ArrayList<>(); for (int j = 0; j < n; j++) { int tmp = 0; for (int x = 0; x < arr[j].length(); x++) { if (arr[j].charAt(x)-'a' == i) tmp++; else tmp--; } list.add(tmp); } Collections.sort(list); int sum = 0, tmpAns = 0; for (int j = n-1; j >= 0; j--) { if (sum + list.get(j) > 0) { tmpAns++; sum += list.get(j); } else break; } ans = Math.max(ans, tmpAns); } out.println(ans); } } static void input_output() throws IOException { File f = new File(""in.txt""); if (f.exists() && !f.isDirectory()) { in = new Reader(new FileInputStream(""in.txt"")); } else in = new Reader(); f = new File(""out.txt""); if (f.exists() && !f.isDirectory()) { out = new PrintWriter(new File(""out.txt"")); } else out = new PrintWriter(System.out); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     public static void main(String args[])     {      FastReader s=new FastReader();      int t=s.nextInt();      while(t>0)      {       Solve solve=new Solve();       t--;       int n=s.nextInt();       String str[]=new String[n];       for(int i=0;i<n;i++)       str[i]=s.nextLine();       char array[]=new char[]{'a','b','c','d','e'};       int arr[]=new int[n];       int ans=0;       for(int i=0;i<5;i++)       {         Arrays.fill(arr,0);           for(int j=0;j<n;j++)           {                  for(int k=0;k<str[j].length();k++)                  {                      if(str[j].charAt(k)==array[i])                      arr[j]++;                      else                      arr[j]--;                  }           }           ans=(ans>solve.solve(arr,n))?ans:solve.solve(arr,n);       }       System.out.println(ans);      }     } } class Solve{     public int solve(int arr[],int n)     {         int ans=0;         int sum=0;         Arrays.sort(arr);         for(int i=n-1;i>=0;i--)         {             if(sum+arr[i]>0)             {                 sum+=arr[i];                 ans++;             }             else             break;         }         return ans;     } } ",1
325,"import java.io.*; import java.util.*; import java.text.*; import java.math.*; import java.util.regex.*; public class JaiShreeRam{ static Scanner in=new Scanner(); static long mod = 1000000007; static ArrayList<ArrayList<Integer>> adj; public static void main(String[] args) throws Exception{ int z=in.readInt(); while(z-->0) { int n=in.readInt(); int a[]=nia(n); char c[]=in.readString().toCharArray(); ArrayList<Integer> d=new ArrayList<>(); ArrayList<Integer> in=new ArrayList<>(); for(int i=0;i<n;i++) { if(c[i]=='R') { in.add(a[i]); } else { d.add(a[i]); } } String ans=""YES""; Collections.sort(d); int k=1; for(int i:d) { if(i<k) { ans=""NO""; } k++; } Collections.sort(in); for(int i=in.size()-1;i>=0;i--) { if(in.get(i)>n) { ans=""NO""; break; } n--; } System.out.println(ans); } } static int[] nia(int n){ int[] arr= new int[n]; int i=0; while(i<n){ arr[i++]=in.readInt(); } return arr; } } ","import java.util.*; import java.io.*; public class code  { static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out);        public static void main(String[] args) throws Exception { int t=sc.nextInt(); while(t-->0) {             int n=sc.nextInt();             int []vals=new int[n];             boolean numLine[]=new boolean[n+1];             for(int i=0;i<n;i++)vals[i]=sc.nextInt();             String s=sc.nextLine();             ArrayList<Integer>b=new ArrayList<Integer>();             ArrayList<Integer>r=new ArrayList<Integer>();             for(int i=0;i<n;i++) {             if(s.charAt(i)=='B' && vals[i]>0 )b.add(vals[i]);             else if( s.charAt(i)=='R' && vals[i]<=n)r.add(vals[i]);             }           Collections.sort(b);           Collections.sort(r);           int small=1;           for(int i=0;i<b.size();i++) {                      int y=b.get(i);           if(y<small)continue;           numLine[small]=true;           small++;           }                     int large=n;           for(int i=r.size()-1;i>=0;i--) {                      int y=r.get(i);           if(y>large)continue;                     numLine[large]=true;           large--;           }                      boolean can=true;           for(int i=1;i<=n;i++) {           if(numLine[i]==false) {           pw.println(""no"");           can=false;           break;           }                      }           if(can)pw.println(""yes"");                                                               }  pw.close(); } } ",0
326,"import java.io.*; import java.util.*; import java.text.*; import java.math.*; import java.util.regex.*; public class JaiShreeRam{ static Scanner in=new Scanner(); static long mod = 1000000007; static ArrayList<ArrayList<Integer>> adj; public static void main(String[] args) throws Exception{ int z=in.readInt(); while(z-->0) { int n=in.readInt(); int a[]=nia(n); char c[]=in.readString().toCharArray(); ArrayList<Integer> d=new ArrayList<>(); ArrayList<Integer> in=new ArrayList<>(); for(int i=0;i<n;i++) { if(c[i]=='R') { in.add(a[i]); } else { d.add(a[i]); } } String ans=""YES""; Collections.sort(d); int k=1; for(int i:d) { if(i<k) { ans=""NO""; } k++; } Collections.sort(in); for(int i=in.size()-1;i>=0;i--) { if(in.get(i)>n) { ans=""NO""; break; } n--; } System.out.println(ans); } } static int[] nia(int n){ int[] arr= new int[n]; int i=0; while(i<n){ arr[i++]=in.readInt(); } return arr; } } ","import java.util.*; public class Main { public static void main(String[] args) { Scanner s  = new Scanner(System.in); int t = s.nextInt(); while(t-- > 0){     int n = s.nextInt();     int[] arr = new int[n];     for(int i=0;i<n;i++)         arr[i] = s.nextInt();     String str = s.next();     List<Integer> left = new ArrayList<>();     List<Integer> right = new ArrayList<>();     for(int i=0;i<arr.length;i++){         if(str.charAt(i) == 'B')             left.add(arr[i]);         else right.add(arr[i]);     }     Collections.sort(left);     Collections.sort(right);     boolean flag = false;     for(int i=0;i<left.size();i++)         if(left.get(i) < i+1){             flag = true;             break;         }     if(!flag){         for(int i=0;i<right.size();i++)             if(right.get(i) > left.size()+i+1){                 flag = true;                 break;             }     }     if(flag)         System.out.println(""NO"");     else System.out.println(""YES""); } } } ",0
327,"import java.io.*; import java.util.*; import java.text.*; import java.math.*; public class Main {     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int n = Integer.parseInt(br.readLine());         StringTokenizer st = new StringTokenizer(br.readLine());         int ar[] = new int[n];         for(int i = 0; i < n; i++){             ar[i] = Integer.parseInt(st.nextToken());         }         ArrayList<Integer> ones = new ArrayList<Integer>();         ArrayList<Integer> zeroes = new ArrayList<Integer>();         for(int i = 0; i < n; i++){             if(ar[i] == 1)                 ones.add(i);             else                 zeroes.add(i);         }         int r = ones.size();         int c = zeroes.size();         int time[][] = new int[r][c];         System.out.println(calculateTime(time, r, c, 0, 0, ones, zeroes));     }     public static int calculateTime(int time[][], int r, int c, int currR, int currC, ArrayList<Integer> ones, ArrayList<Integer> zeroes){                  if(currR == r)             return 0;         if(currC == c)             return (int)1e9;         if(time[currR][currC] != 0)             return time[currR][currC];         return time[currR][currC] = Math.min((calculateTime(time, r, c, currR + 1, currC + 1, ones, zeroes) + Math.abs(ones.get(currR) - zeroes.get(currC))), calculateTime(time, r, c, currR, currC + 1, ones, zeroes));     } } ","import java.io.*; import java.util.*; public class E { public static void main(String[] args) throws NumberFormatException, IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(br.readLine()); int cnt = n; boolean[] non = new boolean[n]; StringTokenizer st = new StringTokenizer(br.readLine()); for(int i = 0; i < n; i++) { if(Integer.parseInt(st.nextToken()) == 0) { non[i] = true; cnt--; } } int x = 0; int y = 0; int[] location = new int[cnt]; int[] rlocation = new int[n-cnt]; for(int i = 0; i < n; i++) { if(!non[i]) { location[x] = i; x++; }else{ rlocation[y] = i; y++; } } int[][] dp = new int[(n-cnt)+1][cnt+1]; Arrays.fill(dp[0], 100000000); dp[0][0] = 0; for(int i = 0; i < n-cnt; i++) { if(i < (n-cnt)) Arrays.fill(dp[i+1], 100000000); for(int j = 0; j < cnt; j++) { if(i < (n-cnt)) { dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]); dp[i+1][j+1] = Math.min(dp[i+1][j+1], dp[i][j] + Math.abs(rlocation[i] - location[j])); } } } int min = Integer.MAX_VALUE; for(int i = 0; i < (n-cnt)+1; i++) { min = Math.min(dp[i][cnt], min); } System.out.println(min); } } ",0
328,"import java.io.*; import java.util.*; import java.text.*; import java.math.*; public class Main {     static class pair implements Comparable<pair>{         int sum, index;         pair(int i){             sum = 0;             index = i;         }              }     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); StringBuilder sb = new StringBuilder();         int t = Integer.parseInt(br.readLine());         while(t-- > 0){             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             int m = Integer.parseInt(st.nextToken());             int x = Integer.parseInt(st.nextToken());             int ar[] = new int[n];             st = new StringTokenizer(br.readLine());             int sum = 0, low = x;             for(int i = 0; i < n; i++){                 ar[i] = Integer.parseInt(st.nextToken());             }             PriorityQueue<pair> q = new PriorityQueue<pair>();             for(int i = 0; i < m; i++)                 q.add(new pair(i + 1));             sb.append(""YES\n"");             for(int i = 0; i < n; i++){                 pair p = q.poll();                 p.sum += ar[i];                 q.add(p);                 sb.append(p.index + "" "");             }             sb.append(""\n"");         }         System.out.print(sb);     } } ","import java.io.*; import java.util.*;   public class Codeforces { public static class Tower implements Comparable<Tower>{ int val; int index; public Tower(int ind, int v) { val = v; index = ind; } } public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int cases = Integer.parseInt(br.readLine()); while(cases-- > 0) { String[] str = br.readLine().split("" ""); int n = Integer.parseInt(str[0]); int m = Integer.parseInt(str[1]); int x = Integer.parseInt(str[2]); int[] h = new int[n]; str = br.readLine().split("" ""); for(int i=0; i<n; i++) { h[i] = Integer.parseInt(str[i]); } PriorityQueue<Tower> q = new PriorityQueue<>(m); int[] ans = new int[n]; for(int i=0; i<m; i++) { q.add(new Tower(i, h[i])); ans[i] = i; } for(int i=m; i<n; i++) { Tower lowest = q.poll(); lowest.val += h[i]; ans[i] = lowest.index; q.add(lowest); } System.out.println(""YES""); for(int i=0; i<n; i++) { System.out.print((ans[i]+1) + "" ""); } System.out.println(); } } } ",1
329,"import java.io.*; import java.util.*; import java.text.DecimalFormat; public class C {     static long mod=(long)1e9+7;     static long mod1=998244353;     static InputStream inputStream = System.in;     static OutputStream outputStream = System.out;     static InputReader in = new InputReader(inputStream);     static PrintWriter out = new PrintWriter(outputStream);     public static void main(String[] args) throws IOException {         int t= in.nextInt();         while(t-->0) {             int n = in.nextInt();             ArrayList<Pair>[] adj = new ArrayList[5];             for(int i = 0;i<5;i++) adj[i] = new ArrayList<>();             for(int i = 0;i<n;i++){                 char[] arr = in.next().toCharArray();                 int[] count = new int[5];                 for(char c:arr)                     count[c-'a']++;                 for(int j = 0;j<5;j++){                     adj[j].add(new Pair(count[j],arr.length-count[j]));                 }             }             int max = 0;             for(int i = 0;i<5;i++){                 Collections.sort(adj[i]);                 int count = 0;                 int sum1 = 0;                 int sum2 = 0;                 for(Pair p:adj[i]){                     if(sum1+p.a>sum2+p.b){                         count++;                         sum1+=p.a;                         sum2+=p.b;                     }                 }                 max = Math.max(max,count);             }             out.println(max);         }         out.close();     }     static class Pair implements Comparable<Pair>{         int a,b;         Pair(int a, int b){             this.a = a;             this.b = b;         }              }     static final Random random=new Random();                                              } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[6]; for(int i=0; i<5; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[5]; for(char x:X)f[x-'a']++; for(int j=0; j<5; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<5; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ",0
330,"import java.io.*; import java.util.*; import java.util.Map.Entry; import static java.lang.Math.*; public class Ans implements Runnable { public static void main(String args[]) { Ans s = new Ans(); s.run(); } InputReader sc = null; PrintWriter pw = null; static ArrayList<Integer>[] G = new ArrayList[(int)(3e5+10)]; static int[] dist = new int[(int)(3e5+10)]; static int[] a = new int[(int)(3e5+10)]; private static int[] nge(int n){ int[] edges = new int[n]; Arrays.fill(edges,  -1); Stack<Integer> st = new Stack<>(); st.push(0); for(int i = 1; i < n; i++){ while(!st.isEmpty() && a[i] >= a[st.peek()]){ edges[st.pop()] = i; } st.push(i); } return edges; } private static int[] nle(int n){ int[] edges = new int[n]; Arrays.fill(edges,  -1); Stack<Integer> st = new Stack<>(); st.push(0); for(int i = 1; i < n; i++){ while(!st.isEmpty() && a[i] <= a[st.peek()]){ edges[st.pop()] = i; } st.push(i); } return edges; } private static int[] pge(int n){ int[] edges = new int[n]; Arrays.fill(edges,  -1); Stack<Integer> st = new Stack<>(); st.push(n-1); for(int i = n-2; i >= 0; i--){ while(!st.isEmpty() && a[i] >= a[st.peek()]){ edges[st.pop()] = i; } st.push(i); } return edges; } private static int[] ple(int n){ int[] edges = new int[n]; Arrays.fill(edges,  -1); Stack<Integer> st = new Stack<>(); st.push(n-1); for(int i = n-2; i >= 0; i--){ while(!st.isEmpty() && a[i] <= a[st.peek()]){ edges[st.pop()] = i; } st.push(i); } return edges; } private static void buildGraph(int[] edges){ for(int i = 0; i < edges.length; i++){ if(edges[i] != -1){ G[min(i, edges[i])].add(max(i, edges[i])); } } } private static void bfs(int n){ dist[0] = 0; ArrayDeque<Integer> q = new ArrayDeque<>(); q.add(0); while(!q.isEmpty()){ int front = q.pollFirst(); if(front == n-1){ break; } for(int adj : G[front]){ if(dist[adj] == (int)(1e9)){ dist[adj] = 1 + dist[front]; q.add(adj); } } } } public void run() { sc = new InputReader(System.in); pw = new PrintWriter(System.out); int n = sc.nextInt(); a = new int[n]; for (int i = 0; i < n; i++) { a[i] = sc.nextInt(); G[i] = new ArrayList<Integer>(); } buildGraph(nge(n)); buildGraph(nle(n)); buildGraph(ple(n)); buildGraph(pge(n)); Arrays.fill(dist, (int)(1e9)); bfs(n); pw.println(dist[n-1]); pw.close(); } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; import java.util.Stack; public class Discrete_Centrifugal_Jumps {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int n = scan.nextInt();         int[] h = new int[n];         for (int i = 0; i < n; i++) h[i] = scan.nextInt();         System.out.println(getMinJump(h, n));     }     static int getMinJump(int[] h, int n) {         int[] rightG = new int[n], leftG = new int[n];         int[] rightS = new int[n], leftS = new int[n];         Arrays.fill(rightG, -1); Arrays.fill(rightS, -1);         Arrays.fill(leftG, -1); Arrays.fill(leftS, -1);         Stack<Integer> stack = new Stack<>();                  int i = 0;         while (i < n) {             if (!stack.empty() && h[i] >= h[stack.peek()]) rightG[stack.pop()] = i;             else stack.push(i++);         }         stack = new Stack<>();                  i = 0;         while (i < n) {             if (!stack.empty() && h[i] <= h[stack.peek()]) rightS[stack.pop()] = i;             else stack.push(i++);         }         stack = new Stack<>();                  i = n-1;         while (i >= 0) {             if (!stack.empty() && h[i] >= h[stack.peek()]) leftG[stack.pop()] = i;             else stack.push(i--);         }         stack = new Stack<>();                  i = n-1;         while (i >= 0) {             if (!stack.empty() && h[i] <= h[stack.peek()]) leftS[stack.pop()] = i;             else stack.push(i--);         }         ArrayList<Integer>[] jump = new ArrayList[n];         for (i = 0; i < n; i++) jump[i] = new ArrayList<>();         for (i = 0; i < n; i++) {                          if (rightG[i] != -1) jump[i].add(rightG[i]);             if (leftG[i] != -1) jump[leftG[i]].add(i);                          if (rightS[i] != -1) jump[i].add(rightS[i]);             if (leftS[i] != -1) jump[leftS[i]].add(i);         }         int[] dp = new int[n]; Arrays.fill(dp, Integer.MAX_VALUE);         dp[0] = 0;         for (int u = 0; u < n; u++) {             for (int v: jump[u]) {                 dp[v] = Math.min(dp[v], dp[u] + 1);             }         }         return dp[n-1];     } } ",0
331,"import java.io.*; import java.util.*; import java.util.Map.Entry; public class AMain { public static void main(String[] args) { FastReader in = new FastReader(System.in); try(PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));) { new AMain().solve(in, out); } } public void solve(FastReader in, PrintWriter out) { int t = in.nextInt(); while(t-->0) { int n = in.nextInt(); int[] a= in.nextInts(n); char[] clr = in.next().toCharArray(); ArrayList<ArrayList<Integer> > rgh = new ArrayList<>(); for(int i=0;i<n;i++) rgh.add(new ArrayList<>()); boolean ok = true; for(int i=0;i<n;i++) if(clr[i] == 'B') { if(a[i]<1) ok = false; else rgh.get(0).add(a[i]-1); } else { if(a[i]>n) ok = false; else rgh.get(Math.max(0, a[i]-1)).add(n-1); } TreeMap<Integer, Integer> q = new TreeMap<>(); for(int i=0;i<n;i++) { for(int j: rgh.get(i)) q.put(j, q.getOrDefault(j, 0)+1); if(q.isEmpty() || q.firstKey() < i) { ok = false; break; } Entry<Integer, Integer> cur = q.firstEntry(); if(cur.getValue() == 1) q.remove(cur.getKey()); else q.put(cur.getKey(), cur.getValue()-1); } out.println(ok? ""YES"":""NO""); out.flush(); } } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException {         int t = nextInt();         while (t-- != 0) {             int n = nextInt();             int[] a = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = nextInt();             }             String s = nextToken();             ArrayList<Integer> r = new ArrayList<>();             ArrayList<Integer> b = new ArrayList<>();             for (int i = 0; i < n; i++) {                 if (s.charAt(i) == 'B') b.add(a[i]);                 else r.add(a[i]);             }             Collections.sort(b);             Collections.sort(r);             int y = 1;             boolean e = true;             for (int i = 0; i < b.size(); i++) {                 if (b.get(i) < y) {                     e = false;                     break;                 }                 y++;             }             for (int i = 0; i < r.size(); i++) {                 if (r.get(i) > y) {                     e = false;                     break;                 }                 y++;             }             if(e)out.println(""YES"");             else out.println(""NO"");         }         out.close();     }     static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     static PrintWriter out = new PrintWriter(System.out);     static StringTokenizer in = new StringTokenizer("""");          public static String nextToken() throws IOException {         while (!in.hasMoreTokens()) {             in = new StringTokenizer(br.readLine());         }         return in.nextToken();     }     public static int nextInt() throws IOException {         return Integer.parseInt(nextToken());     }           } ",0
332,"import java.io.*; import java.util.*; import java.util.concurrent.ConcurrentHashMap; public class Main {     public static void main(String[] args) {         FastScanner sc = new FastScanner();         int t=sc.nextInt();         while (t-->=1) {             int n = sc.nextInt(),m=sc.nextInt(), x = sc.nextInt();             int a[] = sc.readArray(n);             PriorityQueue<Pair> pq=new PriorityQueue<>();             for (int i=0;i<m;i++){                 pq.add(new Pair(0,i+1));             }             int ans[]= new int[n];             System.out.println(""YES"");             for (int i=0;i<n;i++){                 Pair e=pq.peek();                 pq.remove(e);                 e.a+=a[i];                 pq.add(e);                 ans[i]=e.b;             }             printArray(ans);             System.out.println();         }     }                              static class Pair implements Comparable<Pair> {         int a;         int b;         public Pair(int a, int b) {             this.a = a;             this.b = b;         }                                }               static int mod =(int)(1e9+7);     static long mod(long x) {         return ((x % mod + mod) % mod);     }     static long add(long x, long y) {         return mod(mod(x) + mod(y));     }                              static void printArray(int a[]) {         for (int i = 0; i < a.length; i++) {             System.out.print(a[i] + "" "");         }     }                               } ","import java.io.*; import java.lang.*; import java.util.*; public class c {   public static int[] ia(int n) {     int ar[]=new int[n];     return ar; } static class pair implements Comparable<pair>{     int ht;     int id;     pair(int ht, int id) {     this.ht=ht;     this.id=id; } } public static void main(String args[]) throws java.lang.Exception { FastScanner sc=new FastScanner();  int t=sc.ni(); while(t-->0) {     int n=sc.ni();     int m=sc.ni();     int x=sc.ni();     int ar[]=ia(n); for(int i=0;i<n;i++) { ar[i]=sc.ni(); } System.out.println(""YES""); PriorityQueue<pair> pq=new PriorityQueue<>();  for(int i=0;i<m;i++)  { pq.add(new pair(0,i+1));  }                       int i=0;  while(i<n)  {      pair pp=pq.remove(); pp.ht+=ar[i]; System.out.print(pp.id+"" ""); pq.add(pp); i++;  }    System.out.println(); } } } ",0
333,"import java.io.*; import java.util.*; import java.util.concurrent.atomic.AtomicInteger; import java.util.concurrent.atomic.AtomicLong; import java.util.logging.Logger; import java.util.stream.Collectors; public class Trial {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int q = sc.nextInt();         while (q-- > 0) {             int n = sc.nextInt();             int k = sc.nextInt();             int[] arr = new int[k];             int[] t = new int[k];             HashMap<Integer, Integer> hm = new HashMap<>();             for (int i = 0; i < k; i++) {                 arr[i] = sc.nextInt() - 1;             }             for (int i = 0; i < k; i++) {                 t[i] = sc.nextInt();                 hm.put(arr[i], t[i]);             }             int[] left = new int[n];             int[] right = new int[n];             left[0] = hm.getOrDefault(0, -1);             right[n - 1] = hm.getOrDefault(n - 1, -1);             for (int i = 1; i < n; i++) {                 if (hm.containsKey(i)) {                     if (left[i - 1] < 0) {                         left[i] = hm.get(i);                     } else {                         left[i] = Math.min(hm.get(i), left[i - 1] + 1);                     }                 } else {                     left[i] = left[i - 1] < 0 ? -1 : left[i - 1] + 1;                 }             }             for (int i = n - 2; i >= 0; i--) {                 if (hm.containsKey(i)) {                     if (right[i + 1] < 0) {                         right[i] = hm.get(i);                     } else {                         right[i] = Math.min(hm.get(i), right[i + 1] + 1);                     }                 } else {                     right[i] = right[i + 1] < 0 ? -1 : right[i + 1] + 1;                 }             }             for (int i = 0; i < n; i++) {                 if (left[i] < 0) {                     pw.print(right[i] + "" "");                 } else if (right[i] < 0) {                     pw.print(left[i] + "" "");                 } else {                     pw.print(Math.min(left[i], right[i]) + "" "");                 }             }             pw.println();         }         pw.flush();         pw.close();     }                     } ","import java.io.BufferedReader; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.StringTokenizer; public class Air {     public static void main(String[] args) {         FastScanner sc = new FastScanner();         int T = sc.nextInt();         for(int tt=0; tt<T;tt++){         int n = sc.nextInt(), k=sc.nextInt();         int [] positions=new int[k], temp=new int[k];         for (int i=0;i<k;i++) positions[i]=sc.nextInt();         for (int i=0;i<k;i++) temp[i]=sc.nextInt();         int[] forced=new int[n];         Arrays.fill(forced, Integer.MAX_VALUE/2);         for (int i=0;i<k;i++) forced[positions[i]-1]=temp[i];         for (int i=1;i<n;i++) forced[i]=Math.min(forced[i], forced[i-1]+1);         for (int i=n-2;i>=0;i--) forced[i]=Math.min(forced[i], forced[i+1]+1);         for (int i=0;i<n;i++) System.out.print(forced[i]+"" ""); System.out.println(); }     }      } ",0
334,"import java.io.*; import java.util.*; import static java.lang.Double.parseDouble; import static java.lang.Integer.compare; import static java.lang.Integer.parseInt; import static java.lang.Long.parseLong; import static java.lang.System.in; import static java.lang.System.out; import static java.util.Arrays.asList; import static java.util.Collections.max; import static java.util.Collections.min; public class Main {     private static final int MOD = (int) (1E9 + 7);     private static final int INF = (int) (1E9);     static FastScanner scanner = new FastScanner(in);     public static void main(String[] args) throws IOException {                  StringBuilder answer = new StringBuilder();         int t = 1;         t = parseInt(scanner.nextLine());         while (t-- > 0) {             answer.append(solve()).append(""\n"");         }     }     private static Object solve() throws IOException {        int n = scanner.nextInt();        int m = scanner.nextInt();        int x = scanner.nextInt();        Integer[] h = new Integer[n];        for (int i = 0; i < n; i++) {           h[i] = scanner.nextInt();        }        TreeSet<Pair> q = new TreeSet<>();        PriorityQueue<Pair> height = new PriorityQueue<>();        for (int i = 0; i < m; i++) {           q.add(new Pair(i + 1,0));        }        for (int i = 0; i < n; i++) {           height.add(new Pair(i,h[i]));        }        boolean shift = false;        int size = 0;        while(!height.isEmpty()){           Pair p = height.poll();           Pair building  = (shift) ? q.pollLast() : q.pollFirst();           h[p.index] = building.index;           q.add(new Pair(building.index,building.value + p.value));                       if(++size == n){               size = 0;               shift = !shift;           }        }        if(safe(q,x)){           out.println(""YES"");           StringBuilder stringBuilder = new StringBuilder();           for (Object o : h)              stringBuilder.append(o).append("" "");           out.println(stringBuilder);        }        else {            out.println(""NO"");        }         return """";     }    private static boolean safe(TreeSet<Pair> q, int x) {        int last = q.pollFirst().value;        while (!q.isEmpty()){           Pair p = q.pollFirst();           if(p.value - last > x) return false;           last = p.value;        }        return true;    }    private static class Pair implements Comparable<Pair> {         int index, value;         public Pair(int index, int value) {             this.index = index;             this.value = value;         }                     }                         private static int add(int a, int b) {         long res = ((long) (a + MOD) % MOD + (b + MOD) % MOD) % MOD;         return (int) res;     }                     } ","import java.io.*; import java.util.*; import static java.lang.Double.parseDouble; import static java.lang.Integer.compare; import static java.lang.Integer.parseInt; import static java.lang.Long.parseLong; import static java.lang.System.in; import static java.lang.System.out; import static java.util.Arrays.asList; import static java.util.Collections.max; import static java.util.Collections.min; public class Main {     private static final int MOD = (int) (1E9 + 7);     private static final int INF = (int) (1E9);     static FastScanner scanner = new FastScanner(in);     public static void main(String[] args) throws IOException {                  StringBuilder answer = new StringBuilder();         int t = 1;         t = parseInt(scanner.nextLine());         while (t-- > 0) {             answer.append(solve()).append(""\n"");         }     }     private static Object solve() throws IOException {        int n = scanner.nextInt();        int m = scanner.nextInt();        int x = scanner.nextInt();        Integer[] h = new Integer[n];        for (int i = 0; i < n; i++) {           h[i] = scanner.nextInt();        }        TreeSet<Pair> q = new TreeSet<>();        PriorityQueue<Pair> height = new PriorityQueue<>();        for (int i = 0; i < m; i++) {           q.add(new Pair(i + 1,0));        }        for (int i = 0; i < n; i++) {           height.add(new Pair(i,h[i]));        }        boolean shift = false;        int size = 0;        while(!height.isEmpty()){           Pair p = height.poll();           Pair building  = (shift) ? q.pollLast() : q.pollFirst();           h[p.index] = building.index;           q.add(new Pair(building.index,building.value + p.value));                       if(++size == n){               size = 0;               shift = !shift;           }        }        if(safe(q,x)){           out.println(""YES"");           StringBuilder stringBuilder = new StringBuilder();           for (Object o : h)              stringBuilder.append(o).append("" "");           out.println(stringBuilder);        }        else {            out.println(""NO"");        }         return """";     }    private static boolean safe(TreeSet<Pair> q, int x) {        int last = q.pollFirst().value;        while (!q.isEmpty()){           Pair p = q.pollFirst();           if(p.value - last > x) return false;           last = p.value;        }        return true;    }    private static class Pair implements Comparable<Pair> {         int index, value;         public Pair(int index, int value) {             this.index = index;             this.value = value;         }                     }                         private static int add(int a, int b) {         long res = ((long) (a + MOD) % MOD + (b + MOD) % MOD) % MOD;         return (int) res;     }                          } ",1
335,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class C {     public static void main(String[] args) throws Exception {         InputReader in = new InputReader(System.in);         PrintWriter pw = new PrintWriter(System.out);         char[] keys = {'a', 'b', 'c', 'd', 'e'};         int test = in.nextInt();         for (int t = 1; t <= test; t++) {             int n = in.nextInt();             String[] words = new String[n];             for (int i = 0; i < n; i++) {                 words[i] = in.next();             }             int res = 0;             for (char c : keys) {                 res = max(res, getMaxCount(n, words, c));             }             pw.println(res);         }         pw.close();     }     static int getMaxCount(int n, String[] words, char c) {         Integer[] arr = new Integer[n];         for (int i = 0; i < n; i++) {             arr[i] = 2 * getCount(words[i], c) - words[i].length();         }         Arrays.sort(arr, Comparator.reverseOrder());         int sum = 0, count = 0;         for (int i : arr) {             sum += i;             if (sum <= 0) {                 break;             }             count++;         }         return count;     }     static int getCount(String s, char c) {         int count = 0;         for (int i = 0; i < s.length(); i++) {             if (s.charAt(i) == c) {                 count++;             }         }         return count;     }           } ","import java.util.Arrays; import java.util.Collections; import java.util.Scanner; public class C {     static char[] alphabet = {'a', 'b', 'c', 'd', 'e'};     public static void main(String[] args) {         Scanner scn = new Scanner(System.in);         int test = scn.nextInt();         for (int t = 0; t < test; t++) {             int n = scn.nextInt();             String[] words = new String[n];             for (int i = 0; i < n; i++) {                 words[i] = scn.next();             }             int maxWords = 0;             for (char target : alphabet) {                 Integer[] diff = new Integer[n];                 for (int i = 0; i < n; i++) {                     String word = words[i];                     diff[i] = wordDiff(word, target);                 }                 Arrays.sort(diff, Collections.reverseOrder());                 int pointer = 0;                 int sum = 0;                 for (; pointer < n && sum > -diff[pointer]; pointer++) {                     sum += diff[pointer];                 }                 maxWords = Math.max(pointer, maxWords);             }             System.out.println(maxWords);         }     }     static int wordDiff(String a, char target) {         int ans = 0;         for (char c : a.toCharArray()) {             if (c == target) ans++;         }         return ans * 2 - a.length();     } } ",0
336,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class C {     static InputReader in;     static PrintWriter out;     public static void main(String[] args) {                  initReaderPrinter(false);         solve(in.nextInt());              }     static void solve(int testCnt) {         for (int testNumber = 0; testNumber < testCnt; testNumber++) {             int n = in.nextInt();             char[] a = in.next().toCharArray(), b = in.next().toCharArray();             int match0 = 0, match1 = 0, mismatch10 = 0, mismatch01 = 0;             for(int i = 0; i < n; i++) {                 if(a[i] == b[i]) {                     if(a[i] == '0') match0++;                     else match1++;                 }                 else {                     if(a[i] == '0') mismatch01++;                     else mismatch10++;                 }             }             if(mismatch01 + mismatch10 == 0) out.println(0);             else {                 if(match1 - match0 == 1 && mismatch01 == mismatch10) {                     out.println(min(match0 + match1, mismatch01 + mismatch10));                 }                 else if(match1 - match0 == 1) {                     out.println(match0 + match1);                 }                 else if(mismatch01 == mismatch10) {                     out.println(mismatch01 + mismatch10);                 }                 else out.println(-1);             }         }         out.close();     }     static void initReaderPrinter(boolean test) {         if (test) {             try {                 in = new InputReader(new FileInputStream(""src/input.in""));                 out = new PrintWriter(new FileOutputStream(""src/output.out""));             } catch (IOException e) {                 e.printStackTrace();             }         } else {             in = new InputReader(System.in);             out = new PrintWriter(System.out);         }     }      } ","import java.io.*; import java.util.*; public class B { public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); PrintWriter output = new PrintWriter(System.out); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); char initial[] = scan.next().toCharArray(); char desired[] = scan.next().toCharArray(); int lit1 = 0, lit2 = 0; int ans = Integer.MAX_VALUE; for(int i = 0;i<n;i++) { if(initial[i]=='1') lit1++; if(desired[i]=='1') lit2++; } if(lit1==lit2) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]!=desired[i]) count++; ans = Math.min(ans, count); } if(lit2==(n-lit1+1)) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]==desired[i]) count++; ans = Math.min(ans, count); } if(ans == Integer.MAX_VALUE) ans = -1; output.println(ans); } output.flush(); } } ",0
337,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class C {     static InputReader in;     static PrintWriter out;     public static void main(String[] args) {                  initReaderPrinter(false);         solve(in.nextInt());              }     static void solve(int testCnt) {         for (int testNumber = 0; testNumber < testCnt; testNumber++) {             int n = in.nextInt();             char[] a = in.next().toCharArray(), b = in.next().toCharArray();             int match0 = 0, match1 = 0, mismatch10 = 0, mismatch01 = 0;             for(int i = 0; i < n; i++) {                 if(a[i] == b[i]) {                     if(a[i] == '0') match0++;                     else match1++;                 }                 else {                     if(a[i] == '0') mismatch01++;                     else mismatch10++;                 }             }             if(mismatch01 + mismatch10 == 0) out.println(0);             else {                 if(match1 - match0 == 1 && mismatch01 == mismatch10) {                     out.println(min(match0 + match1, mismatch01 + mismatch10));                 }                 else if(match1 - match0 == 1) {                     out.println(match0 + match1);                 }                 else if(mismatch01 == mismatch10) {                     out.println(mismatch01 + mismatch10);                 }                 else out.println(-1);             }         }         out.close();     }     static void initReaderPrinter(boolean test) {         if (test) {             try {                 in = new InputReader(new FileInputStream(""src/input.in""));                 out = new PrintWriter(new FileOutputStream(""src/output.out""));             } catch (IOException e) {                 e.printStackTrace();             }         } else {             in = new InputReader(System.in);             out = new PrintWriter(System.out);         }     }      } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();         int t;         t = in.nextInt();                  while (t > 0) {             solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n, _00 = 0, _01 = 0, _11 = 0, _10 = 0;             n = in.nextInt();             char[] s = in.next().toCharArray();             char[] s1 = in.next().toCharArray();             for (int i = 0; i < n; i++) {                 if(s[i]==s1[i]){                     if(s[i]=='0'){                         _00++;                     }                     else{                         _11++;                     }                 }                 else{                     if(s[i]=='0'){                         _01++;                     }                     else{                         _10++;                     }                 }             }             int ans = Integer.MAX_VALUE;             if(_10 ==_01){                 ans = 2*_01;             }             if(_11 == _00 + 1){                 ans = Math.min(ans, 2*_00 + 1);             }             if(ans == Integer.MAX_VALUE){                 out.println(-1);             }             else{                 out.println(ans);             }         }     }                                   static final Random random=new Random();           } ",0
338,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class C {     static InputReader in;     static PrintWriter out;     public static void main(String[] args) {                  initReaderPrinter(false);         solve(in.nextInt());              }     static void solve(int testCnt) {         for (int testNumber = 0; testNumber < testCnt; testNumber++) {             int n = in.nextInt();             char[] a = in.next().toCharArray(), b = in.next().toCharArray();             int match0 = 0, match1 = 0, mismatch10 = 0, mismatch01 = 0;             for(int i = 0; i < n; i++) {                 if(a[i] == b[i]) {                     if(a[i] == '0') match0++;                     else match1++;                 }                 else {                     if(a[i] == '0') mismatch01++;                     else mismatch10++;                 }             }             if(mismatch01 + mismatch10 == 0) out.println(0);             else {                 if(match1 - match0 == 1 && mismatch01 == mismatch10) {                     out.println(min(match0 + match1, mismatch01 + mismatch10));                 }                 else if(match1 - match0 == 1) {                     out.println(match0 + match1);                 }                 else if(mismatch01 == mismatch10) {                     out.println(mismatch01 + mismatch10);                 }                 else out.println(-1);             }         }         out.close();     }     static void initReaderPrinter(boolean test) {         if (test) {             try {                 in = new InputReader(new FileInputStream(""src/input.in""));                 out = new PrintWriter(new FileOutputStream(""src/output.out""));             } catch (IOException e) {                 e.printStackTrace();             }         } else {             in = new InputReader(System.in);             out = new PrintWriter(System.out);         }     }      } ","import java.util.*; import java.io.*; public class C1615{ static FastScanner fs = null; public static void main(String[] args) { fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); while (t-->0) { int n = fs.nextInt(); String a = fs.next(); String b = fs.next(); char ch1[] = a.toCharArray(); char ch2[] = b.toCharArray(); int c00 = 0; int c01 = 0; int c10 = 0; int c11 = 0; for(int i=0;i<n;i++){ if(ch1[i]=='0'){ if(ch2[i]=='0'){ c00+=1; } else{ c01+=1; } } else{ if(ch2[i]=='0'){ c10+=1; } else{ c11+=1; } } } int ans = -1; if((c11-c00)==1 || c10==c01){ int s1 = (int)1e7;  int s2 = (int)1e7; if((c11-c00)==1){ s1 = c11+c00; } if(c10==c01) s2 = c10+c01; ans = Math.min(s1,s2);  } out.println(ans); } out.close(); } } ",0
339,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class C {     static InputReader in;     static PrintWriter out;     public static void main(String[] args) {                  initReaderPrinter(false);         solve(in.nextInt());              }     static void solve(int testCnt) {         for (int testNumber = 0; testNumber < testCnt; testNumber++) {             int n = in.nextInt();             char[] a = in.next().toCharArray(), b = in.next().toCharArray();             int match0 = 0, match1 = 0, mismatch10 = 0, mismatch01 = 0;             for(int i = 0; i < n; i++) {                 if(a[i] == b[i]) {                     if(a[i] == '0') match0++;                     else match1++;                 }                 else {                     if(a[i] == '0') mismatch01++;                     else mismatch10++;                 }             }             if(mismatch01 + mismatch10 == 0) out.println(0);             else {                 if(match1 - match0 == 1 && mismatch01 == mismatch10) {                     out.println(min(match0 + match1, mismatch01 + mismatch10));                 }                 else if(match1 - match0 == 1) {                     out.println(match0 + match1);                 }                 else if(mismatch01 == mismatch10) {                     out.println(mismatch01 + mismatch10);                 }                 else out.println(-1);             }         }         out.close();     }     static void initReaderPrinter(boolean test) {         if (test) {             try {                 in = new InputReader(new FileInputStream(""src/input.in""));                 out = new PrintWriter(new FileOutputStream(""src/output.out""));             } catch (IOException e) {                 e.printStackTrace();             }         } else {             in = new InputReader(System.in);             out = new PrintWriter(System.out);         }     }      } ","import java.util.*; import java.io.*; public class codeforces { public static void main(String[] args) throws Exception { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); char[] a=sc.next().toCharArray(); char[] b=sc.next().toCharArray(); int e0=0; int e1=0; int o0=0; int o1=0; for(int i=0;i<n;i++) { if(a[i]!=b[i]) { if(a[i]=='1') { e1++; }else { e0++; } }else { if(a[i]=='1') { o1++; }else { o0++; } } } int ans=Integer.MAX_VALUE; if(e1==e0) { ans=Math.min(ans, e1+e0); } if(o1==o0+1) { ans=Math.min(ans, o1+o0); } pw.println(ans==Integer.MAX_VALUE?-1:ans); } pw.close(); } static long mod = 1000000007; static Random rn = new Random(); static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out); } ",0
340,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class C{ static class Event implements Comparable<Event>{ long i; int index; boolean start;  public Event(long a,int c, boolean b) { i=a; index = c; start=b; } } public static void main(String[] args) throws IOException{ int t= readInt(); while(t-->0) { int n =readInt(); long[] k = new long[n], h = new long[n]; for (int i = 0; i < n; i++) k[i]=readInt(); for (int i = 0; i < n; i++) h[i]=readInt(); List<Event> e = new ArrayList<Event>(); for (int i = 0 ; i <n; i++) { Event e1 = new Event(k[i]-h[i]+1, i, true); Event e2 = new Event(k[i], i, false); e.add(e1); e.add(e2); } Collections.sort(e); long ans = 0; long start = Long.MAX_VALUE; long end = 0; int stackSize = 0; for (Event ev: e) { if (ev.start) { start = min(start, ev.i); end = max(end, k[ev.index]); stackSize++; } else { end = max(end, ev.i); stackSize--; if (stackSize == 0) { long diff = end-start+1; ans += diff*(diff+1)/2; start = Long.MAX_VALUE; end = 0; } } } out.println(ans); } out.close(); } static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out)); static StringTokenizer st = new StringTokenizer(""""); static String read() throws IOException{ while (!st.hasMoreElements()) st = new StringTokenizer(br.readLine()); return st.nextToken(); } public static int readInt() throws IOException{return Integer.parseInt(read());} } ","import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.util.HashMap; import java.util.PriorityQueue; import java.util.StringTokenizer; public class MonstersAndSpells { static long rangeSum(long l, long r) { return ((r*(r+1))/2) - ((l*(l-1))/2); } static class Event implements Comparable<Event> { int time; int monsterNum; boolean isMonster; public Event(int time, int monsterNum, boolean isMonster) { this.time = time; this.monsterNum = monsterNum; this.isMonster = isMonster; } } public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out))); StringTokenizer st = new StringTokenizer(br.readLine()); int t = Integer.parseInt(st.nextToken()); for(int test = 0; test < t; test++) { st = new StringTokenizer(br.readLine()); int n = Integer.parseInt(st.nextToken()); int[] k = new int[n]; int[] h = new int[n]; st = new StringTokenizer(br.readLine()); for(int i = 0; i < n; i++) k[i] = Integer.parseInt(st.nextToken()); st = new StringTokenizer(br.readLine()); for(int i = 0; i < n; i++) h[i] = Integer.parseInt(st.nextToken()); int[] latestStart = new int[n]; for(int i = 0; i < n; i++) { latestStart[i] = k[i] - h[i] + 1; } PriorityQueue<Event> pq = new PriorityQueue<Event>(); for(int i = 0; i < n; i++) { pq.add(new Event(k[i],i,true)); pq.add(new Event(latestStart[i],i,false)); } long manaUsed = 0; int lastEvent = 0; HashMap<Integer, Event> waiting = new HashMap<Integer, Event>(); long currentSpell = 1; while(!pq.isEmpty()) { Event nextEvent = pq.poll(); if(!waiting.isEmpty() && nextEvent.time > lastEvent) { manaUsed += rangeSum(currentSpell+1, currentSpell + nextEvent.time - lastEvent); currentSpell = currentSpell + nextEvent.time - lastEvent; } if(waiting.isEmpty()) { currentSpell = 1; manaUsed++; } if(nextEvent.isMonster) { waiting.remove(nextEvent.monsterNum); } if(!nextEvent.isMonster) { waiting.put(nextEvent.monsterNum,nextEvent); } lastEvent = nextEvent.time; } pw.println(manaUsed); } pw.close(); } } ",0
341,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = in.nextInt();         for(int tt = 0; tt < t; tt++) {             int n = in.nextInt();             long[] arr = new long[n];             for (int i = 0; i < n; i++) arr[i] = in.nextLong();             char[] s = in.next().toCharArray();             if (solve(arr, n, s))pw.println(""YES"");             else pw.println(""NO"");         }         pw.close();     }     static boolean solve(long[] arr, int n, char[] s) {         ArrayList<Long> B = new ArrayList<>();         ArrayList<Long> R = new ArrayList<>();         for(int i = 0; i < n; i++) {             if (s[i] == 'B') B.add(arr[i]);             else R.add(arr[i]);         }         Collections.sort(B);         Collections.sort(R);                long last = n;         for (int i = R.size() - 1; i >= 0; i--) {             long v = R.get(i);             if (v > last) {                return false;             }             last--;         }         long first = 1;         int size = B.size();         for (int i = 0; i < size; i++) {             long v = B.get(i);                       if (v < first) return false;             first++;         }         return true;     }      } ","import java.util.*; import java.io.*;   public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();               List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }               Collections.sort(blue);             Collections.sort(red);               boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ",0
342,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = in.nextInt();         for(int tt = 0; tt < t; tt++) {             int n = in.nextInt();             long[] arr = new long[n];             for (int i = 0; i < n; i++) arr[i] = in.nextLong();             char[] s = in.next().toCharArray();             if (solve(arr, n, s))pw.println(""YES"");             else pw.println(""NO"");         }         pw.close();     }     static boolean solve(long[] arr, int n, char[] s) {         ArrayList<Long> B = new ArrayList<>();         ArrayList<Long> R = new ArrayList<>();         for(int i = 0; i < n; i++) {             if (s[i] == 'B') B.add(arr[i]);             else R.add(arr[i]);         }         Collections.sort(B);         Collections.sort(R);                long last = n;         for (int i = R.size() - 1; i >= 0; i--) {             long v = R.get(i);             if (v > last) {                return false;             }             last--;         }         long first = 1;         int size = B.size();         for (int i = 0; i < size; i++) {             long v = B.get(i);                       if (v < first) return false;             first++;         }         return true;     }      } ","import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);     static int mod=10000007;    static StringBuilder sb=new StringBuilder();             public static void main(String [] args)     {             int t = i();             while(t-->0)             {                 int n = i();                 int a[] = input(n);                 char c[] = inputC();                 ArrayList<Integer> b = new ArrayList<>();                 ArrayList<Integer> r = new ArrayList<>();                 for(int i=0;i<n;i++)                 {                     if(c[i]=='R')                     r.add(a[i]);                     else                      b.add(a[i]);                 }                 Collections.sort(b);                 Collections.sort(r,Collections.reverseOrder());                 boolean is = true;                 int cnt = 1;                 for(int i=0;i<b.size();i++)                 {                     if(b.get(i)<cnt)                     {                         is = false;                         break;                     }                     cnt++;                 }                 for(int i=0;i<r.size();i++)                 {                     if(r.get(i)>n-i)                     {                         is = false;                         break;                     }                 }                 out.println(is==true?""YES"":""NO"");             }             out.close();     }                          static int i() {         return sc.nextInt();     }     static String s() {         return sc.next();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }     static int[] input(int n) {         int A[]=new int[n];            for(int i=0;i<n;i++) {                A[i]=sc.nextInt();            }         return A;     }                                                                                                                                                                               } ",0
343,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = in.nextInt();         for(int tt = 0; tt < t; tt++) {             int n = in.nextInt();             long[] arr = new long[n];             for (int i = 0; i < n; i++) arr[i] = in.nextLong();             char[] s = in.next().toCharArray();             if (solve(arr, n, s))pw.println(""YES"");             else pw.println(""NO"");         }         pw.close();     }     static boolean solve(long[] arr, int n, char[] s) {         ArrayList<Long> B = new ArrayList<>();         ArrayList<Long> R = new ArrayList<>();         for(int i = 0; i < n; i++) {             if (s[i] == 'B') B.add(arr[i]);             else R.add(arr[i]);         }         Collections.sort(B);         Collections.sort(R);                long last = n;         for (int i = R.size() - 1; i >= 0; i--) {             long v = R.get(i);             if (v > last) {                return false;             }             last--;         }         long first = 1;         int size = B.size();         for (int i = 0; i < size; i++) {             long v = B.get(i);                       if (v < first) return false;             first++;         }         return true;     }      } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",0
344,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class E{ public static void main(String[] args) throws IOException { int q =readInt(); while(q-->0) { br.readLine(); int n =readInt(); int k =readInt(); int[] ans = new int[n]; Arrays.fill(ans, (int)2e9+1); int[] a = new int[k]; int[] t = new int[k]; int mini = 0, maxi = 0; for (int i = 0 ;i  <k; i+=1) { a[i]=readInt()-1; if (a[i] < a[mini]) mini = i; if (a[i] > a[maxi]) maxi = i; } for (int j = 0; j  <k; j++) t[j]=readInt(); for (int i = 0; i < k; i++) ans[a[i]]=t[i]; int[] l = new int[n]; int[] r = new int[n]; Arrays.fill(l, (int)2e9); Arrays.fill(r, (int)2e9); int temp = t[mini]; for (int i = a[mini]; i < n; i++) { l[i] = temp = min(temp+1, ans[i]); } temp = t[maxi]; for (int i = a[maxi]; i >= 0; i--) { r[i] = temp = min(temp+1,ans[i]); } for (int i = 0; i < n; i++) out.print(min(l[i],r[i]) + "" ""); out.println(); } out.close(); } static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out)); static StringTokenizer st = new StringTokenizer(""""); static String read() throws IOException{return st.hasMoreTokens() ? st.nextToken():(st = new StringTokenizer(br.readLine())).nextToken();} static int readInt() throws IOException{return Integer.parseInt(read());} } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class E { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ",0
345,"import java.io.*; import java.util.*; import static java.lang.Math.*; public class E{ public static void main(String[] args) throws IOException { int q =readInt(); while(q-->0) { br.readLine(); int n =readInt(); int k =readInt(); int[] ans = new int[n]; Arrays.fill(ans, (int)2e9+1); int[] a = new int[k]; int[] t = new int[k]; int mini = 0, maxi = 0; for (int i = 0 ;i  <k; i+=1) { a[i]=readInt()-1; if (a[i] < a[mini]) mini = i; if (a[i] > a[maxi]) maxi = i; } for (int j = 0; j  <k; j++) t[j]=readInt(); for (int i = 0; i < k; i++) ans[a[i]]=t[i]; int[] l = new int[n]; int[] r = new int[n]; Arrays.fill(l, (int)2e9); Arrays.fill(r, (int)2e9); int temp = t[mini]; for (int i = a[mini]; i < n; i++) { l[i] = temp = min(temp+1, ans[i]); } temp = t[maxi]; for (int i = a[maxi]; i >= 0; i--) { r[i] = temp = min(temp+1,ans[i]); } for (int i = 0; i < n; i++) out.print(min(l[i],r[i]) + "" ""); out.println(); } out.close(); } static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out)); static StringTokenizer st = new StringTokenizer(""""); static String read() throws IOException{return st.hasMoreTokens() ? st.nextToken():(st = new StringTokenizer(br.readLine())).nextToken();} static int readInt() throws IOException{return Integer.parseInt(read());} } ","import java.util.*; import java.io.*; public class AirConditioner{     public static void main(String[] args) throws Exception{         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int t=Integer.parseInt(br.readLine());         while(t-->0){             br.readLine();             StringTokenizer st=null;             st=new StringTokenizer(br.readLine());             int n=Integer.parseInt(st.nextToken());             int k=Integer.parseInt(st.nextToken());             int[] idx=new int[k];             int[] temp=new int[k];             st=new StringTokenizer(br.readLine());             for(int i=0;i<k;i++){                 idx[i]=Integer.parseInt(st.nextToken());             }             st=new StringTokenizer(br.readLine());             for(int i=0;i<k;i++){                 temp[i]=Integer.parseInt(st.nextToken());             }             int[] arr=new int[n];             Arrays.fill(arr,Integer.MAX_VALUE-1);             for(int i=0;i<k;i++){                 arr[idx[i]-1]=temp[i];             }             int[] left=new int[n];             int[] right=new int[n];             left[0]=Math.min(Integer.MAX_VALUE,arr[0]);             for(int i=1;i<n;i++){                 left[i]=Math.min(left[i-1]+1,arr[i]);             }             right[n-1]=Math.min(Integer.MAX_VALUE,arr[n-1]);             for(int i=n-2;i>=0;i--){                 right[i]=Math.min(right[i+1]+1,arr[i]);             }             for(int i=0;i<n;i++){                 arr[i]=Math.min(left[i],right[i]);             }             for(int tp:arr)                 System.out.print(tp+"" "");             System.out.println();         }     } } ",0
346,"import java.io.*; import java.util.*; import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; public class C {     static int fval(String s, char x){         int fx = 0, oth = 0;         for(int i = 0; i<s.length(); i++){             if(x == s.charAt(i)) fx++;             else oth++;         }         return fx-oth;     }     public static void main(String[] args) throws Exception {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb = new StringBuilder();                  int tst = Integer.parseInt(br.readLine());         long mod = (long)1e9+7;         while(tst-->0){             int n = Integer.parseInt(br.readLine());             ArrayList<String> lst = new ArrayList<>();             for(int i = 0; i<n; i++){                 lst.add(br.readLine());             }             int ans = 0;             for(int i = 0; i<5; i++){                 char x = (char)(97+i);                 ArrayList<Integer> vals = new ArrayList<>();                 for(int j = 0; j<n; j++){                     vals.add(fval(lst.get(j), x));                 }                 Collections.sort(vals, Collections.reverseOrder());                 int pt = -1, sum = 0;                 while(pt+1<n && sum+vals.get(pt+1)>0){                     sum+=vals.get(++pt);                 }                 ans = max(ans, pt+1);             }             sb.append(ans).append('\n');         }         System.out.println(sb);     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Comparator; import java.util.StringTokenizer; public class Comprog {     static FastReader fr = new FastReader();     private static void testCase() {         int n = fr.nextInt();         int [][] scoreChanges = new int [5][n];         int [] totalScores = new int [5];                  for (int i = 0; i < 5; i++)             totalScores[i] = 0;                  for (int i = 0; i < 5; i++)             for (int j = 0; j < n; j++)                 scoreChanges[i][j] = 0;                  for (int wordIndex = 0; wordIndex < n; wordIndex++) {             String nextWord = fr.nextLine();             for (int charIndex = 0; charIndex < 5; charIndex++) {                                                   int change = 2 * countCharsInString(nextWord, (char) ('a' + charIndex)) - nextWord.length();                 totalScores[charIndex] += change;                 scoreChanges[charIndex][wordIndex] = change;             }         }         for (int charIndex = 0; charIndex < 5; charIndex++)             Arrays.sort(scoreChanges[charIndex]);         int round = 0;         boolean done = false;         while (round < n && !done) {             for (int charIndex = 0; charIndex < 5; charIndex++) {                 if (totalScores[charIndex] > 0) {                     System.out.println(n - round);                     done = true;                     break;                 }                 totalScores[charIndex] -= scoreChanges[charIndex][round];             }             round++;         }         if (!done)             System.out.println(0);     }     public static int countCharsInString(String str, char c) {         int cnt = 0;         for (int i = 0; i < str.length(); i++)             if (str.charAt(i) == c)                 cnt++;         return cnt;     }     public static void main(String[] args) {         int t;         t = fr.nextInt();         for (int i = 0; i < t; i++)             testCase();     }                } ",0
347,"import java.io.*; import java.util.*; import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; public class C {     static int fval(String s, char x){         int fx = 0, oth = 0;         for(int i = 0; i<s.length(); i++){             if(x == s.charAt(i)) fx++;             else oth++;         }         return fx-oth;     }     public static void main(String[] args) throws Exception {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb = new StringBuilder();                  int tst = Integer.parseInt(br.readLine());         long mod = (long)1e9+7;         while(tst-->0){             int n = Integer.parseInt(br.readLine());             ArrayList<String> lst = new ArrayList<>();             for(int i = 0; i<n; i++){                 lst.add(br.readLine());             }             int ans = 0;             for(int i = 0; i<5; i++){                 char x = (char)(97+i);                 ArrayList<Integer> vals = new ArrayList<>();                 for(int j = 0; j<n; j++){                     vals.add(fval(lst.get(j), x));                 }                 Collections.sort(vals, Collections.reverseOrder());                 int pt = -1, sum = 0;                 while(pt+1<n && sum+vals.get(pt+1)>0){                     sum+=vals.get(++pt);                 }                 ans = max(ans, pt+1);             }             sb.append(ans).append('\n');         }         System.out.println(sb);     } } ","import java.lang.reflect.Array; import java.util.*; public class Rough {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);            int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             sc.nextLine();             String s[] = new String[n];             int f[][] = new int[n][5];             for (int i = 0; i < n; i++) {                 s[i]  = sc.nextLine();                 for (int j = 0; j < s[i].length(); j++) {                     f[i][s[i].charAt(j)-'a']++;                 }             }             int ans = 0;             for ( int i = 0; i < 5; i++) {                 ArrayList<Integer> al = new ArrayList<>();                 for (int j = 0; j < n; j++) {                     int o = 0;                     for (int k = 0; k < 5; k++) {                         if(k != i)                             o+=f[j][k];                     }                     al.add(f[j][i]-o);                 }                 Collections.sort(al,Collections.reverseOrder());                 int max = 0;                 int x = 0;                 for (int j = 0; j < n; j++) {                     x+=al.get(j);                     if(x<=0)break;                     max++;                 }                 ans = Math.max(max,ans);             }             System.out.println(ans);         }         sc.close();     } } ",0
348,"import java.io.*; import java.util.*; import static java.util.Collections.*; import static java.lang.Math.*; import java.util.stream.*; import javax.sound.sampled.Mixer; import static java.util.Arrays.*; @SuppressWarnings(""unchecked"") public class D_Tree_Tag {     public static PrintWriter out;     public static InputReader in;     public static long MOD = (long)1e9+7;     public static int n,a,b,da,db;     public static Graph g;     public static int dab;     public static int mxdist;     static class Graph     {         public int n;         public ArrayList adjacency[];         public Graph(int nodes)         {             n = nodes;             adjacency = new ArrayList[nodes];             for(int i=0;i<nodes;i++)             {                 adjacency[i] = new ArrayList<Integer>();             }         }                  public void addEdge(int from, int to)         {             adjacency[from].add(to);             adjacency[to].add(from);         }     }     static class Pair{         public int a,b;         public Pair(int a, int b){             this.a=a; this.b=b;         }     }     public static void dist(){         int[] vis = new int[n]; fill(vis,0);         LinkedList<Pair> l = new LinkedList<Pair>();         l.add(new Pair(a,0));         while(!l.isEmpty()){             Pair cur = l.pollFirst();             int v = cur.a, ct = cur.b;             vis[v] = 1;             if(v==b) {dab = ct; return;}             for(int neigh : (ArrayList<Integer>)g.adjacency[v]){                 if(vis[neigh]==0) l.add(new Pair(neigh,ct+1));             }         }     }               static int x;      static int maxCount;      static List<Integer> adj[];                       static void dfsUtil(int node, int count,                            boolean visited[],                         List<Integer> adj[])      {          visited[node] = true;          count++;                     List<Integer> l = adj[node];          for(Integer i: l)          {              if(!visited[i]){                  if (count >= maxCount) {                      maxCount = count;                      x = i;                  }                  dfsUtil(i, count, visited, adj);              }          }      }                        static void dfs(int node, int n, List<Integer>                                         adj[])      {          boolean[] visited = new boolean[n + 1];          int count = 0;                           Arrays.fill(visited, false);                           dfsUtil(node, count + 1, visited, adj);                 }                        static int diameter(List<Integer> adj[], int n)      {          maxCount = Integer.MIN_VALUE;                           dfs(1, n, adj);                           dfs(x, n, adj);                  return maxCount;      }           public static void main(String[] args)throws IOException {         in = new InputReader(System.in);         out = new PrintWriter(System.out);                  int cases = in.nextInt();                  for(int t = 0; t < cases; t++){             n = in.nextInt();             a = in.nextInt()-1;             b = in.nextInt()-1;             da = in.nextInt();             db = in.nextInt();             g = new Graph(n);             for(int i=0;i<n-1;i++){                 int u = in.nextInt()-1;                 int v=  in.nextInt()-1;                 g.addEdge(u, v);             }                          dist();             mxdist = diameter(g.adjacency, n);             mxdist--;             if(dab==-1){                 out.println(""FUCK"");             }                                                                 if(dab<=da){                 out.println(""Alice"");             }             else{                 if(da>=db) out.println(""Alice"");                 else{                     if(db>(2*da) && mxdist>(2*da)){                         out.println(""Bob"");                     }                     else out.println(""Alice"");                 }             }                                   }         out.close();     }      } ","import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader sc = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Solver solver = new Solver(); int t = sc.nextInt();         while (t-- != 0) {             solver.solve(sc, out);         }         out.close();     }     static class Solver {         ArrayList<Integer>[] gp;         int theirdist = 0;         int dist = 0;         boolean[] vis;         int first;         int sec;         public void solve(InputReader sc, PrintWriter out) {             int n = sc.nextInt();             int a = sc.nextInt()-1;             int b = sc.nextInt()-1;             int da = sc.nextInt();             int db = sc.nextInt();dist=0;first=0;sec=0;             vis = new boolean[n];             theirdist = 0;             gp = new ArrayList[n];             for(int i = 0; i < n; i++) {                 gp[i] = new ArrayList<>();             }             for(int i = 0; i < n-1; i++) {                 int s = sc.nextInt()-1;                 int d = sc.nextInt()-1;                 gp[s].add(d);                 gp[d].add(s);             }             dfsfirst(0,0);             Arrays.fill(vis,false);             dist = 0;             dfssec(first,0);             int dia = dist;             Arrays.fill(vis,false);             dfstheir(a,b,0);             if(theirdist<=da) {                 out.println(""Alice"");                 return;             }             if(da>=(dia+1)/2) {                 out.println(""Alice"");                 return;             }             if(db<(da*2)+1) {                 out.println(""Alice"");                 return;             }             out.println(""Bob"");         }         private void dfstheir(int a, int b, int i) {             vis[a] = true;             if(a==b) {                 theirdist = i;                              }             for(int v : gp[a]) {                 if(!vis[v]) {                     dfstheir(v,b,i+1);                 }             }         }         private void dfssec(int first, int i1) {             vis[first] = true;             for(int v : gp[first]) {                 if(!vis[v]) {                     dfssec(v,i1+1);                 }             }             if(i1>=dist) {                 dist = i1;                 sec = first;             }         }         private void dfsfirst(int i, int i1) {             vis[i] = true;             for(int v : gp[i]) {                 if(!vis[v]) {                     dfsfirst(v,i1+1);                 }             }             if(i1>=dist) {                 dist = i1;                 first = i;             }         }     }                          } ",0
349,"import java.io.*; import java.util.*; public class A {                         static FastReader sc = new FastReader();     static OutputStream outputStream = System.out;               private static void ADMIN_MODE() throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             sc = new FastReader(new FileInputStream(""input.txt""));         }     }               public static void main(String[] args)             throws IOException {         ADMIN_MODE();         int t = sc.ni();while(t-->0)             solve();     }     static int[] res;     static List<List<Integer>> graph;     static boolean two = true;     static HashMap<pr<Integer, Integer>, Integer> hm;     static void solve() throws IOException {         int n = sc.ni();         graph = new ArrayList<>();         res = new int[n-1];         hm = new HashMap<>();         for(int i = 0; i <= n; i++) {             graph.add(new ArrayList<>());         }         boolean f = false;         for(int i = 0; i < n-1; i++) {             int a = sc.ni(), b = sc.ni();             graph.get(a).add(b);             graph.get(b).add(a);             if(graph.get(a).size() > 2 || graph.get(b).size() > 2) f = true;             hm.put(new pr<>(a, b), i);             hm.put(new pr<>(b, a), i);         }         if(f) {             System.out.println(-1);             return;         }         int one = 0;         for(int i = 0; i < n; i++) {             if(graph.get(i).size() == 1) {                 one = i;                 break;             }         }         dfs(one, -1);         for(int i: res) {             System.out.println(i+"" "");         }         System.out.println();     }     static void dfs(int at, int pt) {         List<Integer> li = graph.get(at);         if(pt != -1) {             res[hm.get(new pr<>(at, pt))] = two?2:3;             two = !two;         }         for(int to: li) {             if(to == pt) continue;             dfs(to, at);         }     }     static class pr <T, V> {             T a; V b;             public pr(T a, V b) {                 this.a = a;                 this.b = b;             }                                   } } ","import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.StringTokenizer; public class C {     static class scanner {         static BufferedReader reader;         static StringTokenizer tokenizer;         static void init(InputStream input) {             reader = new BufferedReader(new InputStreamReader(input));             tokenizer = new StringTokenizer("""");         }         static String next() throws IOException {             while (!tokenizer.hasMoreTokens()) {                 tokenizer = new StringTokenizer(reader.readLine());             }             return tokenizer.nextToken();         }         static int nextInt() throws IOException {return Integer.parseInt(next());}                       }                                                                                                                   static class Pair {int first, second;public Pair(int first, int second) {this.first = first;this.second = second;}}          public static void main(String[] args) throws IOException {         scanner.init(System.in);         int t = 1;         t = scanner.nextInt();         while (t-- > 0) {             solve();         }     }          static void solve() throws IOException {         int n = scanner.nextInt();         List<List<Pair>> tree = new ArrayList<>();         for (int i = 0; i < n; i++) {             tree.add(new ArrayList<>());         }         for (int i = 0; i < n-1; i++) {             int u = scanner.nextInt()-1;             int v = scanner.nextInt()-1;             tree.get(u).add(new Pair(v, i));             tree.get(v).add(new Pair(u, i));         }         int start = -1;         for (int i = 0; i < n; i++) {             if(tree.get(i).size() > 2) {                 System.out.println(-1);                 return;             }             else if(tree.get(i).size() == 1) {                 start = i;             }         }         int[] res = new int[n-1];         Queue<Integer> q = new LinkedList<>();         q.add(start);         int weight =  2, prev = -1;         while (!q.isEmpty()) {             int u = q.poll();             for(Pair v : tree.get(u)) {                 if(v.first != prev) {                     q.add(v.first);                     res[v.second] = weight;                     weight = 5 - weight;                 }             }             prev = u;         }         for(int i : res) {             System.out.print(i + "" "");         }         System.out.println();     }     } ",0
350,"import java.io.*; import java.util.*; public class A {               static int t = 0;                    static FastReader sc = new FastReader();     static OutputStream outputStream = System.out;     static long ima = Integer.MAX_VALUE;               private static void ADMIN_MODE() throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             sc = new FastReader(new FileInputStream(""input.txt""));         }     }          static int tt = 0;          public static void main(String[] args)             throws IOException {         ADMIN_MODE();         t = sc.ni();while(t-->0) {             tt++;             solve();         }     }     static void solve() throws IOException {         int n = sc.ni();         String s1 = sc.ns();         String s2 = sc.ns();         char[] strr = s1.toCharArray();         char[] strr2 = s2.toCharArray();         HashSet<Integer> lia = new HashSet<>(), lib = new HashSet<>();         for(int i = 0; i < n; i++) {             if(strr[i]=='1') lia.add(i);             else lib.add(i);         }         HashSet<Integer> liaa = new HashSet<>();         for(int i = 0; i < n; i++) {             if(strr2[i]=='1') liaa.add(i);         }         if(!(lia.size() == liaa.size() || lib.size()+1 == liaa.size())) {             System.out.println(-1);             return;         }         int ac = 0, bc = 0;         for(int i: lia) {             if(liaa.contains(i)) ac++;         }         bc = liaa.size()-ac;         if(lia.size() == liaa.size() && lia.size() == ac) {             System.out.println(0);             return;         }         int nac = lia.size()-ac;         int nbc = lib.size()-bc;         long ansa = ac != 0 && (ac-1 == nbc)? Math.abs(ac-1+nbc): ima;         long ansb = nac != 0 && (nac-1 == bc-1)? Math.abs(nac-1+bc): ima;         if(ansa == ima && ansb == ima) {             System.out.println(-1);             return;         }         System.out.println(Math.min(ansa, ansb)+1);     } } ","import java.io.*; import java.util.*; public class A {               static int t = 0;                    static FastReader sc = new FastReader();     static OutputStream outputStream = System.out;     static long ima = Integer.MAX_VALUE;               private static void ADMIN_MODE() throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             sc = new FastReader(new FileInputStream(""input.txt""));         }     }          static int tt = 0;          public static void main(String[] args)             throws IOException {         ADMIN_MODE();         t = sc.ni();while(t-->0) {             tt++;             solve();         }     }     static void solve() throws IOException {         int n = sc.ni();         String s1 = sc.ns();         String s2 = sc.ns();         char[] strr = s1.toCharArray();         char[] strr2 = s2.toCharArray();         HashSet<Integer> lia = new HashSet<>(), lib = new HashSet<>();         for(int i = 0; i < n; i++) {             if(strr[i]=='1') lia.add(i);             else lib.add(i);         }         HashSet<Integer> liaa = new HashSet<>();         for(int i = 0; i < n; i++) {             if(strr2[i]=='1') liaa.add(i);         }         if(!(lia.size() == liaa.size() || lib.size()+1 == liaa.size())) {             System.out.println(-1);             return;         }         int ac = 0, bc = 0;         for(int i: lia) {             if(liaa.contains(i)) ac++;         }         bc = liaa.size()-ac;         if(lia.size() == liaa.size() && lia.size() == ac) {             System.out.println(0);             return;         }         int nac = lia.size()-ac;         int nbc = lib.size()-bc;         long ansa = ac != 0 && (ac-1 == nbc)? Math.abs(ac-1+nbc): ima;         long ansb = nac != 0 && (nac-1 == bc-1)? Math.abs(nac-1+bc): ima;         if(ansa == ima && ansb == ima) {             System.out.println(-1);             return;         }         System.out.println(Math.min(ansa, ansb)+1);     } } ",1
351,"import java.io.*; import java.util.*; public class A {     static FastScanner fs;     public static void main(String[] args) {         fs=new FastScanner();         int t = fs.nextInt();         while (t-->0)             solve();     }     public static void solve() {         int n = fs.nextInt();         int[] c = fs.readArray(n);         long sumEven = c[0];         long minEven = c[0];         long sumOdd = c[1];         long minOdd = c[1];         long ans = n*minOdd+n*minEven;         for (int i=2; i<n; i++) {             if (i%2==0) {                 sumEven+=c[i];                 minEven = Math.min(minEven, c[i]);             }             else {                 sumOdd+=c[i];                 minOdd = Math.min(minOdd, c[i]);             }             ans = Math.min(ans, sumEven+(n-i/2-1)*minEven+sumOdd+(n-(i+1)/2)*minOdd);         }         System.out.println(ans);     }          static final Random random =new Random();           } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; public final class C {     public static void main(String[] args) {         final FastScanner fs = new FastScanner();         final int t = fs.nextInt();         for (int test = 0; test < t; test++) {             final int n = fs.nextInt();             final int[] arr = fs.nextIntArray(n);             long evenSum = arr[0];             long oddSum = arr[1];             int minEven = arr[0];             int minOdd = arr[1];             long res = (long) n * arr[0] + (long) n * arr[1];             for (int i = 2; i < n; i++) {                 if (i % 2 == 0) {                     minEven = Math.min(minEven, arr[i]);                     evenSum += arr[i];                     final long eC = n - i / 2 - 1;                     final long oC = n - i / 2;                     final long curr = evenSum + eC * minEven + oddSum + oC * minOdd;                     res = Math.min(res, curr);                 } else {                     minOdd = Math.min(minOdd, arr[i]);                     oddSum += arr[i];                     final long c = n - i / 2 - 1;                     final long curr = oddSum + c * minOdd + evenSum + c * minEven;                     res = Math.min(res, curr);                 }             }             System.out.println(res);         }     }     static final class Utils {                                    private Utils() {}     }      } ",0
352,"import java.io.*; import java.util.*; public class A1 {     static final Reader s = new Reader();     static final PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) throws IOException {         int t  = s.nextInt();         for(int i=1; i<=t; ++i) {             new Solver();         }         out.close();     }     static class Solver {     Solver() {     int n = s.nextInt();     String[] a = new String[n];     int[][] cnt = new int[n][5];     for(int i=0;i<n;i++) {     char[] g = s.next().toCharArray();     for(int j=0;j<g.length;j++) {     cnt[i][g[j]-'a']++;     }     }     int g=0;     for(int i=0;i<5;i++) {     List<Integer> l = new ArrayList<>();     for(int j=0;j<n;j++) {     int sum=0;     for(int k=0;k<5;k++) {     if(i==k)sum+=cnt[j][k];     else sum-=cnt[j][k];     }     l.add(sum);     }     Collections.sort(l,Collections.reverseOrder());     int f=0;     int v=0;     for(int h:l) {     v += h;     if(v > 0)f++;     else break;     }     g = Math.max(g, f);     }     out.println(g);     }     }      } ","import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ",1
353,"import java.io.*; import java.util.*; public class A734C {     public static void main(String[] args) {         JS scan = new JS();         int t = scan.nextInt();         loop:while(t-->0){             int n = scan.nextInt();             String[] arr= new String[n];             Integer[][] counts = new Integer[5][n];             for(int i = 0;i<5;i++){                 for(int j = 0;j<n;j++){                     counts[i][j] = 0;                 }             }             for(int i =0;i<n;i++){                 arr[i] = scan.next();                 int[] freq =new int[5];                 for(int j = 0;j<arr[i].length();j++){                     freq[arr[i].charAt(j)-'a']++;                 }                 for(int j = 0;j<5;j++){                     counts[j][i] = freq[j]-(arr[i].length()-freq[j]);                 }             }             int best = 0;             for(int i = 0;i<5;i++){                 Arrays.sort(counts[i]);                 int curr = 0;                 int extra = 0;                 for(int j = n-1;j>=0;j--){                     extra+=counts[i][j];                     if(extra>0)curr++;                 }                 best = Math.max(best,curr);             }             System.out.println(best);         }     }      } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ",0
354,"import java.io.*; import java.util.*; public class Agad {     public static void main(String[] args) throws IOException {         FastReader reader = new FastReader();         PrintWriter writer = new PrintWriter(System.out);         int t = reader.nextInt();         while(t-- > 0) {             n = reader.nextInt();             lr = new int[n][2];             for (int i = 0; i < n; i++) {                 lr[i][0] = reader.nextInt(); lr[i][1] = reader.nextInt();             }             g = new ArrayList[n];             for (int i = 0; i < n; i++) g[i] = new ArrayList<>();             for (int i = 1; i < n; i++) {                 int a = reader.nextInt() - 1, b = reader.nextInt() - 1;                 g[a].add(b); g[b].add(a);             }             long[] dp = dfs(0, -1);             writer.write(Math.max(dp[0], dp[1]) + ""\n"");         }                 writer.flush();         writer.close();     }     static int n;     static int[][] lr;     static ArrayList<Integer>[] g;     static long[] dfs(int v, int p) {         long[] dp = new long[2];         for (int ch : g[v]) if (ch != p) {             long[] tmp = dfs(ch, v);             dp[0] += Math.max(tmp[0] + Math.abs(lr[v][0] - lr[ch][0]), tmp[1] + Math.abs(lr[v][0] - lr[ch][1]));             dp[1] += Math.max(tmp[0] + Math.abs(lr[v][1] - lr[ch][0]), tmp[1] + Math.abs(lr[v][1] - lr[ch][1]));         }         return dp;     }      } ","import java.util.*; import java.io.*; public class Solution {          private static boolean[] isPrime;                    static ArrayList<Integer>[] adj;     static void getAdj(int n,int q, FastReader sc){         adj = new ArrayList[n+1];         for(int i=1;i<=n;i++){             adj[i] = new ArrayList<>();         }         for(int i=0;i<q;i++){             int a = sc.nextInt();             int b = sc.nextInt();             adj[a].add(b);             adj[b].add(a);         }     }     static PrintWriter out;     public static void main(String[] args) throws IOException {         FastReader sc = new FastReader();         out = new PrintWriter(System.out);                           int t = sc.nextInt();         StringBuilder output = new StringBuilder();         while (t-- > 0) {             int n = sc.nextInt();             pair = new int[n+1][2];             dp = new long[n+1][2];             for(int i=1;i<=n;i++){                 pair[i][0]=sc.nextInt();                 pair[i][1]=sc.nextInt();             }             getAdj(n, n-1, sc);             output.append(solver(n)).append(""\n"");         }         out.println(output);                                             out.flush();     }     static int[][] pair;     static long[][] dp;     public static long solver(int n) {         dfs(1,  0);         return Math.max(dp[1][0], dp[1][1]);     }     static void dfs(int node, int parent){         for(Integer child: adj[node]){             if(child!=parent){                 dfs(child,  node);                 long left1 = Math.abs(pair[node][0]-pair[child][0]) + dp[child][0];                 long right1 = Math.abs(pair[node][0]-pair[child][1]) + dp[child][1];                 long left2 = Math.abs(pair[node][1]-pair[child][0]) + dp[child][0];                 long right2 = Math.abs(pair[node][1]-pair[child][1]) + dp[child][1];                 dp[node][0] += Math.max(left1, right1);                 dp[node][1] += Math.max(left2, right2);             }         }     } } ",0
355,"import java.io.*; import java.util.*; public class AirConditioners {     public static long[] solve(int n, int k, HashMap<Integer, Integer> store) {         long[] result = new long[n];         Arrays.fill(result, Integer.MAX_VALUE);         long current = Integer.MAX_VALUE;         for (int i = 0; i < n; i++) {             current++;             if (store.containsKey(i)) {                 current = Math.min(current, store.get(i));             }             result[i] = Math.min(result[i], current);         }         current = Integer.MAX_VALUE;         for (int i = n - 1; i >= 0; i--) {             current++;             if (store.containsKey(i)) {                 current = Math.min(current, store.get(i));             }             result[i] = Math.min(result[i], current);         }         return result;     }     public static void main(String[] args) {         FastScanner fs = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int test = fs.nextInt();         for (int t = 0; t < test; t++) {             int n = fs.nextInt();             int k = fs.nextInt();             int[] array = fs.readArray(k);             int[] temperature = fs.readArray(k);             HashMap<Integer, Integer> store = new HashMap<>();             for (int i = 0; i < k; i++) {                 store.put(array[i] - 1, temperature[i]);             }             long[] ans = solve(n, k, store);             for (int i = 0; i < n; i++) {                 out.print(ans[i] + "" "");             }             out.println();         }         out.println();         out.close();     }           } ","import java.util.*; import java.io.*; public class Solution {          private static boolean[] isPrime;                                                                                               static PrintWriter out;     static FastReader sc ;     public static void main(String[] args) throws IOException {         sc = new FastReader();         out = new PrintWriter(System.out);                           int t = sc.nextInt();         StringBuilder output = new StringBuilder();         while (t-- > 0) {             int n= sc.nextInt();             int k= sc.nextInt();             long[][] arr = new long[k][2];             for(int i=0;i<k;i++){                 arr[i][0] = sc.nextLong();             }             for(int i=0;i<k;i++){                 arr[i][1] = sc.nextLong();             }                          solver(arr, k, n);         }         out.println(output);                                             out.flush();     }     public static void solver(long[][] arr, int k, int n) {         HashMap<Long, Long> map = new HashMap<>();         for(int i=0;i<k;i++){             map.put(arr[i][0]-1, arr[i][1]);         }         long cur = Integer.MAX_VALUE;         long[] left = new long[n];         long[] right = new long[n];         for(int i=0;i<n;i++){             long temp = Integer.MAX_VALUE;             if(map.containsKey((long)i)){                 temp = map.get((long)i);             }             cur = Math.min(cur+1, temp);             left[i] = cur;                      }         cur = Integer.MAX_VALUE;         for(int i=n-1;i>=0;i--){             long temp = Integer.MAX_VALUE;             if(map.containsKey((long)i)){                 temp = map.get((long)i);             }             cur = Math.min(cur+1, temp);             right[i] = cur;         }         for(int i=0;i<n;i++){             out.print(Math.min(left[i], right[i])+"" "");         }         out.println();     } } ",0
356,"import java.io.*; import java.util.*; public class AirConditioners { static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static StringTokenizer st; static PrintWriter out = new PrintWriter(System.out); public static void main(String[] args) throws IOException { int q = readInt(); while (q-- > 0) { int n = readInt(), k = readInt(); int[] a = new int[k], t = new int[k], c = new int[n]; for (int i = 0; i < k; i ++) a[i] = readInt(); for (int i = 0; i < k; i ++) t[i] = readInt(); Arrays.fill(c, Integer.MAX_VALUE); for (int i = 0; i < k; i ++) c[a[i] - 1] = t[i]; int[] l = new int[n], r = new int[n]; int prev = (int) 2e9; for (int i = 0; i < n; i ++) { l[i] = Math.min(prev + 1, c[i]); prev = l[i]; } prev = (int) 2e9; for (int i = n - 1; i >= 0; i --) { r[i] = Math.min(prev + 1, c[i]); prev = r[i]; } for (int i = 0; i < n; i ++) System.out.print(Math.min(l[i], r[i]) + "" ""); System.out.println(); } } static String next() throws IOException { while (st == null || !st.hasMoreTokens())  st = new StringTokenizer(br.readLine().trim()); return st.nextToken(); } static int readInt() throws IOException { return Integer.parseInt(next()); } static String readLine() throws IOException { return br.readLine().trim(); } } ","import java.io.*; import java.util.*;   public class Codeforces { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int cases = Integer.parseInt(br.readLine()); while(cases-- > 0) { br.readLine(); String[] str = br.readLine().split("" ""); int n = Integer.parseInt(str[0]); int k = Integer.parseInt(str[1]); int[] a = new int[k]; int[] t = new int[k]; str = br.readLine().split("" ""); for(int i=0; i<k; i++) { a[i] = Integer.parseInt(str[i]) - 1; } str = br.readLine().split("" ""); for(int i=0; i<k; i++) { t[i] = Integer.parseInt(str[i]); } int[] temp = new int[n]; Arrays.fill(temp, Integer.MAX_VALUE); int[] left = new int[n]; int[] right = new int[n]; Arrays.fill(left, Integer.MAX_VALUE); Arrays.fill(right, Integer.MAX_VALUE); int ind = 0; for(int i=0; i<k; i++) { left[a[i]] = t[i]; right[a[i]] = t[i]; } int minleft = Integer.MAX_VALUE; for(int i=0; i<n; i++) { left[i] = Math.min(left[i], minleft); minleft = left[i] == Integer.MAX_VALUE ? Integer.MAX_VALUE : left[i]+1; } int minright = Integer.MAX_VALUE; for(int i=n-1; i>=0; i--) { right[i] = Math.min(right[i], minright); minright = right[i] == Integer.MAX_VALUE ? Integer.MAX_VALUE : right[i]+1; } for(int i=0; i<n; i++) { temp[i] = Math.min(right[i], left[i]); System.out.print(temp[i]+"" ""); } System.out.println(); } } } ",0
357,"import java.io.*; import java.util.*; public class ArmChairs {          public static int solution(int n, int[] arr) {         ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }         int[][] dp = new int[one.size() + 1][zero.size() + 1];         for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }         return dp[one.size()][zero.size()];     }     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));         int n = Integer.parseInt(br.readLine());         String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }          log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; public class CodeForces {     public static void main(String[] args) throws IOException {         FastReader input = new FastReader();         PrintWriter output = new PrintWriter(System.out);                                             int n=input.nextInt();         ArrayList<Integer>seated=new ArrayList<>();         ArrayList<Integer>empty=new ArrayList<>();         for(int i=0;i<n;i++){             int x=input.nextInt();             if(x==1)                 seated.add(i);             else                 empty.add(i);         }         if(seated.size()==0)             output.println(0);         else{             output.println(helper(seated,empty));         }         output.close();     }     public static long helper(ArrayList<Integer>seated,ArrayList<Integer>empty){         long dp[][]=new long[seated.size()+1][empty.size()+1];         for(int i=1;i<= seated.size();i++){             dp[i][i]=dp[i-1][i-1]+Math.abs(seated.get(i-1)-empty.get(i-1));             for(int j=i+1;j<= empty.size();j++){                 dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(seated.get(i-1)-empty.get(j-1)));             }         }         return dp[seated.size()][empty.size()];     }                     }                } ",1
358,"import java.io.*; import java.util.*; public class ArmChairs {          public static int solution(int n, int[] arr) {         ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }         int[][] dp = new int[one.size() + 1][zero.size() + 1];         for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }         return dp[one.size()][zero.size()];     }     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));         int n = Integer.parseInt(br.readLine());         String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }          log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              } } ","import java.util.*; import java.io.*; public class Armchairs  { public static int val(int b[],int m,int c[],int n,int dp[][]) { if(dp[m][n]>-1) { return dp[m][n]; } else if(m==0) { return 0; } else if(n==0) { return 2099999999; } else { return dp[m][n]=Math.min(val(b,m-1,c,n-1,dp)+Math.abs(b[m-1]-c[n-1]),val(b,m,c,n-1,dp)); } } public static void process()throws IOException { int n=I(); int a[]=Ai(n); ArrayList<Integer> arr=new ArrayList<Integer>(); ArrayList<Integer> arr1=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(a[i]==0) { arr1.add(i); } else { arr.add(i); } } int b[]=new int[arr.size()]; int c[]=new int[arr1.size()]; int m=arr.size();int n1=arr1.size(); int dp[][]=new int[m+1][n1+1]; dyn(dp,m+1,n1+1,-1); for(int i=0;i<arr.size();i++) { b[i]=arr.get(i); } for(int i=0;i<arr1.size();i++) { c[i]=arr1.get(i); } arr.clear();     arr1.clear();    pn(val(b,m,c,n1,dp)); } static Scanner sc = new Scanner(System.in); static PrintWriter out = new PrintWriter(System.out); static void pn(Object o){out.println(o);out.flush();} static int I() throws IOException{return sc.nextInt();} static int[] Ai(int n) throws IOException{int[] arr = new int[n];for (int i = 0; i < n; i++)arr[i] = I();return arr;} static void dyn(int dp[][],int n,int m,int z)throws IOException {for(int i=0;i<n;i++){ for(int j=0;j<m;j++){ dp[i][j]=z;}} } public static void main(String[] args)throws IOException{try{boolean oj=true;if(oj==true) {AnotherReader sk=new AnotherReader();PrintWriter out=new PrintWriter(System.out);} else {AnotherReader sk=new AnotherReader(100);out=new PrintWriter(""output.txt"");} {process();}out.flush();out.close();}catch(Exception e){return;}}} ",0
359,"import java.io.*; import java.util.*; public class ArmChairs {          public static int solution(int n, int[] arr) {         ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }         int[][] dp = new int[one.size() + 1][zero.size() + 1];         for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }         return dp[one.size()][zero.size()];     }     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));         int n = Integer.parseInt(br.readLine());         String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }          log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              } } ","import java.util.*; import java.io.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int n = sc.nextInt(); ArrayList<Integer>  o=new ArrayList<Integer>(); ArrayList<Integer>  e=new ArrayList<Integer>(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++){ dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } } System.out.println(dp[o.size()][e.size()]); } } ",1
360,"import java.io.*; import java.util.*; public class ArmChairs {          public static int solution(int n, int[] arr) {         ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }         int[][] dp = new int[one.size() + 1][zero.size() + 1];         for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }         return dp[one.size()][zero.size()];     }     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));         int n = Integer.parseInt(br.readLine());         String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }          log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              } } ","import java.util.*; public class Longjumps {  public static void main(String[] args){  Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]);  } } ",1
361,"import java.io.*; import java.util.*; public class ArmChairs {          public static int solution(int n, int[] arr) {         ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }         int[][] dp = new int[one.size() + 1][zero.size() + 1];         for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }         return dp[one.size()][zero.size()];     }     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));         int n = Integer.parseInt(br.readLine());         String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }          log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              } } ","import java.util.*; public class MyClass {     public static void main(String args[]) {      Scanner s=new Scanner(System.in);      int n=s.nextInt();      int a[]=new int[n];      ArrayList<Integer> lt1=new ArrayList<>();      ArrayList<Integer> lt0=new ArrayList<>();      for(int i=0;i<n;i++)      {          int l=s.nextInt();          if(l==0)          lt0.add(i+1);          else          lt1.add(i+1);      }      int dp[][]=new int[lt1.size()+1][lt0.size()+1];      for(int i=1;i<=lt1.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(lt0.get(i-1)-lt1.get(i-1));          for(int j=i+1;j<=lt0.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(lt1.get(i-1)-lt0.get(j-1)));          }      }      System.out.println(dp[lt1.size()][lt0.size()]);           } } ",1
362,"import java.io.*; import java.util.*; public class Asd {     static PrintWriter w = new PrintWriter(System.out);     static FastScanner s = new FastScanner();     static boolean sd = false;        public static void main(String[] args) {        int t = s.nextInt();                  while (t-- > 0) {             solve();         }         w.close();     }   public static class Student {     public int i1;     public int value;                     public Student(int i1,int i2) {                this.i1 = i1;         this.value=i2;     }            public int getkey() {         return i1;     }      public int getValue() {         return value;     }  }    static class StudentComparator implements Comparator<Student>{                                                                       }               public static void solve() {         int n=s.nextInt();         int m=s.nextInt();         int x=s.nextInt();         int arr[]=new int[n];int res[]=new int[n];         for(int i=0;i<n;i++)             arr[i]=s.nextInt();                  PriorityQueue<Student> pq=new PriorityQueue<Student>(new StudentComparator());         for(int i=0;i<m;i++){             pq.add(new Student(arr[i],i));res[i]=i;}         for(int i=m;i<n;i++)         {             Student s1=pq.poll();             int k2=s1.getkey()+arr[i];             int v2=s1.getValue();res[i]=v2;             pq.add(new Student(k2,v2));         }         w.println(""YES"");         for(int i=0;i<n;i++)             w.print(res[i]+1+"" "");         w.println();             }                               } ","import java.io.*; import java.util.*; public class codefor  { static class height implements Comparable<height> { int h,index; height(int hi,int i) { h=hi; index=i; } }   public static void main(String[] args)  { FastReader sc=new FastReader(); int T=sc.nextInt(); while(T-->0) { int n=sc.nextInt(),m=sc.nextInt(),x=sc.nextInt(),i; ArrayList<height> arr=new ArrayList<>(); int ans[]=new int[n]; PriorityQueue<height> tower=new PriorityQueue<height>(); for(i=0;i<n;i++) arr.add(new height(sc.nextInt(),i)); if(n<m) System.out.println(""NO""); else { System.out.println(""YES""); Collections.sort(arr,Collections.reverseOrder()); for(i=0;i<m;i++) tower.add(new height(0,i+1)); for(i=0;i<n;i++) { height t=tower.poll(); t.h=t.h+arr.get(i).h; tower.add(t); ans[arr.get(i).index]=t.index; } for(i=0;i<n;i++) System.out.print(ans[i]+"" ""); System.out.println(); } } } } ",0
363,"import java.io.*; import java.util.*; public class Asd {     static PrintWriter w = new PrintWriter(System.out);     static FastScanner s = new FastScanner();     static boolean sd = false;        public static void main(String[] args) {        int t = s.nextInt();                  while (t-- > 0) {             solve();         }         w.close();     }   public static class Student {     public int i1;     public int value;                     public Student(int i1,int i2) {                this.i1 = i1;         this.value=i2;     }            public int getkey() {         return i1;     }      public int getValue() {         return value;     }  }    static class StudentComparator implements Comparator<Student>{                                                                       }               public static void solve() {         int n=s.nextInt();         int m=s.nextInt();         int x=s.nextInt();         int arr[]=new int[n];int res[]=new int[n];         for(int i=0;i<n;i++)             arr[i]=s.nextInt();                  PriorityQueue<Student> pq=new PriorityQueue<Student>(new StudentComparator());         for(int i=0;i<m;i++){             pq.add(new Student(arr[i],i));res[i]=i;}         for(int i=m;i<n;i++)         {             Student s1=pq.poll();             int k2=s1.getkey()+arr[i];             int v2=s1.getValue();res[i]=v2;             pq.add(new Student(k2,v2));         }         w.println(""YES"");         for(int i=0;i<n;i++)             w.print(res[i]+1+"" "");         w.println();             }                               } ","import java.util.*; import java.lang.*; import java.io.*; public class Template { static class Pair implements Comparable<Pair> { int h; int ind; Pair(int h, int ind) { this.h = h; this.ind = ind; } } public static void main(String[] args) { FastReader fs=new FastReader(); int T=fs.nextInt(); for (int tt=0; tt<T; tt++) { int n = fs.nextInt(); int m = fs.nextInt(); int x = fs.nextInt(); if(n < m) { System.out.println(""NO""); continue; } Pair a[] = new Pair[n]; PriorityQueue<Pair> heap = new PriorityQueue<>(); for(int i=0;i<n;i++) { a[i] = new Pair(fs.nextInt(), i); } Arrays.sort(a); for(int i=1;i<=m;i++) { heap.add(new Pair(0, i)); } int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; int ans[] = new int[n]; int idx = 0; while(!heap.isEmpty() && idx < n) { Pair curr = heap.poll(); curr.h += a[idx].h; ans[a[idx].ind] = curr.ind; heap.add(new Pair(curr.h,  curr.ind)); idx++; } System.out.println(""YES""); for(int i:ans) System.out.print(i+"" ""); System.out.println(); } } } ",0
364,"import java.io.*; import java.util.*; public class A{     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Task solver = new Task();         solver.solve(in, out);         out.close();     }          static class Task{         double eps= 0.00000001;         static final int MAXN = 10000001;                           static int spf[] = new int[MAXN];          Map<Integer,Set<Integer>> dp= new HashMap<>();                                                                                                                                                                      ArrayList<Integer>A = new ArrayList<>();         ArrayList<Integer>B = new ArrayList<>();         ArrayList<List<Integer>> L = new ArrayList<List<Integer>>();         public void solve(InputReader in, PrintWriter out) {                        int n= in.nextInt();             int[] A= new int[n];             final int INF= 1000000000;             List<Integer> pos= new ArrayList<>();             for (int i = 0; i < n; i++){                 A[i]= in.nextInt();                 if (A[i] == 1) pos.add(i);             }             int cnt = pos.size();             int[][] dp= new int[cnt][n+1];             for(int[] temp: dp) Arrays.fill(temp,INF);             if (cnt == 0){                 out.println(0);                 return;             }             for (int i = n - 1; i >= 0; i--){                 dp[cnt - 1][i] = dp[cnt - 1][i + 1];                 if (A[i] != 1){                     dp[cnt - 1][i] = Math.min(dp[cnt - 1][i], Math.abs(i - pos.get(pos.size()-1)));                 }             }             for (int i = cnt - 2; i >= 0; i--){                 for (int j = n - 1; j >= 0; j--){                     dp[i][j] = dp[i][j + 1];                     if (A[j] != 1){                         dp[i][j] = Math.min(dp[i][j], Math.abs(j - pos.get(i)) + dp[i + 1][j + 1]);                     }                 }             }             out.println(dp[0][0]);         }                       }                     } ","import java.io.*; import java.util.*; public class D { public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out)); public static void main(String[] args) throws IOException { readInput(); out.close(); } static List<Integer> o1, o0; static int[][] dp; static int solve(int i, int j) { if (i >= dp.length) return 0; if (j >= dp[0].length) return Integer.MAX_VALUE/10; if (dp[i][j] == -1) { dp[i][j] = Integer.min(solve(i,j+1), solve(i+1,j+1) + Math.abs(o1.get(i)-o0.get(j))); } return dp[i][j]; } public static void readInput() throws IOException { int n; n = Integer.parseInt(br.readLine()); int[] a=  new int[n]; StringTokenizer st = new StringTokenizer(br.readLine()); o1 = new ArrayList<Integer>(); o0 = new ArrayList<Integer>(); for (int i = 0; i < n; i++) { a[i] = Integer.parseInt(st.nextToken()); if (a[i] == 1) o1.add(i); else o0.add(i); } if (o1.size() == 0) { out.println(0); return; } dp = new int[o1.size()][o0.size()]; for (int[] x: dp) Arrays.fill(x, -1); out.println(solve(0,0)); } } ",0
365,"import java.io.*; import java.util.*; public class B {                              static FastReader sc = new FastReader();               private static void ADMIN_MODE() throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             sc = new FastReader(new FileInputStream(""input.txt""));         }     }               public static void main(String[] args)             throws IOException {         ADMIN_MODE();         int t = sc.ni();while(t-->0)             solve();     }     static void solve() throws IOException {         int n = sc.ni();         long k = sc.nl();         Long[] arr = new Long[n];         for(int i = 0; i < n; i++) arr[i] = sc.nl();         Arrays.sort(arr);         long sum = 0;         for(int i = 0; i < n; i++) {             sum += arr[i];         }         if(sum <= k) {             System.out.println(0);             return;         }         long cont = 0;         long min = sum-k;         for(int i = n-1; i >= 0; i--) {             cont += arr[i];             long psum = sum-cont;             if(psum <= k) {                 long extra = k-psum;                 if(arr[0]*(n-i)<=extra) {                     min = Math.min(min, n-i);                     continue;                 }                 if(i == 0) {                     long q = k/n;                     long ans = arr[0]-q+n-1;                     min = Math.min(min, ans);                     continue;                 }                 extra += arr[0];                 long q = extra/(n-i+1);                 long ans = arr[0]-q+n-i;                 min = Math.min(min, ans);             } else {                 long toRem = psum-k-arr[0];                 long q = (long)Math.ceil(toRem/(n-i+1.0));                 long ans = q+arr[0]+n-i;                 min = Math.min(min, ans);             }         }         System.out.println(min);     } } ","import java.io.*; import java.util.*; public class B {                              static FastReader sc = new FastReader();     static OutputStream outputStream = System.out;               private static void ADMIN_MODE() throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             sc = new FastReader(new FileInputStream(""input.txt""));         }     }               public static void main(String[] args)             throws IOException {         ADMIN_MODE();         int t = sc.ni();while(t-->0)             solve();         w.close();     }     static void solve() throws IOException {         int n = sc.ni();         long k = sc.nl();         Long[] arr = new Long[n];         for(int i = 0; i < n; i++) arr[i] = sc.nl();         Arrays.sort(arr);         long sum = 0;         for(int i = 0; i < n; i++) {             sum += arr[i];         }         if(sum <= k) {             System.out.println(0);             return;         }         long cont = 0;         long min = sum-k;         for(int i = n-1; i >= 0; i--) {             cont += arr[i];             long psum = sum-cont;             if(psum <= k) {                 long extra = k-psum;                 if(arr[0]*(n-i)<=extra) {                     min = Math.min(min, n-i);                     continue;                 }                 if(i == 0) {                     long q = k/n;                     long ans = arr[0]-q+n-1;                     min = Math.min(min, ans);                     continue;                 }                 extra += arr[0];                 long q = extra/(n-i+1);                 long ans = arr[0]-q+n-i;                 min = Math.min(min, ans);             } else {                 long toRem = psum-k-arr[0];                 long q = (long)Math.ceil(toRem/(n-i+1.0));                 long ans = q+arr[0]+n-i;                 min = Math.min(min, ans);             }         }         System.out.println(min);     } } ",1
366,"import java.io.*; import java.util.*; public class B { public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); PrintWriter output = new PrintWriter(System.out); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); char initial[] = scan.next().toCharArray(); char desired[] = scan.next().toCharArray(); int lit1 = 0, lit2 = 0; int ans = Integer.MAX_VALUE; for(int i = 0;i<n;i++) { if(initial[i]=='1') lit1++; if(desired[i]=='1') lit2++; } if(lit1==lit2) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]!=desired[i]) count++; ans = Math.min(ans, count); } if(lit2==(n-lit1+1)) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]==desired[i]) count++; ans = Math.min(ans, count); } if(ans == Integer.MAX_VALUE) ans = -1; output.println(ans); } output.flush(); } } ","import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ",0
367,"import java.io.*; import java.util.*; public class C {          static FastReader s = new FastReader();     static PrintWriter out = new PrintWriter(System.out);                         private static int ri() {         return s.nextInt();     }          private static String rs() {         return s.next();     }               static int MOD=1000000007;          public static void main(String[] args) {         StringBuilder ans = new StringBuilder();         int t = ri();         while (t-- > 0)         {             int n=ri();             int m=ri();             int[][] arr=new int[n][m];             for(int i=0;i<n;i++)             {                 char[] mid= rs().toCharArray();                 for(int j=0;j<m;j++)                 {                     arr[i][j]=mid[j]-'0';                 }             }             int res=0;             StringBuilder str=new StringBuilder();             for(int i=0;i<n;)             {                 for(int j=0;j<m;)                 {                     boolean[] vis=new boolean[4];                     HashSet<Point> set=new HashSet<>();                     int count=0;                     if(arr[i][j]==1)                     {                         count++;                         set.add(new Point(i,j));                         vis[0]=true;                     }                     if(arr[i][j+1]==1)                     {                         count++;                         set.add(new Point(i,j+1));                         vis[1]=true;                     }                     if(arr[i+1][j]==1)                     {                         count++;                         set.add(new Point(i+1,j));                         vis[2]=true;                     }                     if(arr[i+1][j+1]==1)                     {                         count++;                         set.add(new Point(i+1,j+1));                         vis[3]=true;                     }                     if(count==4)                     {                         int v1=i+1;                         int v2=j+1;                         res++;                         count=1;                         str.append(v1).append("" "").append(v2).append("" "").append(v1).append("" "").append(v2 + 1).append("" "").append(v1 + 1).append("" "").append(v2).append(""\n"");                         vis[0]=false;                         vis[1]=false;                         vis[2]=false;                         arr[i][j]=0;                         arr[i][j+1]=0;                         arr[i+1][j]=0;                     }                     if(count==1)                     {                         res++;                         count=2;                         int p1=i+1,p2=j+1;                         if(vis[0])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1 + 1).append("" "").append(p2).append(""\n"");                             vis[0]=false;                             vis[1]=true;                             vis[2]=true;                             arr[i][j]=1;                             arr[i][j+1]=0;                             arr[i+1][j]=0;                         }                         else if(vis[1])                         {                             p2++;                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2-1).append("" "").append(p1 + 1).append("" "").append(p2).append(""\n"");                             vis[1]=false;                             vis[0]=true;                             vis[3]=true;                             arr[i][j+1]=1;                             arr[i][j]=0;                             arr[i+1][j+1]=0;                         }                         else if(vis[2])                         {                             p1++;                             str.append(p1).append("" "").append(p2).append("" "").append(p1-1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append(""\n"");                             vis[2]=false;                             vis[0]=true;                             vis[3]=true;                             arr[i+1][j]=1;                             arr[i][j]=0;                             arr[i+1][j+1]=0;                         }                         else {                             p1++;                             p2++;                             str.append(p1).append("" "").append(p2).append("" "").append(p1-1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2-1).append(""\n"");                             vis[3]=false;                             vis[1]=true;                             vis[2]=true;                             arr[i+1][j+1]=1;                             arr[i][j+1]=0;                             arr[i+1][j]=0;                         }                     }                     if(count==2)                     {                         res++;                         count=3;                         int p1=i+1,p2=j+1;                         if(vis[0]&&vis[1])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1+1).append("" "").append(p2).append("" "").append(p1+1).append("" "").append(p2+1).append(""\n"");                             vis[0]=false;                             vis[2]=true;                             vis[3]=true;                             arr[i][j]=1;                             arr[i+1][j]=0;                             arr[i+1][j+1]=0;                         }                         else if(vis[0] && vis[2])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2+1).append(""\n"");                             vis[0]=false;                             vis[1]=true;                             vis[3]=true;                             arr[i][j]=1;                             arr[i][j+1]=0;                             arr[i+1][j+1]=0;                         }                         else if(vis[0] && vis[3])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2).append(""\n"");                             vis[0]=false;                             vis[1]=true;                             vis[2]=true;                             arr[i][j]=1;                             arr[i][j+1]=0;                             arr[i+1][j]=0;                         }                         else if(vis[1] && vis[2])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2+1).append(""\n"");                             vis[1]=false;                             vis[0]=true;                             vis[3]=true;                             arr[i][j+1]=1;                             arr[i][j]=0;                             arr[i+1][j+1]=0;                         }                         else if(vis[1] && vis[3])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2).append(""\n"");                             vis[1]=false;                             vis[0]=true;                             vis[2]=true;                             arr[i][j+1]=1;                             arr[i][j]=0;                             arr[i+1][j]=0;                         }                         else if(vis[2] && vis[3])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2).append(""\n"");                             vis[2]=false;                             vis[0]=true;                             vis[1]=true;                             arr[i+1][j]=1;                             arr[i][j]=0;                             arr[i][j+1]=0;                         }                     }                     if(count==3)                     {                         res+=1;                         int p1=i+1,p2=j+1;                         if(vis[0] && vis[1] && vis[2])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2).append(""\n"");                         }                         else if(vis[0] && vis[1] && vis[3])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2+1).append(""\n"");                         }                         else if(vis[0] && vis[2] && vis[3])                         {                             str.append(p1).append("" "").append(p2).append("" "").append(p1+1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2).append(""\n"");                         }                         else if(vis[3] && vis[1] && vis[2])                         {                             str.append(p1+1).append("" "").append(p2+1).append("" "").append(p1).append("" "").append(p2+1).append("" "").append(p1+1).append("" "").append(p2).append(""\n"");                         }                         arr[i][j]=0;                         arr[i][j+1]=0;                         arr[i+1][j]=0;                         arr[i+1][j+1]=0;                     }                     j+=2;                     if(j==m-1)                     {                        j--;                     }                 }                 i+=2;                 if(i==n-1)                 {                     i--;                 }             }             ans.append(res).append(""\n"");             ans.append(str.toString());         }         out.print(ans.toString());         out.flush();     }     static class Point     {         int x,y;         public Point(int x, int y) {             this.x = x;             this.y = y;         }     } } ","import java.io.*; import java.util.*; import java.util.logging.LoggingPermission; public class C_binarytable {     public static void main(String[] args) throws Exception {         FastScanner sc = new FastScanner();         FastWriter writer = new FastWriter();         int t = sc.nextInt();         while(t-- > 0) {             int n = sc.nextInt(), m = sc.nextInt();             List<Operation> ops = new ArrayList<>();             char s[][] = new char[n][m];             for(int i = 0; i < n; i++)                 s[i] = sc.next().toCharArray();                          for(int i = 0; i < n - 1; i++)                 for(int j = 0; j < m; j++) {                     if(s[i][j] == '0')                         continue;                                          if(j + 1 < m && s[i+1][j+1] == '1') {                         s[i][j] = '0';                         Operation op = new Operation();                         op.pairs.add(new Pair(i, j));                         op.pairs.add(new Pair(i + 1, j));                         op.pairs.add(new Pair(i, j + 1));                         ops.add(op);                         op = new Operation();                         op.pairs.add(new Pair(i, j + 1));                         op.pairs.add(new Pair(i + 1, j));                         op.pairs.add(new Pair(i + 1, j + 1));                         ops.add(op);                         s[i+1][j+1] = '0';                                              } else if(j > 0 && s[i+1][j-1] == '1') {                         s[i][j] = '0';                         Operation op = new Operation();                         op.pairs.add(new Pair(i, j));                         op.pairs.add(new Pair(i, j - 1));                         op.pairs.add(new Pair(i + 1, j));                         ops.add(op);                         op = new Operation();                         op.pairs.add(new Pair(i, j - 1));                         op.pairs.add(new Pair(i + 1, j - 1));                         op.pairs.add(new Pair(i + 1, j));                         ops.add(op);                         s[i+1][j-1] = '0';                     }                 }                          for(int i = 0; i < n; i++)                 for(int j = 0; j < m - 1; j++) {                     if(s[i][j] == '0')                         continue;                     Pair cur = new Pair(i, j);                     if(i + 1 < n && s[i][j+1] == '1') {                         s[i][j] = '0';                         ops.add(get(cur, cur));                         ops.add(get(cur, new Pair(i, j+1)));                         s[i][j+1] = '0';                     } else if(i + 1 == n && s[i][j+1] == '1') {                         s[i][j] = '0';                         Pair upper = new Pair(i-1, j);                         ops.add(get(upper, cur));                         ops.add(get(upper, new Pair(i, j+1)));                         s[i][j+1] = '0';                     }                 }                          for(int i = 0; i < n - 1; i++)                 for(int j = 0; j < m; j++) {                     if(s[i][j] == '0')                         continue;                     Pair prevCol = new Pair(i, j - 1);                     Pair cur = new Pair(i, j);                     if(j > 0 && s[i+1][j] == '1') {                         s[i][j] = '0';                         ops.add(get(prevCol, cur));                         ops.add(get(prevCol, new Pair(i+1, j)));                         s[i+1][j] = '0';                     } else if(j == 0 && s[i+1][j] == '1') {                         s[i][j] = '0';                         ops.add(get(cur, cur));                         ops.add(get(cur, new Pair(i + 1, j)));                         s[i+1][j] = '0';                     }                 }                          for(int i = 0; i < n; i++)                 for(int j = 0; j < m; j++) {                     if(s[i][j] == '0')                         continue;                     Pair prevCol = new Pair(i, j - 1);                     Pair cur = new Pair(i, j);                     s[i][j] = '0';                     if(i < n - 1) {                         if(j < m-1) {                             Pair next = new Pair(i, j+1);                             ops.add(get(cur, next));                             ops.add(get(cur, new Pair(i+1, j+1)));                             ops.add(get(cur, new Pair(i+1, j)));                         } else if(j == m-1) {                             ops.add(get(prevCol, prevCol));                             ops.add(get(prevCol, new Pair(i+1, j - 1)));                             ops.add(get(prevCol, new Pair(i+1, j)));                         }                     } else if(i == n-1) {                         if(j < m-1) {                             Pair upper = new Pair(i-1, j);                             ops.add(get(upper, new Pair(i-1, j+1)));                             ops.add(get(upper, new Pair(i, j+1)));                             ops.add(get(upper, upper));                         } else if(j == m-1) {                             Pair upper = new Pair(i-1, j-1);                             ops.add(get(upper, upper));                             ops.add(get(upper, new Pair(i, j-1)));                             ops.add(get(upper, new Pair(i-1, j)));                         }                     }                 }             int size = ops.size();             if(size > 3 * n * m)                 throw new RuntimeException();             writer.println(ops.size());             for(Operation op : ops)                 writer.println(op.toString());         }         writer.close();     }     static Operation get(Pair topLeft, Pair ex) {         Operation op = new Operation();         for(int i = 0; i <= 1; i++)             for(int j = 0; j <= 1; j++) {                 Pair p = new Pair(topLeft.x + i, topLeft.y + j);                 if(!p.equals(ex))                     op.pairs.add(p);             }         return op;     }     static class Operation {         List<Pair> pairs = new ArrayList<>();         @Override         public String toString() {             StringBuilder sb = new StringBuilder();             for(Pair p : pairs)                 sb.append(p.x+1 + "" "" + (p.y+1) + "" "");             return sb.toString();         }     }     static final Random random = new Random();                                             static      static                               static void println(int[] A) {         for(int e: A) System.out.print(e + "" "");         System.out.println();     }     static void println(long[] A) {         for(long e: A) System.out.print(e + "" "");         System.out.println();     }     static void println(List arr) {         for(Object e: arr) System.out.print(e + "" "");         System.out.println();     }     static <T> void println(T A[]) {         for(T i : A)             System.out.print(i + "" "");         System.out.println();     }          static void println(long n) {         System.out.println(n);     }     static void println(String s) {         System.out.println(s);     }                                                                                     private static class Pair implements Comparable<Pair> {         int x, y;         Pair(int x, int y) { this.x = x; this.y = y; }         Pair() {}                  @Override         public boolean equals(Object o) {             if (this == o) return true;             if (o == null || getClass() != o.getClass()) return false;             Pair pair = (Pair) o;             return x == pair.x &&                     y == pair.y;         }                  @Override         public String toString() {             return String.format(""(%d, %d)"", x, y);         }     }                     } ",0
368,"import java.io.*; import java.util.*; public class C {     private static ArrayDeque<Integer>[] edge;     private static HashMap<String,Integer> map;     private static String getHash(int u, int v)     {         if(u>v)         {             int tmp=u;             u=v;             v=tmp;         }         return u+"" ""+v;     }     private static void DFS(int u, int p, int[] ans, int val)     {         for(int v:edge[u])         {             if(v==p) continue;             ans[map.get(getHash(u,v))]=val;             DFS(v,u,ans,5-val);             val=5-val;         }     }     public static void main(String[] args) throws Exception     {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int i,N;         int T=Integer.parseInt(br.readLine().trim());         StringBuilder sb=new StringBuilder();         while (T-->0)         {             N=Integer.parseInt(br.readLine().trim());             edge=new ArrayDeque[N];             for(i=0;i<N;i++) edge[i]=new ArrayDeque<>();             map=new HashMap<>();             int[] ans=new int[N-1];             int[] deg=new int[N];             for(i=0;i<N-1;i++)             {                 String[] s=br.readLine().trim().split("" "");                 int u=Integer.parseInt(s[0])-1;                 int v=Integer.parseInt(s[1])-1;                 edge[u].add(v); edge[v].add(u);                 deg[u]++; deg[v]++;                 map.put(getHash(u,v),i);             }             for(i=0;i<N;i++) if(deg[i]>2) break;             if(i<N)             {                 sb.append(-1).append(""\n"");                 continue;             }             DFS(0,0,ans,2);             for(int x:ans) sb.append(x).append("" "");             sb.append(""\n"");         }         System.out.println(sb);     } } ","import java.io.*;  import java.util.*; public class one {   static Scanner sc=new Scanner(System.in);   boolean prime[];   static int prev=-1;   static int dp[][];      public static void main(String[] args) {          int testcase=sc.nextInt();            while(testcase-->0){                                  solve();        System.out.println();     }       }    public static void solve(){     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     int size=sc.nextInt();     int arr[][]=new int[size-1][2];     for(int i=0;i<size-1;i++){       arr[i][0]=sc.nextInt();       arr[i][1]=sc.nextInt();     }     for(int x[]:arr){       map.put(x[0],map.getOrDefault(x[0], 0)+1);       map.put(x[1],map.getOrDefault(x[1], 0)+1);       if(map.get(x[0])>2||map.get(x[1])>2){         System.out.println(-1);         return;       }     }     List<List<Integer>> adj=new ArrayList<>();     for(int i=0;i<=size;i++)     adj.add(new ArrayList<Integer>());     for(int x[]:arr){       adj.get(x[0]).add(x[1]);       adj.get(x[1]).add(x[0]);     }          int vist[]=new int[size+1];     HashMap<String,Integer> ans=new HashMap<String,Integer>();     for(int i=1;i<=size;i++){       if(vist[i]==0){         dfs(i,vist,adj,ans,2);       }     }          for(int x[]:arr){              int a=Math.min(x[0],x[1]);       int b=Math.max(x[0],x[1]);       String s=a+"" ""+b;       System.out.print(ans.get(s)+"" "");     }                                                                                   }   public static void dfs(int node,int vist[],List<List<Integer>> adj,HashMap<String,Integer> ans,int val){     vist[node]=1;     for(int i:adj.get(node)){       if(vist[i]==1)       continue;       int x=Math.min(i, node);       int y=Math.max(i, node);       ans.put(x+"" ""+y,val);       dfs(i,vist,adj,ans,5-val);       val=5-val;     }   } } ",0
369,"import java.io.*; import java.util.*; public class C {     private static ArrayDeque<Integer>[] edge;     private static HashMap<String,Integer> map;     private static String getHash(int u, int v)     {         if(u>v)         {             int tmp=u;             u=v;             v=tmp;         }         return u+"" ""+v;     }     private static void DFS(int u, int p, int[] ans, int val)     {         for(int v:edge[u])         {             if(v==p) continue;             ans[map.get(getHash(u,v))]=val;             DFS(v,u,ans,5-val);             val=5-val;         }     }     public static void main(String[] args) throws Exception     {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int i,N;         int T=Integer.parseInt(br.readLine().trim());         StringBuilder sb=new StringBuilder();         while (T-->0)         {             N=Integer.parseInt(br.readLine().trim());             edge=new ArrayDeque[N];             for(i=0;i<N;i++) edge[i]=new ArrayDeque<>();             map=new HashMap<>();             int[] ans=new int[N-1];             int[] deg=new int[N];             for(i=0;i<N-1;i++)             {                 String[] s=br.readLine().trim().split("" "");                 int u=Integer.parseInt(s[0])-1;                 int v=Integer.parseInt(s[1])-1;                 edge[u].add(v); edge[v].add(u);                 deg[u]++; deg[v]++;                 map.put(getHash(u,v),i);             }             for(i=0;i<N;i++) if(deg[i]>2) break;             if(i<N)             {                 sb.append(-1).append(""\n"");                 continue;             }             DFS(0,0,ans,2);             for(int x:ans) sb.append(x).append("" "");             sb.append(""\n"");         }         System.out.println(sb);     } } ","import java.io.*; import java.util.*; public class A { static ArrayList<int[]>[] adj; static int[] vals = { 2, 11 }; static int[] res; static void dfs(int u, int p, int par) { for (int[] nxt : adj[u]) { int v = nxt[0]; int idx = nxt[1]; if (v != p) { res[idx] = vals[par]; dfs(v, u, 1 ^ par); } } } public static void main(String[] args) throws IOException { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); res = new int[n - 1]; adj = new ArrayList[n]; for (int i = 0; i < n; i++) { adj[i] = new ArrayList<int[]>(); } for (int i = 0; i < n - 1; i++) { int u = sc.nextInt() - 1; int v = sc.nextInt() - 1; adj[u].add(new int[] { v, i }); adj[v].add(new int[] { u, i }); } boolean valid = true; int start = 0; for (int i = 0; i < n; i++) { if (adj[i].size() == 1) start = i; valid &= adj[i].size() <= 2; } dfs(start, -1, 0); if (valid) { for (int x : res) pw.print(x + "" ""); } else { pw.print(-1); } pw.println(); } pw.flush(); } } ",0
370,"import java.io.*; import java.util.*; public class C {     private static ArrayDeque<Integer>[] edge;     private static HashMap<String,Integer> map;     private static String getHash(int u, int v)     {         if(u>v)         {             int tmp=u;             u=v;             v=tmp;         }         return u+"" ""+v;     }     private static void DFS(int u, int p, int[] ans, int val)     {         for(int v:edge[u])         {             if(v==p) continue;             ans[map.get(getHash(u,v))]=val;             DFS(v,u,ans,5-val);             val=5-val;         }     }     public static void main(String[] args) throws Exception     {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int i,N;         int T=Integer.parseInt(br.readLine().trim());         StringBuilder sb=new StringBuilder();         while (T-->0)         {             N=Integer.parseInt(br.readLine().trim());             edge=new ArrayDeque[N];             for(i=0;i<N;i++) edge[i]=new ArrayDeque<>();             map=new HashMap<>();             int[] ans=new int[N-1];             int[] deg=new int[N];             for(i=0;i<N-1;i++)             {                 String[] s=br.readLine().trim().split("" "");                 int u=Integer.parseInt(s[0])-1;                 int v=Integer.parseInt(s[1])-1;                 edge[u].add(v); edge[v].add(u);                 deg[u]++; deg[v]++;                 map.put(getHash(u,v),i);             }             for(i=0;i<N;i++) if(deg[i]>2) break;             if(i<N)             {                 sb.append(-1).append(""\n"");                 continue;             }             DFS(0,0,ans,2);             for(int x:ans) sb.append(x).append("" "");             sb.append(""\n"");         }         System.out.println(sb);     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class cp23 { static BufferedReader sc = new BufferedReader(new InputStreamReader(System.in)); static int mod = 1000000007; static String toReturn = """"; static int steps = Integer.MAX_VALUE; static int maxlen = 1000005; static class edge{ int from, to, weight; public edge(int x, int y, int z) { this.from = x; this.to = y; this.weight = z; } } static void addEdge(ArrayList<ArrayList<edge>> graph, int from, int to, int weight) { edge temp = new edge(from, to, weight); edge temp1 = new edge(to, from, weight); graph.get(from).add(temp); graph.get(to).add(temp1); } static int ans = 0; static void dfs(ArrayList<ArrayList<edge>> graph, int vertex, boolean [] visited, int [] toReturn, int weight) { if(visited[vertex]) return; visited[vertex] = true; if(graph.get(vertex).size() > 2) return; for(int i = 0; i < graph.get(vertex).size(); i++) { edge temp = graph.get(vertex).get(i); if(!visited[temp.to]) { toReturn[temp.weight] = weight; dfs(graph, temp.to, visited, toReturn, 5 - weight); weight = 5 - weight; } } } static int [] rank; static int [] parent; static int nexInt() throws NumberFormatException, IOException { return Integer.parseInt(sc.readLine()); } static int [] inputIntArr() throws NumberFormatException, IOException{ String [] s = sc.readLine().split("" ""); int [] toReturn = new int[s.length]; for(int i = 0; i < s.length; i++) { toReturn[i] = Integer.parseInt(s[i]); } return toReturn; } static void solve() throws IOException { int n = nexInt(); ArrayList<ArrayList<edge>> tree = new ArrayList<>(); for(int i = 0; i < n; i++) tree.add(new ArrayList<edge>()); for(int i = 0; i < n - 1; i++) { int [] s1 = inputIntArr(); addEdge(tree, s1[0] - 1, s1[1] - 1, i); } int vertex = 0; for(int i = 0; i < tree.size(); i++) { if(tree.get(i).size() > 2) { System.out.println(-1); return; }else if(tree.size() == 1) { vertex = i; } } int [] toReturn = new int[n - 1]; dfs(tree, vertex, new boolean[n], toReturn,  2); for(int i = 0; i <  toReturn.length; i++)  if(toReturn[i] != 0)System.out.print(toReturn[i] + "" ""); System.out.println(); } public static void main(String[] args) throws IOException {  int t = Integer.parseInt(sc.readLine()); for(int i = 0; i < t; i++)    solve(); } } ",0
371,"import java.io.*; import java.util.*; public class C {     public static void main (String[] args) throws IOException {         BufferedReader f = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st = new StringTokenizer(f.readLine());         int t = Integer.parseInt(st.nextToken());         while (t-->0) {             st = new StringTokenizer(f.readLine());             int n = Integer.parseInt(st.nextToken());             st = new StringTokenizer(f.readLine());             long[] arr = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = Long.parseLong(st.nextToken());             }             solve(n, arr);         }     }     static void solve(long n, long[] arr) {         long minEven = Integer.MAX_VALUE;         long minOdd = arr[0];         long evenSum = 0;         long oddSum = arr[0];         long finans = Long.MAX_VALUE;         long oddAns, evenAns;         long oddcount=1;         long evencount=0;         for (int k = 1; k < n; k++) {             if (k%2==1) {                 evenSum+=arr[k];                 evencount++;                 minEven = Math.min(minEven, arr[k]);             } else {                 oddSum+=arr[k];                 oddcount++;                 minOdd = Math.min(minOdd, arr[k]);             }             oddAns = oddSum+(n-oddcount)*minOdd;             evenAns = evenSum+(n-evencount)*minEven;             finans = Math.min(finans, oddAns+evenAns);         }         System.out.println(finans);     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; public class MinimumGridPath { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); String line = br.readLine(); int cases = Integer.parseInt(line); for(int i = 0; i<cases; i++) { int n = Integer.parseInt(br.readLine()); long[] segments = new long[n]; Scanner sc = new Scanner(br.readLine()); for(int k = 0; k<n; k++) { segments[k] = sc.nextLong(); } long minHor = segments[0], minVer = Long.MAX_VALUE; long sumHor = segments[0], sumVer = 0; long best = Long.MAX_VALUE; for(int k = 1; k<n; k++) { if(k % 2 == 1) { minVer = Long.min(minVer, segments[k]); sumVer += segments[k]; }else { minHor = Long.min(minHor, segments[k]); sumHor += segments[k]; } long cost = sumVer + sumHor + minVer * (n - (k+1)/2) + minHor * (n- (1+k/2)); best = Long.min(best, cost); } System.out.println(best); } } } ",0
372,"import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ","import java.io.*; import java.util.*; public class A734C {     public static void main(String[] args) {         JS scan = new JS();         int t = scan.nextInt();         loop:while(t-->0){             int n = scan.nextInt();             String[] arr= new String[n];             Integer[][] counts = new Integer[5][n];             for(int i = 0;i<5;i++){                 for(int j = 0;j<n;j++){                     counts[i][j] = 0;                 }             }             for(int i =0;i<n;i++){                 arr[i] = scan.next();                 int[] freq =new int[5];                 for(int j = 0;j<arr[i].length();j++){                     freq[arr[i].charAt(j)-'a']++;                 }                 for(int j = 0;j<5;j++){                     counts[j][i] = freq[j]-(arr[i].length()-freq[j]);                 }             }             int best = 0;             for(int i = 0;i<5;i++){                 Arrays.sort(counts[i]);                 int curr = 0;                 int extra = 0;                 for(int j = n-1;j>=0;j--){                     extra+=counts[i][j];                     if(extra>0)curr++;                 }                 best = Math.max(best,curr);             }             System.out.println(best);         }     }      } ",0
373,"import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ","import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ",1
374,"import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ","import java.io.File; import java.io.IOException; import java.util.*; public class C {     public static void main(String[] args){         Scanner in = new Scanner(System.in);         int t = in.nextInt();         while (t-- > 0){             int n = in.nextInt();             int[][] cnt = new int[n][5];             int[] len = new int[n];             for (int i = 0; i < n; i++){                 String s = in.next();                 len[i] = s.length();                 for (char c : s.toCharArray()) cnt[i][c-'a']++;             }             int max = 0;             for (int i = 0; i < 5; i++){                 int[] diff = new int[n];                 for (int j = 0; j < n; j++) diff[j] = cnt[j][i] - (len[j] - cnt[j][i]);                 Arrays.sort(diff);                 int j = n-2, sum = diff[n-1];                 while (j>=0 && sum > 0){                     max = Math.max(max, n - 1 - j);                     sum += diff[j]; j--;                 }                 if (sum > 0) max = Math.max(max, n);             }             System.out.println(max);         }     } } ",0
375,"import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ","import java.util.*; import java.io.*; public class Fixed_Points  { public static void process()throws IOException { int n=I();     String s[]=new String[n];     for(int i=0;i<n;i++)     {     s[i]=S();     }     int max=0; for(char ch='a';ch<='e';ch++) { int t=0; ArrayList<Integer> po=new ArrayList<Integer>(); ArrayList<Integer> ne=new ArrayList<Integer>(); for(int j=0;j<n;j++) { int f1=0;int f2=0;     for(int k=0;k<s[j].length();k++)     {     if(s[j].charAt(k)==ch)     {     f1++;     }     else     {     f2++;     }     }     if(f1>f2)    po.add(f1-f2);     else     ne.add(f1-f2); } Collections.sort(po); Collections.reverse(po); Collections.sort(ne); Collections.reverse(ne); int sum=0; for(int i=0;i<po.size();i++) { sum=sum+po.get(i); } int tp=0; for(int i=0;i<ne.size();i++) { if(ne.get(i)+sum>0) { sum=sum+ne.get(i); tp++; } } t=tp+po.size(); max=Math.max(max, t); } pn(max);     } static Scanner sc = new Scanner(System.in); static PrintWriter out = new PrintWriter(System.out); static void pn(Object o){out.println(o);out.flush();} static int I() throws IOException{return sc.nextInt();} static long L() throws IOException{return sc.nextLong();} static String S() throws IOException{return sc.next();} public static void main(String[] args)throws IOException{try{boolean oj=true;if(oj==true) {AnotherReader sk=new AnotherReader();PrintWriter out=new PrintWriter(System.out);} else {AnotherReader sk=new AnotherReader(100);out=new PrintWriter(""output.txt"");} long T=L();while(T-->0) {process();}out.flush();out.close();}catch(Exception e){return;}}} ",0
376,"import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ","import java.util.*; import java.lang.*; import java.io.*; public class InterestingStrory {     public static void main(String[] args) throws java.lang.Exception {                  try {                          FastReader sc = new FastReader();             int t =sc.nextInt();             while (t-- > 0) {                 int n=sc.nextInt();                 int[][] occ=new int[n][5];                 for(int i=0;i<n;i++){                     char[] warr=sc.next().toCharArray();                     for(char ch:warr){                         occ[i][ch-'a']++;                     }                 }                 int ans=Integer.MIN_VALUE;;                 for(int c=0;c<5;c++){                     int[] sums=new int[n];                     for(int i=0;i<n;i++){                         int sum=0;                         for(int j=0;j<5;j++){                             if(c==j){                                 sum+=occ[i][j];                             }                             else{                                 sum-=occ[i][j];                             }                         }                         sums[i]=sum;                     }                     Arrays.sort(sums);                     int currSum=0;                     int l=n-1;                     for(l=n-1;l>=0;l--){                         if(currSum+sums[l]<=0){                             break;                         }                         else{                             currSum+=sums[l];                         }                     }                     ans=Math.max(ans,n-l-1);                 }                 System.out.println(ans);             }         } catch (Exception e) {             return;         }     }                                         } ",1
377,"import java.io.*; import java.util.*; public class C {     public static void main(String[] args) {         scan = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));         int t = scan.nextInt();         while (t-->0){             solve();         }         out.close();     }     static void solve() {         int n = scan.nextInt();         int[][] words = new int[n][6];         for (int i = 0; i < n; i++) {             String input = scan.next();             words[i][0] = input.length();             for (int j = 0; j < input.length(); j++) {                 words[i][input.charAt(j)-96]++;             }             for (int j = 1; j <= 5; j++) {                 words[i][j] =  words[i][0] - 2*words[i][j];             }         }         int maxCounter = 0;         for (int i = 1; i <= 5; i++) {             int[] arr = new int[n];             for (int j = 0; j < n; j++) {                 arr[j] = words[j][i];             }             shuffleArray(arr);             Arrays.sort(arr);             int sum = 0;             int counter = 0;             while (counter < n && sum + arr[counter] < 0){                 sum += arr[counter];                 counter++;             }             maxCounter = Math.max(maxCounter, counter);         }         out.println(maxCounter);     }     private static void shuffleArray(int[] array)     {         int index, temp;         Random random = new Random();         for (int i = array.length - 1; i > 0; i--)         {             index = random.nextInt(i + 1);             temp = array[index];             array[index] = array[i];             array[i] = temp;         }     }     public static MyScanner scan;     public static PrintWriter out;      } ","import java.io.*; import java.util.*; public class C { static int n; public static void main (String[] args) throws IOException { FastReader io = new FastReader(); int t = io.nextInt(); for (int ii=0; ii<t; ii++) { n = io.nextInt(); String[] arr = new String[n]; for (int i=0; i<n; i++) { String str = io.next(); arr[i] = str; } char[] chars = new char[]{'a','b','c','d','e'}; int ans = -1; for (int i=0; i<5; i++) { ans = Math.max(ans, solve(arr, chars[i])); } System.out.println(ans); } } static int solve(String[] arr, char c) { Arrays.sort(arr, new Comp(c)); int good = 0; int total = 0; int ret = 0; for (int i=0; i<n; i++) { for (int j=0; j<arr[i].length(); j++) { if (arr[i].charAt(j) == c) good++; } total += arr[i].length(); if (2 * good > total) { ret++; } else { return ret; } } return ret; } static class Comp implements Comparator<String> { char c; public Comp (char c) { this.c = c; } } } ",0
378,"import java.io.*; import java.util.*; public class C {     public static void main(String[] args) {         while (N-- > 0) {             solve();         }         out.close();     }     public static void solve() {         int M = sc.nextInt();         String a = sc.nextLine();         String b = sc.nextLine();         int d = 0;         int al = 0;         int bl = 0;         for (int i = 0; i < M; i++) {             if (a.charAt(i) != b.charAt(i)) {                 d++;             }             if (a.charAt(i) == '1') {                 al++;             }             if (b.charAt(i) == '1') {                 bl++;             }         }         if ((al == bl && d % 2 == 0) || (M - al + 1 == bl && (M - d) % 2 == 1)) {             if ((al == bl && d % 2 == 0) && (M - al + 1 == bl && (M - d) % 2 == 1)) {                 out.println(Math.min(d, M - d));             } else if (al == bl && d % 2 == 0) {                 out.println(d);             } else {                 out.println(M - d);             }         } else {             out.println(-1);             return;         }     }     private static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));     private static MyScanner sc = new MyScanner();     private static int N = sc.nextInt();      } ","import java.util.*; import java.io.*; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.Math.max; public class EdB { static long[] mods = {1000000007, 998244353, 1000000009}; static long mod = mods[0]; public static MyScanner sc;     public static PrintWriter out; public static void main(String[] largewang) throws Exception{  sc = new MyScanner();  out = new PrintWriter(System.out);  int t = sc.nextInt();  while (t-->0) {  int n = sc.nextInt();  char[] a = sc.next().toCharArray();  char[] b = sc.next().toCharArray();  int counta = 0;  int countb = 0;  for (char j : a) {  if (j == '1')  counta++;  }  for (char j : b) {  if (j == '1')  countb++;  }  long ans = 0;  if (counta == countb && n-counta+1 == countb){  for (int j = 0;j<n;j++){  if (b[j] == '1' && a[j] == '0') {  ans += 2;  }  }  long tempans = 0;  int j=0;  for(j = 0;j<n;j++){  if (a[j] == '1' && b[j] == '1')  break;  }  for(int i = 0;i<n;i++){  if (i == j)  continue;  if (a[i] == '1')  a[i] = '0';  else  a[i] = '1';  }  tempans += 1;  for (j = 0;j<n;j++){  if (b[j] == '1' && a[j] == '0') {  tempans += 2;  }  }  ans = min(ans, tempans);  } else if (counta == countb) {  for (int j = 0;j<n;j++){  if (b[j] == '1' && a[j] == '0') {  ans += 2;  }  }  } else if (n-counta+1 == countb) {  int j=0;  for(j = 0;j<n;j++){  if (a[j] == '1' && b[j] == '1')  break;  }  for(int i = 0;i<n;i++){  if (i == j)  continue;  if (a[i] == '1')  a[i] = '0';  else  a[i] = '1';  }  ans += 1;  for (j = 0;j<n;j++){  if (b[j] == '1' && a[j] == '0') {  ans += 2;  }  }  } else {  ans = -1;  }  out.println(ans);   }  out.close();    }      } ",0
379,"import java.io.*; import java.util.*; public class C { public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out)); public static void main(String[] args) throws IOException { readInput(); out.close(); } static class Tower implements Comparable<Tower>{ int i, w; public Tower(int a, int b) { i=a; w=b; } } static class Block implements Comparable<Block>{ int i, w; public Block(int a, int b) { i=a; w=b; } } static PriorityQueue<Tower> towers; static PriorityQueue<Block> blocks; static int[] par; static void solve() { while (!blocks.isEmpty()) { Block h = blocks.poll(); Tower t = towers.poll(); par[h.i] = t.i; t.w += h.w; towers.add(t); } List<Tower> res = new ArrayList<Tower>(towers); Collections.sort(res); boolean works = true; for (int i =1 ; i < m; i++) { if (Math.abs(res.get(i-1).w - res.get(i).w) > x) works = false; } if (works) { out.println(""YES""); for (int i = 0; i < n; i++) out.print(par[i] + 1 + "" ""); out.println(); } else out.println(""NO""); } static int n,m,x; public static void readInput() throws IOException { int t = Integer.parseInt(br.readLine()); while (t-->0) { StringTokenizer st=  new StringTokenizer(br.readLine()); n = Integer.parseInt(st.nextToken()); m = Integer.parseInt(st.nextToken()); x = Integer.parseInt(st.nextToken()); towers = new PriorityQueue<Tower>(); blocks = new PriorityQueue<Block>(); par = new int[n]; st = new StringTokenizer(br.readLine()); for (int i= 0 ; i < n; i++) { blocks.add(new Block(i,Integer.parseInt(st.nextToken()))); } for (int i =0 ; i < m; i++) { towers.add(new Tower(i, 0)); } solve(); } } } ","import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class x1515C {     public static void main(String hi[]) throws Exception     {         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st = new StringTokenizer(infile.readLine());         int T = Integer.parseInt(st.nextToken());         StringBuilder sb = new StringBuilder();         while(T-->0)         {             st = new StringTokenizer(infile.readLine());             int N = Integer.parseInt(st.nextToken());             int M = Integer.parseInt(st.nextToken());             int X = Integer.parseInt(st.nextToken());             int[] arr = readArr(N, infile, st);             ArrayList<Unit> ls = new ArrayList<Unit>();             for(int i=0; i < N; i++)                 ls.add(new Unit(arr[i], i));             Collections.sort(ls);             int[] res = new int[N];             PriorityQueue<Unit> pq = new PriorityQueue<Unit>(Comparator.reverseOrder());             for(int i=1; i <= M; i++)                 pq.add(new Unit(0, i));             for(Unit add: ls)             {                 Unit tower = pq.poll();                 tower.height += add.height;                 res[add.id] = tower.id;                 pq.add(tower);             }             int min = pq.poll().height;             int max = min;             while(pq.size() > 0)                 max = max(max, pq.poll().height);             if(max-min > X)                 sb.append(""NO\n"");             else             {                 sb.append(""YES\n"");                 for(int x: res)                     sb.append(x+"" "");                 sb.append(""\n"");             }         }         System.out.print(sb);     }     public static int[] readArr(int N, BufferedReader infile, StringTokenizer st) throws Exception     {         int[] arr = new int[N];         st = new StringTokenizer(infile.readLine());         for(int i=0; i < N; i++)             arr[i] = Integer.parseInt(st.nextToken());         return arr;     } } class Unit implements Comparable<Unit> {     public int id;     public int height;     public Unit(int h, int i)     {         height = h;         id = i;     }      } ",0
380,"import java.io.*; import java.util.*; public class C { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out))); int t = Integer.parseInt(br.readLine()); while(t --> 0) { int n = Integer.parseInt(br.readLine()); char[] lineA = br.readLine().toCharArray(); char[] lineB = br.readLine().toCharArray(); boolean[] a = new boolean[n]; boolean[] b = new boolean[n]; int ac = 0; int aic = 0; int bc = 0; int stay = 0; int flip = 0; for(int i = 0; i < n; i++) { if(lineA[i] == '1') { ac++; a[i] = true; }else aic++; if(lineB[i] == '1') { bc++; b[i] = true; } if(a[i] == b[i]) stay++; else flip++; } if(ac != bc && aic + 1 != bc) { pw.println(-1); }else { if(ac == aic+1) pw.println(Math.min(stay, flip)); else if(ac == bc) pw.println(flip); else pw.println(stay); } } pw.close(); } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);                 public static void main(String [] args)     {                  int testcases = i();         while(testcases-->0)         {                          solve();         }         out.flush();         out.close();     }     static void solve()     {          int n = i();         char c[] = inputC();         char d[] = inputC();         int x01=0,x10=0,x00=0,x11=0;         for(int i=0;i<n;i++)         {             if(c[i]=='0'&&d[i]=='0')x00++;             if(c[i]=='0'&&d[i]=='1')x01++;             if(c[i]=='1'&&d[i]=='0')x10++;             if(c[i]=='1'&&d[i]=='1')x11++;         }         int ans = Integer.MAX_VALUE;         if(x01==0 && x10==0)         {             System.out.println(0);             return ;         }         if(x11==x00+1)         {             ans = Math.min(x11+x00,ans);         }       if(x01==x10)         {             ans = Math.min(x01+x10,ans);         }         if(ans == Integer.MAX_VALUE){             ans = -1;         }         System.out.println(ans);     }                     static int i() {         return sc.nextInt();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }                                                                                                                                                        } ",0
381,"import java.io.*; import java.util.*; public class C { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out))); int t = Integer.parseInt(br.readLine()); while(t --> 0) { int n = Integer.parseInt(br.readLine()); char[] lineA = br.readLine().toCharArray(); char[] lineB = br.readLine().toCharArray(); boolean[] a = new boolean[n]; boolean[] b = new boolean[n]; int ac = 0; int aic = 0; int bc = 0; int stay = 0; int flip = 0; for(int i = 0; i < n; i++) { if(lineA[i] == '1') { ac++; a[i] = true; }else aic++; if(lineB[i] == '1') { bc++; b[i] = true; } if(a[i] == b[i]) stay++; else flip++; } if(ac != bc && aic + 1 != bc) { pw.println(-1); }else { if(ac == aic+1) pw.println(Math.min(stay, flip)); else if(ac == bc) pw.println(flip); else pw.println(stay); } } pw.close(); } } ","import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class Template {      static int mod = 1000000007; public static void main(String[] args){         FastScanner sc = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int yo = sc.nextInt();         while (yo-- > 0) {             int n = sc.nextInt();             String s = sc.next();             String t = sc.next();             int op1 = cal(s,t,n);             int op2 = helper(s,t,n,'0');             int op3 = helper(s,t,n,'1');             int ans = min(min(op1,op2),op3);             if(ans == Integer.MAX_VALUE){                 out.println(""-1"");             }             else {                 out.println(ans);             }         }         out.close(); }          static int helper(String str1, String str2, int n, int ch){         char[] s = str1.toCharArray();         char[] t = str2.toCharArray();         int idx = -1;         for(int i = 0; i < n; i++){             if(s[i] == '1' && t[i] == ch){                 idx = i;                 break;             }         }         if(idx == -1){             return Integer.MAX_VALUE;         }         for(int i = 0; i < n; i++){             if(i == idx) continue;             if(s[i] == '1') s[i] = '0';             else s[i] = '1';         }         int ans = cal(String.valueOf(s),String.valueOf(t),n);         if(ans == Integer.MAX_VALUE) return ans;         return 1 + ans;     }     static int cal(String s, String t, int n){         int op01 = 0;         int op10 = 0;         for(int i = 0; i < n; i++){             if(s.charAt(i) != t.charAt(i)){                 if(s.charAt(i) == '1') op10++;                 else op01++;             }         }         if(op10 != op01){             return Integer.MAX_VALUE;         }         return op01 + op10;     }                               } ",0
382,"import java.io.*; import java.util.*; public class C { public static void main(String[] args) {         FastScanner in = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int t = in.nextInt(), tt = 0;         while(t-->0) {          int n = in.nextInt(), m = in.nextInt(), x = in.nextInt();         int aa[] = in.readArray(n);         Pair a[] = new Pair[n];         for(int i=0;i<n;i++) a[i] = new Pair(i,aa[i]);         PriorityQueue<Pair> pq = new PriorityQueue<>();         Arrays.sort(a);         int goneTo[] = new int[n];         for(int i=0;i<m;i++){         pq.add(new Pair(i+1,a[n-1-i].y));         goneTo[a[n-1-i].x] = i+1;         }         for(int i=n-m-1;i>=0;i--){         Pair xx = pq.poll();         xx.y += a[i].y;         goneTo[a[i].x] = xx.x;         pq.add(new Pair(xx.x,xx.y));         }         Iterator<Pair> it = pq.iterator();         ArrayList<Pair> arr = new ArrayList<>();         while(it.hasNext()) arr.add(it.next());         Collections.sort(arr);                           if(arr.get(m-1).y-arr.get(0).y>x) out.println(""NO"");         else{         out.println(""YES"");         int pos[] = new int[n];         for(Pair i : a) pos[i.x] = goneTo[i.x];         for(int i : pos) out.print(i+"" "");         out.println();         }              }         out.flush(); } static class Pair implements Comparable<Pair> { int x, y; Pair(int a, int b){ x = a; y = b; } } static final Random random = new Random(); } ","import java.io.*; import java.util.*; public class C { public static void main(String[] args) {         FastScanner in = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int t = in.nextInt(), tt = 0;         while(t-->0) {          int n = in.nextInt(), m = in.nextInt(), x = in.nextInt();         int aa[] = in.readArray(n);         Pair a[] = new Pair[n];         for(int i=0;i<n;i++) a[i] = new Pair(i,aa[i]);         PriorityQueue<Pair> pq = new PriorityQueue<>();         Arrays.sort(a);         int goneTo[] = new int[n];         for(int i=0;i<m;i++){         pq.add(new Pair(i+1,a[n-1-i].y));         goneTo[a[n-1-i].x] = i+1;         }         for(int i=n-m-1;i>=0;i--){         Pair xx = pq.poll();         xx.y += a[i].y;         goneTo[a[i].x] = xx.x;         pq.add(new Pair(xx.x,xx.y));         }         Iterator<Pair> it = pq.iterator();         ArrayList<Pair> arr = new ArrayList<>();         while(it.hasNext()) arr.add(it.next());         Collections.sort(arr);                           if(arr.get(m-1).y-arr.get(0).y>x) out.println(""NO"");         else{         out.println(""YES"");         int pos[] = new int[n];         for(Pair i : a) pos[i.x] = goneTo[i.x];         for(int i : pos) out.print(i+"" "");         out.println();         }              }         out.flush(); } static class Pair implements Comparable<Pair> { int x, y; Pair(int a, int b){ x = a; y = b; } } static final Random random = new Random(); } ",1
383,"import java.io.*; import java.util.*; public class C { public static void main(String[] args) {         FastScanner in = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int t = in.nextInt();         while(t-->0) {          int n = in.nextInt();         int a[] = in.readArray(n);         int a1[] = new int[(n+1)/2];         int a2[] = new int[n/2];         int ind1 = 0, ind2 = 0;         for(int i=0;i<n;i++){         if(i%2==0) a1[ind1++] = a[i];         else a2[ind2++] = a[i];         }         int n1 = a1.length, n2 = a2.length;                           long p1[] = new long[n1], p2[] = new long[n2];         p1[0] = a1[0]; p2[0] = a2[0];         for(int i=1;i<n1;i++) p1[i] = p1[i-1] + a1[i];         for(int i=1;i<n2;i++) p2[i] = p2[i-1] + a2[i];         long ans1[] = new long[n1];         long ans2[] = new long[n2];         ans1[0] = p1[0]*n;         ans2[0] = p2[0]*n;                  long mn = a1[0];         for(int i=1;i<n1;i++){         ans1[i] = p1[i];         mn = Math.min(mn,a1[i]);         ans1[i] -= mn;         ans1[i] += mn*(n-i);         }         mn = a2[0];         for(int i=1;i<n2;i++){         ans2[i] = p2[i];         mn = Math.min(mn,a2[i]);         ans2[i] -= mn;         ans2[i] += mn*(n-i);         }                             long cost = Long.MAX_VALUE;         for(int i=0;i<n1;i++){         if(i==n2){         cost = Math.min(cost,ans1[i]+ans2[i-1]);         }         else{         cost = Math.min(cost,ans1[i]+ans2[i]);         if(i-1>-1) cost = Math.min(cost,ans1[i]+ans2[i-1]);         }         }         out.println(cost);        }         out.flush(); } static final Random random = new Random(); } ","import java.io.*; import java.util.ArrayList; import java.util.List; import java.util.StringTokenizer; public class C {     public static void main(String[] args) {         new C().solve(System.in, System.out);     }     public void solve(InputStream in, OutputStream out) {         InputReader inputReader = new InputReader(in);         PrintWriter writer = new PrintWriter(new BufferedOutputStream(out));         int t = inputReader.nextInt();         for (int t1 = 0; t1 < t; t1++) {             int n = inputReader.nextInt();             List<Long> c = new ArrayList<>(n);             for (int i = 0; i < n; i++) {                 c.add(inputReader.nextLong());             }             writer.println(solve(n, c));         }         writer.close();     }     public long solve(int n, List<Long> c) {         long[] minEven = new long[n];         long[] minOdd = new long[n];         long[] sumOdd = new long[n];         long[] sumEven = new long[n];         minEven[0] = Long.MAX_VALUE;         minOdd[0] = Long.MAX_VALUE;         for (int i = 0; i < n; i++) {             if (i > 0) {                 minEven[i] = minEven[i - 1];                 minOdd[i] = minOdd[i - 1];                 sumOdd[i] = sumOdd[i - 1];                 sumEven[i] = sumEven[i - 1];             }             if (i % 2 == 0) {                 minEven[i] = Math.min(minEven[i], c.get(i));                 sumEven[i] += c.get(i);             } else {                 minOdd[i] = Math.min(minOdd[i], c.get(i));                 sumOdd[i] += c.get(i);             }         }         long best = Long.MAX_VALUE;         for (int k = 1; k < n; k++) {             int countOdd = (k + 1) / 2;             int countEven = (k + 1) / 2;             if (k % 2 == 0) {                 countEven++;             }             long oddResult = minOdd[k] * (n - countOdd) + sumOdd[k];             long evenResult = minEven[k] * (n - countEven) + sumEven[k];             long current = oddResult + evenResult;             best = Math.min(best, current);         }         return best;     }      } ",0
384,"import java.io.*; import java.util.*; public class C { public static void main(String[] args) { FastReader f = new FastReader(); StringBuffer sb=new StringBuffer(); int test=f.nextInt(); while(test-->0) { int n=f.nextInt(); String str[]=new String[n]; for(int i=0;i<n;i++) str[i]=f.next(); int max=0; for(char ch='a';ch<='e';ch++) max=Math.max(max,solve(str,ch)); sb.append(max+""\n""); } System.out.println(sb); } static int solve(String str[],char ch) { int count=0; int adv=0,equal=0; int totalAdv=0; List<Integer> c=new ArrayList<>(); for(int i=0;i<str.length;i++) { int countC=0; int countTtl=0; for(int j=0;j<str[i].length();j++) { if(str[i].charAt(j)==ch) countC++; else countTtl++; } if(countC>countTtl) { adv++; totalAdv+=(countC-countTtl); } else if(countC==countTtl) equal++; else c.add(Math.abs(countTtl-countC)); } if(adv>0) count+=adv+equal; Collections.sort(c); for(int i:c) { if(totalAdv>i) { totalAdv-=i; count++; } } return count; }   } ","import java.util.*; public class interestingstory {     public static void main(String[] args) throws Exception {         try{                 Scanner sc =new Scanner(System.in);             int t=sc.nextInt();             while(t-->0)             {                 int n = sc.nextInt();                 int answer = 0;                 String [] string_arr = new String[n];                     for (int i = 0; i< n; i++){                     string_arr[i] = sc.next();                 }                 for(char c = 'a'; c <= 'e'; c++){                     int [] diff = new int[n];                     for (int j = 0; j < string_arr.length; j++){                         for(int i = 0; i < string_arr[j].length(); i++){                             if(string_arr[j].charAt(i) == c){                                 diff[j] += 1;                             } else {                                 diff[j] += -1;                             }                         }                     }                     Arrays.sort(diff);                     int sum = 0;                     int ans = n;                     for(int p = n-1; p >= 0;p--){                         sum += diff[p];                         if (sum <= 0) {                             ans = n - p - 1;                             break;                         }                      }                     answer = Math.max(answer, ans);                 }                 System.out.println(answer);             }          } catch(java.lang.Exception e){}     } } ",0
385,"import java.io.*; import java.util.*; public class C { public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out)); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); ArrayList<String> arr = new ArrayList<>(); for(int i = 0;i<n;i++) arr.add(scan.next()); int max = -1; for(int cases = 0;cases<5;cases++) { ArrayList<Integer> list = new ArrayList<>(); char ch = (char)('a'+cases); for(int i = 0;i<n;i++) { String s = arr.get(i); int countch = 0, countTotal = 0; for(int j = 0;j<s.length();j++) { if(s.charAt(j)==ch) countch++; else countTotal++; } list.add(countch-countTotal); } Collections.sort(list); int sum = 0, count = 0; for(int i = n-1;i>=0;i--) { sum+=list.get(i); if(sum>0) count++; else break; } max = Math.max(max, count); } output.write(max+""\n""); } output.flush(); } public static int[] sort(int arr[]) { List<Integer> list = new ArrayList<>(); for(int i:arr) list.add(i); Collections.sort(list); for(int i = 0;i<list.size();i++) { arr[i] = list.get(i); } return arr; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayDeque; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Random; import java.util.StringTokenizer; public class P4 { static int N = 1000001; static long[] factorialNumInverse = new long[N + 1]; static long[] naturalNumInverse = new long[N + 1]; static long[] fact = new long[N + 1]; public static void main(String[] args) { FastReader sc = new FastReader(); int t; t = sc.nextInt(); StringBuilder st = new StringBuilder(); while (t-- != 0) { int n=sc.nextInt(); String s[]=new String[n]; for(int i=0;i<n;i++) { s[i]=sc.nextLine(); } int max=0; ArrayList<Integer> freq=new ArrayList<>(); for(int i=0;i<5;i++) { int f1=0; freq=new ArrayList<>(); for(int j=0;j<n;j++) { f1=0; for(int k=0;k<s[j].length();k++) { if(s[j].charAt(k)==i+'a') { f1++; }else { f1--; } } freq.add(f1); } Collections.sort(freq); int x=0; int total=0; for(int j=n-1;j>=0;j--) { total=total+freq.get(j); if(total>0) { x++; }else { break; } } max=Math.max(max, x); } st.append(max+""\n""); } System.out.println(st); } static FastReader sc = new FastReader(); static void sort(int[] A) { int n = A.length; Random rnd = new Random(); for (int i = 0; i < n; ++i) { int tmp = A[i]; int randomPos = i + rnd.nextInt(n - i); A[i] = A[randomPos]; A[randomPos] = tmp; } Arrays.sort(A); } static void sort(long[] A) { int n = A.length; Random rnd = new Random(); for (int i = 0; i < n; ++i) { long tmp = A[i]; int randomPos = i + rnd.nextInt(n - i); A[i] = A[randomPos]; A[randomPos] = tmp; } Arrays.sort(A); } static String sort(String s) { Character ch[] = new Character[s.length()]; for (int i = 0; i < s.length(); i++) { ch[i] = s.charAt(i); } Arrays.sort(ch); StringBuffer st = new StringBuffer(""""); for (int i = 0; i < s.length(); i++) { st.append(ch[i]); } return st.toString(); } } ",1
386,"import java.io.*; import java.util.*; public class C { public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out)); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); ArrayList<String> arr = new ArrayList<>(); for(int i = 0;i<n;i++) arr.add(scan.next()); int max = -1; for(int cases = 0;cases<5;cases++) { ArrayList<Integer> list = new ArrayList<>(); char ch = (char)('a'+cases); for(int i = 0;i<n;i++) { String s = arr.get(i); int countch = 0, countTotal = 0; for(int j = 0;j<s.length();j++) { if(s.charAt(j)==ch) countch++; else countTotal++; } list.add(countch-countTotal); } Collections.sort(list); int sum = 0, count = 0; for(int i = n-1;i>=0;i--) { sum+=list.get(i); if(sum>0) count++; else break; } max = Math.max(max, count); } output.write(max+""\n""); } output.flush(); } public static int[] sort(int arr[]) { List<Integer> list = new ArrayList<>(); for(int i:arr) list.add(i); Collections.sort(list); for(int i = 0;i<list.size();i++) { arr[i] = list.get(i); } return arr; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; public class ProblemC {     public static void main(String[] args)throws IOException {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         StringBuilder print=new StringBuilder();         int test=Integer.parseInt(br.readLine());         while(test--!=0){             int n=Integer.parseInt(br.readLine());             ArrayList<Story> stories[]=new ArrayList[5];             for(int i=0;i<5;i++){                 stories[i]=new ArrayList<>();             }             for(int i=1;i<=n;i++){                 char c[]=br.readLine().toCharArray();                 int freq[]=new int[5];                 for(int j=0;j<c.length;j++){                     freq[c[j]-97]++;                 }                 for(int j=0;j<5;j++){                     stories[j].add(new Story(freq[j],c.length-freq[j]));                 }             }             for(int i=0;i<5;i++){                 Collections.sort(stories[i]);             }             int max=0;             for(int i=0;i<5;i++){                 int def=0;                 int count=0;                 for(Story story:stories[i]){                     int diff=story.diff;                     if(def+diff<=0){                         break;                     }                     else{                         def+=diff;                         count++;                     }                 }                 max=Math.max(max,count);             }             print.append(max+""\n"");         }         System.out.print(print);     } } class Story implements Comparable<Story>{     int x,y,diff;     public Story(int x,int y){         this.x=x;         this.y=y;         this.diff=this.x-this.y;     }      } ",0
387,"import java.io.*; import java.util.*; public class C { static int n; public static void main (String[] args) throws IOException { FastReader io = new FastReader(); int t = io.nextInt(); for (int ii=0; ii<t; ii++) { n = io.nextInt(); String[] arr = new String[n]; for (int i=0; i<n; i++) { String str = io.next(); arr[i] = str; } char[] chars = new char[]{'a','b','c','d','e'}; int ans = -1; for (int i=0; i<5; i++) { ans = Math.max(ans, solve(arr, chars[i])); } System.out.println(ans); } } static int solve(String[] arr, char c) { Arrays.sort(arr, new Comp(c)); int good = 0; int total = 0; int ret = 0; for (int i=0; i<n; i++) { for (int j=0; j<arr[i].length(); j++) { if (arr[i].charAt(j) == c) good++; } total += arr[i].length(); if (2 * good > total) { ret++; } else { return ret; } } return ret; } static class Comp implements Comparator<String> { char c; public Comp (char c) { this.c = c; } } } ","import java.util.*; import java.io.*; public class CF_1551c{     public static final void main(String[] args){         Kattio io= new Kattio();         int t= io.getInt();         while(t-->0){             int n= io.getInt();             int[][] ps= new int[5][n];             for(int i=0; i<n; i++){                 String w= io.getWord();                 int len= w.length();                                  for(int j=0; j<len; j++)                     ps[w.charAt(j)-'a'][i]++;                                                      for(int k=0; k<5; k++)                     ps[k][i]+= ps[k][i]-len;                }                          for(int k=0; k<5; k++)                                  Arrays.sort(ps[k]);                                                    int max= 0;             for(int k=0; k<5; k++){                 if(ps[k][n-1]<=0) continue;                 if(max==0) max= 1;                 for(int i=2; i<=n; i++){                     ps[k][n-i]+= ps[k][n-i+1];                     if(ps[k][n-i]<=0) break;                     if(i>max) max= i;                 }             }             io.println(max);         }         io.close();     }                        static class Kattio extends PrintWriter {         private BufferedReader r;         private String line, token;         private StringTokenizer st;              public Kattio(){this(System.in);}         public Kattio(InputStream i){         super(new BufferedOutputStream(System.out));             r= new BufferedReader(new InputStreamReader(i));         }         public Kattio(InputStream i, OutputStream o){         super(new BufferedOutputStream(o));             r= new BufferedReader(new InputStreamReader(i));         }                  public boolean hasMoreTokens(){             return peekToken()!=null;         }         public int getInt(){             return Integer.parseInt(nextToken());         }                           public String getWord(){             return nextToken();         }                  private String peekToken(){             if(token==null) try {                 while(st==null || !st.hasMoreTokens()) {                     line= r.readLine();                     if(line==null) return null;                     st= new StringTokenizer(line);                 }                 token= st.nextToken();             }catch(IOException e){}             return token;         }         private String nextToken() {             String ans= peekToken();             token= null;             return ans;         }     } } ",0
388,"import java.io.*; import java.util.*; public class C { static long mod = (long) (1e9 + 7); public static void main(String[] args) throws IOException { Scanner scn = new Scanner(System.in); PrintWriter out = new PrintWriter(System.out); StringBuilder sb = new StringBuilder(); int T = scn.ni(), tcs = 0; C: while (tcs++ < T) { int n = scn.ni(); tree = new ArrayList[n + 1]; range = new long[n + 1][2]; for (int i = 0; i <= n; i++) tree[i] = new ArrayList<>(); for (int i = 1; i <= n; i++) { range[i][0] = scn.nl(); range[i][1] = scn.nl(); } for (int i = 0; i < n - 1; i++) { int x = scn.ni(); int y = scn.ni(); tree[x].add(y); tree[y].add(x); } strg = new long[n + 1][2]; for (long a1[] : strg) Arrays.fill(a1, -1L); sb.append(Math.max(DFS(1, -1, 0), DFS(1, -1, 1))); sb.append(""\n""); } out.print(sb); out.close(); } static ArrayList<Integer> tree[]; static long range[][], strg[][]; static long DFS(int u, int pa, int ok) { if (strg[u][ok] != -1) return strg[u][ok]; long tg = 0; for (int ch : tree[u]) { if (ch == pa) continue; long sg = 0; if (ok == 0) { sg = Math.max(DFS(ch, u, 0) + Math.abs(range[u][0] - range[ch][0]), DFS(ch, u, 1) + Math.abs(range[u][0] - range[ch][1])); } else { sg = Math.max(DFS(ch, u, 0) + Math.abs(range[u][1] - range[ch][0]), DFS(ch, u, 1) + Math.abs(range[u][1] - range[ch][1])); } tg += sg; } return strg[u][ok] = tg; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; public class C {     private static FastReader fr = new FastReader();     private static PrintWriter out=new PrintWriter(System.out);     private static Random random = new Random();     private static long[][] dp;     private static long calculate(List<Integer>[] graph, int current, long[][] r, boolean[] stack, int use){         if(dp[current][use] != -1) return dp[current][use];         stack[current] = true;         long max = 0;         if(graph[current] != null){             for(int next : graph[current]){                 if(!stack[next]){                     stack[next] = true;                     long r1 = Math.abs(r[current][use] - r[next][0]) + calculate(graph, next, r, stack, 0);                     long r2 = Math.abs(r[current][use] - r[next][1]) + calculate(graph, next, r, stack, 1);                     max += Math.max(r1, r2);                 }             }         }         stack[current] = false;         dp[current][use] = max;         return max;     }     public static void main(String[] args) throws IOException {         StringBuilder sb = new StringBuilder();                  int t = fr.nextInt();         while (t-- > 0){             int n = fr.nextInt();             long[][] r = new long[n][2];             for(int i = 0; i < n; i++){                 r[i] = fr.nextLongArray(2);             }             List<Integer>[] graph = new ArrayList[n];             for(int i = 0; i < n - 1; i++){                 int u = fr.nextInt();                 int v = fr.nextInt();                 if(graph[u - 1] == null) graph[u - 1] = new ArrayList<>();                 if(graph[v - 1] == null) graph[v - 1] = new ArrayList<>();                 graph[u - 1].add(v - 1);                 graph[v - 1].add(u - 1);             }             boolean[] stack = new boolean[n];             dp = new long[n][2];             for(int i = 0; i < dp.length; i++){                 Arrays.fill(dp[i], -1);             }             long r1 = calculate(graph, 0, r, stack, 0);             long r2 = calculate(graph, 0, r, stack, 1);             sb.append(Math.max(r1, r2)).append(""\n"");         }         System.out.print(sb.toString());     }                                                        } ",0
389,"import java.io.*; import java.util.*; public class C { static long mod = (long) (1e9 + 7); public static void main(String[] args) throws IOException { Scanner scn = new Scanner(System.in); PrintWriter out = new PrintWriter(System.out); StringBuilder sb = new StringBuilder(); int T = scn.ni(), tcs = 0; C: while (tcs++ < T) { int n = scn.ni(); tree = new ArrayList[n + 1]; range = new long[n + 1][2]; for (int i = 0; i <= n; i++) tree[i] = new ArrayList<>(); for (int i = 1; i <= n; i++) { range[i][0] = scn.nl(); range[i][1] = scn.nl(); } for (int i = 0; i < n - 1; i++) { int x = scn.ni(); int y = scn.ni(); tree[x].add(y); tree[y].add(x); } strg = new long[n + 1][2]; for (long a1[] : strg) Arrays.fill(a1, -1L); sb.append(Math.max(DFS(1, -1, 0), DFS(1, -1, 1))); sb.append(""\n""); } out.print(sb); out.close(); } static ArrayList<Integer> tree[]; static long range[][], strg[][]; static long DFS(int u, int pa, int ok) { if (strg[u][ok] != -1) return strg[u][ok]; long tg = 0; for (int ch : tree[u]) { if (ch == pa) continue; long sg = 0; if (ok == 0) { sg = Math.max(DFS(ch, u, 0) + Math.abs(range[u][0] - range[ch][0]), DFS(ch, u, 1) + Math.abs(range[u][0] - range[ch][1])); } else { sg = Math.max(DFS(ch, u, 0) + Math.abs(range[u][1] - range[ch][0]), DFS(ch, u, 1) + Math.abs(range[u][1] - range[ch][1])); } tg += sg; } return strg[u][ok] = tg; } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.BufferedReader; import java.io.InputStreamReader; public class First {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();         int t;         t = in.nextInt();                  while (t > 0) {             solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         Map<Integer, ArrayList<Integer>> map;         long[][] arr;         long[][] dp = new long[2][100005];         public void call(InputReader in, PrintWriter out) {             int n;             n = in.nextInt();             map = new HashMap<>();             arr = new long[n][2];             for (int i = 0; i < n; i++) {                 arr[i][0] = in.nextLong();                 arr[i][1] = in.nextLong();             }             int u, v;             for (int i = 0; i < 2; i++) {                 for (int j = 0; j <= n; j++) {                     dp[i][j] = -1;                 }             }             for (int i = 0; i < n-1; i++) {                 u = in.nextInt()-1;                 v = in.nextInt()-1;                 if(map.getOrDefault(u,null)==null){                     map.put(u, new ArrayList<>());                 }                 map.get(u).add(v);                 if(map.getOrDefault(v,null)==null){                     map.put(v, new ArrayList<>());                 }                 map.get(v).add(u);             }             out.println(Math.max(ans(0, -1,0), ans(0,-1,1)));         }         public long ans (int child, int par, int choice){             if(dp[choice][child]!=-1){                 return dp[choice][child];             }             long opt = 0;                          for (Integer i : map.get(child)) {                 if(i!=par) {                     opt += Math.max(Math.abs(arr[i][0] - arr[child][choice]) + ans(i, child, 0), Math.abs(arr[child][choice] - arr[i][1]) + ans(i, child, 1));                 }             }                          return dp[choice][child] = opt;         }     }                                   static final Random random=new Random();           } ",0
390,"import java.io.*; import java.util.*; public class CODECHEF {          static long MOD=1000000000;          static long[] solve(int[] pos,long[] arr,int n,int k){         long[] ans=new long[n];         long[] left=new long[n];         long[] right=new long[n];         long min=Integer.MAX_VALUE;         for(int i=0;i<n;i++){             min=Math.min(min+1,arr[i]);             left[i]=min;         }         min=Integer.MAX_VALUE;         for(int i=n-1;i>=0;i--){             min=Math.min(min+1,arr[i]);             right[i]=min;         }         for(int i=0;i<n;i++){             ans[i]=Math.min(left[i],right[i]);         }         return ans;     }     public static void main(String[] args) throws java.lang.Exception {          FastReader fs=new FastReader(System.in);          int t=fs.nextInt();          while (t-->0){             int n=fs.nextInt();             int k=fs.nextInt();             int[] pos=new int[k];             for(int i=0;i<k;i++)                 pos[i]=fs.nextInt()-1;             long[] temp=new long[n];             int ptr=0;             Arrays.fill(temp,Integer.MAX_VALUE);              for(int i=0;i<k;i++)                  temp[pos[ptr++]]=fs.nextLong();              long[] ans=solve(pos,temp,n,k);              for(int i=0;i<n;i++)                  System.out.print(ans[i]+"" "");              System.out.println();          }              } } ","import java.util.*; public class D{     private static Scanner scanner = new Scanner(System.in);     public static void main(String[] args){         int q = scanner.nextInt();         while(q-- > 0){             int n = scanner.nextInt(),             k = scanner.nextInt();             int[] a = new int[k];             for(int i=0;i<k;i++){                 a[i] = scanner.nextInt();             }             int[] t = new int[k];             for(int j=0;j<k;j++){                 t[j] = scanner.nextInt();             }             long[] L = new long[n];             long[] R = new long[n];             for(int i=0;i<n;i++){                 L[i] = Integer.MAX_VALUE;                 R[i] = Integer.MAX_VALUE;             }             for(int i=0;i<k;i++){                 L[a[i]-1] = t[i];                 R[a[i]-1] = t[i];             }                          long min = Integer.MAX_VALUE;             for(int i=0;i<n;i++){                 L[i] = Math.min(min+1,L[i]);                 min = L[i];             }             min = Integer.MAX_VALUE;             for(int i=n-1;i>=0;i--){                 R[i] = Math.min(min+1,R[i]);                 min = R[i];             }             for(int i=0;i<n;i++){                 System.out.print(Math.min(L[i],R[i]) + "" "");             }             System.out.println();         }     } } ",1
391,"import java.io.*; import java.util.*; public class CODECHEF {          static long MOD=1000000000;          static long[] solve(int[] pos,long[] arr,int n,int k){         long[] ans=new long[n];         long[] left=new long[n];         long[] right=new long[n];         long min=Integer.MAX_VALUE;         for(int i=0;i<n;i++){             min=Math.min(min+1,arr[i]);             left[i]=min;         }         min=Integer.MAX_VALUE;         for(int i=n-1;i>=0;i--){             min=Math.min(min+1,arr[i]);             right[i]=min;         }         for(int i=0;i<n;i++){             ans[i]=Math.min(left[i],right[i]);         }         return ans;     }     public static void main(String[] args) throws java.lang.Exception {          FastReader fs=new FastReader(System.in);          int t=fs.nextInt();          while (t-->0){             int n=fs.nextInt();             int k=fs.nextInt();             int[] pos=new int[k];             for(int i=0;i<k;i++)                 pos[i]=fs.nextInt()-1;             long[] temp=new long[n];             int ptr=0;             Arrays.fill(temp,Integer.MAX_VALUE);              for(int i=0;i<k;i++)                  temp[pos[ptr++]]=fs.nextLong();              long[] ans=solve(pos,temp,n,k);              for(int i=0;i<n;i++)                  System.out.print(ans[i]+"" "");              System.out.println();          }              } } ","import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); while(t-->0){     int n=sc.nextInt();     int k=sc.nextInt();          int idx[]=new int[k];          for(int i=0;i<k;i++){         idx[i]=sc.nextInt();     }          long arr[]=new long[n];     Arrays.fill(arr,Integer.MAX_VALUE);     for(int i=0;i<k;i++){         long temp=sc.nextLong();         arr[idx[i]-1]=temp;     }          long left[]=new long[n];     long right[]=new long[n];          Arrays.fill(left,Integer.MAX_VALUE);     Arrays.fill(right,Integer.MAX_VALUE);               left[0]=arr[0];          for(int i=1;i<n;i++){        left[i]=Math.min(left[i-1]+1,arr[i]);     }          right[arr.length-1]=arr[arr.length-1];          for(int i=n-2;i>=0;i--){         right[i]=Math.min(right[i+1]+1,arr[i]);     }          for(int i=0;i<n;i++){                               System.out.print(Math.min(left[i],right[i])+"" "");     }     System.out.println();    } } } ",0
392,"import java.io.*; import java.util.*; public class CODECHEF {          static long MOD=1000000000;          static long[] solve(int[] pos,long[] arr,int n,int k){         long[] ans=new long[n];         long[] left=new long[n];         long[] right=new long[n];         long min=Integer.MAX_VALUE;         for(int i=0;i<n;i++){             min=Math.min(min+1,arr[i]);             left[i]=min;         }         min=Integer.MAX_VALUE;         for(int i=n-1;i>=0;i--){             min=Math.min(min+1,arr[i]);             right[i]=min;         }         for(int i=0;i<n;i++){             ans[i]=Math.min(left[i],right[i]);         }         return ans;     }     public static void main(String[] args) throws java.lang.Exception {          FastReader fs=new FastReader(System.in);          int t=fs.nextInt();          while (t-->0){             int n=fs.nextInt();             int k=fs.nextInt();             int[] pos=new int[k];             for(int i=0;i<k;i++)                 pos[i]=fs.nextInt()-1;             long[] temp=new long[n];             int ptr=0;             Arrays.fill(temp,Integer.MAX_VALUE);              for(int i=0;i<k;i++)                  temp[pos[ptr++]]=fs.nextLong();              long[] ans=solve(pos,temp,n,k);              for(int i=0;i<n;i++)                  System.out.print(ans[i]+"" "");              System.out.println();          }              } } ","import java.util.*; public class j {   public static void main(String args[])   {     Scanner in=new Scanner(System.in);     int n=in.nextInt();     while(n-->0)     {       int len=in.nextInt();       int t=in.nextInt();       int pos[]=new int[t];       int temp[]=new int[t];       for(int i=0;i<t;i++)       pos[i]=in.nextInt();       for(int i=0;i<t;i++)       temp[i]=in.nextInt();       long range[]=new long[len];       Arrays.fill(range,Long.MAX_VALUE-10000);       for(int i=0;i<t;i++)       range[pos[i]-1]=temp[i];       for(int i=1;i<len;i++)       {         range[i]=Math.min(range[i],1+range[i-1]);       }       for(int i=len-2;i>=0;i--)       {       range[i]=Math.min(range[i+1]+1,range[i]);       }       for(int i=0;i<len;i++)       {         System.out.print(range[i]+"" "");       }System.out.println();     }   } } ",0
393,"import java.io.*; import java.util.*; public class CODECHEF {          static long MOD=1000000000;          static long[] solve(int[] pos,long[] arr,int n,int k){         long[] ans=new long[n];         long[] left=new long[n];         long[] right=new long[n];         long min=Integer.MAX_VALUE;         for(int i=0;i<n;i++){             min=Math.min(min+1,arr[i]);             left[i]=min;         }         min=Integer.MAX_VALUE;         for(int i=n-1;i>=0;i--){             min=Math.min(min+1,arr[i]);             right[i]=min;         }         for(int i=0;i<n;i++){             ans[i]=Math.min(left[i],right[i]);         }         return ans;     }     public static void main(String[] args) throws java.lang.Exception {          FastReader fs=new FastReader(System.in);          int t=fs.nextInt();          while (t-->0){             int n=fs.nextInt();             int k=fs.nextInt();             int[] pos=new int[k];             for(int i=0;i<k;i++)                 pos[i]=fs.nextInt()-1;             long[] temp=new long[n];             int ptr=0;             Arrays.fill(temp,Integer.MAX_VALUE);              for(int i=0;i<k;i++)                  temp[pos[ptr++]]=fs.nextLong();              long[] ans=solve(pos,temp,n,k);              for(int i=0;i<n;i++)                  System.out.print(ans[i]+"" "");              System.out.println();          }              } } ","import static java.lang.Math.*; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class x1547E {     public static void main(String hi[]) throws Exception     {         FastScanner infile = new FastScanner();         StringBuilder sb = new StringBuilder();         int T = infile.nextInt();         while(T-->0)         {             int N = infile.nextInt();             int K = infile.nextInt();             int[] locs = infile.nextInts(K);             int[] temps = infile.nextInts(K);             long[] arr = new long[N];             Arrays.fill(arr, Long.MAX_VALUE/2);             for(int i=0; i < K; i++)                 arr[locs[i]-1] = temps[i];             long[] suffix = new long[N];             suffix[N-1] = arr[N-1];             for(int i=N-2; i >= 0; i--)                 suffix[i] = min(arr[i], suffix[i+1]+1);             long[] prefix = new long[N];             prefix[0] = arr[0];             for(int i=1; i < N; i++)                 prefix[i] = min(arr[i], prefix[i-1]+1);             for(int i=0; i < N; i++)             {                 long res = min(prefix[i], suffix[i]);                 sb.append(res+"" "");             }             sb.append(""\n"");         }         System.out.print(sb);     } } ",0
394,"import java.io.*; import java.util.*; public class CP { static Scanner sc=new Scanner(System.in); public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } System.out.println(mana);  } } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } } } ","import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=1; t=sc.nextInt(); for(int i=1;i<=t;i++) solve(i); out.close(); out.flush(); } static void solve(int CASENO) throws IOException, CloneNotSupportedException { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } }   } ",1
395,"import java.io.*; import java.util.*; public class CP { static Scanner sc=new Scanner(System.in); public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } System.out.println(mana);  } } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } } } ","import java.io.*; import java.util.*; public class cp { static int mod=(int)1e9+7; static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0)); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i)); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } out.flush(); out.close(); System.gc(); }                                                                                      static class Pair implements Comparable<Pair>     {        int x;        int y;        Pair(int x,int y)         {            this.x=x;            this.y=y;                    }                             }                        static  PrintWriter out=new PrintWriter(System.out); } ",1
396,"import java.io.*; import java.util.*; public class CP { static Scanner sc=new Scanner(System.in); public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } System.out.println(mana);  } } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.HashSet; import java.util.Scanner; import java.util.Set; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         Scanner in = new Scanner(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskC solver = new TaskC();         solver.solve(1, in, out);         out.close();     }     static class TaskC {         public void solve(int testNumber, Scanner in, PrintWriter out) {             int T = in.nextInt();             while (T-- > 0) {                 solveOne(in, out);             }         }         private void solveOne(Scanner in, PrintWriter out) {             int N = in.nextInt();             int[] k = L.readIntArray(N, in), h = L.readIntArray(N, in);             Set<Integer> toRemove = new HashSet<>();             int prevCost = h[0], prevX = k[0];             for (int i = 1; i < N; i++) {                 for (int j = i; j < N; j++) {                     int currCost = h[j], currX = k[j];                     if (currX - currCost + 1 <= prevX) {                         if (prevCost + (currX - prevX) > h[j]) h[j] = prevCost + (currX - prevX);                     }                 }                 prevX = k[i];                 prevCost = h[i];             }             int nextCost = h[N - 1], nextX = k[N - 1];             for (int i = N - 2; i >= 0; i--) {                 int currCost = h[i], currX = k[i];                 if ((nextCost - currCost) >= (nextX - currX)) {                     toRemove.add(i);                     continue;                 }                 nextCost = currCost;                 nextX = currX;             }             long cost = 0;             for (int i = N - 1; i >= 0; i--)                 if (!toRemove.contains(i)) cost += (h[i] * ((long) h[i] + 1)) / 2;             out.println(cost);         }     }     static class L {         public static int[] readIntArray(int size, Scanner in) {             int[] array = new int[size];             for (int i = 0; i < size; i++) {                 array[i] = in.nextInt();             }             return array;         }     } } ",0
397,"import java.io.*; import java.util.*; public class CP { static Scanner sc=new Scanner(System.in); public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } System.out.println(mana);  } } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } } } ","import java.util.*; import java.io.*; import java.time.*; import static java.lang.Math.*; @SuppressWarnings(""unused"") public class C { static boolean DEBUG = false; static Reader fs; static PrintWriter pw; static void solve() { int n = fs.nextInt(), k[] = fs.readArray(n), h[] = fs.readArray(n); int prev_h = h[0], prev_k = k[0]; ArrayList<pair> intervals = new ArrayList<>(); for (int i = 0; i < n; i++) { int start = k[i] - h[i] + 1; int end = k[i]; intervals.add(new pair(start, end)); } Collections.sort(intervals); ArrayList<pair> merged = new ArrayList<>(); merge(intervals, merged); long ans = 0; for(int i = 0 ; i < merged.size() ; i++) { ans += sum(merged.get(i).len()); } pw.println(ans); } static void merge(ArrayList<pair>a1, ArrayList<pair>a2) { int n = a1.size(); int index = 0; for(int i =1 ; i < n ; i++) { if(a1.get(index).s >= a1.get(i).f) { a1.get(index).s = max(a1.get(index).s, a1.get(i).s); } else { index++; a1.set(index, a1.get(i)); } } for(int i = 0 ; i <= index ; i++) { a2.add(a1.get(i)); } } static pair merge(pair p1, pair p2) { return new pair(min(p1.f, p2.f), max(p1.s, p2.s)); } static long sum(long n) { return (n * (n + 1) / 2); } static class pair implements Comparable<pair>{ int f, s; pair(int f, int s) { this.f = f; this.s = s; } public int len() { return s - f + 1; } } public static void main(String[] args) throws IOException { Instant start = Instant.now(); if (args.length == 2) { System.setIn(new FileInputStream(new File(""D:\\program\\javaCPEclipse\\CodeForces\\src\\input.txt""))); System.setErr(new PrintStream(new File(""D:\\program\\javaCPEclipse\\CodeForces\\src\\error.txt""))); DEBUG = true; } fs = new Reader(); pw = new PrintWriter(System.out); int t = fs.nextInt(); while (t-- > 0) { solve(); } Instant end = Instant.now(); if (DEBUG) { pw.println(Duration.between(start, end)); } pw.close(); } static void sort(int a[]) { ArrayList<Integer> l = new ArrayList<Integer>(); for (int x : a) l.add(x); Collections.sort(l); for (int i = 0; i < a.length; i++) { a[i] = l.get(i); } } } ",0
398,"import java.io.*; import java.util.*; public class C_NotAssigning_1400 {     public static void main(String[] args) {         MyScanner sc = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));         int t = sc.nextInt();         while(t-->0) {             int n = sc.nextInt();             boolean[] visited = new boolean[n];             ArrayList<Edge>[] adj = new ArrayList[n];             for(int i = 0; i < n; i++) {                 adj[i] = new ArrayList<>();             }             for(int i = 0; i < n-1; i++) {                 int a = sc.nextInt()-1;                 int b = sc.nextInt()-1;                 adj[a].add(new Edge(b, i));                 adj[b].add(new Edge(a, i));             }             int start = -1;             boolean flag = false;             for(int i = 0; i < n; i++) {                  if(adj[i].size() == 1) {                     start = i;                 } else if(adj[i].size() > 2) {                     flag = true;                 }             }             int[] weights = new int[n-1];             Queue<Integer> que = new LinkedList<>();             que.offer(start);             visited[start] = true;             int curDist = 0;             while(!que.isEmpty()) {                 int cur = que.poll();                 for(Edge e : adj[cur]) {                     if(!visited[e.to]) {                         visited[e.to] = true;                         que.offer(e.to);                         if(curDist%2 == 0) {                             weights[e.index] = 2;                         } else {                             weights[e.index] = 3;                         }                     }                 }                 curDist++;             }             if(flag) {                 System.out.println(-1);             } else {                 StringBuilder sb = new StringBuilder();                 for(int i = 0; i < n-1; i++){                     sb.append(weights[i] + "" "");                 }                 System.out.println(sb.toString().trim());             }         }         out.close();     }     static class Edge{         public int to;         public int index;         Edge(int to, int index){             this.to = to;             this.index = index;         }     }     public static PrintWriter out;      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.StringTokenizer; public class NotAssigning { static class Pair { int a, b; public Pair(int a, int b) { this.a = a; this.b = b; } } static boolean vis[]; public static void dfs(ArrayList<ArrayList<Pair>> t, int cur, boolean mode, int[] w) { vis[cur] = true; for (Pair p : t.get(cur)) { if (!vis[p.a]) { if (mode) { w[p.b] = 3; } else { w[p.b] = 2; } dfs(t, p.a, !mode, w); } } } public static void solve(int n, int[] u, int[] v) { ArrayList<ArrayList<Pair>> t = new ArrayList<ArrayList<Pair>>(n); for (int i=0; i<n; i++) { t.add(new ArrayList<Pair>()); } for (int i=0; i<n-1; i++) { t.get(u[i]).add(new Pair(v[i], i)); t.get(v[i]).add(new Pair(u[i], i)); } int start = 0; for (int i=0; i<n; i++) { if (t.get(i).size() > 2) { System.out.println(""-1""); return; } if (t.get(i).size() == 1) { start = i; } } vis = new boolean[n]; int[] w = new int[n-1]; dfs(t, start, false, w); StringBuilder ans = new StringBuilder(); for (int i=0; i<n-1; i++) { ans.append(w[i]).append("" ""); } System.out.println(ans); } public static void main(String[] args) { FastReader in = new FastReader(); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); int[] u = new int[n-1]; int[] v = new int[n-1]; for (int i=0; i<n-1; i++) { u[i] = in.nextInt()-1; v[i] = in.nextInt()-1; } solve(n, u, v); } } } ",0
399,"import java.io.*; import java.util.*; public class Codeforce {          static int mod = (int) (1e9 + 7);                                   public static void main(String arg[]) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         StringBuilder sb = new StringBuilder();         while (t-- > 0) {                                 br.readLine();                         String s[]=br.readLine().split("" "");                         int n=Integer.parseInt(s[0]);                         int k=Integer.parseInt(s[1]);                         long a[]=new long[n];                         long b[]=new long[n];                         long c[]=new long[n];                         Arrays.fill(c,Integer.MAX_VALUE);                         String s1[]=br.readLine().split("" "");                         s=br.readLine().split("" "");                         for(int i=0;i<k;i++)                             c[Integer.parseInt(s1[i])-1]=Integer.parseInt(s[i]);                         long p=Integer.MAX_VALUE;                         for(int i=0;i<n;i++)                         {                             p=Math.min(p+1,c[i]);                             a[i]=p;                         }                         p=Integer.MAX_VALUE;                         for(int i=n-1;i>=0;i--){                             p=Math.min(p+1,c[i]);                             b[i]=p;                         }                         for(int i=0;i<n;i++)                             sb.append((Math.min(a[i],b[i]))+"" "");                         sb.append(""\n"");                        }         System.out.println(sb);     } } ","import java.io.*; import java.util.*; import java.math.BigInteger; public class C{     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Task solver = new Task();         solver.solve(in, out);         out.close();     }          static class Task{         double eps= 0.00000001;         static final int MAXN = 100005;         static final int MOD= 998244353;                  static int spf[] = new int[MAXN];         Map<Integer,Set<Integer>> dp= new HashMap<>();                                                                                                                                                         int[] fact= new int[MAXN];         int[] inv= new int[MAXN];                                                      public void solve(InputReader in, PrintWriter out) {             int test= in.nextInt();             while(test-->0){                 int n= in.nextInt(), k= in.nextInt();                 int[] a= new int[k];                 int[] t= new int[k];                 for(int i=0;i<k;i++) a[i]= in.nextInt();                 for(int i=0;i<k;i++) t[i]= in.nextInt();                 int[] c= new int[n];                 Arrays.fill(c, Integer.MAX_VALUE);                 for(int i=0;i<k;i++){                     c[a[i]-1]=t[i];                 }                 int[] L= new int[n];                 int[] R= new int[n];                 Arrays.fill(L, Integer.MAX_VALUE);                 Arrays.fill(R, Integer.MAX_VALUE);                 long p= Integer.MAX_VALUE;                 for(int i=0;i<n;i++){                     p=Math.min(p+1,c[i]);                     L[i]=(int)p;                 }                 p= Integer.MAX_VALUE;                 for(int i=n-1;i>=0;i--){                     p= Math.min(p+1,c[i]);                     R[i]=(int)p;                 }                 for(int i=0;i<n;i++){                     out.print(Math.min(L[i],R[i])+"" "");                 }                 out.println();             }                      }                                                                                  }                          } ",1
400,"import java.io.*; import java.util.*; public class Codeforce {          static int mod = (int) (1e9 + 7);                               public static  int fun(int ch,int a[][],int tot[],int n){         ArrayList<Integer>ar=new ArrayList<>();         for(int i=0;i<n;i++){             ar.add((a[i][ch]-(tot[i]-a[i][ch])));         }         Collections.sort(ar,Collections.reverseOrder());         int cou=0;         int ans=0;         for(int i:ar){             cou+=i;             if(cou>0){                 ans++;             }             else                 break;         } return ans; }     public static void main(String arg[]) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         StringBuilder sb = new StringBuilder();         while (t-- > 0) {                int n=Integer.parseInt(br.readLine());                int a[][]=new int[n][5];                int tot[]=new int[n];                for(int i=0;i<n;i++){                    String s=br.readLine();                    tot[i]+=s.length();                    for(int j=0;j<s.length();j++){                        a[i][s.charAt(j)-'a']++;                    }                }                int ans=0;                for(int i=0;i<5;i++){                    ans=Math.max(ans,fun(i,a,tot,n));                }                sb.append(ans+""\n"");                        }         System.out.println(sb);     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ",0
401,"import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int n=Integer.parseInt(bu.readLine());         String s[]=bu.readLine().split("" "");         ArrayList<Integer> z=new ArrayList<>(),o=new ArrayList<>();         long dp[][]=new long[n+1][n+1];         int i,j,a;         for(i=0;i<n;i++)         {             a=Integer.parseInt(s[i]);             if(a==0) z.add(i);             else o.add(i);         }         for(i=1;i<=o.size();i++)         {             long min=dp[i-1][i-1];             for(j=i;j<=z.size();j++)             {                 dp[i][j]=min+Math.abs(z.get(j-1)-o.get(i-1));                 min=Math.min(min,dp[i-1][j]);             }         }         long ans=Long.MAX_VALUE;         for(i=o.size();i<=z.size();i++)         ans=Math.min(ans,dp[o.size()][i]);         System.out.print(ans);     } } ","import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int n=Integer.parseInt(bu.readLine());         String s[]=bu.readLine().split("" "");         ArrayList<Integer> z=new ArrayList<>(),o=new ArrayList<>();         long dp[][]=new long[n+1][n+1];         int i,j,a;         for(i=0;i<n;i++)         {             a=Integer.parseInt(s[i]);             if(a==0) z.add(i);             else o.add(i);         }         for(i=1;i<=o.size();i++)         {             long min=dp[i-1][i-1];             for(j=i;j<=z.size();j++)             {                 dp[i][j]=min+Math.abs(z.get(j-1)-o.get(i-1));                 min=Math.min(min,dp[i-1][j]);             }         }         long ans=Long.MAX_VALUE;         for(i=o.size();i<=z.size();i++)         ans=Math.min(ans,dp[o.size()][i]);         System.out.print(ans);     } } ",1
402,"import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int n=Integer.parseInt(bu.readLine());         String s[]=bu.readLine().split("" "");         ArrayList<Integer> z=new ArrayList<>(),o=new ArrayList<>();         long dp[][]=new long[n+1][n+1];         int i,j,a;         for(i=0;i<n;i++)         {             a=Integer.parseInt(s[i]);             if(a==0) z.add(i);             else o.add(i);         }         for(i=1;i<=o.size();i++)         {             long min=dp[i-1][i-1];             for(j=i;j<=z.size();j++)             {                 dp[i][j]=min+Math.abs(z.get(j-1)-o.get(i-1));                 min=Math.min(min,dp[i-1][j]);             }         }         long ans=Long.MAX_VALUE;         for(i=o.size();i<=z.size();i++)         ans=Math.min(ans,dp[o.size()][i]);         System.out.print(ans);     } } ","import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int n=Integer.parseInt(bu.readLine());         String s[]=bu.readLine().split("" "");         ArrayList<Integer> z=new ArrayList<>(),o=new ArrayList<>();         long dp[][]=new long[n+1][n+1];         int i,j,a;         for(i=0;i<n;i++)         {             a=Integer.parseInt(s[i]);             if(a==0) z.add(i);             else o.add(i);         }         for(i=1;i<=o.size();i++)         {             long min=dp[i-1][i-1];             for(j=i;j<=z.size();j++)             {                 dp[i][j]=min+Math.abs(z.get(j-1)-o.get(i-1));                 min=Math.min(min,dp[i-1][j]);             }         }         long ans=Long.MAX_VALUE;         for(i=o.size();i<=z.size();i++)         ans=Math.min(ans,dp[o.size()][i]);         System.out.print(ans);     } } ",1
403,"import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int t=Integer.parseInt(bu.readLine());         while(t-->0)         {             bu.readLine();             String s[]=bu.readLine().split("" "");             int n=Integer.parseInt(s[0]),k=Integer.parseInt(s[1]);             int a[]=new int[n],i,x,ac[]=new int[n],b[]=new int[k];             Arrays.fill(a,Integer.MAX_VALUE);             s=bu.readLine().split("" "");             for(i=0;i<k;i++) b[i]=Integer.parseInt(s[i])-1;             s=bu.readLine().split("" "");             for(i=0;i<k;i++)             {                 x=Integer.parseInt(s[i]);                 ac[b[i]]=x;             }             PriorityQueue<Integer> pq=new PriorityQueue<>();             for(i=0;i<n;i++)             {                 if(ac[i]!=0) pq.add(ac[i]-i);                 if(!pq.isEmpty()) a[i]=Math.min(a[i],pq.peek()+i);             }             pq=new PriorityQueue<>();             for(i=n-1;i>=0;i--)             {                 if(ac[i]!=0) pq.add(ac[i]+i);                 if(!pq.isEmpty()) a[i]=Math.min(a[i],pq.peek()-i);             }             for(i=0;i<n;i++) sb.append(a[i]+"" "");             sb.append(""\n"");         }         System.out.print(sb);     } } ","import java.io.*; import java.util.*;   public class Codeforces { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int cases = Integer.parseInt(br.readLine()); while(cases-- > 0) { br.readLine(); String[] str = br.readLine().split("" ""); int n = Integer.parseInt(str[0]); int k = Integer.parseInt(str[1]); int[] a = new int[k]; int[] t = new int[k]; str = br.readLine().split("" ""); for(int i=0; i<k; i++) { a[i] = Integer.parseInt(str[i]) - 1; } str = br.readLine().split("" ""); for(int i=0; i<k; i++) { t[i] = Integer.parseInt(str[i]); } int[] temp = new int[n]; Arrays.fill(temp, Integer.MAX_VALUE); int[] left = new int[n]; int[] right = new int[n]; Arrays.fill(left, Integer.MAX_VALUE); Arrays.fill(right, Integer.MAX_VALUE); int ind = 0; for(int i=0; i<k; i++) { left[a[i]] = t[i]; right[a[i]] = t[i]; } int minleft = Integer.MAX_VALUE; for(int i=0; i<n; i++) { left[i] = Math.min(left[i], minleft); minleft = left[i] == Integer.MAX_VALUE ? Integer.MAX_VALUE : left[i]+1; } int minright = Integer.MAX_VALUE; for(int i=n-1; i>=0; i--) { right[i] = Math.min(right[i], minright); minright = right[i] == Integer.MAX_VALUE ? Integer.MAX_VALUE : right[i]+1; } for(int i=0; i<n; i++) { temp[i] = Math.min(right[i], left[i]); System.out.print(temp[i]+"" ""); } System.out.println(); } } } ",0
404,"import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int t=Integer.parseInt(bu.readLine());         while(t-->0)         {             int n=Integer.parseInt(bu.readLine());             int k[]=new int[n+1],h[]=new int[n+1],i;             String s[]=bu.readLine().split("" "");             for(i=1;i<=n;i++) k[i]=Integer.parseInt(s[i-1]);             s=bu.readLine().split("" "");             for(i=1;i<=n;i++) h[i]=Integer.parseInt(s[i-1]);             long max[]=new long[n+1];             for(i=1;i<=n;i++)             {                 int j;                 long here=h[i];                 for(j=i-1;j>=0;j--)                 {                     long diff=here-(k[i]-k[j]);                     if(diff<=0) {max[i]=max[j]+here*(here+1)/2; break;}                     if(diff<h[j]) here+=h[j]-diff;                 }             }             sb.append(max[n]+""\n"");         }         System.out.print(sb);     } } ","import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int t=Integer.parseInt(bu.readLine());         while(t-->0)         {             int n=Integer.parseInt(bu.readLine());             int k[]=new int[n+1],h[]=new int[n+1],i;             String s[]=bu.readLine().split("" "");             for(i=1;i<=n;i++) k[i]=Integer.parseInt(s[i-1]);             s=bu.readLine().split("" "");             for(i=1;i<=n;i++) h[i]=Integer.parseInt(s[i-1]);             long max[]=new long[n+1];             for(i=1;i<=n;i++)             {                 int j;                 long here=h[i];                 for(j=i-1;j>=0;j--)                 {                     long diff=here-(k[i]-k[j]);                     if(diff<=0) {max[i]=max[j]+here*(here+1)/2; break;}                     if(diff<h[j]) here+=h[j]-diff;                 }             }             sb.append(max[n]+""\n"");         }         System.out.print(sb);     } } ",1
405,"import java.io.*; import java.util.*; public class ComdeFormces { public static void main(String[] args) throws Exception{ FastReader sc=new FastReader(); BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out)); int t=sc.nextInt(); while(t--!=0) { int n=sc.nextInt();     ArrayList<ArrayList<pair>> ar=new ArrayList<>();     ArrayList<pair> arr=new ArrayList<>();     int c[]=new int[n];     for(int i=0;i<=n;i++) {     ar.add(new ArrayList<>());     }     for(int i=0;i<n-1;i++) {     int a=sc.nextInt();     int b=sc.nextInt();     ar.get(a).add(new pair(b,i));     ar.get(b).add(new pair(a,i));          }     boolean ans=true;     for(int i=0;i<=n;i++) {      if(ar.get(i).size()>2) {      ans=false;      break;      }       }     if(ans) {             for(int i=1;i<=n;i++) {        if(ar.get(i).size()==1) {        boolean vis[]=new boolean[n+1];        dfs(ar,2,i,vis,c);        break;        }        }        for(int i=0;i<n;i++) {        if(c[i]!=0)log.write(c[i]+"" "");        }     }     else log.write(""-1"");           log.write(""\n"");      log.flush(); } } static void dfs(ArrayList<ArrayList<pair>>ar ,int val,int src,boolean vis[],int c[]) { if(vis[src])return; vis[src]=true; for(int i=0;i<ar.get(src).size();i++) { if(!vis[ar.get(src).get(i).a]) { c[ar.get(src).get(i).b]=val; if(val==2) { dfs(ar,3,ar.get(src).get(i).a,vis,c); } else { dfs(ar,2,ar.get(src).get(i).a,vis,c); } } } }     public static class pair{ int a; int b; public pair(int a,int b) { this.a=a; this.b=b; } } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main {     static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out)); public static void main (String[] args) throws java.lang.Exception { FastReader sc = new FastReader(); int t = sc.nextInt(); while(t-->0){          solve(sc);      } } public static void solve(FastReader sc){     int n = sc.nextInt();          ArrayList<ArrayList<Edge>> graph = new ArrayList<ArrayList<Edge>>();     for(int i = 0;i<n;++i){         graph.add(new ArrayList<>());     }     for(int i = 0;i<n-1;++i){         int u = sc.nextInt();         int v = sc.nextInt();                  u--;         v--;                  graph.get(u).add(new Edge(v, i));         graph.get(v).add(new Edge(u, i));                       }          int start = 0;     for(int i = 0;i<n;++i){         if(graph.get(i).size()>2){             out.println(-1);out.flush();return;         }else if(graph.get(i).size()==1){             start=i;         }     }          int val=2;     int [] wgt = new int[n-1];     int curr = graph.get(start).get(0).node;          wgt[graph.get(start).get(0).idx] = val;          val=5;          while(true){         ArrayList<Edge> list = graph.get(curr);         if(list.size()==1){             break;         }else{             for(Edge el : list){                 if(wgt[el.idx]==0){                     wgt[el.idx] = val;                     val = 7-val;                     curr = el.node;                 }             }                      }              }               for(int el : wgt){         out.print(el + "" "");     }     out.println();     out.flush();      } static class Edge {       int node;       int idx;       Edge(int src, int nbr) {          this.node = src;          this.idx = nbr;       }    } } ",0
406,"import java.io.*; import java.util.*; public class D {     public static void main(String[] args) throws IOException {         in.init();         int n = in.readInt();         for (int i = 0; i < n; i++) {             sol();         }         in.dinit();     }     private static void sol() throws IOException {                  int n = in.readInt();         int arr[] = in.arr(n);         int three2n = 1;         for (int i = 0; i < arr.length; i++) {             three2n *= 3;         }         for (int i = 1; i < three2n; i++) {             int sum = i;             int actualsum = 0;             for (int j = 0; j < arr.length; j++) {                 int change = sum % 3;                 change = (change == 2) ? -1 : change;                 actualsum += change * arr[j];                 sum = sum / 3;             }             if (actualsum == 0) {                 System.out.println(""YES"");                 return;             }         }         System.out.println(""NO"");     } } class in {     static BufferedReader br;     static PrintWriter out;     static StringTokenizer st;     public static void init() throws IOException {          br = new BufferedReader(new InputStreamReader(System.in));          out = new PrintWriter(new OutputStreamWriter(System.out));                               }     static int[] arr(int n) throws IOException {         int arr[] = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = in.readInt();         }         return arr;     }     public static void dinit() throws IOException {         br.close();         out.close();     }     static String next() throws IOException {         while (st == null || !st.hasMoreTokens())             st = new StringTokenizer(br.readLine().trim());         return st.nextToken();     }          static int readInt() throws IOException {         return Integer.parseInt(next());     }               static String readLine() throws IOException {         return br.readLine().trim();     } } ","import java.io.*; import java.util.*; public class Main { static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static StringTokenizer st; static PrintWriter pr = new PrintWriter(new OutputStreamWriter(System.out)); static String readLine() throws IOException { return br.readLine(); } static String next() throws IOException { while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(readLine()); return st.nextToken(); } static int readInt() throws IOException { return Integer.parseInt(next()); } static void solve() throws IOException { int n = readInt(), a[] = new int[n]; for (int i = 0; i < n; ++i) a[i] = readInt(); for (int i = 0; i < n; ++i) { List<Integer> b = new ArrayList(); for (int j = 0; j < n; ++j) if (j != i) b.add(a[j]); int s = (int)Math.pow(3, n - 1); for (int mm = 0; mm < s; ++mm) { int sum = 0; for (int m = mm, j = 0; m > 0; m /= 3, ++j) { if (m%3 == 1) sum += b.get(j); else if (m%3 == 2) sum -= b.get(j); } if (sum == a[i]) { pr.println(""YES""); return; } } } pr.println(""NO""); } public static void main(String[] args) throws IOException { for (int t = readInt(); t > 0; --t) solve(); pr.close(); } } ",0
407,"import java.io.*; import java.util.*; public class D669b{        public static void main(String[] args)throws IOException{       BufferedReader f = new BufferedReader(new InputStreamReader(System.in));       PrintWriter out = new PrintWriter(System.out);              int n = Integer.parseInt(f.readLine());              StringTokenizer st = new StringTokenizer(f.readLine());              int[] array = new int[n];              for(int k = 0; k < n; k++){          array[k] = Integer.parseInt(st.nextToken());       }              ArrayList<HashSet<Integer>> adj = new ArrayList<HashSet<Integer>>(n);       for(int k = 0; k < n; k++) adj.add(new HashSet<Integer>());              for(int k = 0; k < n-1; k++){          adj.get(k).add(k+1);       }                     Stack<Num> stk = new Stack<Num>();       stk.add(new Num(array[0],0));              for(int k = 1; k < n; k++){          while(!stk.isEmpty() && stk.peek().x > array[k]){             stk.pop();          }                    if(!stk.isEmpty()){             adj.get(stk.peek().i).add(k);          }                    stk.add(new Num(array[k],k));       }                     stk = new Stack<Num>();       stk.add(new Num(array[n-1],n-1));              for(int k = n-2; k >= 0; k--){          while(!stk.isEmpty() && stk.peek().x > array[k]){             stk.pop();          }                    if(!stk.isEmpty()){             adj.get(k).add(stk.peek().i);          }                    stk.add(new Num(array[k],k));       }              stk = new Stack<Num>();       stk.add(new Num(array[0],0));              for(int k = 1; k < n; k++){          while(!stk.isEmpty() && stk.peek().x < array[k]){             stk.pop();          }                    if(!stk.isEmpty()){             adj.get(stk.peek().i).add(k);          }                    stk.add(new Num(array[k],k));       }                     stk = new Stack<Num>();       stk.add(new Num(array[n-1],n-1));              for(int k = n-2; k >= 0; k--){          while(!stk.isEmpty() && stk.peek().x < array[k]){             stk.pop();          }                    if(!stk.isEmpty()){             adj.get(k).add(stk.peek().i);          }                    stk.add(new Num(array[k],k));       }                     int[] path = new int[n];       Arrays.fill(path,Integer.MAX_VALUE);       path[0] = 0;              for(int k = 0; k < n; k++){          for(int nei : adj.get(k)){             path[nei] = Math.min(path[nei],path[k]+1);          }       }              int answer = path[n-1];       out.println(answer);                                      out.close();    }        public static class Num{       int x;       int i;       public Num(int a, int b){          x = a;          i = b;       }    }        } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.io.IOException; import java.io.InputStreamReader; import java.util.Stack; import java.util.ArrayList; import java.util.Vector; import java.util.StringTokenizer; import java.io.BufferedReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DDiscreteCentrifugalJumps solver = new DDiscreteCentrifugalJumps();         solver.solve(1, in, out);         out.close();     }     static class DDiscreteCentrifugalJumps {         public void solve(int testNumber, InputReader in, PrintWriter out) {             int n = in.nextInt();             ArrayList<Integer> jumps[] = new ArrayList[n];             int h[] = new int[n];             for (int i = 0; i < n; i++) {                 h[i] = in.nextInt();                 jumps[i] = new ArrayList<>();             }             Stack<int[]> s = new Stack<>();             for (int i = 0; i < n; i++) {                 while (s.size() > 0 && s.peek()[0] > h[i]) {                     s.pop();                 }                 if (s.size() > 0) {                     jumps[i].add(s.peek()[1]);                 }                 s.add(new int[]{h[i], i});             }             s.clear();             for (int i = 0; i < n; i++) {                 while (s.size() > 0 && s.peek()[0] < h[i]) {                     s.pop();                 }                 if (s.size() > 0) {                     jumps[i].add(s.peek()[1]);                 }                 s.add(new int[]{h[i], i});             }             s.clear();             for (int i = n - 1; i >= 0; i--) {                 while (s.size() > 0 && s.peek()[0] < h[i]) {                     s.pop();                 }                 if (s.size() > 0) {                     jumps[s.peek()[1]].add(i);                 }                 s.add(new int[]{h[i], i});             }             s.clear();             for (int i = n - 1; i >= 0; i--) {                 while (s.size() > 0 && s.peek()[0] > h[i]) {                     s.pop();                 }                 if (s.size() > 0) {                     jumps[s.peek()[1]].add(i);                 }                 s.add(new int[]{h[i], i});             }             s.clear();             int dp[] = new int[n];             dp[0] = 0;             for (int i = 1; i < n; i++) {                 dp[i] = Integer.MAX_VALUE;                 for (int x : jumps[i]) {                     dp[i] = Math.min(dp[i], dp[x] + 1);                 }             }             out.print(dp[n - 1]);         }     }      } ",0
408,"import java.io.*; import java.util.*; public class D_668 {     static int p=1000000007;     static  int dia=Integer.MIN_VALUE;     public static void main(String[] args) throws Exception{         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(java.io.FileDescriptor.out), ""ASCII""), 512);         FastReader sc=new FastReader();         int t=sc.nextInt();        StringBuilder sb=new StringBuilder();         while(t-->0)         {             int n=sc.nextInt();             int a=sc.nextInt();             int b=sc.nextInt();             int da=sc.nextInt();             int db=sc.nextInt();             dia=Integer.MIN_VALUE;             int dp[]=new int[(int) n+1];             List<Integer> adj[]=new ArrayList[n+1];             for(int i=0;i<=n;i++)             {                 adj[i]=new ArrayList<>();             }             Set<Integer> s=new HashSet<>();             for(int i=1;i<n;i++)             {                 int u=sc.nextInt();                 int v=sc.nextInt();                 adj[u].add(v);                 adj[v].add(u);             }             dfs(dp,adj,a,-1,0);                         if(2*da>=db||2*da>=dia||da>=dp[b])                 sb.append(""Alice\n"");             else                 sb.append(""Bob\n"");         }         System.out.println(sb.toString());         out.flush();     }     public static int dfs(int dp[],List<Integer> adj[],int i,int p,int d)     {         dp[i]=d;         int last_max=0;         for(int v:adj[i])         {             if(p!=v&&dp[v]==0)             {                 int max=1+dfs(dp,adj,v,i,d+1);                 dia=Math.max(dia,max+last_max);                 last_max=Math.max(last_max,max);             }         }         return last_max;     }               int bit[]=new int[(int)1e6];                     } ","import java.io.*; import java.util.*; public class Main {     private static final boolean N_CASE = true;     private List<List<Integer>> g;     private int a;     private int b;     private int da;     private int db;     private int max;     private int ab;     private int dfs(int u, int fa, int depth) {         if (u == a) {             ab = depth;         }         int m1 = 0, m2 = 0;         for (int v : g.get(u)) {             if (v != fa) {                 int m = dfs(v, u, depth + 1) + 1;                 if (m > m1) { m2 = m1; m1 = m; }                 else if (m > m2) { m2 = m; }             }         }         max = Math.max(max, m1 + m2);         int cmax = Math.max(m1, m2);         max = Math.max(max, cmax + depth);         return cmax;     }     private void solve() {         int n = sc.nextInt();         a = sc.nextInt() - 1; b = sc.nextInt() - 1;         da = sc.nextInt(); db = sc.nextInt();         g = createGraph(n);         for (int i = 0; i < n - 1; ++i) {             int u = sc.nextInt() - 1, v = sc.nextInt() - 1;             g.get(u).add(v);             g.get(v).add(u);         }         max = 0;         dfs(b, -1, 0);         db = Math.min(max, db);         boolean win = true;         if (ab > da) {             if (db > da * 2) {                 win = false;             }         }         out.println(win ? ""Alice"" : ""Bob"");     }     private void run() {         int T = N_CASE ? sc.nextInt() : 1;         for (int t = 0; t < T; ++t) {             solve();         }     }     private static MyWriter out;     private static MyScanner sc;          private static class MyWriter extends PrintWriter {         private MyWriter(OutputStream outputStream) {             super(outputStream);         }                           void println(int[] a) {             for (int v : a) {                 println(v);             }         }                  void println(List<Integer> list) {             list.forEach(this::println);         }     }     private <T> List<List<T>> createGraph(int n) {         List<List<T>> g = new ArrayList<>();         for (int i = 0; i < n; ++i) {             g.add(new ArrayList<>());         }         return g;     }               public static void main(String[] args) {         out = new MyWriter(new BufferedOutputStream(System.out));         sc = new MyScanner();         new Main().run();         out.close();     } } ",0
409,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
410,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
411,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
412,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
413,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException {         br = new BufferedReader(new InputStreamReader(System.in));         PrintWriter pw = new PrintWriter(System.out);         int n = nextInt();         int k = nextInt();         f = new int[n + 42];         rf = new int[n + 42];         f[0] = 1;         rf[0] = 1;         for (int i = 1; i < f.length; i++) {             f[i] = mul(f[i - 1], i);             rf[i] = mul(rf[i - 1], inv(i));         }         int[] a = new int[n * 2];         for (int i = 0; i < n; i++) {             a[i] = nextInt() * 2;             a[i + n] = nextInt() * 2 + 1;         }         Arrays.sort(a);         int ans = 0;         int curOpen = 0;         for (int r = 0; r < 2 * n;) {             int l = r;             while (r < 2 * n && a[l] == a[r]) r++;             int intersections = r - l;             if (a[l] % 2 == 0) {                 ans += C(curOpen + intersections, k);                 if (ans >= mod) ans -= mod;                 ans += mod - C(curOpen, k);                 if (ans >= mod) ans -= mod;                 curOpen += intersections;             } else {                 curOpen -= intersections;             }         }         pw.println(ans);         pw.close();     }     static int mod = 998244353;     static int mul(int a, int b) {         return (int) ((long) a * (long) b % mod);     }     static int[] f;     static int[] rf;     static int C(int n, int k) {         return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n - k], rf[k]));     }     static int pow(int a, int n) {         int res = 1;         while (n != 0) {             if ((n & 1) == 1) {                 res = mul(res, a);             }             a = mul(a, a);             n >>= 1;         }         return res;     }     static int inv(int a) {         return pow(a, mod - 2);     }     static StringTokenizer st = new StringTokenizer("""");     static BufferedReader br;     static String next() throws IOException {         while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());         return st.nextToken();     }     static int nextInt() throws IOException {         return Integer.parseInt(next());     }           } ",1
414,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException {         br = new BufferedReader(new InputStreamReader(System.in));         PrintWriter pw = new PrintWriter(System.out);         int n = nextInt();         int k = nextInt();         f = new int[n + 42];         rf = new int[n + 42];         f[0] = 1;         rf[0] = 1;         for (int i = 1; i < f.length; i++) {             f[i] = mul(f[i - 1], i);             rf[i] = mul(rf[i - 1], inv(i));         }         int[] a = new int[n * 2];         for (int i = 0; i < n; i++) {             a[i] = nextInt() * 2;             a[i + n] = nextInt() * 2 + 1;         }         Arrays.sort(a);         int ans = 0;         int curOpen = 0;         for (int r = 0; r < 2 * n;) {             int l = r;             while (r < 2 * n && a[l] == a[r]) r++;             int intersections = r - l;             if (a[l] % 2 == 0) {                 ans += C(curOpen + intersections, k);                 if (ans >= mod) ans -= mod;                 ans += mod - C(curOpen, k);                 if (ans >= mod) ans -= mod;                 curOpen += intersections;             } else {                 curOpen -= intersections;             }         }         pw.println(ans);         pw.close();     }     static int mod = 998244353;     static int mul(int a, int b) {         return (int) ((long) a * (long) b % mod);     }     static int[] f;     static int[] rf;     static int C(int n, int k) {         return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n - k], rf[k]));     }     static int pow(int a, int n) {         int res = 1;         while (n != 0) {             if ((n & 1) == 1) {                 res = mul(res, a);             }             a = mul(a, a);             n >>= 1;         }         return res;     }     static int inv(int a) {         return pow(a, mod - 2);     }     static StringTokenizer st = new StringTokenizer("""");     static BufferedReader br;     static String next() throws IOException {         while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());         return st.nextToken();     }     static int nextInt() throws IOException {         return Integer.parseInt(next());     }           } ",1
415,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.util.*; public class d {     public static Scanner sc = new Scanner(System.in);     public static final int MOD = 998244353;     int []f; int [] lf;     public static int mul(int a, int b) {         return (int)((long)a * (long)b % MOD);     }     public static int ksm(int a, int n) {         int ans = 1;         while(n > 0) {             if((n & 1) == 1)                 ans = mul(a, ans);             a = mul(a, a);             n >>= 1;         }         return ans;     }     public int C(int n, int k) {         return (k < 0 || k > n) ? 0 : mul(f[n], mul(lf[n - k], lf[k]));     }     public static int inv(int a) {         return ksm(a, MOD - 2);     }     public void solve() {         int n = sc.nextInt();         int k = sc.nextInt();         f = new int[n + 42];         lf = new int[n + 42];         f[0] = lf[0] = 1;         for(int i = 1; i < f.length; i++) {             f[i] = mul(f[i  - 1], i);             lf[i] = mul(lf[i - 1], inv(i));         }         int[] events = new int[2 * n];         for(int i = 0; i < n; i++) {             int le = sc.nextInt();             int ri = sc.nextInt();             events[i] = le * 2;             events[i + n] = ri * 2 + 1;         }         Arrays.sort(events);         int ans = 0, balance = 0;         for(int r = 0; r < 2 * n;) {             int l = r;             while(r < 2 * n && events[l] == events[r]) ++r;             int added = r - l;             if(events[l] % 2 == 0) {                 ans += C(balance + added, k);                 if(ans >= MOD) ans -= MOD;                 ans += MOD - C(balance, k);                 if(ans >= MOD) ans -= MOD;                 balance += added;             }             else balance -= added;         }         sc.close();         System.out.println(ans);     }     public static void main(String[] args) {         (new d()).solve();     } } ",1
416,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } static void shuffleArray(int[] a) { Random rnd = new Random(); for (int i = a.length-1; i > 0; i--) { int index = rnd.nextInt(i + 1); int tmp = a[index]; a[index] = a[i]; a[i] = tmp; } } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } shuffleArray(events); Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
417,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } static void shuffleArray(int[] a) { Random rnd = new Random(); for (int i = a.length-1; i > 0; i--) { int index = rnd.nextInt(i + 1); int tmp = a[index]; a[index] = a[i]; a[i] = tmp; } } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } shuffleArray(events); Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
418,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } static void shuffleArray(int[] a) { Random rnd = new Random(); for (int i = a.length-1; i > 0; i--) { int index = rnd.nextInt(i + 1); int tmp = a[index]; a[index] = a[i]; a[i] = tmp; } } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } shuffleArray(events); Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
419,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } static void shuffleArray(int[] a) { Random rnd = new Random(); for (int i = a.length-1; i > 0; i--) { int index = rnd.nextInt(i + 1); int tmp = a[index]; a[index] = a[i]; a[i] = tmp; } } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } shuffleArray(events); Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
420,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } static void shuffleArray(int[] a) { Random rnd = new Random(); for (int i = a.length-1; i > 0; i--) { int index = rnd.nextInt(i + 1); int tmp = a[index]; a[index] = a[i]; a[i] = tmp; } } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } shuffleArray(events); Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } static void shuffleArray(int[] a) { Random rnd = new Random(); for (int i = a.length-1; i > 0; i--) { int index = rnd.nextInt(i + 1); int tmp = a[index]; a[index] = a[i]; a[i] = tmp; } } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } shuffleArray(events); Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ",1
421,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } static void shuffleArray(int[] a) { Random rnd = new Random(); for (int i = a.length-1; i > 0; i--) { int index = rnd.nextInt(i + 1); int tmp = a[index]; a[index] = a[i]; a[i] = tmp; } } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } shuffleArray(events); Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException {         br = new BufferedReader(new InputStreamReader(System.in));         PrintWriter pw = new PrintWriter(System.out);         int n = nextInt();         int k = nextInt();         f = new int[n + 42];         rf = new int[n + 42];         f[0] = 1;         rf[0] = 1;         for (int i = 1; i < f.length; i++) {             f[i] = mul(f[i - 1], i);             rf[i] = mul(rf[i - 1], inv(i));         }         int[] a = new int[n * 2];         for (int i = 0; i < n; i++) {             a[i] = nextInt() * 2;             a[i + n] = nextInt() * 2 + 1;         }         Arrays.sort(a);         int ans = 0;         int curOpen = 0;         for (int r = 0; r < 2 * n;) {             int l = r;             while (r < 2 * n && a[l] == a[r]) r++;             int intersections = r - l;             if (a[l] % 2 == 0) {                 ans += C(curOpen + intersections, k);                 if (ans >= mod) ans -= mod;                 ans += mod - C(curOpen, k);                 if (ans >= mod) ans -= mod;                 curOpen += intersections;             } else {                 curOpen -= intersections;             }         }         pw.println(ans);         pw.close();     }     static int mod = 998244353;     static int mul(int a, int b) {         return (int) ((long) a * (long) b % mod);     }     static int[] f;     static int[] rf;     static int C(int n, int k) {         return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n - k], rf[k]));     }     static int pow(int a, int n) {         int res = 1;         while (n != 0) {             if ((n & 1) == 1) {                 res = mul(res, a);             }             a = mul(a, a);             n >>= 1;         }         return res;     }     static int inv(int a) {         return pow(a, mod - 2);     }     static StringTokenizer st = new StringTokenizer("""");     static BufferedReader br;     static String next() throws IOException {         while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());         return st.nextToken();     }     static int nextInt() throws IOException {         return Integer.parseInt(next());     }           } ",1
422,"import java.io.*; import java.util.*; public class D_Java { public static final int MOD = 998244353; public static int mul(int a, int b) { return (int)((long)a * (long)b % MOD); } int[] f; int[] rf; public int C(int n, int k) { return (k < 0 || k > n) ? 0 : mul(f[n], mul(rf[n-k], rf[k])); } public static int pow(int a, int n) { int res = 1; while (n != 0) { if ((n & 1) == 1) { res = mul(res, a); } a = mul(a, a); n >>= 1; } return res; } static void shuffleArray(int[] a) { Random rnd = new Random(); for (int i = a.length-1; i > 0; i--) { int index = rnd.nextInt(i + 1); int tmp = a[index]; a[index] = a[i]; a[i] = tmp; } } public static int inv(int a) { return pow(a, MOD-2); } public void doIt() throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer tok = new StringTokenizer(in.readLine()); int n = Integer.parseInt(tok.nextToken()); int k = Integer.parseInt(tok.nextToken()); f = new int[n+42]; rf = new int[n+42]; f[0] = rf[0] = 1; for (int i = 1; i < f.length; ++i) { f[i] = mul(f[i-1], i); rf[i] = mul(rf[i-1], inv(i)); } int[] events = new int[2*n]; for (int i = 0; i < n; ++i) { tok = new StringTokenizer(in.readLine()); int le = Integer.parseInt(tok.nextToken()); int ri = Integer.parseInt(tok.nextToken()); events[i] = le*2; events[i + n] = ri*2 + 1; } shuffleArray(events); Arrays.sort(events); int ans = 0; int balance = 0; for (int r = 0; r < 2*n;) { int l = r; while (r < 2*n && events[l] == events[r]) { ++r; } int added = r - l; if (events[l] % 2 == 0) { ans += C(balance + added, k); if (ans >= MOD) ans -= MOD; ans += MOD - C(balance, k); if (ans >= MOD) ans -= MOD; balance += added; } else { balance -= added; } } in.close(); System.out.println(ans); } public static void main(String[] args) throws IOException { (new D_Java()).doIt(); } } ","import java.util.*; public class d {     public static Scanner sc = new Scanner(System.in);     public static final int MOD = 998244353;     int []f; int [] lf;     public static int mul(int a, int b) {         return (int)((long)a * (long)b % MOD);     }     public static int ksm(int a, int n) {         int ans = 1;         while(n > 0) {             if((n & 1) == 1)                 ans = mul(a, ans);             a = mul(a, a);             n >>= 1;         }         return ans;     }     public int C(int n, int k) {         return (k < 0 || k > n) ? 0 : mul(f[n], mul(lf[n - k], lf[k]));     }     public static int inv(int a) {         return ksm(a, MOD - 2);     }     public void solve() {         int n = sc.nextInt();         int k = sc.nextInt();         f = new int[n + 42];         lf = new int[n + 42];         f[0] = lf[0] = 1;         for(int i = 1; i < f.length; i++) {             f[i] = mul(f[i  - 1], i);             lf[i] = mul(lf[i - 1], inv(i));         }         int[] events = new int[2 * n];         for(int i = 0; i < n; i++) {             int le = sc.nextInt();             int ri = sc.nextInt();             events[i] = le * 2;             events[i + n] = ri * 2 + 1;         }         Arrays.sort(events);         int ans = 0, balance = 0;         for(int r = 0; r < 2 * n;) {             int l = r;             while(r < 2 * n && events[l] == events[r]) ++r;             int added = r - l;             if(events[l] % 2 == 0) {                 ans += C(balance + added, k);                 if(ans >= MOD) ans -= MOD;                 ans += MOD - C(balance, k);                 if(ans >= MOD) ans -= MOD;                 balance += added;             }             else balance -= added;         }         sc.close();         System.out.println(ans);     }     public static void main(String[] args) {         (new d()).solve();     } } ",1
423,"import java.io.*; import java.util.*; public class DisCenJump { public static void main(String[] args) throws IOException { DisCenJump obj = new DisCenJump(); obj.doStuff(); } int bslo(int v) { int l = 0, r = lo.size()-1; while (l < r) { int m = (l+r)/2; if (v <= lo.get(m)[0]) { if (v > lo.get(m+1)[0]) return m; l = m+1; } else r = m; } return l; } int bshi(int v) { int l = 0, r = hi.size()-1; while (l < r) { int m = (l+r)/2; if (v >= hi.get(m)[0]) { if (v < hi.get(m+1)[0]) return m; l = m+1; } else r = m; } return l; } int[] nums; int[] dp; ArrayList<int[]> lo, hi; private void doStuff() throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); nums = new int[Integer.parseInt(br.readLine())]; StringTokenizer st = new StringTokenizer(br.readLine()); for (int i = 0; i < nums.length; i++) { nums[i] = Integer.parseInt(st.nextToken()); } br.close(); dp = new int[nums.length]; lo = new ArrayList<>(); hi = new ArrayList<>(); lo.add(new int[] {nums[nums.length-1], nums.length-1}); hi.add(new int[] {nums[nums.length-1], nums.length-1}); for (int i = dp.length-2; i >= 0; i--) { dp[i] = dp[i+1]+1; int pos = bslo(nums[i]); for (int j = pos; j < lo.size(); j++) { dp[i] = Math.min(dp[i], dp[lo.get(j)[1]]+1); } pos = bshi(nums[i]); for (int j = pos; j < hi.size(); j++) { dp[i] = Math.min(dp[i], dp[hi.get(j)[1]]+1); } while (lo.size() > 0 && lo.get(lo.size()-1)[0] <= nums[i]) { lo.remove(lo.size()-1); } lo.add(new int[] {nums[i], i}); while (hi.size() > 0 && hi.get(hi.size()-1)[0] >= nums[i]) { hi.remove(hi.size()-1); } hi.add(new int[] {nums[i], i}); } System.out.println(dp[0]); } } ","import java.io.*; import java.util.*; import java.util.stream.Collectors; public class Jumps {     public static void main(String[] args) {         FastScanner sc = new FastScanner();         int n = sc.nextInt();         int ar[] = sc.nextIntArray(n);                  int dp[] = new int[n];         int nextLower[] = new int[n];         int nextHigher[] = new int[n];         int nextLowerE[] = new int[n];         int nextHigherE[] = new int[n];         Arrays.fill(nextHigher, n);         Arrays.fill(nextLower, n);         Arrays.fill(nextHigherE, n);         Arrays.fill(nextLowerE, n);         dp[n-1] = 0;         Stack<Integer> stack = new Stack<>();         for(int i = n-1; i >= 0; i--) {             while(stack.size() > 0 && ar[stack.peek()] < ar[i])                 stack.pop();             if(stack.size() > 0)                 nextHigherE[i] = stack.peek();             stack.push(i);         }         stack.clear();         for(int i = n-1; i >= 0; i--) {             while(stack.size() > 0 && ar[stack.peek()] <= ar[i])                 stack.pop();             if(stack.size() > 0)                 nextHigher[i] = stack.peek();             stack.push(i);         }         stack.clear();         for(int i = n-1; i >= 0; i--) {             while(stack.size() > 0 && ar[stack.peek()] > ar[i])                 stack.pop();             if(stack.size() > 0)                 nextLowerE[i] = stack.peek();             stack.push(i);         }         stack.clear();         for(int i = n-1; i >= 0; i--) {             while(stack.size() > 0 && ar[stack.peek()] >= ar[i])                 stack.pop();             if(stack.size() > 0)                 nextLower[i] = stack.peek();             stack.push(i);         }         for(int i = n-2; i >= 0; i--) {             int maxIndex = Math.max(nextHigherE[i], nextLowerE[i]);             int ans = dp[i+1];             if(maxIndex < n) {                 ans = Math.min(ans, dp[maxIndex]);             }             if(nextHigherE[i] < nextLowerE[i]) {                 int cur = nextHigherE[i];                 while(cur < maxIndex) {                     ans = Math.min(ans, dp[cur]);                     cur = nextLower[cur];                 }             } else {                 int cur = nextLowerE[i];                 while(cur < maxIndex) {                     ans = Math.min(ans, dp[cur]);                     cur = nextHigher[cur];                 }             }             dp[i] = ans + 1;         }         System.out.println(dp[0]);     }                                                                       } ",0
424,"import java.io.*; import java.util.*; public class DiscreteCentrifugalJumps {   public static void solve(int n, int[] arr) {     int[] dp = new int[n];      for (int i=1; i<n; i++) dp[i] = Integer.MAX_VALUE;     int[] lg = new int[n];      int[] ll = new int[n];      int[] rg = new int[n];      int[] rl = new int[n];      List<List<Integer>> jumps = new ArrayList<>();      for (int i=0; i<n; i++) {       jumps.add(new ArrayList<Integer>());     }          Stack<Pair<Integer, Integer>> stack = new Stack<>();      for (int i=0; i<n; i++) {       while (!stack.isEmpty() && stack.peek().first < arr[i]) {         stack.pop();       }       if (stack.isEmpty()) lg[i] = -1;       else lg[i] = stack.peek().second;        stack.add(new Pair<Integer, Integer>(arr[i], i));     }     stack.clear();     for (int i=0; i<n; i++) {       while (!stack.isEmpty() && stack.peek().first > arr[i]) {         stack.pop();       }       if (stack.isEmpty()) ll[i] = -1;       else ll[i] = stack.peek().second;        stack.add(new Pair<Integer, Integer>(arr[i], i));     }     stack.clear();     for (int i=n-1; i>=0; i--) {       while (!stack.isEmpty() && stack.peek().first > arr[i]) {         stack.pop();       }       if (stack.isEmpty()) rg[i] = -1;       else rg[i] = stack.peek().second;        stack.add(new Pair<Integer, Integer>(arr[i], i));     }     stack.clear();     for (int i=n-1; i>=0; i--) {       while (!stack.isEmpty() && stack.peek().first < arr[i]) {         stack.pop();       }       if (stack.isEmpty()) rl[i] = -1;       else rl[i] = stack.peek().second;       stack.add(new Pair<Integer, Integer>(arr[i], i));     }     stack.clear();               for (int i = 0; i<n; i++) {       if (lg[i] != -1) jumps.get(lg[i]).add(i);       if (ll[i] != -1) jumps.get(ll[i]).add(i);       if (rg[i] != -1) jumps.get(i).add(rg[i]);       if (rl[i] != -1) jumps.get(i).add(rl[i]);     }          for (int i=0; i<n; i++) {       for (int j: jumps.get(i)) {         dp[j] = Math.min(dp[j], dp[i] + 1);       }     }     System.out.println(dp[n-1]);   }   public static void main(String[] args) throws IOException {     try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))){       int n = Integer.parseInt(br.readLine());       String[] s = br.readLine().split("" "");       int[] arr = new int[n];       for (int i=0; i<n; i++) {         arr[i] = Integer.parseInt(s[i]);       }       solve(n, arr);     }   } } class Pair<T1, T2> {   public T1 first;   public T2 second;   public Pair(T1 first, T2 second) {     this.first = first;     this.second = second;   } } ","import static java.lang.Math.min; import java.io.ByteArrayInputStream; import java.io.File; import java.io.PrintWriter; import java.util.ArrayList; import java.util.LinkedList; import java.util.List; import java.util.Scanner; public class D_2 { public static void main(String[] args) throws Exception { new D_2().go(); } int USE_FILE = 0; String INPUT = ""5\r\n"" + ""1 3 1 4 5\r\n"" + """"; void solve(int caseNr) { int n = in.nextInt(); int[] h = na(n); int[] dp = new int[n]; for (int i = 0; i < n; i++) { dp[i] = inf; } dp[0] = 0; LinkedList<int[]> st = new LinkedList<>(); int[] lge = new int[n]; int[] lle = new int[n]; int[] rge = new int[n]; int[] rle = new int[n]; for (int i = 0; i < n; i++) {  while (!st.isEmpty() && st.getLast()[0] < h[i]) { st.removeLast(); } if (st.isEmpty()) { lge[i] = -1; } else { lge[i] = st.getLast()[1]; } st.add(new int[]{h[i], i}); } st.clear(); for (int i = 0; i < n; i++) {  while (!st.isEmpty() && st.getLast()[0] > h[i]) { st.removeLast(); } if (st.isEmpty()) { lle[i] = -1; } else { lle[i] = st.getLast()[1]; } st.add(new int[]{h[i], i}); } st.clear(); for (int i = n - 1; i >= 0; i--) {  while (!st.isEmpty() && st.getLast()[0] < h[i]) { st.removeLast(); } if (st.isEmpty()) { rge[i] = -1; } else { rge[i] = st.getLast()[1]; } st.add(new int[]{h[i], i}); } st.clear(); for (int i = n - 1; i >= 0; i--) {  while (!st.isEmpty() && st.getLast()[0] > h[i]) { st.removeLast(); } if (st.isEmpty()) { rle[i] = -1; } else { rle[i] = st.getLast()[1]; } st.add(new int[]{h[i], i}); } List<List<Integer>> jumps = new ArrayList<>(); for (int i = 0; i < n; i++) { jumps.add(new ArrayList<>()); } for (int i = 0; i < n; i++) { if (rle[i] != -1) jumps.get(i).add(rle[i]); if (rge[i] != -1) jumps.get(i).add(rge[i]); if (lle[i] != -1) jumps.get(lle[i]).add(i); if (lge[i] != -1) jumps.get(lge[i]).add(i); } for (int i = 0; i < n; i++) { for (int to : jumps.get(i)) { dp[to] = min(dp[to], dp[i] + 1); } } System.out.println(dp[n - 1]); return; }  void testCases() { int t = 1; for (int i=1; i<=t; i++) { solve(i); } output_writer.flush(); } private int[] na(int n) { int[] a = new int[n]; for (int i=0; i<n; i++) { a[i] = in.nextInt(); } return a; } private int inf = Integer.MAX_VALUE; static boolean LOCAL = java.lang.System.getProperty(""ONLINE_JUDGE"") == null; Scanner in; PrintWriter output_writer = new PrintWriter(java.lang.System.out); static class System { static PrintWriter out = null; } void go() throws Exception { System.out = output_writer; if (LOCAL && USE_FILE == 0) { java.lang.System.setIn(new ByteArrayInputStream(INPUT.getBytes())); in = new Scanner(java.lang.System.in); } if (LOCAL && USE_FILE > 0) { String filename = String.format(""in/cf%d.txt"", USE_FILE); File inputFile = new File(filename); in = new Scanner(inputFile); output_writer.printf(""[%s]\n"", filename); output_writer.flush(); } if (!LOCAL) { in = new Scanner(java.lang.System.in); } long startTime = java.lang.System.currentTimeMillis(); testCases(); if (LOCAL) { java.lang.System.out.printf(""[%dms]\n"", java.lang.System.currentTimeMillis()-startTime); } in.close(); } } ",1
425,"import java.io.*; import java.util.*; public class E { public static void main(String[] args) throws Exception { Reader sc=new Reader(); PrintWriter pw=new PrintWriter(System.out); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k=sc.nextInt(); int[] idxes=new int[k]; int[] temps=new int[k]; for(int i=0;i<k;i++) { idxes[i]=sc.nextInt()-1; } for(int i=0;i<k;i++) { temps[i]=sc.nextInt(); } int[] ans=new int[n]; Arrays.fill(ans, Integer.MAX_VALUE/2); for(int i=0;i<k;i++) { ans[idxes[i]]=temps[i]; } for(int i=1;i<n;i++) { ans[i]=Math.min(ans[i], ans[i-1]+1); } for(int i=n-2;i>=0;i--) { ans[i]=Math.min(ans[i], ans[i+1]+1); } for(int i=0;i<n;i++) { pw.print(ans[i]+"" ""); } pw.println(); } pw.flush(); sc.close(); } } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int k= sc.nextInt(); int ac[] = new int[k]; int temp[] = new int[k]; int ans[] = new int[n+1]; for(int i=0;i<k;i++) ac[i] = sc.nextInt(); for(int i=0;i<k;i++) temp[i] = sc.nextInt(); Arrays.fill(ans,Integer.MAX_VALUE); for(int i=0;i<k;i++) ans[ac[i]] = temp[i]; for(int i=2;i<n+1;i++) ans[i]=Math.min(ans[i],ans[i-1]==Integer.MAX_VALUE ? ans[i-1] : ans[i-1]+1); for(int i=n-1;i>0;i--) ans[i]=Math.min(ans[i],ans[i+1]+1); for(int i=1;i<n+1;i++) System.out.print(ans[i]+"" ""); System.out.println("" ""); }     } } ",1
426,"import java.io.*; import java.util.*; public class E { public static void main(String[] args) { FastScanner sc = new FastScanner(); int t = sc.nextInt(); while(t-- > 0) { int n = sc.nextInt(); int[] a = new int[n]; for(int i = 0 ; i< n ; i++) { a[i] = sc.nextInt(); } long oddMin = a[1]; long evenMin = a[0]; long res = (n * oddMin) + (n * evenMin); long oddSum = a[1]; long evenSum = a[0]; for(int i = 2 ;i < n ; i++) { if(i % 2 == 1) { oddSum += a[i]; oddMin = Math.min(oddMin, a[i]); } else { evenSum += a[i]; evenMin = Math.min(evenMin, a[i]); } int odd = (i + 1) / 2; int even = (i / 2) + 1; long minCostOdd = oddSum + oddMin*(n - odd); long minCostEven = evenSum + evenMin*(n - even); res = Math.min(res, minCostOdd + minCostEven); } System.out.println(res); } } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; public final class C {     public static void main(String[] args) {         final FastScanner fs = new FastScanner();         final int t = fs.nextInt();         for (int test = 0; test < t; test++) {             final int n = fs.nextInt();             final int[] arr = fs.nextIntArray(n);             long evenSum = arr[0];             long oddSum = arr[1];             int minEven = arr[0];             int minOdd = arr[1];             long res = (long) n * arr[0] + (long) n * arr[1];             for (int i = 2; i < n; i++) {                 if (i % 2 == 0) {                     minEven = Math.min(minEven, arr[i]);                     evenSum += arr[i];                     final long eC = n - i / 2 - 1;                     final long oC = n - i / 2;                     final long curr = evenSum + eC * minEven + oddSum + oC * minOdd;                     res = Math.min(res, curr);                 } else {                     minOdd = Math.min(minOdd, arr[i]);                     oddSum += arr[i];                     final long c = n - i / 2 - 1;                     final long curr = oddSum + c * minOdd + evenSum + c * minEven;                     res = Math.min(res, curr);                 }             }             System.out.println(res);         }     }     static final class Utils {                                    private Utils() {}     }      } ",0
427,"import java.io.*; import java.util.*; public class E { public static void main(String[] args) { FastScanner scan = new FastScanner(); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(), k = scan.nextInt(); int a[] = scan.readArray(k); int temp[] = scan.readArray(k); int l[] = new int[n]; int r[] = new int[n]; Arrays.fill(l, Integer.MAX_VALUE/2); Arrays.fill(r, Integer.MAX_VALUE/2); for(int i = 0;i<k;i++) l[a[i]-1] = temp[i]; for(int i = 0;i<k;i++) r[a[i]-1] = temp[i]; for(int i = 1;i<n;i++) l[i] = Math.min(l[i], l[i-1]+1); for(int i = n-2;i>=0;i--) r[i] = Math.min(r[i], r[i+1]+1); StringBuilder s = new StringBuilder(); for(int i = 0;i<n;i++) s.append(Math.min(l[i], r[i])+"" ""); System.out.println(s); } } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class D {     public static void main(String[] args) {         FastScanner fs = new FastScanner();         int cases = fs.nextInt();         while(cases-->0){             int n = fs.nextInt(), k = fs.nextInt();             int[] positions = fs.readArray(k), temps = fs.readArray(k);             int[] forced = new int[n];             Arrays.fill(forced, Integer.MAX_VALUE/2);             for(int i=0; i<k; i++)                 forced[positions[i]-1] = temps[i];             for(int i=1; i<n; i++)                 forced[i] = Math.min(forced[i],forced[i-1]+1);             for(int i=n-2; i>=0; i--)                 forced[i] = Math.min(forced[i], forced[i+1]+1);             for(int i=0; i<n; i++)                 System.out.print(forced[i] + "" "");             System.out.println();         }     }                } ",1
428,"import java.io.*; import java.util.*; public class E { static FastReader sc=null; static long max=(long)1e15+7; public static void main(String[] args) { sc=new FastReader(); PrintWriter out=new PrintWriter(System.out); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(),k=sc.nextInt(); int a[]=sc.readArray(k),te[]=sc.readArray(k); int curr[]=new int[n]; Arrays.fill(curr, -1); for(int i=0;i<k;i++) { a[i]--; curr[a[i]]=te[i]; } long min=max; long ts[]=new long[n]; Arrays.fill(ts, max); for(int i=n-1;i>=0;i--) { if(curr[i]!=-1) { min=Math.min(min, curr[i]+i); } ts[i]=Math.min(ts[i], min-i); } min=max; for(int i=0;i<n;i++) { if(curr[i]!=-1) { min=Math.min(min, curr[i]-i); } ts[i]=Math.min(ts[i], min+i); } for(long e:ts)out.print(e+"" ""); out.println(); } out.close(); } } ","import java.io.*; import java.util.*; public class E { static FastReader sc=null; static long nax=(long)1e15+7; public static void main(String[] args) { sc=new FastReader(); PrintWriter out=new PrintWriter(System.out); int test=sc.nextInt(); while(test-->0) { int n=sc.nextInt(),k=sc.nextInt(); int a[]=sc.readArray(k),t[]=sc.readArray(k); int present[]=new int[n]; Arrays.fill(present, -1); for(int i=0;i<k;i++) { a[i]--; present[a[i]]=t[i]; } long min=nax; long temps[]=new long[n]; Arrays.fill(temps, nax); for(int i=n-1;i>=0;i--) { if(present[i]!=-1) { min=Math.min(min, present[i]+i); } temps[i]=Math.min(temps[i], min-i); } min=nax; for(int i=0;i<n;i++) { if(present[i]!=-1) { min=Math.min(min, present[i]-i); } temps[i]=Math.min(temps[i], min+i); } for(long e:temps)out.print(e+"" ""); out.println(); } out.close(); } static void print(int a[]) { for(int e:a) { System.out.print(e+"" ""); } System.out.println(); } } ",1
429,"import java.io.*; import java.util.*; public class GFG { public static void main (String[] args) { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); while(t-->0){     int n=sc.nextInt();     String a=sc.next();     String b=sc.next();    int i;    int zero=0,one=0;      int x=0,y=0,x1=0,y1=0;     for(i=0;i<n;i++){         if(a.charAt(i)=='0')         zero++;         else         one++;     }     if(one==0){         if(a.equals(b))         System.out.println(""0"");         else         System.out.println(""-1"");     }     else{         int same=0,diff=0;         for(i=0;i<n;i++){             if(a.charAt(i)==b.charAt(i)){                 same++;                 x++;                 if(a.charAt(i)=='1'){                     x1++;                                      }             }             else{                 diff++;                 y++;                 if(a.charAt(i)=='1'){                     y1++;                                      }             }                      }         int ans=Integer.MAX_VALUE;     if(x%2!=0&&(x+1)/2==x1){         ans=x;              }     if(y%2==0&&(y/2)==y1){ ans=Math.min(ans,y);     }     if(ans==Integer.MAX_VALUE){                  System.out.println(""-1"");              }else{                  System.out.println(ans);     }             }      }      }      } ","import java.util.*; import java.io.*; public class C { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(); char[] s = new char[n]; char[] t = new char[n]; s = sc.next().toCharArray(); t = sc.next().toCharArray(); int a = 0, b = 0, c = 0, d = 0; for(int i = 0; i < n; i++) { if(s[i] == '0' && t[i] == '0') a++; if(s[i] == '1' && t[i] == '0') b++; if(s[i] == '0' && t[i] == '1') c++; if(s[i] == '1' && t[i] == '1') d++; } int res = Integer.MAX_VALUE; if(b == c || b+1 == c) { if((b + c) % 2 == 0) { res = Math.min(res, b + c); } } if(a == d || a+1 == d) { if((a + d) % 2 == 1) { res = Math.min(res, a + d); } } if(res == Integer.MAX_VALUE) System.out.println(-1); else System.out.println(res); } } } ",0
430,"import java.io.*; import java.util.*; public class Ishu {     static Scanner scan = new Scanner(System.in);     static BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));      static void tc() throws Exception     {     int n = scan.nextInt();     int[] a = new int[n];     int one = 0;     int i,j;          for(i=0;i<n;++i)         {         a[i] = scan.nextInt();         one += a[i];         }              int[] pos = new int[one];     one = 0;     for(i=0;i<n;++i)           if(a[i] == 1)             pos[one++] = i;                long[][] dp = new long[one][n];          if(one == 0)         {         output.write(""0\n"");         output.flush();         return;         }              if(a[0] == 0)         dp[0][0] = pos[0];     else          dp[0][0] = Integer.MAX_VALUE;     for(j=1;j<n;++j)             {         if(a[j] == 1)             {             dp[0][j] = dp[0][j-1];             continue;             }                      dp[0][j] = Math.abs(pos[0] - j);         dp[0][j] = Math.min(dp[0][j], dp[0][j-1]);             }                 for(i=1;i<one;++i)           {         int cnt = 0;         for(j=0;j<n;++j)             {             if(a[j] == 0)                 ++cnt;             if(cnt == i + 1)                 break;                           dp[i][j] = Integer.MAX_VALUE;             }                       for(;j<n;++j)             {             if(a[j] == 1)                 {                 dp[i][j] = dp[i][j-1];                 continue;                  }                                  dp[i][j] = Math.abs(pos[i] - j) + dp[i-1][j-1];             dp[i][j] = Math.min(dp[i][j], dp[i][j-1]);              }         }            long ans = dp[one-1][n-1];     output.write(ans + ""\n"");         output.flush();     }     public static void main(String[] args) throws Exception     {     int t = 1;          while(t-- > 0)         tc();     } } ","import java.util.*; import java.lang.*; import java.io.*; public final class Solution {          public static void main(String[] args) throws Exception {                  Reader sc = new Reader();         BufferedWriter op = new BufferedWriter(new OutputStreamWriter(System.out));                    int n=sc.nextInt();           ArrayList<Integer> fill= new ArrayList<Integer>();           ArrayList<Integer> unfilled= new ArrayList<>();           for(int i=0;i<n;i++){               int x =sc.nextInt();               if(x==1){                   fill.add(i);               }else{                   unfilled.add(i);               }           }           Collections.sort(fill);           Collections.sort(unfilled);                                 long[][] dp =new long[fill.size()+1][unfilled.size()+1];            for(int i=0;i<fill.size()+1;i++){               for(int j=0;j<unfilled.size()+1;j++){                   dp[i][j]=Integer.MAX_VALUE;               }           }           for(int i=0;i<unfilled.size()+1;i++){               dp[0][i]=0;           }                                                for(int i=1;i<fill.size()+1;i++){               for(int j=1;j<unfilled.size()+1;j++){                   dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(fill.get(i-1)-unfilled.get(j-1)));               }           }           System.out.println(dp[fill.size()][unfilled.size()]);                                                                              }         } ",0
431,"import java.io.*; import java.util.*; public class M { static Scanner scanner=new Scanner(System.in); public static void main(String[] args) { int t=scanner.nextInt(); while(t-->0) { int n=scanner.nextInt(); int a[]=new int [n]; int b[]=new int [n]; for(int i=0;i<n;i++)a[i]=scanner.nextInt(); for(int i=0;i+1<n;i+=2) { b[i]=-a[i+1]; b[i+1]=a[i]; } if(n%2==1) { int x=a[n-1],y=a[n-2],z=a[n-3]; if(x+y!=0) { b[n-3]=x+y; b[n-2]=-z; b[n-1]=-z; }else if(y+z!=0) { b[n-1]=y+z; b[n-2]=-x; b[n-3]=-x; }else { b[n-2]=x+z; b[n-1]=-y; b[n-3]=-y; } } StringBuilder sb=new StringBuilder(); for(int i=0;i<n;i++)sb.append(b[i]+"" ""); System.out.println(sb); } } } ","import java.util.Scanner; public class Subsequence { private static Scanner sc = new Scanner(System.in); public static void main(String args[]) { int t = sc.nextInt(); while(t-->0) { int n = sc.nextInt(); int a[] = new int[n]; int b[] =  new int[n]; for(int i=0;i<n;i++) { a[i]= sc.nextInt(); } if(n%2==0) { calculateB(a,b,n); } else { calculateB(a,b,n-3); if (a[n - 2] + a[n - 3] != 0) { b[n - 3] = -a[n - 1]; b[n - 2] = -a[n - 1]; b[n - 1] = a[n - 2] + a[n - 3]; } else if (a[n - 2] + a[n - 1] != 0) { b[n - 3] = a[n - 2] + a[n - 1]; b[n - 2] = -a[n - 3]; b[n - 1] = -a[n - 3]; } else { b[n - 3] = -a[n - 2]; b[n - 2] = a[n - 3] + a[n - 1]; b[n - 1] = -a[n - 2]; } } for(int i=0;i<n;i++) { System.out.print(b[i] + "" ""); } System.out.println(); } } private static void calculateB(int[] a, int[] b, int n) { for(int i=0;i<n-1;i=i+2) { b[i] = -a[i+1]; b[i+1] = a[i]; } } } ",1
432,"import java.io.*; import java.util.*; public class Main {                    static long[][] dp = new long[5005][5005];     static ArrayList<Integer> filled = new ArrayList<>();     static ArrayList<Integer> vacant = new ArrayList<>();     public static long calc(int i, int j){         if(i >= filled.size())             return 0;         if(j >= vacant.size())             return Integer.MAX_VALUE;         if(dp[i][j] != -1)             return dp[i][j];         dp[i][j] = Math.min(Math.abs(filled.get(i) - vacant.get(j)) + calc(i+1, j+1), calc(i, j+1));         return dp[i][j];     }          public static void run_case(FastInput s) {         int n = s.nextInt();         int[] arr = new int[n];         for(int i = 0; i < n; i++){             arr[i] = s.nextInt();             if(arr[i] == 1){                 filled.add(i);             } else {                 vacant.add(i);             }         }         for(int i = 0; i < filled.size(); i++){             for(int j = 0; j < vacant.size(); j++)                 dp[i][j] = -1;         }         System.out.println(calc(0, 0));     }     public static void main(String[] args) {         FastInput s = new FastInput();         run_case(s);     } } ","import java.io.*; import java.util.*; public class Main {     static ArrayList<Integer> one=new ArrayList<>();     static ArrayList<Integer> zero=new ArrayList<>();     static long dp[][]= new long[5001][5001];     static long solve(int i,int j){         if (i==one.size())return 0;         if (j==zero.size())return Integer.MAX_VALUE;         if (dp[i][j]!=-1){            return dp[i][j];         }         return dp[i][j]=Math.min(solve(i+1,j+1)+Math.abs(one.get(i)-zero.get(j)),solve(i,j+1));     }     public static void main(String[] args) {         FastScanner sc = new FastScanner();             int n=sc.nextInt();             int a[]=sc.readArray(n);             for (long i[]:dp){                 Arrays.fill(i,-1);             }             for (int i=0;i<n;i++){                 if (a[i]==1)one.add(i);                 else zero.add(i);             }             Collections.sort(one);             Collections.sort(zero);         System.out.println(solve(0,0));     }                    static void sort(int[] a) {         ArrayList<Integer> l = new ArrayList<>();         for (int i : a) l.add(i);         Collections.sort(l);         for (int i = 0; i < a.length; i++) a[i] = l.get(i);     }                         static long mod =(long)(1e9+7);     static long mod(long x) {         return ((x % mod + mod) % mod);     }          static long add(long x, long y) {         return mod(mod(x) + mod(y));     }                                                             } ",0
433,"import java.io.*; import java.util.*; public class Main {          public static void main(String[] args) {         FastReader obj = new FastReader();         PrintWriter out = new PrintWriter(System.out);         int l = obj.nextInt();         while (l-- != 0) {             int n = obj.nextInt();             int[] num = new int[n];             for (int i = 0; i < n; i++) num[i] = obj.nextInt();             Vector<Integer> red = new Vector<>();             Vector<Integer> blue = new Vector<>();             String s = obj.next();             for (int i = 0; i < s.length(); i++) {                 if (s.charAt(i) == 'R') red.add(num[i]);                 else blue.add(num[i]);             }             Collections.sort(blue);             Collections.sort(red);             int c = 1, f = 0;             for (int i = 0; i < blue.size(); i++) {                 if (blue.get(i) < c) {                     f = 1;                     break;                 }                 c++;             }             for (int i = 0; i < red.size(); i++) {                 if (red.get(i) > c) {                     f = 1;                     break;                 }                 c++;             }             if (f == 0) out.println(""YES"");             else out.println(""NO"");         }         out.flush();     } } ","import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import java.io.*;   public class Div2 {  public static String solution(int [] arr, int n, String st)   {         ArrayList<Integer> red = new ArrayList<>();         ArrayList<Integer> blue = new ArrayList<>();                  for(int i = 0; i<n; i++)         {         if(st.charAt(i)=='R')         red.add(arr[i]);         else         blue.add(arr[i]);         }              Collections.sort(red);         Collections.sort(blue);         int cb = 1;                  for(int j = 0; j<blue.size(); j++)         {             if(blue.get(j)<cb)             return ""NO"";             cb++;         }                  int cr = n;         for(int j = red.size()-1; j>=0; j--)         {             if(red.get(j)>cr)             return ""NO"";             cr--;         }                  return ""YES"";  }          private static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { MyScanner s =  new MyScanner();        int t = s.nextInt();          for(int j = 0; j<t ; j++)     {     int n = s.nextInt();     int[] arr = new int[n];     for(int i =0; i<n; i++)     arr[i] = s.nextInt();          String st = s.next();         out.println(solution(arr,n, st));     }                out.flush();     out.close();      } } ",0
434,"import java.io.*; import java.util.*; public class Main {          static int N = (int)2e5 +10;     static ArrayList<ArrayList<Integer>> adj= new ArrayList<>(N);     static     {         for(int i=0; i<N; i++)         {             adj.add(new ArrayList<>());         }     }     static int[][] a = new int[2][N];     static long[][] dp = new long[2][N];     static void dfs(int v, int p){         dp[0][v] = 0;         dp[1][v]=0;         for(int u: adj.get(v))         {             if(u!=p) {                 dfs(u, v);                 dp[0][v] += Math.max(Math.abs(a[0][v] - a[1][u]) + dp[1][u], Math.abs(a[0][v] - a[0][u]) + dp[0][u]);                 dp[1][v] += Math.max(Math.abs(a[1][v] - a[1][u]) + dp[1][u], Math.abs(a[1][v] - a[0][u]) + dp[0][u]);             }         }     }     public static void main(String[] args) throws IOException{         FastReader sc = new FastReader();         int t = sc.nextInt();         while(t-->0)         {             int n = sc.nextInt();             for(int i=1; i<=n; i++)             {                 a[0][i] = sc.nextInt();                 a[1][i] = sc.nextInt();                 adj.set(i, new ArrayList<>());             }             for(int i=1; i<n; i++)             {                 int u = sc.nextInt();                 int v = sc.nextInt();                 adj.get(u).add(v);                 adj.get(v).add(u);             }             dfs(1, 0);             System.out.println(Math.max(dp[0][1], dp[1][1]));         }     } } ","import java.io.*; import java.util.*; public class Main {          static int N = (int)2e5 +10;     static ArrayList<ArrayList<Integer>> adj= new ArrayList<>(N);     static     {         for(int i=0; i<N; i++)         {             adj.add(new ArrayList<>());         }     }     static int[][] a = new int[2][N];     static long[][] dp = new long[2][N];     static void dfs(int v, int p){         dp[0][v] = 0;         dp[1][v]=0;         for(int u: adj.get(v))         {             if(u!=p) {                 dfs(u, v);                 dp[0][v] += Math.max(Math.abs(a[0][v] - a[1][u]) + dp[1][u], Math.abs(a[0][v] - a[0][u]) + dp[0][u]);                 dp[1][v] += Math.max(Math.abs(a[1][v] - a[1][u]) + dp[1][u], Math.abs(a[1][v] - a[0][u]) + dp[0][u]);             }         }     }     public static void main(String[] args) throws IOException{         FastReader sc = new FastReader();         int t = sc.nextInt();         while(t-->0)         {             int n = sc.nextInt();             for(int i=1; i<=n; i++)             {                 a[0][i] = sc.nextInt();                 a[1][i] = sc.nextInt();                 adj.set(i, new ArrayList<>());             }             for(int i=1; i<n; i++)             {                 int u = sc.nextInt();                 int v = sc.nextInt();                 adj.get(u).add(v);                 adj.get(v).add(u);             }             dfs(1, 0);             System.out.println(Math.max(dp[0][1], dp[1][1]));         }     } } ",1
435,"import java.io.*; import java.util.*; public class Main {     public static int n;     public static int a[] = new int[12];     public static int b[] = new int[12];     public static boolean f(int p) {         if (p > n) return false;         for (int i = 0; i < p; i++) {             b[p] = a[p] + b[i];             for (int j = 0; j < p; j++) {                 if (b[j] == b[p])                     return true;             }             if (f(p + 1)) {                 return true;             }         }         return false;     }     public static void main(String[] args) throws Exception {         int T = r.readInt();         for (int t = 0; t < T; t++) {             n = r.readInt();             for (int i = 1; i <= n; i++) {                 a[i] = r.readInt();             }             boolean ans = false;             if (n == 1) {                 ans = a[1] == 0;             } else {                 b[0] = 1;                 ans = f(1);             }             if (ans) {                 System.out.println(""YES"");             } else {                 System.out.println(""NO"");             }         }     }     static public InputReader r = new InputReader(System.in);     static public OutputWriter w = new OutputWriter(System.out);           } ","import java.util.*; import java.io.*; public class D { static ArrayList<Integer> set = new ArrayList<Integer>(); static int[] a; static int test; public static void main(String[] args) throws IOException{ Scanner in = new Scanner(System.in); int t = in.nextInt(); for(int q=0;q<t;q++) { int n = in.nextInt(); a = new int[n]; for(int i=0;i<n;i++) { a[i] = Math.abs(in.nextInt()); } boolean yes = false; for(int i=0;i<n;i++) { if(a[i]==0) yes = true; int[] b = new int[n-1]; int index=0; for(int j=0;j<n;j++) { if(j!=i) { b[index] = a[j]; index++; } } test = a[i]; set = new ArrayList<Integer>(); if(b.length!=0) { if(subset(b,0)) yes = true; } } if(yes) { System.out.println(""YES""); }else { System.out.println(""NO""); } } } static boolean subset(int[] a,int i) { if(i>=a.length) { if(binary(new int[set.size()],0)) return true; return false; } set.add(a[i]); if(subset(a,i+1))return true; set.remove(set.size()-1); if(subset(a,i+1))return true; return false; } static boolean binary(int[] b,int i) { if(i==b.length) { int sum=0; for(int j=0;j<b.length;j++) { if(b[j]==0) { sum+= set.get(j); }else { sum-= set.get(j); } } if(sum==test) { return true; }else { return false; } } b[i] = 0; if(binary(b,i+1))return true; b[i] = 1; if(binary(b,i+1))return true; return false; } } ",0
436,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",1
437,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; public class _109D {     static BufferedReader br;     public static void main(String[] args) throws IOException {         br = new BufferedReader(new InputStreamReader(System.in));         int n = readInt();         int arr[] = readIntarray();         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i = 0; i < n; i++){             if(arr[i] == 1){                 a.add(i);             }else{                 b.add(i);             }         }         if(a.size() == 0){             System.out.println(""0"");             return;         }         int [][] dp = new int[a.size()][b.size()];         for(int i = 0; i < a.size(); i++){             for(int j = i; j < b.size(); j++) {                 if (j == 0) {                     dp[i][j] = Math.abs(a.get(i) - b.get(j));                 } else if (i == 0) {                     dp[i][j] = Math.min(dp[i][j - 1], Math.abs(a.get(i) - b.get(j)));                 } else if (i == j) {                     dp[i][j] = dp[i - 1][j - 1] + Math.abs(a.get(i) - b.get(j));                 } else {                     dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(a.get(i) - b.get(j)));                 }             }         }         System.out.println(dp[a.size() - 1][b.size() - 1]);     }     static int readInt() throws IOException {         return Integer.parseInt(br.readLine());     }          static int[] readIntarray() throws IOException {         String[] _a = br.readLine().split("" "");         int[] _res = new int[_a.length];         for (int i = 0; i < _a.length; i++) {             _res[i] = Integer.parseInt(_a[i]);         }         return _res;     }      } ",0
438,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ","import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.math.BigDecimal; import java.math.RoundingMode; import java.util.*; public class Main { static final long MOD=1000000007; static final long MOD1=998244353; static long ans=0; public static void main(String[] args){ PrintWriter out = new PrintWriter(System.out); InputReader sc=new InputReader(System.in); int N = sc.nextInt(); int[] A = sc.nextIntArray(N); ArrayList<Integer> a1 = new ArrayList<Integer>(); ArrayList<Integer> a2 = new ArrayList<Integer>(); for (int i = 0; i < A.length; i++) { if (A[i]==0) { a1.add(i); }else { a2.add(i); } } int[][] dp = new int[a1.size()+1][a2.size()+1]; for (int i = 0; i < dp.length; i++) { Arrays.fill(dp[i], Integer.MAX_VALUE/2); } dp[0][0] = 0; for (int i = 1; i <= a1.size() ; i++) { int pos1 = a1.get(i-1); for (int j = 0; j <= a2.size(); j++) { dp[i][j] = dp[i-1][j]; if (j-1>=0) { int pos2 = a2.get(j-1); dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + Math.abs(pos1-pos2)); } } } System.out.println(dp[a1.size()][a2.size()]); } } ",0
439,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ","import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.math.BigDecimal; import java.math.RoundingMode; import java.util.*; public class Main { static final long MOD=1000000007; static final long MOD1=998244353; static long ans=0; public static void main(String[] args){ PrintWriter out = new PrintWriter(System.out); InputReader sc=new InputReader(System.in); int N = sc.nextInt(); int[] A = sc.nextIntArray(N); ArrayList<Integer> a1 = new ArrayList<Integer>(); ArrayList<Integer> a2 = new ArrayList<Integer>(); for (int i = 0; i < A.length; i++) { if (A[i]==0) { a1.add(i); }else { a2.add(i); } } int[][] dp = new int[a1.size()+1][a2.size()+1]; for (int i = 0; i < dp.length; i++) { Arrays.fill(dp[i], Integer.MAX_VALUE/2); } dp[0][0] = 0; for (int i = 1; i <= a1.size() ; i++) { int pos1 = a1.get(i-1); for (int j = 0; j <= a2.size(); j++) { dp[i][j] = dp[i-1][j]; if (j-1>=0) { int pos2 = a2.get(j-1); dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + Math.abs(pos1-pos2)); } } } System.out.println(dp[a1.size()][a2.size()]); } } ",0
440,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ","import java.util.*; import java.io.*; public class Main2 { static long mod = 998244353; static FastReader sc = new FastReader(); static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { int t = 1;     z : while(t-->0) {     int n = sc.nextInt();     int a[] = new int[n];     for(int i=0;i<n;i++) a[i] = sc.nextInt();     List<Integer> a1 = new ArrayList<>();     ArrayList<Integer> a2 = new ArrayList<>();     for (int i = 0; i < n; i++) {     if(a[i] == 0) a1.add(i);     else a2.add(i); }     long dp[][] = new long[n+1][n+1];     for (int i = 0; i <= n; i++) {     Arrays.fill(dp[i],-1); }     out.write(find(0,0,a1,a2,dp)+""\n"");     } out.close(); } private static long find(int i, int j, List<Integer> a1, ArrayList<Integer> a2, long[][] dp) { if(j == a2.size()) return 0; int req = a2.size()-j; int ava = a1.size()-i; if(ava<req) return Integer.MAX_VALUE/2; if(dp[i][j] != -1) return dp[i][j]; long ans1 = find(i+1,j,a1,a2,dp); long ans2 = Math.abs(a1.get(i)-a2.get(j)) + find(i+1,j+1,a1,a2,dp); return dp[i][j] = Math.min(ans1, ans2); } } ",0
441,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ","import java.util.*; import java.io.*; public class Main2 { static long mod = 998244353; static FastReader sc = new FastReader(); static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { int t = 1;     z : while(t-->0) {     int n = sc.nextInt();     int a[] = new int[n];     for(int i=0;i<n;i++) a[i] = sc.nextInt();     List<Integer> a1 = new ArrayList<>();     ArrayList<Integer> a2 = new ArrayList<>();     for (int i = 0; i < n; i++) {     if(a[i] == 0) a1.add(i);     else a2.add(i); }     long dp[][] = new long[n+1][n+1];     for (int i = 0; i <= n; i++) {     Arrays.fill(dp[i],-1); }     out.write(find(0,0,a1,a2,dp)+""\n"");     } out.close(); } private static long find(int i, int j, List<Integer> a1, ArrayList<Integer> a2, long[][] dp) { if(j == a2.size()) return 0; int req = a2.size()-j; int ava = a1.size()-i; if(ava<req) return Integer.MAX_VALUE/2; if(dp[i][j] != -1) return dp[i][j]; long ans1 = find(i+1,j,a1,a2,dp); long ans2 = Math.abs(a1.get(i)-a2.get(j)) + find(i+1,j+1,a1,a2,dp); return dp[i][j] = Math.min(ans1, ans2); } } ",0
442,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",import java.util.*; import java.io.*; public class Main{     public static void main(String[] args) throws java.io.IOException {         Scanner sc = new Scanner(System.in);         int n=sc.nextInt();         int[] arr=new int[n];         int[][] dp=new int[n][n];         int[][] min=new int[n][n];         ArrayList<Integer> ones=new ArrayList<>();         ArrayList<Integer> zero=new ArrayList<>();         for(int i=0;i<n;++i) {             arr[i] = sc.nextInt();             if(arr[i]==1)                 ones.add(i);             else                 zero.add(i);         }         for(int i=0;i<n;++i)             for(int j=0;j<n;++j) {                 min[i][j] = Integer.MAX_VALUE;                 dp[i][j] = Integer.MAX_VALUE;             }         int len=ones.size();         int zlen=zero.size();         int minn=0;         for(int i=0;i<len;++i)         {             int cur = ones.get(i);             for(int j=i;j<zlen;j++)             {                 int curz = zero.get(j);                 int cost = Math.abs(cur-curz);                 if(i!=0 && curz-1>=0)                 {                     cost+=min[i-1][curz-1];                 }                 dp[i][curz]=cost;             }             minn=Integer.MAX_VALUE;             for(int j=0;j<n;++j)             {                 if(dp[i][j]<minn)                     minn=dp[i][j];                 min[i][j]=minn;             }         }         System.out.println(minn);     } } ,0
443,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ","import java.util.*; import java.lang.*; import java.io.*; public class Armchairs { public static void main (String[] args) throws java.lang.Exception { Scanner sc = new Scanner(System.in); PrintWriter out = new PrintWriter(System.out); int n = sc.nextInt(); Vector<Integer> a = new Vector(); Vector<Integer> b = new Vector();      for (int i=0; i<n; ++i){     int input = sc.nextInt();     if(input==1) a.add(i);     else b.add(i); } n = a.size(); int m = b.size(); if(n==0) out.print(0); else{     int [][]dp = new int [n][m];     for (int i=0; i<n; ++i) for (int j=0; j<m; ++j) dp[i][j] = 25000000;     dp[0][0] = Math.abs(a.get(0) - b.get(0));     for (int i=0; i<n; ++i) for (int j=1; j<m; ++j){         if(i==0) dp[i][j] = Math.min(Math.abs(a.get(i) - b.get(j)),dp[i][j-1]);         else dp[i][j] = Math.min(Math.abs(a.get(i) - b.get(j)) + dp[i-1][j-1],dp[i][j-1]);     }     out.print(dp[n-1][m-1]); } out.close(); }                          } ",0
444,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef { static long dp[][]; public static void main(String[] args) throws java.lang.Exception { FastReader in = new FastReader(System.in); StringBuilder sb = new StringBuilder(); int t = 1; while (t > 0) { --t; int n = in.nextInt(); int arr[] = new int[n]; List<Integer> ones = new ArrayList<Integer>(); List<Integer> zero = new ArrayList<>(); for(int i = 0;i<n;i++) { int a = in.nextInt(); if(a == 1) ones.add(i); else  zero.add(i); } if(ones.size() == 0) { sb.append(0+""\n""); continue; } dp = new long[ones.size()][zero.size()]; for(int i = 0;i<ones.size();i++)     Arrays.fill(dp[i], -1); sb.append(findans(ones, zero, ones.size()-1, zero.size()-1));             } System.out.print(sb); } static long findans(List<Integer> ones,List<Integer> zero,int x,int y) { if(x < 0) return 0; if(y<0) return Integer.MAX_VALUE;         if(dp[x][y]!=-1)         return dp[x][y]; return  dp[x][y] = Math.min(findans(ones, zero, x, y-1),findans(ones, zero, x-1, y-1) + (long)Math.abs(ones.get(x)-zero.get(y))); } } ",0
445,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             String a=input.next();             String b=input.next();             int same1=0,same0=0,opp1=0,opp0=0;             for(int i=0;i<n;i++)             {                 if(a.charAt(i)==b.charAt(i))                 {                     if(a.charAt(i)=='1') same1++;                     else same0++;                 }                 else                 {                     if(a.charAt(i)=='1') opp1++;                     else opp0++;                 }             }             if(same0+same1==n)             {                 out.println(0);             }             else             {                 int x=same1+opp1;                 int y=same1+opp0;                 int z=same0+opp0;                 if(x==y || (z+1)==y)                 {                     int min=Integer.MAX_VALUE;                     if((same0+same1)%2!=0 && same0==(same0+same1)/2)                     {                         min=Math.min(min,same0+same1);                     }                     if((opp0+opp1)%2==0 && opp0==(opp0+opp1)/2)                     {                         min=Math.min(min,opp0+opp1);                     }                     out.println(min);                 }                 else                 {                     out.println(-1);                 }             }         }         out.close();     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; public class Menorah {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t > 0) {             int n = Integer.parseInt(br.readLine());             String source = br.readLine();             String destination = br.readLine();             int sameStatusOnes = 0;             int sameStatusZeros = 0;             int diffStatusOnes = 0;             int diffStatusZeros = 0;             for (int i = 0; i < n; i++) {                 char c1 = source.charAt(i);                 char c2 = destination.charAt(i);                 if (c1 == c2) {                     if (c1 == '0') {                         sameStatusZeros += 1;                     } else {                         sameStatusOnes += 1;                     }                 } else {                     if (c1 == '0') {                         diffStatusZeros += 1;                     } else {                         diffStatusOnes += 1;                     }                 }             }             int sameStatus = sameStatusOnes + sameStatusZeros;             int diffStatus = diffStatusOnes + diffStatusZeros;                          if (sameStatus == n) {                 System.out.println(0);             } else if (diffStatus == n) {                                  if (diffStatus % 2 == 0 && diffStatusOnes == (n + 1) / 2)                     System.out.println(n);                 else                     System.out.println(-1);             } else {                 int op1 = -1;                 int op2 = -1;                 if (sameStatus % 2 != 0 && sameStatusOnes == (sameStatus + 1) / 2)                     op1 = sameStatus;                 if (diffStatus % 2 == 0 && diffStatusOnes == (diffStatus + 1) / 2)                     op2 = diffStatus;                 if (op1 != -1 && op2 != -1)                     System.out.println(Integer.min(op1, op2));                 else if (op1 != -1)                     System.out.println(op1);                 else if (op2 != -1)                     System.out.println(op2);                 else                     System.out.println(-1);             }             t--;         }     } } ",0
446,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             String a=input.next();             String b=input.next();             int same1=0,same0=0,opp1=0,opp0=0;             for(int i=0;i<n;i++)             {                 if(a.charAt(i)==b.charAt(i))                 {                     if(a.charAt(i)=='1') same1++;                     else same0++;                 }                 else                 {                     if(a.charAt(i)=='1') opp1++;                     else opp0++;                 }             }             if(same0+same1==n)             {                 out.println(0);             }             else             {                 int x=same1+opp1;                 int y=same1+opp0;                 int z=same0+opp0;                 if(x==y || (z+1)==y)                 {                     int min=Integer.MAX_VALUE;                     if((same0+same1)%2!=0 && same0==(same0+same1)/2)                     {                         min=Math.min(min,same0+same1);                     }                     if((opp0+opp1)%2==0 && opp0==(opp0+opp1)/2)                     {                         min=Math.min(min,opp0+opp1);                     }                     out.println(min);                 }                 else                 {                     out.println(-1);                 }             }         }         out.close();     }      } ","import java.util.*; import java.io.*; public class Main {                    public static void main(String[] args) {         FastReader reader = new FastReader();         StringBuilder sb = new StringBuilder("""");         int t = reader.nextInt();         int ans = 0;         while (t-- > 0) {             int n = reader.nextInt();             String a = reader.nextLine();             String b = reader.nextLine();             ans  = -1;             int even_demand = 0;             int odd_demand = 0;             int same_ones = 0, same_zeros = 0;             int diff_ones = 0, diff_zeros = 0;             for(int i=0; i<n; i++){                 if(a.charAt(i)==b.charAt(i)){                     even_demand++;                     if(a.charAt(i)=='1'){                         same_ones++;                     }else{                         same_zeros++;                     }                 }else{                     odd_demand++;                     if(a.charAt(i)=='1'){                         diff_ones++;                     }else{                         diff_zeros++;                     }                 }             }                          if(even_demand%2==1 && same_ones==same_zeros+1){                 ans = even_demand;             }             if(odd_demand%2==0 && diff_ones==diff_zeros){                 if(ans==-1){                     ans = odd_demand;                 }else{                     ans = Math.min(ans, odd_demand);                 }             }             sb.append(ans + ""\n"");         }         System.out.println(sb);     } } ",0
447,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             for(int i=0;i<n;i++) a[i]=input.nextInt();             long i=1,j=(long)1e15;             while(i<j)             {                 long mid=(i+j)/2;                 if(fun(a,mid,n))                 {                     i=mid+1;                 }                 else                 {                     j=mid;                 }             }             out.println(i-1);         }         out.close();     }     public static boolean fun(int a[],long x,int n)     {         long arr[]=new long[n];         for(int i=0;i<n;i++) arr[i]=a[i];         long b[]=new long[n];         for(int i=n-1;i>=2;i--)         {             if(b[i]+arr[i]<x) return false;             long z=Math.max(0,x-b[i]);             long u=arr[i]-z;             long y=u/3;             b[i-1]+=y;             b[i-2]+=2*y;         }         if(arr[0]+b[0]<x || arr[1]+b[1]<x) return false;         return true;     }      } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.sql.SQLOutput; import java.util.*; import java.io.BufferedReader; import java.io.InputStreamReader; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();                  int t;         t = in.nextInt();                  while (t > 0) {                          solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         int n;         long[] arr;         public void call(InputReader in, PrintWriter out) {             n = in.nextInt();             arr = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = in.nextLong();             }             long l, r, mid;             l = 0;             r = (long)1e10;             while (l  + 1 < r){                 mid = ( l + r)/2;                 if(ans(mid)){                     l = mid;                 }                 else{                     r = mid;                 }             }             out.println(l);         }         public boolean ans(long mid) {             long[] array = new long[n];             long a, b;             for (int i = n - 1; i >= 2; i--) {                 a = mid - array[i];                 if(a > 0){                     b = arr[i] - a;                     if(b >= 0){                         b/=3;                         array[i - 1] += b;                         array[i - 2] += 2*b;                     }                     else{                         return false;                     }                 }                 else{                     b = arr[i];                     b/=3;                     array[i - 1] += b;                     array[i - 2] += 2*b;                 }             }             for (int i = 0; i < 2; i++) {                 if(arr[i] + array[i] < mid){                     return false;                 }             }             return true;         }     }                                   static final Random random=new Random();           } ",0
448,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             int c[]=new int[n];             for(int i=0;i<n;i++)             {                 c[i]=input.nextInt();             }             long me=Integer.MAX_VALUE;             long mo=Integer.MAX_VALUE;             long se=0,so=0;             long min=Long.MAX_VALUE;             for(int i=1;i<=n;i++)             {                 if(i%2==0)                 {                     me=Math.min(me,c[i-1]);                     se+=c[i-1];                 }                 else                 {                     mo=Math.min(mo,c[i-1]);                     so+=c[i-1];                 }                 if(i>=2)                 {                     long sum=0;                     long c1=i/2+i%2;                     long c2=(i-1)/2+(i-1)%2;                     if(i%2==0)                     {                         sum+=se;                         sum+=(me)*(n-c1);                         sum+=so;                         sum+=mo*(n-c2);                     }                     else                     {                         sum+=so;                         sum+=(mo)*(n-c1);                         sum+=se;                         sum+=me*(n-c2);                     }                     min=Math.min(min,sum);                 }             }             out.println(min);         }         out.close();     }      } ","import java.io.*; import java.math.*; import java.util.*; public class test {                        public static void main(String args[]) throws Exception {         Scanner sc = new Scanner();    StringBuilder res = new StringBuilder();        int tc = sc.nextInt();        while(tc-->0) {  int n = sc.nextInt(); long c[] = new long[n]; for(int i=0;i<n;i++) {  c[i] = sc.nextLong(); } long min_odd = Integer.MAX_VALUE; long min_even = Integer.MAX_VALUE;     long ans = Long.MAX_VALUE;     long sum = 0;      int cnt1 = n; int cnt2 = n;     for(int i = 0; i < n; i++){         sum += c[i];         if(i % 2 == 0){             cnt1--;             min_odd = Math.min(min_odd, c[i]);         }         else{             cnt2--;             min_even = Math.min(min_even, c[i]);         }         if(i > 0){             long temp = sum + (min_odd * cnt1) + (min_even * cnt2);             ans = Math.min(ans, temp);         }       }          System.out.println(ans);    }        System.out.println(res);    } } ",0
449,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             int k[]=new int[n];             int h[]=new int[n];             for(int i=0;i<n;i++)             {                 k[i]=input.nextInt();             }             for(int i=0;i<n;i++)             {                 h[i]=input.nextInt();             }             ArrayList<int []> list=new ArrayList<>();             for(int i=0;i<n;i++)             {                 int p=k[i]-h[i]+1;                 if(list.size()==0) list.add(new int[]{p,k[i]});                 else                 {                     while(list.size()>0)                     {                         int j=list.size()-1;                         int a[]=list.get(j);                         int l=a[0],r=a[1];                         int l1=p,r1=k[i];                         if(l1>r)                         {                             list.add(new int[]{l1,r1});                             break;                         }                         else if(l1>=l && l1<=r)                         {                             list.remove(j);                             list.add(new int[]{l,r1});                             break;                         }                         else                         {                             list.remove(j);                         }                     }                     if(list.size()==0) list.add(new int[]{p,k[i]});                 }             }             long sum=0;             for(int i=0;i<list.size();i++)             {                 long d=list.get(i)[1]-list.get(i)[0]+1;                 long val=d*(d+1)/2;                 sum+=val;             }             out.println(sum);         }         out.close();     }      } ","import java.io.*; import java.util.*; public class CP { static Scanner sc=new Scanner(System.in); public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } System.out.println(mana);  } } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } } } ",0
450,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             int k[]=new int[n];             int h[]=new int[n];             for(int i=0;i<n;i++)             {                 k[i]=input.nextInt();             }             for(int i=0;i<n;i++)             {                 h[i]=input.nextInt();             }             ArrayList<int []> list=new ArrayList<>();             for(int i=0;i<n;i++)             {                 int p=k[i]-h[i]+1;                 if(list.size()==0) list.add(new int[]{p,k[i]});                 else                 {                     while(list.size()>0)                     {                         int j=list.size()-1;                         int a[]=list.get(j);                         int l=a[0],r=a[1];                         int l1=p,r1=k[i];                         if(l1>r)                         {                             list.add(new int[]{l1,r1});                             break;                         }                         else if(l1>=l && l1<=r)                         {                             list.remove(j);                             list.add(new int[]{l,r1});                             break;                         }                         else                         {                             list.remove(j);                         }                     }                     if(list.size()==0) list.add(new int[]{p,k[i]});                 }             }             long sum=0;             for(int i=0;i<list.size();i++)             {                 long d=list.get(i)[1]-list.get(i)[0]+1;                 long val=d*(d+1)/2;                 sum+=val;             }             out.println(sum);         }         out.close();     }      } ","import java.util.*; import java.util.Scanner; public class Solution { static int mod=1000000007;; public static void main(String[] args) { Scanner sc=new Scanner(System.in); int tt=sc.nextInt(); while(tt-->0){ int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) { k[i]=sc.nextInt(); } for(int i=0;i<n;i++) { h[i]=sc.nextInt(); } long ans=0; int start=k[0]-h[0]-1; int end=k[0]; int last=0; for(int j=0;j<n;j++) {  start=k[j]-h[j]+1;  end=k[j];  last=j; for(int i=j+1;i<n;i++) { int temp=k[i]-h[i]+1; if(temp<=end) { start=Math.min(start, temp); end=Math.max(end, k[i]); last=i; } } j=last; long va=end-start+1; ans+=(va*(va+1))/2; } System.out.println(ans); } } } ",0
451,"import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int n = Integer.parseInt(br.readLine());         StringTokenizer st = new StringTokenizer(br.readLine());         int[] h = new int[n];         int[] dp = new int[n];         for(int i = 0; i<n; i++){             h[i] = Integer.parseInt(st.nextToken());         }         Stack<Integer> hi = new Stack<>();         Stack<Integer> lo = new Stack<>();         hi.push(0);         lo.push(0);         for(int i = 1; i<n; i++){             dp[i] = dp[i-1]+1;             while(!hi.isEmpty() && h[hi.peek()]<h[i]){                 dp[i] = Math.min(dp[i], dp[hi.peek()]+1);                 hi.pop();             }             if(!hi.isEmpty()){                 dp[i] = Math.min(dp[i], dp[hi.peek()]+1);                 if(h[i] == h[hi.peek()]) hi.pop();             }             while(!lo.isEmpty() && h[lo.peek()]>h[i]){                 dp[i] = Math.min(dp[i], dp[lo.peek()]+1);                 lo.pop();             }             if(!lo.isEmpty()){                 dp[i] = Math.min(dp[i], dp[lo.peek()]+1);                 if(h[i] == h[lo.peek()]) lo.pop();             }             hi.push(i);             lo.push(i);         }         System.out.println(dp[n-1]);     } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Vector; import java.util.InputMismatchException; import java.io.IOException; import java.util.Stack; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DDiscreteCentrifugalJumps solver = new DDiscreteCentrifugalJumps();         solver.solve(1, in, out);         out.close();     }     static class DDiscreteCentrifugalJumps {         public void solve(int testNumber, InputReader s, PrintWriter w) {             int n = s.nextInt();             int[] a = new int[n];             for (int i = 0; i < n; i++)                 a[i] = s.nextInt();             int[] dp = new int[n];             for (int i = 0; i < n; i++)                 dp[i] = i;             Stack<Integer> dec = new Stack<>();             dec.push(0);             Stack<Integer> inc = new Stack<>();             inc.push(0);             for (int i = 1; i < n; i++) {                 while (!dec.isEmpty() && a[dec.peek()] < a[i]) {                     dp[i] = Math.min(dp[i], dp[dec.peek()] + 1);                     dec.pop();                 }                 if (!dec.isEmpty()) {                     dp[i] = Math.min(dp[i], dp[dec.peek()] + 1);                     if (a[dec.peek()] == a[i])                         dec.pop();                 }                 dec.push(i);                 while (!inc.isEmpty() && a[inc.peek()] > a[i]) {                     dp[i] = Math.min(dp[i], dp[inc.peek()] + 1);                     inc.pop();                 }                 if (!inc.isEmpty()) {                     dp[i] = Math.min(dp[i], dp[inc.peek()] + 1);                     if (a[inc.peek()] == a[i])                         inc.pop();                 }                 inc.push(i);             }             w.println(dp[n - 1]);         }     }      } ",1
452,"import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int n = Integer.parseInt(br.readLine());         StringTokenizer st = new StringTokenizer(br.readLine());         int[] h = new int[n];         int[] dp = new int[n];         for(int i = 0; i<n; i++){             h[i] = Integer.parseInt(st.nextToken());         }         Stack<Integer> hi = new Stack<>();         Stack<Integer> lo = new Stack<>();         hi.push(0);         lo.push(0);         for(int i = 1; i<n; i++){             dp[i] = dp[i-1]+1;             while(!hi.isEmpty() && h[hi.peek()]<h[i]){                 dp[i] = Math.min(dp[i], dp[hi.peek()]+1);                 hi.pop();             }             if(!hi.isEmpty()){                 dp[i] = Math.min(dp[i], dp[hi.peek()]+1);                 if(h[i] == h[hi.peek()]) hi.pop();             }             while(!lo.isEmpty() && h[lo.peek()]>h[i]){                 dp[i] = Math.min(dp[i], dp[lo.peek()]+1);                 lo.pop();             }             if(!lo.isEmpty()){                 dp[i] = Math.min(dp[i], dp[lo.peek()]+1);                 if(h[i] == h[lo.peek()]) lo.pop();             }             hi.push(i);             lo.push(i);         }         System.out.println(dp[n-1]);     } } ","import java.util.*;     import java.io.*;     public class D{                                     static int mod = (int)(1e9+7);                  public static void main(String[] args) {             InputReader in = new InputReader(System.in);             OutputWriter out = new OutputWriter(System.out);             int n = in.nextInt();             int[] arr = in.nextIntArray(n);             Stack<Integer> min = new Stack<>();             Stack<Integer> max = new Stack<>();             int[] dp = new int[n];                          dp[0] = 0;             min.push(0);             max.push(0);             for(int i=1;i<n;i++)             {                 int h=dp[i-1]+1;                 while(!max.isEmpty() && arr[i]>arr[max.peek()])                 {                     int x = arr[max.peek()];                     h = Math.min(h,1+dp[max.pop()]);                     while(!max.isEmpty() && arr[max.peek()]==x)                     {                         max.pop();                     }                 }                 if(!max.isEmpty())                 {                     h = Math.min(h,1+dp[max.peek()]);                 }                 while(!min.isEmpty() && arr[i]<arr[min.peek()])                 {                     int x = arr[min.peek()];                     h = Math.min(h,1+dp[min.pop()]);                     while(!min.isEmpty() && arr[min.peek()]==x)                     {                         min.pop();                     }                 }                 if(!min.isEmpty())                 {                     h = Math.min(h,1+dp[min.peek()]);                 }                 dp[i] = h;                 min.push(i);                 max.push(i);             }             out.printLine(dp[n-1]);             out.flush();             out.close();         }     } ",0
453,"import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException{                  BufferedReader f = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));         int t = Integer.parseInt(f.readLine());         while(t-- > 0) {             int n = Integer.parseInt(f.readLine());             int[][] occ = new int[n][6];             for(int i = 0; i < n; i++) {                 char[] temp = f.readLine().toCharArray();                 for(char j: temp) {                     occ[i][j-'a']++;                 }                 occ[i][5] = occ[i][0]+occ[i][1]+occ[i][2]+occ[i][3]+occ[i][4];             }             int max = 0;             for(int i = 0; i < 5; i++) {                 int[] temp = new int[n];                 for(int j = 0; j < n; j++) {                     temp[j] = occ[j][i]-(occ[j][5]-occ[j][i]);                 }                 Arrays.sort(temp);                 int j;                 int cur = 0;                 for(j = n-1; j >= 0; j--) {                     if(cur+temp[j] <= 0) {                         break;                     }                     cur += temp[j];                 }                 max = Math.max(max, n-j-1);             }             out.println(max);         }         f.close();         out.close();     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.List; import java.util.StringTokenizer; import java.util.TreeMap; public class C_CF {     public static void main(String[] args) {         FastScanner57 fs = new FastScanner57();         PrintWriter pw = new PrintWriter(System.out);         int t = fs.ni();                  for (int tc = 0; tc < t; tc++) {             int n = fs.ni();             String[] s = new String[n];             for (int i = 0; i < n; i++) {                 s[i] = fs.next();             }             int res = c(0,s);             for (int i = 1; i < 5; i++) {                 res = Math.max(res,c(i,s));             }             pw.println(res);         }                  pw.close();     }     public static int c(int l, String[] s) {         List<Integer> list = new ArrayList();         for (int i = 0; i < s.length; i++) {             String t = s[i];             int ct = 0;             for (int j = 0; j < t.length(); j++) {                 if (t.charAt(j)-'a'==l) {                     ct++;                 } else {                     ct--;                 }             }             list.add(ct);         }         Collections.sort(list);         Collections.reverse(list);         int sum = 0;         for (int i = 0; i < s.length; i++) {             sum += list.get(i);             if (sum<=0) return i;         }         return list.size();     }                         public static void sort(long[] a) {         List<Long> list = new ArrayList();         for (int i = 0; i < a.length; i++) {             list.add(a[i]);         }         Collections.sort(list);         for (int i = 0; i < a.length; i++) {             a[i] = list.get(i);         }     }      } ",0
454,"import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) {         FastIO fio = new FastIO();         int t = fio.nextInt();         for (int i = 0; i < t; i++) {             int n = fio.nextInt();             ArrayList<ArrayList<Tuple>> adjList = new ArrayList<>();             for (int j = 0; j < n; j++) {                 adjList.add(new ArrayList<>());             }             for (int j = 0; j < n - 1; j++) {                 int u = fio.nextInt() - 1;                 int v = fio.nextInt() - 1;                 adjList.get(u).add(new Tuple(v, j));                 adjList.get(v).add(new Tuple(u, j));             }             boolean possible = true;             for (ArrayList<Tuple> neighbours : adjList) {                 if (neighbours.size() > 2) {                     possible = false;                     break;                 }             }             if (!possible) {                 fio.println(-1);                 continue;             }             int[] assignments = new int[n - 1];             boolean[] visited = new boolean[n];             visited[0] = true;             Queue<Integer> queue = new LinkedList<>();             queue.offer(0);             while (!queue.isEmpty()) {                 int u = queue.poll();                 List<Tuple> neighbors = adjList.get(u);                 for (int j = 0; j < neighbors.size(); j++) {                     Tuple tt = neighbors.get(j);                     int pi = j;                     if (neighbors.size() == 2 && visited[neighbors.get(1 - j).v]) {                         pi = 1 - assignments[neighbors.get(1 - j).num];                     }                     if (!visited[tt.v]) {                         assignments[tt.num] = pi;                         visited[tt.v] = true;                         queue.offer(tt.v);                     }                 }             }             for (int j = 0; j < n - 1; j++) {                 if (j > 0) {                     fio.print("" "");                 }                 fio.print(assignments[j] == 0 ? 2 : 3);             }             fio.println();         }         fio.close();     } } class Tuple {     int v, num;     Tuple(int v, int num) {         this.v = v;         this.num = num;     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.StringTokenizer; public class NotAssigning { static class Pair { int a, b; public Pair(int a, int b) { this.a = a; this.b = b; } } static boolean vis[]; public static void dfs(ArrayList<ArrayList<Pair>> t, int cur, boolean mode, int[] w) { vis[cur] = true; for (Pair p : t.get(cur)) { if (!vis[p.a]) { if (mode) { w[p.b] = 3; } else { w[p.b] = 2; } dfs(t, p.a, !mode, w); } } } public static void solve(int n, int[] u, int[] v) { ArrayList<ArrayList<Pair>> t = new ArrayList<ArrayList<Pair>>(n); for (int i=0; i<n; i++) { t.add(new ArrayList<Pair>()); } for (int i=0; i<n-1; i++) { t.get(u[i]).add(new Pair(v[i], i)); t.get(v[i]).add(new Pair(u[i], i)); } int start = 0; for (int i=0; i<n; i++) { if (t.get(i).size() > 2) { System.out.println(""-1""); return; } if (t.get(i).size() == 1) { start = i; } } vis = new boolean[n]; int[] w = new int[n-1]; dfs(t, start, false, w); StringBuilder ans = new StringBuilder(); for (int i=0; i<n-1; i++) { ans.append(w[i]).append("" ""); } System.out.println(ans); } public static void main(String[] args) { FastReader in = new FastReader(); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); int[] u = new int[n-1]; int[] v = new int[n-1]; for (int i=0; i<n-1; i++) { u[i] = in.nextInt()-1; v[i] = in.nextInt()-1; } solve(n, u, v); } } } ",0
455,"import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();             }             int b[]=new int[n];             if(n%2==0)             {                 for(int i=0;i<n;i+=2)                 {                     int v1=Math.abs(a[i]),v2=Math.abs(a[i+1]);                     int l=lcm(v1,v2);                     int x=l/v1,y=l/v2;                     if((a[i]>=0 && a[i+1]<0) || (a[i]<0 && a[i+1]>=0))                     {                         b[i]=x;                         b[i+1]=y;                     }                     else                     {                         b[i]=x;                         b[i+1]=-y;                     }                 }                 for(int i=0;i<n;i++)                 {                     out.print(b[i]+"" "");                 }                 out.println();             }             else             {                 for(int i=0;i<n-3;i+=2)                 {                     int v1=Math.abs(a[i]),v2=Math.abs(a[i+1]);                     int l=lcm(v1,v2);                     int x=l/v1,y=l/v2;                     if((a[i]>=0 && a[i+1]<0) || (a[i]<0 && a[i+1]>=0))                     {                         b[i]=x;                         b[i+1]=y;                     }                     else                     {                         b[i]=x;                         b[i+1]=-y;                     }                 }                 int l1=lcm(Math.abs(a[n-3]),Math.abs(a[n-2]));                 int x=l1/Math.abs(a[n-3]),y=l1/Math.abs(a[n-2]);                 int l2=lcm(Math.abs(a[n-3]),Math.abs(a[n-1]));                 int z=l2/Math.abs(a[n-3]);                 if((a[n-3]>=0 && a[n-2]<0) || (a[n-3]<0 && a[n-2]>=0))                 {                 }                 else                 {                     y=-y;                 }                 x+=z;                 int sum=a[n-3]*x+a[n-2]*y;                 sum=-sum;                 z=sum/a[n-1];                 b[n-3]=x;                 b[n-2]=y;                 b[n-1]=z;                 for(int i=0;i<n;i++)                 {                     out.print(b[i]+"" "");                 }                 out.println();             }         }         out.close();     }     public static int gcd(int a, int b)     {         if(a==0)         {             return b;         }         else         {             return gcd(b%a,a);         }     }     public static int lcm(int a, int b)     {         return (a/gcd(a,b))*b;     }      } ","import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();             }             int b[]=new int[n];             if(n%2==0)             {                 for(int i=0;i<n;i+=2)                 {                     int v1=Math.abs(a[i]),v2=Math.abs(a[i+1]);                     int l=lcm(v1,v2);                     int x=l/v1,y=l/v2;                     if((a[i]>=0 && a[i+1]<0) || (a[i]<0 && a[i+1]>=0))                     {                         b[i]=x;                         b[i+1]=y;                     }                     else                     {                         b[i]=x;                         b[i+1]=-y;                     }                 }                 for(int i=0;i<n;i++)                 {                     out.print(b[i]+"" "");                 }                 out.println();             }             else             {                 for(int i=0;i<n-3;i+=2)                 {                     int v1=Math.abs(a[i]),v2=Math.abs(a[i+1]);                     int l=lcm(v1,v2);                     int x=l/v1,y=l/v2;                     if((a[i]>=0 && a[i+1]<0) || (a[i]<0 && a[i+1]>=0))                     {                         b[i]=x;                         b[i+1]=y;                     }                     else                     {                         b[i]=x;                         b[i+1]=-y;                     }                 }                 int l1=lcm(Math.abs(a[n-3]),Math.abs(a[n-2]));                 int x=l1/Math.abs(a[n-3]),y=l1/Math.abs(a[n-2]);                 int l2=lcm(Math.abs(a[n-3]),Math.abs(a[n-1]));                 int z=l2/Math.abs(a[n-3]);                 if((a[n-3]>=0 && a[n-2]<0) || (a[n-3]<0 && a[n-2]>=0))                 {                 }                 else                 {                     y=-y;                 }                 x+=z;                 int sum=a[n-3]*x+a[n-2]*y;                 sum=-sum;                 z=sum/a[n-1];                 b[n-3]=x;                 b[n-2]=y;                 b[n-1]=z;                 for(int i=0;i<n;i++)                 {                     out.print(b[i]+"" "");                 }                 out.println();             }         }         out.close();     }     public static int gcd(int a, int b)     {         if(a==0)         {             return b;         }         else         {             return gcd(b%a,a);         }     }     public static int lcm(int a, int b)     {         return (a/gcd(a,b))*b;     }      } ",1
456,"import java.io.*; import java.util.*; public class Main {     static ArrayList<Integer> one=new ArrayList<>();     static ArrayList<Integer> zero=new ArrayList<>();     static long dp[][]= new long[5001][5001];     static long solve(int i,int j){         if (i==one.size())return 0;         if (j==zero.size())return Integer.MAX_VALUE;         if (dp[i][j]!=-1){            return dp[i][j];         }         return dp[i][j]=Math.min(solve(i+1,j+1)+Math.abs(one.get(i)-zero.get(j)),solve(i,j+1));     }     public static void main(String[] args) {         FastScanner sc = new FastScanner();             int n=sc.nextInt();             int a[]=sc.readArray(n);             for (long i[]:dp){                 Arrays.fill(i,-1);             }             for (int i=0;i<n;i++){                 if (a[i]==1)one.add(i);                 else zero.add(i);             }             Collections.sort(one);             Collections.sort(zero);         System.out.println(solve(0,0));     }                    static void sort(int[] a) {         ArrayList<Integer> l = new ArrayList<>();         for (int i : a) l.add(i);         Collections.sort(l);         for (int i = 0; i < a.length; i++) a[i] = l.get(i);     }                         static long mod =(long)(1e9+7);     static long mod(long x) {         return ((x % mod + mod) % mod);     }          static long add(long x, long y) {         return mod(mod(x) + mod(y));     }                                                             } ","import java.io.*;     import java.util.*;     import java.lang.Math;     public class Main {           static Scanner sc;           static StringBuilder ans;                      static int ni()     { return sc.nextInt();       }                                                                                                                             static void runIo() throws Exception  {                sc = new Scanner(System.in);           }                                                                                                                                                           public static void main(String[] args)  throws Exception {                                runIo();                              int t;                t = 1;                                                             ans = new StringBuilder();                           while( t-- > 0 ) {                        solve();                }                                           System.out.println(ans+"""");              }                static int N ;            static int M ;            static ArrayList<Integer> f;           static ArrayList<Integer> e;           static long dp[][];           static long find(int i, int j ) {                                if( i == N )   return 0;                if( j == M )   return Integer.MAX_VALUE;                if (dp[i][j] != -1 )                     return dp[i][j];                return dp[i][j] = Math.min( find(i, j+1), Math.abs(f.get(i)-e.get(j)) +  find(i+1, j+1) );           }                  public static void solve() {                                     int n = ni();                f = new ArrayList();                e = new ArrayList();                               for(int i = 0; i<n; i++) {                     int v = ni();                     if( v == 0 ) {                          e.add(i);                     }                     else                          f.add(i);                }                N = f.size();                M = e.size();                               dp = new long[N][M];                for(int i = 0; i<N; i++)                     Arrays.fill(dp[i], -1);                ans.append(find(0, 0)+""\n"");           }        } ",1
457,"import java.io.*; import java.util.*; public class Main {     static FastReader in;     static PrintWriter out;     static Random rand = new Random();     static final int oo = (int) 2e9 + 10;     static final long OO = (long) 2e18 + 10;     static final int MOD = 998244353;     static int ask(int i) {         out.println(""? "" + (i + 1));         out.flush();         return in.nextInt() - 1;     }     static void solve() {         int n = in.nextInt();         int[] p = new int[n];         Arrays.fill(p, -1);         for (int i = 0; i < n; i++) {             if (p[i] == -1) {                 int first = ask(i);                 ArrayList<Integer> cycle = new ArrayList<>();                 while (true) {                     int x = ask(i);                     cycle.add(x);                     if (x == first)                         break;                 }                 int sz = cycle.size();                 int from = -1;                 for (int j = 0; j < sz; j++) {                     if (cycle.get(j) == i) {                         from = j;                         break;                     }                 }                 p[i] = cycle.get((from + 1) % sz);                 for (int j = (from + 1) % sz; j != from; j = (j + 1) % sz) {                     p[cycle.get(j)] = cycle.get((j + 1) % sz);                 }             }         }         out.print(""!"");         for (int i = 0; i < n; i++) {             out.print("" "" + (p[i] + 1));         }         out.println();         out.flush();     }     public static void main(String[] args) {         in = new FastReader();         out = new PrintWriter(System.out);         int t = 1;         t = in.nextInt();         while (t-- > 0) {             solve();         }         out.flush();         out.close();     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*;   public class Codeforces { static int mod= 998244353; static char arr[]; public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out); FastScanner fs=new FastScanner(); int t=fs.nextInt(); outer:while(t-->0) { int n=fs.nextInt(); int p[]=new int[n]; Arrays.fill(p, -1); for(int i=0;i<n;i++) { if(p[i]==-1) { List<Integer> list=new ArrayList<>(); Set<Integer> set=new HashSet<>(); while(true) { System.out.println(""? ""+(i+1)); int cur=fs.nextInt(); list.add(cur); if(set.contains(cur)) break; set.add(cur); } for(int j=0;j<list.size()-1;j++) { int cur=list.get(j), next=list.get(j+1); p[cur-1]=next; } } } StringBuilder ans=new StringBuilder(""! ""); for(int ele:p) { ans.append(ele+ "" ""); } System.out.println(ans); } out.close(); }   } ",0
458,"import java.io.*; import java.util.*; public class Main {     static FastReader in;     static PrintWriter out;     static Random rand = new Random();     static final int oo = (int) 2e9 + 10;     static final long OO = (long) 2e18 + 10;     static final int MOD = 998244353;     static void solve() {         int n = in.nextInt();         String[] s = new String[n];         for (int i = 0; i < n; i++) {             s[i] = in.next();         }         HashSet<String> set = new HashSet<>();         for (int i = 0; i < n; i++) {             if (s[i].charAt(0) == s[i].charAt(s[i].length() - 1)) {                 out.println(""YES"");                 return;             }             if (s[i].length() == 2) {                 String t = new StringBuilder(s[i]).reverse().toString();                 if (set.contains(t)) {                     out.println(""YES"");                     return;                 }                 for (char c = 'a'; c <= 'z'; c++) {                     if (set.contains(t + c)) {                         out.println(""YES"");                         return;                     }                 }                 set.add(s[i]);             } else {                 String t = new StringBuilder(s[i]).reverse().toString();                 if (set.contains(t) || set.contains(t.substring(0, 2))) {                     out.println(""YES"");                     return;                 }                 set.add(s[i]);             }         }         out.println(""NO"");     }     public static void main(String[] args) {         in = new FastReader();         out = new PrintWriter(System.out);         int t = 1;         t = in.nextInt();         while (t-- > 0) {             solve();         }         out.flush();         out.close();     }      } ","import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; public class Main {                    private static LinkedList[] adj;                              public static void main(String[] args) throws Exception {                  FastReader sc = new FastReader();         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             Set<String> list1= new HashSet<>();             Set<String> list2= new HashSet<>();             Set<String> list3= new HashSet<>();             int flag=0;             for(int i=0;i<n;i++) {                 String s = sc.next();                 if (flag == 1) {                    list1.add(s);                 }                 else                 {                     if (s.length() == 1) {                         flag = 1;                     } else if (s.length() == 2) {                         list2.add(s);                         StringBuilder x = new StringBuilder();                         x.append(s.charAt(1));                         x.append(s.charAt(0));                         if (list3.contains(x.toString()) || list2.contains(x.toString())) {                             flag = 1;                         }                     } else {                         list1.add(s);                         list3.add(s.substring(0, 2));                         StringBuilder x = new StringBuilder();                         x.append(s.charAt(2));                         x.append(s.charAt(1));                         x.append(s.charAt(0));                         if (list1.contains(x.toString())) flag = 1;                         StringBuilder y = new StringBuilder();                         y.append(s.charAt(2));                         y.append(s.charAt(1));                         if (list2.contains(y.toString())) flag = 1;                     }                 }             }             if(flag!=1){                 System.out.println(""NO"");             } else                 System.out.println(""YES"");         }     } } ",0
459,"import java.io.*; import java.util.*; public class Main {     static PrintWriter out;     static FastReader sc;     public static void main(String[] args) throws FileNotFoundException {         boolean t = true;         boolean f = false;         if (f) {             out = new PrintWriter(""output.txt"");             sc = new FastReader(""input.txt"");         } else {             out = new PrintWriter((System.out));             sc = new FastReader();         }         int tt = 1;         tt = sc.nextInt();         while (tt-- > 0) {             solve();         }         out.flush();         out.close();     }       static boolean flag = false;     static List<int[]>[] ans;     public static void dfs(int index, boolean[] visited, int parent, int val, List<Integer>[] ll){         if(visited[index]){             return;         }         List<Integer> l1 = ll[index];                  if(l1.size() > 2){             flag = true;             return;         }         visited[index] = true;         for(int k: l1){             if(visited[k] == false){                                  ans[index].add(new int[]{k, val});                 ans[k].add(new int[]{index, val});                 dfs(k, visited, index, (val == 2) ? 5 : 2, ll);             }         }     }     public static void solve() {         int n = sc.nextInt();         List<Integer>[] ll = new List[n + 1];                  for (int i = 0; i <= n; i++) {             ll[i] = new ArrayList<>();           }         int[][] store = new int[n][2];         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             store[i][0] = u;             store[i][1] = v;                          int mm = Math.min(u, v);             int mx = Math.max(u, v);                          ll[mm].add(mx);             ll[mx].add(mm);                      }         int two = 2;         int prime = 5;         flag = false;         ans = new List[n+1];                  int[] arr = new int[n + 1];         for(int i = 0; i <= n; i++){             ans[i] = new ArrayList<>();         }              boolean[] visited = new boolean[n+1];         List<Integer> one = ll[1];         if(one.size() > 2){             out.println(-1);             return;         }                  visited[1] = true;         for(int i = 0; i < one.size(); i++){             if(i == 0){                 ans[1].add(new int[]{one.get(i), 2});                 ans[one.get(i)].add(new int[]{1, 2});                 dfs(one.get(i), visited, -1, 5, ll);             }else{                 ans[1].add(new int[]{one.get(i), 5});                 ans[one.get(i)].add(new int[]{1, 5});                 dfs(one.get(i), visited, -1, 2, ll);             }         }         if (flag) {             out.println(-1);             return;         }        for(int i = 0; i < n-1; i++){                   int u = store[i][0];          int v = store[i][1];                   if(u == 0 || v == 0){              continue;          }          int mm = Math.min(u, v);          int mx = Math.max(u, v);          List<int[]> vv = ans[mm];                                     if(vv == null){              continue;          }          for(int[] j: vv){              if(j[0] == mx){                  out.print(j[1]+ "" "");                  break;              }          }        }         out.println();     }                          } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef {                                                                                                                         static int visited[];     static HashMap<Pair,Integer> hm; public static void main (String[] args) throws java.lang.Exception {                                         FastReader scan = new FastReader(); PrintWriter pw = new PrintWriter(System.out);         int t = scan.nextInt();         while(t-->0){             int n =  scan.nextInt();             List<List<Integer>> a = new ArrayList<List<Integer>>();             for(int i=0;i<=n;i++){                 a.add(new ArrayList<Integer>());             }             Pair edge[] = new Pair[n-1];             for(int i=0;i<n-1;i++){                 int x = scan.nextInt();                 int y = scan.nextInt();                 edge[i] = new Pair(x,y);                 a.get(x).add(y);                 a.get(y).add(x);             }             int flag=0;             int start = -1;             for(int i=1;i<=n;i++){                 if(a.get(i).size()>2)                 flag = 1;                 if(a.get(i).size()==1)                 start = i;             }             if(flag==1)             pw.println(-1);             else{                 visited = new int[n+1];                  hm = new HashMap<Pair,Integer>();                 dfs(a,start,2);                 for(int i=0;i<n-1;i++){                     int x = edge[i].x;                     int y = edge[i].y;                    pw.print(hm.get(new Pair(x,y))+"" "");                 }                 pw.println();             }             pw.flush();         }                               }     static void dfs(List<List<Integer>> a,int start,int parent){         if(visited[start]==0){             visited[start] = 1;         List<Integer> temp = a.get(start);         int len = temp.size();         for(int i=0;i<len;i++){             int end = temp.get(i);             if(parent==2){              hm.put(new Pair(start,end),3);              hm.put(new Pair(end,start),3);             dfs(a,end,3);         }             else{             hm.put(new Pair(start,end),2);             hm.put(new Pair(end,start),2);             dfs(a,end,2);             }         }     }     }                                                                                                                                                                       } class Pair{     Integer x,y;     Pair(int x,int y){         this.x = x;         this.y = y;     }           } ",0
460,"import java.io.*; import java.util.*; public class Main {     static int i, j, k, n, m, t, y, x, sum = 0;     static long mod = 998244353;     static FastScanner fs = new FastScanner();     static PrintWriter out = new PrintWriter(System.out);     static String str;     static long ans;     public static void main(String[] args) {         t = fs.nextInt();         while (t-- > 0) {             n = fs.nextInt();             int [] k = fs.readArray(n);             int [] h = fs.readArray(n);             List<Pair> arr = new ArrayList<>();             for(i=0;i<n;i++){                 int a = k[i]-h[i]+1;                 arr.add(new Pair(a,k[i]));             }             Collections.sort(arr);             ans=0;             List<Pair> comp = new ArrayList<>();             int temp = arr.get(0).x;             int tempy = arr.get(0).y;             for(i=1;i<n;i++){                 if(arr.get(i).x > tempy){                     comp.add(new Pair(temp, tempy));                     temp = arr.get(i).x;                     tempy = arr.get(i).y;                 }                 else tempy = Math.max(tempy, arr.get(i).y);             }             comp.add(new Pair(temp, tempy));             for(i=0;i<comp.size();i++){                 long a = comp.get(i).y - comp.get(i).x +1 ;                 ans+=(((a)*(a+1))/2);             }             out.println(ans);         }         out.close();     }                        static long add(long a, long b) {         return ((a % mod) + (b % mod)) % mod;     }                         static class Pair implements Comparable<Pair> {         public int x, y;         Pair(int x, int y) {             this.x = x;             this.y = y;         }              } } ","import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=1; t=sc.nextInt(); for(int i=1;i<=t;i++) solve(i); out.close(); out.flush(); } static void solve(int CASENO) throws IOException, CloneNotSupportedException { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } }   } ",0
461,"import java.io.*; import java.util.*; public class Main {     static int i, j, k, n, m, t, y, x, sum = 0;     static long mod = 998244353;     static FastScanner fs = new FastScanner();     static PrintWriter out = new PrintWriter(System.out);     static String str;     static long ans;     public static void main(String[] args) {         t = fs.nextInt();         while (t-- > 0) {             n = fs.nextInt();             int [] k = fs.readArray(n);             int [] h = fs.readArray(n);             List<Pair> arr = new ArrayList<>();             for(i=0;i<n;i++){                 int a = k[i]-h[i]+1;                 arr.add(new Pair(a,k[i]));             }             Collections.sort(arr);             ans=0;             List<Pair> comp = new ArrayList<>();             int temp = arr.get(0).x;             int tempy = arr.get(0).y;             for(i=1;i<n;i++){                 if(arr.get(i).x > tempy){                     comp.add(new Pair(temp, tempy));                     temp = arr.get(i).x;                     tempy = arr.get(i).y;                 }                 else tempy = Math.max(tempy, arr.get(i).y);             }             comp.add(new Pair(temp, tempy));             for(i=0;i<comp.size();i++){                 long a = comp.get(i).y - comp.get(i).x +1 ;                 ans+=(((a)*(a+1))/2);             }             out.println(ans);         }         out.close();     }                        static long add(long a, long b) {         return ((a % mod) + (b % mod)) % mod;     }                         static class Pair implements Comparable<Pair> {         public int x, y;         Pair(int x, int y) {             this.x = x;             this.y = y;         }              } } ","import java.io.*; import java.util.*; public class cp { static int mod=(int)1e9+7; static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0)); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i)); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } out.flush(); out.close(); System.gc(); }                                                                                      static class Pair implements Comparable<Pair>     {        int x;        int y;        Pair(int x,int y)         {            this.x=x;            this.y=y;                    }                             }                        static  PrintWriter out=new PrintWriter(System.out); } ",0
462,"import java.io.*; import java.util.*; public class Main {     static int i, j, k, n, m, t, y, x, sum = 0;     static long mod = 998244353;     static FastScanner fs = new FastScanner();     static PrintWriter out = new PrintWriter(System.out);     static String str;     static long ans;     public static void main(String[] args) {         t = fs.nextInt();         while (t-- > 0) {             n = fs.nextInt();             int [] k = fs.readArray(n);             int [] h = fs.readArray(n);             List<Pair> arr = new ArrayList<>();             for(i=0;i<n;i++){                 int a = k[i]-h[i]+1;                 arr.add(new Pair(a,k[i]));             }             Collections.sort(arr);             ans=0;             List<Pair> comp = new ArrayList<>();             int temp = arr.get(0).x;             int tempy = arr.get(0).y;             for(i=1;i<n;i++){                 if(arr.get(i).x > tempy){                     comp.add(new Pair(temp, tempy));                     temp = arr.get(i).x;                     tempy = arr.get(i).y;                 }                 else tempy = Math.max(tempy, arr.get(i).y);             }             comp.add(new Pair(temp, tempy));             for(i=0;i<comp.size();i++){                 long a = comp.get(i).y - comp.get(i).x +1 ;                 ans+=(((a)*(a+1))/2);             }             out.println(ans);         }         out.close();     }                        static long add(long a, long b) {         return ((a % mod) + (b % mod)) % mod;     }                         static class Pair implements Comparable<Pair> {         public int x, y;         Pair(int x, int y) {             this.x = x;             this.y = y;         }              } } ","import java.util.*; import java.io.*; public class Main {     public static void main(String[] args) {         Scanner sc = new Scanner();         PrintWriter out = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-- > 0) {             int n = sc.nextInt();             int[] k = new int[n];             int[] h = new int[n];             for (int i = 0; i < n; ++i) k[i] = sc.nextInt();             for (int i = 0; i < n; ++i) h[i] = sc.nextInt();             Stack<Pair> stk = new Stack<>();             stk.push(new Pair(0, 0));             for (int i = 0; i < n; ++i) {                 int cur_pos = k[i];                 int cur_inc = h[i];                 while (!stk.isEmpty() && !(cur_pos - cur_inc + 1 > stk.peek().pos)) {                     cur_inc = Math.max(cur_inc, stk.peek().inc + cur_pos - stk.peek().pos);                     stk.pop();                 }                 stk.add(new Pair(cur_pos, cur_inc));             }             long answer = 0;             while (!stk.isEmpty()) {                 answer += (1L * stk.peek().inc * (stk.peek().inc + 1) / 2);                 stk.pop();             }             out.println(answer);         }         out.flush();     }     static class Pair {         int pos, inc;         public Pair (int pos, int inc) {             this.pos = pos;             this.inc = inc;         }     }      } ",0
463,"import java.io.*; import java.util.*; public class Main {     static int solve(char ch, char[][] str, int N) {         int[] a = new int[N];         for (int i = 0; i < N; i++) {             int c1 = 0, c2 = 0;             for (char x : str[i]) {                 if (x == ch) c1++;                 else c2++;             }             a[i] = c1 - c2;         }         int sum = 0, count = N;         for (int x : a) sum += x;         Arrays.sort(a);         for (int i = 0; i < N; i++) {             if (sum > 0) break;             count--;             sum -= a[i];         }         return count;     }     public static void main(String[] args) throws IOException {                                                                                 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st = new StringTokenizer(br.readLine());         StringBuilder out = new StringBuilder();         int T = Integer.parseInt(st.nextToken());         while (T-- > 0) {             int n = Integer.parseInt(br.readLine().trim());             char[][] str = new char[n][];             for (int i = 0; i < n; i++) {                 str[i] = br.readLine().trim().toCharArray();             }             int ans = 0;             for (char ch = 'a'; ch <= 'e'; ch++) {                 ans = Math.max(ans, solve(ch, str, n));             }             out.append(ans).append(""\n"");         }         System.out.println(out);     } } ","import java.io.*; import java.util.*; public class D {     private static int solve(char ch, char[][] str, int N)     {         int[] a=new int[N];         for(int i=0;i<N;i++)         {             int c1=0, c2=0;             for(char x:str[i])             {                 if(x==ch) c1++;                 else c2++;             }             a[i]=c1-c2;         }         int sum=0, count=N;         for(int x:a) sum+=x;         Arrays.sort(a);         for(int i=0;i<N;i++)         {             if(sum>0) break;             count--; sum-=a[i];         }         return count;     }     public static void main(String[] args) throws Exception     {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int i,N;         int T=Integer.parseInt(br.readLine().trim());         StringBuilder sb=new StringBuilder();         while (T-->0)         {             N=Integer.parseInt(br.readLine().trim());             char[][] str=new char[N][];             for(i=0;i<N;i++) str[i]=br.readLine().trim().toCharArray();             int ans=0;             for(char ch='a';ch<='e';ch++)             {                 int tmp=solve(ch,str,N);                 ans=Math.max(ans,tmp);             }             sb.append(ans).append(""\n"");         }         System.out.println(sb);     } } ",1
464,"import java.io.*; import java.util.*; public class Main {     static int solve(char ch, char[][] str, int N) {         int[] a = new int[N];         for (int i = 0; i < N; i++) {             int c1 = 0, c2 = 0;             for (char x : str[i]) {                 if (x == ch) c1++;                 else c2++;             }             a[i] = c1 - c2;         }         int sum = 0, count = N;         for (int x : a) sum += x;         Arrays.sort(a);         for (int i = 0; i < N; i++) {             if (sum > 0) break;             count--;             sum -= a[i];         }         return count;     }     public static void main(String[] args) throws IOException {                                                                                 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st = new StringTokenizer(br.readLine());         StringBuilder out = new StringBuilder();         int T = Integer.parseInt(st.nextToken());         while (T-- > 0) {             int n = Integer.parseInt(br.readLine().trim());             char[][] str = new char[n][];             for (int i = 0; i < n; i++) {                 str[i] = br.readLine().trim().toCharArray();             }             int ans = 0;             for (char ch = 'a'; ch <= 'e'; ch++) {                 ans = Math.max(ans, solve(ch, str, n));             }             out.append(ans).append(""\n"");         }         System.out.println(out);     } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException{                  BufferedReader f = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));         int t = Integer.parseInt(f.readLine());         while(t-- > 0) {             int n = Integer.parseInt(f.readLine());             int[][] occ = new int[n][6];             for(int i = 0; i < n; i++) {                 char[] temp = f.readLine().toCharArray();                 for(char j: temp) {                     occ[i][j-'a']++;                 }                 occ[i][5] = occ[i][0]+occ[i][1]+occ[i][2]+occ[i][3]+occ[i][4];             }             int max = 0;             for(int i = 0; i < 5; i++) {                 int[] temp = new int[n];                 for(int j = 0; j < n; j++) {                     temp[j] = occ[j][i]-(occ[j][5]-occ[j][i]);                 }                 Arrays.sort(temp);                 int j;                 int cur = 0;                 for(j = n-1; j >= 0; j--) {                     if(cur+temp[j] <= 0) {                         break;                     }                     cur += temp[j];                 }                 max = Math.max(max, n-j-1);             }             out.println(max);         }         f.close();         out.close();     } } ",0
465,"import java.io.*; import java.util.*; public class Main {     static long mod = 1000000007;               static InputReader sc = new InputReader(System.in);     static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) throws IOException {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] A = new int[n];             for (int i = 0; i < A.length; i++) {                 A[i] = sc.nextInt();             }             String word = sc.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < word.length(); i++) {                 if (word.charAt(i) == 'R') {                     red.add(A[i]);                 } else {                     blue.add(A[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             boolean possible = true;             int a = 1;             for (int i = 0; i < blue.size(); i++, a++) {                 if (blue.get(i) < a) {                     possible = false;                     break;                 }             }             for (int i = 0; i < red.size(); i++, a++) {                 if (red.get(i) > a) {                     possible = false;                     break;                 }             }             if (possible) out.println(""YES"");             else out.println(""NO"");         }         out.flush();         out.close();     }                } ","import java.io.*; import java.util.*;       public class cp_2 { static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int arr[]=new int[n]; for (int i = 0; i < arr.length; i++) { arr[i]=sc.nextInt(); } String s=sc.next(); ArrayList<Integer> blue=new ArrayList<>(); ArrayList<Integer> red=new ArrayList<>(); for(int i=0;i<n;i++) { if(s.charAt(i)=='B') blue.add(arr[i]); else { red.add(arr[i]); } } Collections.sort(blue); Collections.sort(red,Collections.reverseOrder()); boolean flag=true; for(int i=0;i<blue.size();i++) { if(blue.get(i)<i+1) flag=false; } for(int i=0;i<red.size();i++) { if(red.get(i)>n-i) flag=false; } printYesNo(flag); } out.flush(); out.close(); System.gc(); }                         static void printYesNo(boolean condition) { if (condition) { out.println(""Yes""); } else { out.println(""No""); } }                                                                      static  PrintWriter out=new PrintWriter(System.out); } ",1
466,"import java.io.*; import java.util.*; public class Main {     static long mod = 1000000007;               static InputReader sc = new InputReader(System.in);     static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) throws IOException {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] A = new int[n];             for (int i = 0; i < A.length; i++) {                 A[i] = sc.nextInt();             }             String word = sc.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < word.length(); i++) {                 if (word.charAt(i) == 'R') {                     red.add(A[i]);                 } else {                     blue.add(A[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             boolean possible = true;             int a = 1;             for (int i = 0; i < blue.size(); i++, a++) {                 if (blue.get(i) < a) {                     possible = false;                     break;                 }             }             for (int i = 0; i < red.size(); i++, a++) {                 if (red.get(i) > a) {                     possible = false;                     break;                 }             }             if (possible) out.println(""YES"");             else out.println(""NO"");         }         out.flush();         out.close();     }                } ","import java.io.*; import java.util.*; import java.text.*; import java.math.*; import java.util.regex.*; public class JaiShreeRam{ static Scanner in=new Scanner(); static long mod = 1000000007; static ArrayList<ArrayList<Integer>> adj; public static void main(String[] args) throws Exception{ int z=in.readInt(); while(z-->0) { int n=in.readInt(); int a[]=nia(n); char c[]=in.readString().toCharArray(); ArrayList<Integer> d=new ArrayList<>(); ArrayList<Integer> in=new ArrayList<>(); for(int i=0;i<n;i++) { if(c[i]=='R') { in.add(a[i]); } else { d.add(a[i]); } } String ans=""YES""; Collections.sort(d); int k=1; for(int i:d) { if(i<k) { ans=""NO""; } k++; } Collections.sort(in); for(int i=in.size()-1;i>=0;i--) { if(in.get(i)>n) { ans=""NO""; break; } n--; } System.out.println(ans); } } static int[] nia(int n){ int[] arr= new int[n]; int i=0; while(i<n){ arr[i++]=in.readInt(); } return arr; } } ",1
467,"import java.io.*; import java.util.*; public class Main {     static long mod = 1000000007;               static InputReader sc = new InputReader(System.in);     static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) throws IOException {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] A = new int[n];             for (int i = 0; i < A.length; i++) {                 A[i] = sc.nextInt();             }             String word = sc.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < word.length(); i++) {                 if (word.charAt(i) == 'R') {                     red.add(A[i]);                 } else {                     blue.add(A[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             boolean possible = true;             int a = 1;             for (int i = 0; i < blue.size(); i++, a++) {                 if (blue.get(i) < a) {                     possible = false;                     break;                 }             }             for (int i = 0; i < red.size(); i++, a++) {                 if (red.get(i) > a) {                     possible = false;                     break;                 }             }             if (possible) out.println(""YES"");             else out.println(""NO"");         }         out.flush();         out.close();     }                } ","import java.util.*; public class Main {   public static void main(String[] args) {     Scanner sc= new Scanner(System.in);     int t=sc.nextInt();     while(t-->0){       int n=sc.nextInt();       int[] a=new int[n];       for(int i=0;i<n;i++)a[i]=sc.nextInt();       String x=sc.next();       Vector<Integer> R=new Vector<>();       Vector<Integer> B=new Vector<>();       for(int i=0;i<n;i++){         if(x.charAt(i)=='B') R.add(a[i]);         else B.add(a[i]);       }       Collections.sort(R);       Collections.sort(B);       boolean yes=true;       for(int i=0;i<R.size();i++){         if(R.get(i)-i<1){System.out.println(""NO"");yes=false;break;}       }       if(yes)         {           int s=B.size();           for(int j=0;j<s;j++){             if(B.get(j)+s-j>n+1){System.out.println(""NO"");yes=false;break;}           }         }         if(yes)System.out.println(""YES"");     }     sc.close();   } } ",0
468,"import java.io.*; import java.util.*; public class Main {     static long mod = 1000000007;               static InputReader sc = new InputReader(System.in);     static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) throws IOException {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] A = new int[n];             for (int i = 0; i < A.length; i++) {                 A[i] = sc.nextInt();             }             String word = sc.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < word.length(); i++) {                 if (word.charAt(i) == 'R') {                     red.add(A[i]);                 } else {                     blue.add(A[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             boolean possible = true;             int a = 1;             for (int i = 0; i < blue.size(); i++, a++) {                 if (blue.get(i) < a) {                     possible = false;                     break;                 }             }             for (int i = 0; i < red.size(); i++, a++) {                 if (red.get(i) > a) {                     possible = false;                     break;                 }             }             if (possible) out.println(""YES"");             else out.println(""NO"");         }         out.flush();         out.close();     }                } ","import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ",0
469,"import java.io.*; import java.util.*; public class Main {     static long mod = 1000000007;               static InputReader sc = new InputReader(System.in);     static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) throws IOException {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] A = new int[n];             for (int i = 0; i < A.length; i++) {                 A[i] = sc.nextInt();             }             String word = sc.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < word.length(); i++) {                 if (word.charAt(i) == 'R') {                     red.add(A[i]);                 } else {                     blue.add(A[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             boolean possible = true;             int a = 1;             for (int i = 0; i < blue.size(); i++, a++) {                 if (blue.get(i) < a) {                     possible = false;                     break;                 }             }             for (int i = 0; i < red.size(); i++, a++) {                 if (red.get(i) > a) {                     possible = false;                     break;                 }             }             if (possible) out.println(""YES"");             else out.println(""NO"");         }         out.flush();         out.close();     }                } ","import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import java.io.*;   public class Div2 {  public static String solution(int [] arr, int n, String st)   {         ArrayList<Integer> red = new ArrayList<>();         ArrayList<Integer> blue = new ArrayList<>();                  for(int i = 0; i<n; i++)         {         if(st.charAt(i)=='R')         red.add(arr[i]);         else         blue.add(arr[i]);         }              Collections.sort(red);         Collections.sort(blue);         int cb = 1;                  for(int j = 0; j<blue.size(); j++)         {             if(blue.get(j)<cb)             return ""NO"";             cb++;         }                  int cr = n;         for(int j = red.size()-1; j>=0; j--)         {             if(red.get(j)>cr)             return ""NO"";             cr--;         }                  return ""YES"";  }          private static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { MyScanner s =  new MyScanner();        int t = s.nextInt();          for(int j = 0; j<t ; j++)     {     int n = s.nextInt();     int[] arr = new int[n];     for(int i =0; i<n; i++)     arr[i] = s.nextInt();          String st = s.next();         out.println(solution(arr,n, st));     }                out.flush();     out.close();      } } ",1
470,"import java.io.*; import java.util.*; public class Main {     static public void dfs(ArrayList<ArrayList<Integer>> g, int u, long[][] dp, long[] l, long[] r, int p) {         dp[u][0] = 1;         for (int i = 0; i < g.get(u).size(); i++) {             int v = g.get(u).get(i);             if (v == p) continue;             if (dp[v][0] == 0) {                 dfs(g, v, dp, l, r, u);             }             dp[u][1] += Math.max(Math.abs(l[u] - l[v]) + dp[v][1], Math.abs(l[u] - r[v]) + dp[v][2]);             dp[u][2] += Math.max(Math.abs(r[u] - l[v]) + dp[v][1], Math.abs(r[u] - r[v]) + dp[v][2]);         }     }     static public void main(String args[]) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         StringTokenizer st = new StringTokenizer(br.readLine());         int T = Integer.parseInt(st.nextToken());         for (int t = 1; t <= T; t++) {             st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             long[] l = new long[n + 1], r = new long[n + 1];             ArrayList<ArrayList<Integer>> g = new ArrayList<>();             for (int i = 0; i < n; i++) {                 st = new StringTokenizer(br.readLine());                 l[i + 1] = Integer.parseInt(st.nextToken());                 r[i + 1] = Integer.parseInt(st.nextToken());                 g.add(new ArrayList<>());             }             g.add(new ArrayList<>());             for (int i = 0; i < n - 1; i++) {                 st = new StringTokenizer(br.readLine());                 int u = Integer.parseInt(st.nextToken()), v = Integer.parseInt(st.nextToken());                 g.get(v).add(u);                 g.get(u).add(v);             }             long[][] dp = new long[n + 1][3];             dfs(g, 1 , dp, l, r, -1);             bw.write(Math.max(dp[1][1], dp[1][2]) + ""\n"");         }         bw.flush();     } } ","import java.util.*; import java.io.*; public class C{ private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));     private static int vertices;     private static LinkedList<Integer> adj[];     private static long dp[][];     private static int l[];     private static int r[];     private static boolean vis[];     public static void dfs(int v) {         if(vis[v])             return;         vis[v] = true;         Iterator<Integer> iterator = adj[v].listIterator();         while(iterator.hasNext()) {             int child = iterator.next();             if(!vis[child]) {                 dfs(child);                 long left = dp[child][0] + Math.abs(l[v] - l[child]);                 dp[v][0] += Math.max(left, dp[child][1] + Math.abs(l[v] - r[child]));                 long right = dp[child][0] + Math.abs(r[v] - l[child]);                 dp[v][1] += Math.max(right, dp[child][1] + Math.abs(r[v] - r[child]));             }         }     } public static void main (String[] args) throws IOException {         int t = Integer.parseInt(br.readLine());         while(t-- > 0) {             int n = Integer.parseInt(br.readLine());             vertices = n;             dp = new long[n+1][2];             adj = new LinkedList[n+1];             vis = new boolean[n+1];             l = new int[n+1];             r = new int[n+1];             for(int i=1;i<=n;i++) {                 adj[i] = new LinkedList<>();             }             for(int i=1;i<=n;i++) {                 String lr[] = br.readLine().split("" "");                 l[i] = Integer.parseInt(lr[0]);                 r[i] = Integer.parseInt(lr[1]);             }             for(int i=0;i<n-1;i++) {                 String uv[] = br.readLine().split("" "");                 int u = Integer.parseInt(uv[0]);                 int v = Integer.parseInt(uv[1]);                 adj[u].add(v);                 adj[v].add(u);             }             dfs(1);             long ans = Math.max(dp[1][0], dp[1][1]);             bw.write(ans + ""\n"");         }         bw.flush();     } } ",0
471,"import java.io.*; import java.util.*; public class Main {   public static class StringPair implements Comparable{     String s;     Integer charCount;     public StringPair(String s, Integer charCount){       this.s = s;       this.charCount = charCount;     }        }   public static void main(String[] args) throws IOException {     Scanner sc = new Scanner(System.in);     int t = sc.nextInt();     while (t-- > 0) {       int n = sc.nextInt();       String[] s = new String[n];       for(int i = 0 ; i < n ; i++){         s[i] = sc.next();       }       Integer[][] count = new Integer[n][5];       Integer[] totalCount = new Integer[5];       for(int i = 0 ; i < n ; i++){         for(int j = 0 ; j < 5 ; j++){           count[i][j]=0;         }       }       for(int i = 0 ; i < 5 ; i++){         totalCount[i] = 0;       }       Integer total = 0;       for(int i = 0 ; i < n ; i++){         for(int j = 0 ; j < s[i].length() ; j++){           int val = s[i].charAt(j) - 'a';           count[i][val]++;           totalCount[val]++;           total++;         }       }              int ans = -1;       for(int ch = 0 ; ch < 5 ; ch++){         List<StringPair> ls = new ArrayList<>();         for(int i = 0 ; i < n ; i++){           int c = s[i].length() - (2 * count[i][ch]);           ls.add(new StringPair(s[i],c));         }         Collections.sort(ls);         int finalCount = n;         int thisTotal = total;         int thisTotalCharcount = totalCount[ch];         int idx = n-1;         while(finalCount > ans && 2*thisTotalCharcount <= thisTotal && idx >= 0){           thisTotal -= ls.get(idx).s.length();           thisTotalCharcount -= (ls.get(idx).s.length() - ls.get(idx).charCount)/2;           idx--;           finalCount--;         }         ans = Integer.max(ans,finalCount);       }       System.out.println(ans);     }   } } ","import java.io.*; import java.util.*; public class A734C {     public static void main(String[] args) {         JS scan = new JS();         int t = scan.nextInt();         loop:while(t-->0){             int n = scan.nextInt();             String[] arr= new String[n];             Integer[][] counts = new Integer[5][n];             for(int i = 0;i<5;i++){                 for(int j = 0;j<n;j++){                     counts[i][j] = 0;                 }             }             for(int i =0;i<n;i++){                 arr[i] = scan.next();                 int[] freq =new int[5];                 for(int j = 0;j<arr[i].length();j++){                     freq[arr[i].charAt(j)-'a']++;                 }                 for(int j = 0;j<5;j++){                     counts[j][i] = freq[j]-(arr[i].length()-freq[j]);                 }             }             int best = 0;             for(int i = 0;i<5;i++){                 Arrays.sort(counts[i]);                 int curr = 0;                 int extra = 0;                 for(int j = n-1;j>=0;j--){                     extra+=counts[i][j];                     if(extra>0)curr++;                 }                 best = Math.max(best,curr);             }             System.out.println(best);         }     }      } ",0
472,"import java.io.*; import java.util.*; public class Main { final static long mod = 1000000007; public static void main(String[] args) { InputReader in = new InputReader(System.in); PrintWriter out = new PrintWriter(System.out); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); Integer[] k = intInput(n, in), h = intInput(n, in); long ans = 0; int a = k[n - 1]; int current = k[n - 1]; for (int i = n - 1; i >= 0; i--) { if (current > k[i]) { ans += sum(a - current + 1); a = k[i]; current = k[i]-h[i]+1; }else { current = Math.min(current, k[i] - h[i]+1); } } ans += sum(a - current + 1); out.println(ans); } out.flush(); } static long sum(long a) { return a * (a + 1) / 2; } static Integer[] intInput(int n, InputReader in) { Integer[] a = new Integer[n]; for (int i = 0; i < a.length; i++) a[i] = in.nextInt(); return a; } } ","import java.util.*; import java.io.*; public class hmm { static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws Exception { int t =sc.nextInt(); while (t-- > 0) {              int n = sc.nextInt();              int []k = sc.nextIntArray(n);              int h[]=sc.nextIntArray(n);                    long mana = 0;              pair cur = new pair(k[n-1]-h[n-1]+1,k[n-1]);              for(int i=n-1;i>=0;i--) {              int s = k[i];              int start = s-h[i]+1;              if(s>=cur.x) {              cur.x = Math.min(start, cur.x);              }              else {              long x = cur.y - cur.x +1;              mana += x*(x+1)/2;              cur.x = start;              cur.y = s;              }              }                      long x = cur.y - cur.x +1;              mana += x*(x+1)/2;      pw.println(mana);                           } pw.close(); } static class pair { int x ; int y; public pair(int n,int c) { x= n; y = c; } } } ",0
473,"import java.io.*; import java.util.*; public class Main { final static long mod = 1000000007; public static void main(String[] args) { InputReader in = new InputReader(System.in); PrintWriter out = new PrintWriter(System.out); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); Integer[] k = intInput(n, in), h = intInput(n, in); long ans = 0; int a = k[n - 1]; int current = k[n - 1]; for (int i = n - 1; i >= 0; i--) { if (current > k[i]) { ans += sum(a - current + 1); a = k[i]; current = k[i]-h[i]+1; }else { current = Math.min(current, k[i] - h[i]+1); } } ans += sum(a - current + 1); out.println(ans); } out.flush(); } static long sum(long a) { return a * (a + 1) / 2; } static Integer[] intInput(int n, InputReader in) { Integer[] a = new Integer[n]; for (int i = 0; i < a.length; i++) a[i] = in.nextInt(); return a; } } ","import java.util.*; import java.util.Scanner; public class Solution { static int mod=1000000007;; public static void main(String[] args) { Scanner sc=new Scanner(System.in); int tt=sc.nextInt(); while(tt-->0){ int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) { k[i]=sc.nextInt(); } for(int i=0;i<n;i++) { h[i]=sc.nextInt(); } long ans=0; int start=k[0]-h[0]-1; int end=k[0]; int last=0; for(int j=0;j<n;j++) {  start=k[j]-h[j]+1;  end=k[j];  last=j; for(int i=j+1;i<n;i++) { int temp=k[i]-h[i]+1; if(temp<=end) { start=Math.min(start, temp); end=Math.max(end, k[i]); last=i; } } j=last; long va=end-start+1; ans+=(va*(va+1))/2; } System.out.println(ans); } } } ",0
474,"import java.io.*; import java.util.*; public class Main { public static void main(String[] args) throws Exception { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out)); int T = Integer.parseInt(in.readLine()); for (int ts=1; ts<=T; ts++) { int N = Integer.parseInt(in.readLine()); String A = in.readLine(); String B = in.readLine(); int ans = -1; int fromZero = 0; int fromOne = 0; for (int i=0; i<N; i++) { if (A.charAt(i) != B.charAt(i)) { if (A.charAt(i) == '0') { fromZero++; } else { fromOne++; } } } if (fromZero == fromOne) { ans = fromZero + fromOne; } int zero = 0; int one = 0; for (int i=0; i<N; i++) { if (A.charAt(i) == B.charAt(i)) { if (A.charAt(i) == '0') { zero++; } else { one++; } } } if (one == zero + 1) { int current = one + zero; if (ans == -1) ans = current; else ans = Math.min(ans, current); } out.write(ans + ""\n""); } in.close(); out.close(); } } ","import java.io.*; import java.util.*; public class q3 {     public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     public static void solve() throws Exception {         String[] parts = br.readLine().split("" "");         int n = Integer.parseInt(parts[0]);         StringBuilder a = new StringBuilder(br.readLine());         StringBuilder b = new StringBuilder(br.readLine());         boolean flag = true;         for(int i = 0;i < n;i++) if(a.charAt(i) != b.charAt(i)) flag = false;         if(flag){             System.out.println(0);             return;         }         if(n == 1){             System.out.println(-1);             return;         }         int aco = 0,bco = 0;         for(int i = 0;i < a.length();i++) {             if(a.charAt(i) == '1') aco++;             if(b.charAt(i) == '1') bco++;         }         if(aco == 0 || bco == 0){             System.out.println(-1);             return;         }         if(aco == bco || n - aco + 1 == bco){         }else{             System.out.println(-1);             return;         }         int ez = 0,eo = 0,nez = 0,neo = 0;         for(int i = 0;i < n;i++){             if(a.charAt(i) == b.charAt(i)){                 if(a.charAt(i) == '1') eo++;                 else ez++;             }else{                 if(a.charAt(i) == '1') neo++;                 else nez++;             }         }         HashSet<String> vis = new HashSet<>();         Queue<String> que = new LinkedList<>();         vis.add(ez + "" "" + eo + "" "" + nez + "" "" + neo);         que.add(ez + "" "" + eo + "" "" + nez + "" "" + neo);         int level = 0;         while(que.size() > 0){             for(int s = que.size() - 1;s >= 0;s--) {                 String[] rem = que.remove().split("" "");                 int v1 = Integer.parseInt(rem[0]);                 int v2 = Integer.parseInt(rem[1]);                 int v3 = Integer.parseInt(rem[2]);                 int v4 = Integer.parseInt(rem[3]);                 if (v3 == 0 && v4 == 0) {                     System.out.println(level);                     return;                 }                 String first = (v4) + "" "" + (v3 + 1) + "" "" + (v2 - 1) + "" "" + (v1);                 if (vis.add(first)) que.add(first);                 String second = (v4 - 1) + "" "" + (v3) + "" "" + (v2) + "" "" + (v1 + 1);                 if (vis.add(second)) que.add(second);             }             level++;         }         System.out.println(-1);     }     public static void main(String[] args) throws Exception {         int tests = Integer.parseInt(br.readLine());         for (int test = 1; test <= tests; test++) {             solve();         }     } } ",0
475,"import java.io.*; import java.util.*; public class Main { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); PrintWriter out = new PrintWriter(outputStream); Task solver = new Task(); int tcCnt = in.nextInt(); for (int tc = 1; tc <= tcCnt; tc++) solver.solve(tc, in, out); out.close(); } static class Task { public void solve(int testNumber, InputReader in, PrintWriter out) { int n = in.nextInt(); int[] a = new int[n]; for (int i = 0; i < n; i++) { a[i] = in.nextInt(); } for (int mask = 1; mask < (int)(Math.pow(3, n)); mask++) { int copy = mask; int sum = 0; for (int idx = 0; idx < n; idx++) { int digit = copy % 3; sum += digit == 0 ? 0 : digit == 1 ? a[idx] : -a[idx]; copy = copy / 3; } if (sum == 0) { out.println(""YES""); return; } } out.println(""NO""); } } } ","import java.lang.*; import java.util.*; import java.io.*; import java.math.*; public class Main {     static void deal(int n,int[] arr) {         HashSet<Integer> hs = new HashSet<>();         int max = (int)Math.pow(3,n);         int[] sum = new int[max];         hs.add(0);         for(int i=1;i<max;i++) {             int s = 0;             int num = i;             int index = 0;             while(num>0) {                 int d = num % 3;                 num = num /3;                 if(d==1) {                     s+=arr[index];                 } else if(d==2) {                     s-=arr[index];                 }                 index++;             }             sum[i] = s;             if(s==0) {                 out.println(""YES"");                 return;             }             hs.add(sum[i]);         }         out.println(""NO"");     }      public static void main(String[] args) {         MyScanner sc = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));         int t = sc.nextInt();         for(int i=0;i<t;i++) {             int n = sc.nextInt();             int[] arr = new int[n];             for(int j=0;j<n;j++) {                 arr[j] = sc.nextInt();             }             deal(n,arr);         }         out.close();     }               public static PrintWriter out;                } ",0
476,"import java.io.*; import java.util.*; public class Main { public static void main(String[] args)throws Exception {     Main ob=new Main();     ob.fun(); } public void fun()throws Exception {     BufferedReader br=new BufferedReader(new InputStreamReader(System.in));     PrintWriter pw=new PrintWriter(System.out);     int t=Integer.parseInt(br.readLine());     while(t-->0)     {         int n=Integer.parseInt(br.readLine());         int ar[][]=new int [n][5];         int len[]=new int[n];         for(int i=0;i<n;i++)         {             String s=(br.readLine());             for(int j=0;j<s.length();j++)             {                 ar[i][s.charAt(j)-'a']++;                 len[i]=s.length();             }         }         int max=0;         for(int i=0;i<5;i++)         {             int num=fun2(ar,len,i);             max=Math.max(num,max);         }         pw.println(max);              }     pw.flush(); } public int fun2(int ar[][],int len[],int col) {     int ct=0;     int n=ar.length;     PriorityQueue<Integer> pq=new PriorityQueue<Integer>(Collections.reverseOrder());     for(int i=0;i<n;i++)     {         int dif=2*ar[i][col]-len[i];         pq.add(dif);     }     int sum=0;     while(pq.size()>0)     {         int num=(int)(pq.poll());         if((sum+num)>0)         {             ct++;             sum+=num;         }     }     return ct; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayDeque; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Random; import java.util.StringTokenizer; public class P4 { static int N = 1000001; static long[] factorialNumInverse = new long[N + 1]; static long[] naturalNumInverse = new long[N + 1]; static long[] fact = new long[N + 1]; public static void main(String[] args) { FastReader sc = new FastReader(); int t; t = sc.nextInt(); StringBuilder st = new StringBuilder(); while (t-- != 0) { int n=sc.nextInt(); String s[]=new String[n]; for(int i=0;i<n;i++) { s[i]=sc.nextLine(); } int max=0; ArrayList<Integer> freq=new ArrayList<>(); for(int i=0;i<5;i++) { int f1=0; freq=new ArrayList<>(); for(int j=0;j<n;j++) { f1=0; for(int k=0;k<s[j].length();k++) { if(s[j].charAt(k)==i+'a') { f1++; }else { f1--; } } freq.add(f1); } Collections.sort(freq); int x=0; int total=0; for(int j=n-1;j>=0;j--) { total=total+freq.get(j); if(total>0) { x++; }else { break; } } max=Math.max(max, x); } st.append(max+""\n""); } System.out.println(st); } static FastReader sc = new FastReader(); static void sort(int[] A) { int n = A.length; Random rnd = new Random(); for (int i = 0; i < n; ++i) { int tmp = A[i]; int randomPos = i + rnd.nextInt(n - i); A[i] = A[randomPos]; A[randomPos] = tmp; } Arrays.sort(A); } static void sort(long[] A) { int n = A.length; Random rnd = new Random(); for (int i = 0; i < n; ++i) { long tmp = A[i]; int randomPos = i + rnd.nextInt(n - i); A[i] = A[randomPos]; A[randomPos] = tmp; } Arrays.sort(A); } static String sort(String s) { Character ch[] = new Character[s.length()]; for (int i = 0; i < s.length(); i++) { ch[i] = s.charAt(i); } Arrays.sort(ch); StringBuffer st = new StringBuffer(""""); for (int i = 0; i < s.length(); i++) { st.append(ch[i]); } return st.toString(); } } ",0
477,"import java.io.*; import java.util.*; public class Main { public static void main(String[] args)throws Exception {     Main ob=new Main();     ob.fun(); } public void fun()throws Exception {     BufferedReader br=new BufferedReader(new InputStreamReader(System.in));     PrintWriter pw=new PrintWriter(System.out);     int t=Integer.parseInt(br.readLine());     while(t-->0)     {         int n=Integer.parseInt(br.readLine());         int ar[][]=new int [n][5];         int len[]=new int[n];         for(int i=0;i<n;i++)         {             String s=(br.readLine());             for(int j=0;j<s.length();j++)             {                 ar[i][s.charAt(j)-'a']++;                 len[i]=s.length();             }         }         int max=0;         for(int i=0;i<5;i++)         {             int num=fun2(ar,len,i);             max=Math.max(num,max);         }         pw.println(max);              }     pw.flush(); } public int fun2(int ar[][],int len[],int col) {     int ct=0;     int n=ar.length;     PriorityQueue<Integer> pq=new PriorityQueue<Integer>(Collections.reverseOrder());     for(int i=0;i<n;i++)     {         int dif=2*ar[i][col]-len[i];         pq.add(dif);     }     int sum=0;     while(pq.size()>0)     {         int num=(int)(pq.poll());         if((sum+num)>0)         {             ct++;             sum+=num;         }     }     return ct; } } ","import java.util.*; import java.io.*;  public class Solution { static FastScanner scr=new FastScanner(); static PrintStream out=new PrintStream(System.out); static StringBuilder sb=new StringBuilder(); static HashMap<Character,ArrayList<Integer>>hm=new HashMap<>(); static void solve() { int n=scr.nextInt(); int count[]=new int[5]; int store[][]=new int[n][5]; int max=MIN; int length[]=new int[n]; for(int i=0;i<n;i++) { String s=scr.next(); length[i]=s.length(); for(int j=0;j<s.length();j++) { store[i][s.charAt(j)-'a']++; count[s.charAt(j)-'a']++; } } for(int j=0;j<5;j++) { ArrayList<Integer>a=new ArrayList<>(); for(int i=0;i<n;i++) { a.add((store[i][j]*2)-length[i]); } Collections.sort(a,Collections.reverseOrder()); long sum=0; int ans=0; for(int i=0;i<a.size();i++) { sum+=a.get(i); if(sum>0) { ans++; }else { break; } } max=Math.max(max, ans); } out.println(max); } static int  MAX = Integer.MAX_VALUE; static int  MIN = Integer.MIN_VALUE; public static void main(String []args) { int t=scr.nextInt(); while(t-->0) { solve(); } } } ",0
478,"import java.io.*; import java.util.*; public class Main { static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static StringTokenizer st; static String next() throws IOException { while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine()); return st.nextToken(); } static int readInt() throws IOException { return Integer.parseInt(next()); } static String readLine() throws IOException { return br.readLine(); } static List<Integer> adj[]; static int n, a[][]; static long dp[][]; static void DFS(int v, int p) { for (int u : adj[v]) { if (u != p) { DFS(u, v); for (int i = 0; i <= 1; ++i) { long add = 0; for (int j = 0; j <= 1; ++j) add = Math.max(add, dp[u][j] + Math.abs(a[v][i] - a[u][j])); dp[v][i] += add; } } } } public static void main(String[] args) throws IOException { for (int t = readInt(); t > 0; --t) { n = readInt(); adj = new List[n + 1]; for (int i = 1; i <= n; ++i) adj[i] = new ArrayList(); a = new int[n + 1][2]; for (int i = 1; i <= n; ++i) { a[i][0] = readInt(); a[i][1] = readInt(); } for (int i = 1; i < n; ++i) { int u = readInt(), v = readInt(); adj[u].add(v); adj[v].add(u); } dp = new long[n + 1][2]; DFS(1, 0); System.out.println(Math.max(dp[1][0], dp[1][1])); } } } ","import java.io.*; import java.util.*;   public class Main { static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static StringTokenizer st; static String next() throws IOException { while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine()); return st.nextToken(); } static int readInt() throws IOException { return Integer.parseInt(next()); } static String readLine() throws IOException { return br.readLine(); } static List<Integer> adj[]; static int n, a[][]; static long dp[][]; static void DFS(int v, int p) { for (int u : adj[v]) { if (u != p) { DFS(u, v); for (int i = 0; i <= 1; ++i) { long add = 0; for (int j = 0; j <= 1; ++j) add = Math.max(add, dp[u][j] + Math.abs(a[v][i] - a[u][j])); dp[v][i] += add; } } } } public static void main(String[] args) throws IOException { for (int t = readInt(); t > 0; --t) { n = readInt(); adj = new List[n + 1]; for (int i = 1; i <= n; ++i) adj[i] = new ArrayList(); a = new int[n + 1][2]; for (int i = 1; i <= n; ++i) { a[i][0] = readInt(); a[i][1] = readInt(); } for (int i = 1; i < n; ++i) { int u = readInt(), v = readInt(); adj[u].add(v); adj[v].add(u); } dp = new long[n + 1][2]; DFS(1, 0); System.out.println(Math.max(dp[1][0], dp[1][1])); } } } ",1
479,"import java.io.*; import java.util.*; public class Main { static BufferedReader br; static PrintWriter pr; static int cin() throws Exception { return Integer.valueOf(br.readLine()); } static int[] split() throws Exception { String[] cmd=br.readLine().split("" ""); int[] ans=new int[cmd.length]; for(int i=0;i<cmd.length;i++) { ans[i]=Integer.valueOf(cmd[i]); } return ans; } public static void main(String[] args) throws Exception{ br=new BufferedReader(new InputStreamReader(System.in)); pr=new PrintWriter(new OutputStreamWriter(System.out)); int cases=cin(); while(cases!=0) { cases--; int[]ar=split();     int n=ar[0];     int m=ar[1];     int[][]mat=new int[n][m];     for(int i=0;i<n;i++)     {     String s=br.readLine();     for(int j=0;j<m;j++)     {     mat[i][j]=s.charAt(j)-'0';     }     }     ArrayList<String>ans=new ArrayList<>();     for(int i=0;i<n-1;i++)     {     for(int j=0;j<m-1;j++)     {     if(mat[i][j]==1 && mat[i][j+1]==0 && mat[i+1][j]==0 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==0 && mat[i+1][j]==0 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==1 && mat[i+1][j]==0 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==0 && mat[i+1][j]==1 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==1 && mat[i][j+1]==1 && mat[i+1][j]==1 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     }     else if(mat[i][j]==1 && mat[i][j+1]==0 && mat[i+1][j]==1 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==1 && mat[i][j+1]==1 && mat[i+1][j]==0 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==1 && mat[i+1][j]==1 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==1 && mat[i][j+1]==1 && mat[i+1][j]==1 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }          else if(mat[i][j]==1 && mat[i][j+1]==1 && mat[i+1][j]==0 && mat[i+1][j+1]==0)     {     ans.add((i+2)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==0 && mat[i+1][j]==1 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     }     else if(mat[i][j]==1 && mat[i][j+1]==0 && mat[i+1][j]==1 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==1 && mat[i+1][j]==0 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==1 && mat[i][j+1]==0 && mat[i+1][j]==0 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==1 && mat[i+1][j]==1 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     mat[i][j]=mat[i+1][j]=mat[i][j+1]=mat[i+1][j+1]=0;     }     }     System.out.println(ans.size());     for(int i=0;i<ans.size();i++)     {     System.out.println(ans.get(i));     } } } } ","import java.io.*; import java.util.*; public class Main { static BufferedReader br; static PrintWriter pr; static int cin() throws Exception { return Integer.valueOf(br.readLine()); } static int[] split() throws Exception { String[] cmd=br.readLine().split("" ""); int[] ans=new int[cmd.length]; for(int i=0;i<cmd.length;i++) { ans[i]=Integer.valueOf(cmd[i]); } return ans; } public static void main(String[] args) throws Exception{ br=new BufferedReader(new InputStreamReader(System.in)); pr=new PrintWriter(new OutputStreamWriter(System.out)); int cases=cin(); while(cases!=0) { cases--; int[]ar=split();     int n=ar[0];     int m=ar[1];     int[][]mat=new int[n][m];     for(int i=0;i<n;i++)     {     String s=br.readLine();     for(int j=0;j<m;j++)     {     mat[i][j]=s.charAt(j)-'0';     }     }     ArrayList<String>ans=new ArrayList<>();     for(int i=0;i<n-1;i++)     {     for(int j=0;j<m-1;j++)     {     if(mat[i][j]==1 && mat[i][j+1]==0 && mat[i+1][j]==0 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==0 && mat[i+1][j]==0 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==1 && mat[i+1][j]==0 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==0 && mat[i+1][j]==1 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==1 && mat[i][j+1]==1 && mat[i+1][j]==1 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     }     else if(mat[i][j]==1 && mat[i][j+1]==0 && mat[i+1][j]==1 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==1 && mat[i][j+1]==1 && mat[i+1][j]==0 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==1 && mat[i+1][j]==1 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==1 && mat[i][j+1]==1 && mat[i+1][j]==1 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }          else if(mat[i][j]==1 && mat[i][j+1]==1 && mat[i+1][j]==0 && mat[i+1][j+1]==0)     {     ans.add((i+2)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==0 && mat[i+1][j]==1 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     }     else if(mat[i][j]==1 && mat[i][j+1]==0 && mat[i+1][j]==1 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==1 && mat[i+1][j]==0 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==1 && mat[i][j+1]==0 && mat[i+1][j]==0 && mat[i+1][j+1]==1)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1));     ans.add((i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     else if(mat[i][j]==0 && mat[i][j+1]==1 && mat[i+1][j]==1 && mat[i+1][j+1]==0)     {     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+1)+"" ""+(j+2)+"" ""+(i+2)+"" ""+(j+2));     ans.add((i+1)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+1)+"" ""+(i+2)+"" ""+(j+2));     }     mat[i][j]=mat[i+1][j]=mat[i][j+1]=mat[i+1][j+1]=0;     }     }     System.out.println(ans.size());     for(int i=0;i<ans.size();i++)     {     System.out.println(ans.get(i));     } } } } ",1
480,"import java.io.*; import java.util.*; public class Main { static class Pair implements Comparable<Pair> { int f, s; Pair(int f, int s) { this.f = f; this.s = s; } } public static void main(String[] args) throws IOException { PriorityQueue<Pair> pq = new PriorityQueue(); for (int t = readInt(); t > 0; --t) { int n = readInt(), m = readInt(), x = readInt(); System.out.println(""YES""); for (int i = 1; i <= m; ++i) { pq.add(new Pair(readInt(), i)); System.out.print(i + "" ""); } for (int i = m + 1; i <= n; ++i) { Pair p = pq.poll(); p.f += readInt(); pq.add(p); System.out.print(p.s + "" ""); } System.out.println(); pq.clear(); } } static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static StringTokenizer st; static String next() throws IOException { while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine()); return st.nextToken(); } static int readInt() throws IOException { return Integer.parseInt(next()); } } ","import java.io.*; import java.util.*; public class Main { static class Pair implements Comparable<Pair> { int f, s; Pair(int f, int s) { this.f = f; this.s = s; } } public static void main(String[] args) throws IOException { PriorityQueue<Pair> pq = new PriorityQueue(); for (int t = readInt(); t > 0; --t) { int n = readInt(), m = readInt(), x = readInt(); System.out.println(""YES""); for (int i = 1; i <= m; ++i) { pq.add(new Pair(readInt(), i)); System.out.print(i + "" ""); } for (int i = m + 1; i <= n; ++i) { Pair p = pq.poll(); p.f += readInt(); pq.add(p); System.out.print(p.s + "" ""); } System.out.println(); pq.clear(); } } static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static StringTokenizer st; static String next() throws IOException { while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine()); return st.nextToken(); } static int readInt() throws IOException { return Integer.parseInt(next()); } } ",1
481,"import java.io.*; import java.util.*; public class Main { static final boolean INPUT_FROM_FILE = false; static final String INPUT_FILE = ""input/input.txt""; static final String OUTPUT_FILE = ""input/output.txt""; static final long M = (long) 1e9 + 7; static FastReader in; static FastWriter out; static { try { in = new FastReader(); out = new FastWriter(); } catch (Exception e) { e.printStackTrace(); } } public static void main(String[] args) throws IOException { int t = in.nextInt(); while (t-- > 0) solve(); out.close(); } static long[][] dp; static long dfs(List<List<Integer>> tree, int parent, int current, int parentState, int[][] vRange) { if(dp[current][parentState] != -1) { return dp[current][parentState]; } long left = Math.abs(vRange[current][0] - vRange[parent][parentState]); long right = Math.abs(vRange[current][1] - vRange[parent][parentState]); for(int child : tree.get(current)) { if(child != parent) { left += dfs(tree, current, child, 0, vRange); right += dfs(tree, current, child, 1, vRange); } } dp[current][parentState] = Math.max(left, right); return dp[current][parentState]; } private static void solve() { int n = in.nextInt(); int[][] vRange = new int[n+1][2]; for(int i=1; i<=n; i++) { int l = in.nextInt(), r = in.nextInt(); vRange[i][0] = l; vRange[i][1] = r; } List<List<Integer>> tree = new ArrayList<>(); for(int i=0; i<=n; i++) tree.add(new LinkedList<>()); for(int i=0; i<n-1; i++) { int u = in.nextInt(); int v = in.nextInt(); tree.get(u).add(v); tree.get(v).add(u); } dp = new long[n+1][2]; for(int i=0; i<=n; i++) { Arrays.fill(dp[i], -1); } long left = 0, right = 0; for(int v : tree.get(1)) { left += dfs(tree, 1, v, 0, vRange); right += dfs(tree, 1, v, 1, vRange); } out.println(Math.max(left, right)); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import static javax.swing.UIManager.get; import static javax.swing.UIManager.getString; public class Main {     static class Pair implements Comparable<Pair> {         int x = 0;         int y = 0;         public Pair(int x1, int y1) {             x = x1;             y = y1;         }              }                    static int min = Integer.MAX_VALUE;     public static void main(String[] args) throws IOException {         FastReader sc = new FastReader();                                      int t = sc.nextInt();         while (t-- > 0) {             int n =sc.nextInt();             ArrayList<ArrayList<Integer>> list = new ArrayList<>();             for(int i=0;i<n;i++)                 list.add(new ArrayList<Integer>());             ArrayList<Pair> list1 = new ArrayList<>();             for(int i=0;i<n;i++)             list1.add(new Pair(sc.nextInt(),sc.nextInt()));             for(int i=0;i<n-1;i++)             {                 int a =sc.nextInt()-1,b=sc.nextInt()-1;                 list.get(a).add(b);                 list.get(b).add(a);             }             long[][] dp = new long[2][n];             dfs(0,-1,dp,list,list1); System.out.println(Math.max(dp[0][0],dp[1][0]));         } } static void dfs(int u,int p,long[][] dp,ArrayList<ArrayList<Integer>> list,ArrayList<Pair> list1) {     for(int v:list.get(u))     {  if(v==p)         continue;         dfs(v,u,dp,list,list1);         dp[1][u]+= Math.max(Math.abs(list1.get(u).y-list1.get(v).x)+dp[0][v],Math.abs(list1.get(u).y-list1.get(v).y)+dp[1][v]);         dp[0][u]+=Math.max(Math.abs(list1.get(u).x-list1.get(v).x)+dp[0][v],Math.abs(list1.get(u).x-list1.get(v).y)+dp[1][v]);     } }                                                                                 } ",0
482,"import java.io.*; import java.util.*; public class Main { static int INF = (int)1e9 + 1; public static void main(String[] args) { FastScanner fs=new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); w:while(t-->0) { int n = fs.nextInt(); int[] k = fs.readArray(n); int[] h = fs.readArray(n); long ans = 0; int mtn = INF, prev = k[n-1]; for(int j=n-1; j>=0; j--) { if(mtn!=INF && mtn > k[j]) { int x = prev-mtn+1; ans += ((long)x*(x+1))/2; mtn = INF; prev = k[j]; } if(mtn >= k[j]-h[j]+1)  mtn = k[j]-h[j]+1; if(j==0) { int x = prev-mtn+1; ans += ((long)x*(x+1))/2; } } out.println(ans); } out.close(); }      } ","import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static int dp[];  static boolean v[];  static int mod=1000000007;  static int max;  static int bit[];    static HashMap<Integer,Integer> map;        static PrintWriter out=new PrintWriter(System.out);   public static void main(String[] args)   {     int ttt=1;        ttt =i();                outer :while (ttt-- > 0)          {         int n=i();         long A[]=inputL(n);         long B[]=inputL(n);         long C[]=new long[n];         for(int i=0;i<n;i++) {         C[i]=A[i]-B[i]+1;         }         long min=C[n-1];         long ans=0;         long last=A[n-1];         for(int i=n-1;i>=0;i--) {         if(C[i]>min) {         continue;         }         if(A[i]<min) {         long y=last-min+1;         ans+=y*(y+1)/2;         last=A[i];         min=C[i];         continue;         }                  min=C[i];                  }         long y=last-min+1;     ans+=y*(y+1)/2;         System.out.println(ans);         }               out.close();                                                              }              static long[] inputL(int n) { long A[]=new long[n];    for(int i=0;i<n;i++) {    A[i]=sc.nextLong();    }    return A;    }      static int i() {      return sc.nextInt();      }                                                                                           } ",0
483,"import java.io.*; import java.util.*; public class MainClass {     public static void main(String[] args) {         Reader in = new Reader(System.in);         int t = in.nextInt();         StringBuilder stringBuilder = new StringBuilder();         while (t-- > 0) {             ArrayList<Integer> reds = new ArrayList<>();             ArrayList<Integer> blue = new ArrayList<>();             int n = in.nextInt();             int[] a = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = in.nextInt() - 1;             }             char[] s = in.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (s[i] == 'R') {                     reds.add(a[i]);                 } else {                     blue.add(a[i]);                 }             }             Collections.sort(reds, Collections.reverseOrder());             Collections.sort(blue);             boolean ff = true;             int start = 0;             for (int i = 0; i < blue.size(); i++) {                 if (blue.get(i) < start) {                     ff = false;                     break;                 }                 start++;             }             start = n - 1;             for (int i = 0; i < reds.size(); i++) {                 if (reds.get(i) > start) {                     ff = false;                     break;                 }                 start--;             }             stringBuilder.append(ff?""YES"":""NO"").append(""\n"");         }         System.out.println(stringBuilder);     } } ","import java.io.*; import java.util.*; public class Main {     static long mod = 1000000007;               static InputReader sc = new InputReader(System.in);     static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) throws IOException {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] A = new int[n];             for (int i = 0; i < A.length; i++) {                 A[i] = sc.nextInt();             }             String word = sc.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < word.length(); i++) {                 if (word.charAt(i) == 'R') {                     red.add(A[i]);                 } else {                     blue.add(A[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             boolean possible = true;             int a = 1;             for (int i = 0; i < blue.size(); i++, a++) {                 if (blue.get(i) < a) {                     possible = false;                     break;                 }             }             for (int i = 0; i < red.size(); i++, a++) {                 if (red.get(i) > a) {                     possible = false;                     break;                 }             }             if (possible) out.println(""YES"");             else out.println(""NO"");         }         out.flush();         out.close();     }                } ",1
484,"import java.io.*; import java.util.*; public class MainClass {     public static void main(String[] args) {         Reader in = new Reader(System.in);         int t = in.nextInt();         StringBuilder stringBuilder = new StringBuilder();         while (t-- > 0) {             ArrayList<Integer> reds = new ArrayList<>();             ArrayList<Integer> blue = new ArrayList<>();             int n = in.nextInt();             int[] a = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = in.nextInt() - 1;             }             char[] s = in.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (s[i] == 'R') {                     reds.add(a[i]);                 } else {                     blue.add(a[i]);                 }             }             Collections.sort(reds, Collections.reverseOrder());             Collections.sort(blue);             boolean ff = true;             int start = 0;             for (int i = 0; i < blue.size(); i++) {                 if (blue.get(i) < start) {                     ff = false;                     break;                 }                 start++;             }             start = n - 1;             for (int i = 0; i < reds.size(); i++) {                 if (reds.get(i) > start) {                     ff = false;                     break;                 }                 start--;             }             stringBuilder.append(ff?""YES"":""NO"").append(""\n"");         }         System.out.println(stringBuilder);     } } ","import java.util.*; import java.io.*; import java.lang.*; import java.util.StringTokenizer; public class Solution {     static HritikScanner sc = new HritikScanner();     static PrintWriter pw = new PrintWriter(System.out, true);     static StringBuilder sb = new StringBuilder();     public static void main(String[] args) {         int t = ni();         while (t-- > 0) {             solve();         }     }     static void solve() {         int n = ni();         int[] arr = nextIntArray(n);         char[] col = sc.next().toCharArray();         int[] cB = new int[n+1];         int[] cR = new int[n+1];         for(int i = 0; i < n; i++)         {             if((col[i] == 'R' && arr[i] > n)||(col[i] == 'B' && arr[i] < 1))             {                 System.out.println(""NO"");                 return;             }             if(col[i] == 'B')             {                 if(arr[i] > n)                     continue;                 cB[arr[i]]++;                 if(cB[arr[i]] > arr[i])                 {                     System.out.println(""NO"");                     return;                 }             }             else             {                 if(arr[i] < 1)                     continue;                 cR[arr[i]]++;                 if(cR[arr[i]] > (n-(arr[i]-1)))                 {                     System.out.println(""NO"");                     return;                 }             }         }         int[] psum = new int[n+1];         for(int i = 1; i<= n; i++)         {             psum[i] = psum[i-1]+cB[i];             if(psum[i] > i)             {                 System.out.println(""NO"");                 return;             }         }         int[] psum1 = new int[n+1];         psum1[n] = cR[n];         for(int i = n-1; i>= 0; i--)         {             psum1[i] = psum1[i+1]+cR[i];             if(psum1[i] > (n-(i-1)))             {                 System.out.println(""NO"");                 return;             }         }                  System.out.println(""YES"");              }                        static int[] nextIntArray(int n) {         int[] arr = new int[n];         int i = 0;         while (i < n) {             arr[i++] = ni();         }         return arr;     }                    static int ni() {         return sc.nextInt();     }                                                                                                                                                                                } ",0
485,"import java.io.*; import java.util.*; public class MainClass {     public static void main(String[] args) {         Reader in = new Reader(System.in);         int t = in.nextInt();         StringBuilder stringBuilder = new StringBuilder();         while (t-- > 0) {             ArrayList<Integer> reds = new ArrayList<>();             ArrayList<Integer> blue = new ArrayList<>();             int n = in.nextInt();             int[] a = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = in.nextInt() - 1;             }             char[] s = in.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (s[i] == 'R') {                     reds.add(a[i]);                 } else {                     blue.add(a[i]);                 }             }             Collections.sort(reds, Collections.reverseOrder());             Collections.sort(blue);             boolean ff = true;             int start = 0;             for (int i = 0; i < blue.size(); i++) {                 if (blue.get(i) < start) {                     ff = false;                     break;                 }                 start++;             }             start = n - 1;             for (int i = 0; i < reds.size(); i++) {                 if (reds.get(i) > start) {                     ff = false;                     break;                 }                 start--;             }             stringBuilder.append(ff?""YES"":""NO"").append(""\n"");         }         System.out.println(stringBuilder);     } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",1
486,"import java.io.*; import java.util.*; public class Main{                          public static void main(String[] args) throws Exception {     FastReader sc = new FastReader();         int t=sc.nextInt();       while(t-->0)   {       int n=sc.nextInt();       long k[]=new long[n];       for(int i=0;i<n;i++)       {           k[i]=sc.nextLong();       }       long h[]=new long[n];       for(int i=0;i<n;i++)       {           h[i]=sc.nextLong();       }       ArrayList<Long> al=new ArrayList<>();       long csp=h[n-1],idx=k[n-1]-h[n-1];       for(int i=n-2;i>=0;i--)       {           if(idx<k[i])           {               if(k[i]-idx<h[i])               {                   long diff=h[i]-(k[i]-idx);                   csp+=diff;                   idx-=diff;               }           }           else           {               al.add(csp);               csp=h[i];               idx=k[i]-csp;           }                 }       long sum=0;       al.add(csp);       for(long i:al)       {          sum=sum+((i*(i+1))/2);       }       System.out.println(sum);         } } } ",import java.io.*; import java.util.*; public class a {     public static void main(String[] args){         FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             long time[] = new long[n];             long health[] = new long[n];             for(int i=0; i<n; i++){                 long temp = sc.nextLong();                 time[i] = temp;             }             for(int i=0; i<n; i++){                 long temp = sc.nextLong();                 health[i] = temp;             }             long ans = 0L;             int peak = n-1;             int end = n-1;             for(int i=n-1; i>=0; i--){                 if(i == n-1){                     ans += (health[i]*(health[i]+1))/2;                     continue;                 }                 if(health[peak] - (time[peak]-time[i]) <= 0){                     peak = i;                     end = i;                     ans += (health[i]*(health[i]+1))/2;                 }                 else if(health[peak] - (time[peak]-time[i]) < health[i]){                     long val = health[peak] + (time[end]-time[peak]);                      ans -= (val*(val+1))/2;                                          val = health[i] + (time[end]-time[i]);                     ans += (val*(val+1))/2;                                          peak = i;                 }             }             System.out.println(ans);         }     } } ,0
487,"import java.io.*; import java.util.*; public class Menorah {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         StringBuilder sb = new StringBuilder();         while (t-->0){             int n = sc.nextInt();             char[] a = sc.next().toCharArray();             char[] b = sc.next().toCharArray();             int a1=0, b1=0;             for(int i=0;i<n;i++){                 if(a[i]=='1')                     a1++;                 if(b[i]=='1')                     b1++;             }             int min = 100000000;             if(a1==b1){                 int c = 0;                 for(int i=0;i<n;i++){                     if(a[i]!=b[i])                         c++;                 }                 min = Math.min(min, c);             }             if(b1==(n-a1+1)){                 int ind = -1;                 for(int i=0;i<n;i++){                     if(a[i]==b[i] && a[i]=='1'){                         ind = i;                         break;                     }                 }                 int c = 0;                 for(int i=0;i<n;i++){                     if(i==ind)                         continue;                     if(a[i]==b[i])                         c++;                 }                 min = Math.min(min, c + 1);             }             if(min == 100000000)                 sb.append(""-1\n"");             else sb.append(min).append(""\n"");         }         System.out.println(sb);         sc.close();     } } ","import java.io.*; import java.util.*; public class B { public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); PrintWriter output = new PrintWriter(System.out); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); char initial[] = scan.next().toCharArray(); char desired[] = scan.next().toCharArray(); int lit1 = 0, lit2 = 0; int ans = Integer.MAX_VALUE; for(int i = 0;i<n;i++) { if(initial[i]=='1') lit1++; if(desired[i]=='1') lit2++; } if(lit1==lit2) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]!=desired[i]) count++; ans = Math.min(ans, count); } if(lit2==(n-lit1+1)) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]==desired[i]) count++; ans = Math.min(ans, count); } if(ans == Integer.MAX_VALUE) ans = -1; output.println(ans); } output.flush(); } } ",0
488,"import java.io.*; import java.util.*; public class Menorah {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         StringBuilder sb = new StringBuilder();         while (t-->0){             int n = sc.nextInt();             char[] a = sc.next().toCharArray();             char[] b = sc.next().toCharArray();             int a1=0, b1=0;             for(int i=0;i<n;i++){                 if(a[i]=='1')                     a1++;                 if(b[i]=='1')                     b1++;             }             int min = 100000000;             if(a1==b1){                 int c = 0;                 for(int i=0;i<n;i++){                     if(a[i]!=b[i])                         c++;                 }                 min = Math.min(min, c);             }             if(b1==(n-a1+1)){                 int ind = -1;                 for(int i=0;i<n;i++){                     if(a[i]==b[i] && a[i]=='1'){                         ind = i;                         break;                     }                 }                 int c = 0;                 for(int i=0;i<n;i++){                     if(i==ind)                         continue;                     if(a[i]==b[i])                         c++;                 }                 min = Math.min(min, c + 1);             }             if(min == 100000000)                 sb.append(""-1\n"");             else sb.append(min).append(""\n"");         }         System.out.println(sb);         sc.close();     } } ","import java.util.*; public class Main {     public static void main(String args[]) {         Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t-- > 0){             int n = s.nextInt();             String a = s.next();             String b = s.next();             int a1 = 0, b1 = 0;             for (char c: a.toCharArray()){                 if (c == '1') a1++;             }             for (char c: b.toCharArray()){                 if (c == '1') b1++;             }             int ans = Integer.MAX_VALUE;             int res = 0;             for (int i = 0; i < n; i++) {                 if (a.charAt(i) != b.charAt(i)) res++;             }             if (a1 == b1) ans = Math.min(ans, res);             if (b1 == n-a1+1) ans = Math.min(ans, n-res);             if (ans == Integer.MAX_VALUE){                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         }     } } ",0
489,"import java.io.*; import java.util.*; public class Menorah {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         StringBuilder sb = new StringBuilder();         while (t-->0){             int n = sc.nextInt();             char[] a = sc.next().toCharArray();             char[] b = sc.next().toCharArray();             int a1=0, b1=0;             for(int i=0;i<n;i++){                 if(a[i]=='1')                     a1++;                 if(b[i]=='1')                     b1++;             }             int min = 100000000;             if(a1==b1){                 int c = 0;                 for(int i=0;i<n;i++){                     if(a[i]!=b[i])                         c++;                 }                 min = Math.min(min, c);             }             if(b1==(n-a1+1)){                 int ind = -1;                 for(int i=0;i<n;i++){                     if(a[i]==b[i] && a[i]=='1'){                         ind = i;                         break;                     }                 }                 int c = 0;                 for(int i=0;i<n;i++){                     if(i==ind)                         continue;                     if(a[i]==b[i])                         c++;                 }                 min = Math.min(min, c + 1);             }             if(min == 100000000)                 sb.append(""-1\n"");             else sb.append(min).append(""\n"");         }         System.out.println(sb);         sc.close();     } } ","import java.util.Scanner; public class Menorah {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             char initial[] = sc.next().toCharArray();             char desired[] = sc.next().toCharArray();             int lit1 = 0, lit2 = 0;             int ans = Integer.MAX_VALUE;             for (int i = 0; i < n; i++) {                 if (initial[i] == '1') {                     ++lit1;                 }                 if (desired[i] == '1') {                     ++lit2;                 }             }             if (lit1 == lit2) {                 int count = 0;                 for (int i = 0; i < n; i++) {                     if (initial[i] != desired[i]) {                         ++count;                     }                 }                 ans = Math.min(count, ans);             }             if (lit2 == (n - lit1 + 1)) {                 int count = 0;                 for (int i = 0; i < n; i++) {                     if (initial[i] == desired[i]) {                         ++count;                     }                 }                 ans = Math.min(ans, count);             }             if (ans == Integer.MAX_VALUE) {                 System.out.println(-1);             } else {                 System.out.println(ans);             }         }     } } ",1
490,"import java.io.*; import java.util.*; public class Menorah { public static void main(String[] args) throws Exception { FastIO in = new FastIO(); int t = in.nextInt(); for (int tc=0; tc<t; tc++) { int n = in.nextInt(); String original = in.next(); String target = in.next(); int numDiff = 0; int original1 = 0; int target1 = 0; for (int i=0; i<n; i++) { if (original.charAt(i)!=target.charAt(i)) { numDiff++; } if (original.charAt(i)=='1') original1++; if (target.charAt(i)=='1') target1++; } int evenAns = Integer.MAX_VALUE; int oddAns = Integer.MAX_VALUE; if (original1==target1) { evenAns = numDiff; } for (int i=0; i<n; i++) { if (original.charAt(i)=='1' && target.charAt(i)=='1') { int ones = (n-original1)+1; if (ones==target1) { oddAns = n-numDiff; } break; } } for (int i=0; i<n; i++) { if (original.charAt(i)=='1' && target.charAt(i)=='0') { int ones = (n-original1)+1; if (ones==target1) { oddAns = Math.min(n-numDiff+1, oddAns); } break; } } int ans = Math.min(evenAns, oddAns); if (ans==Integer.MAX_VALUE) System.out.println(-1); else System.out.println(ans); } } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         int sm, n;         while(t > 0) {             t--;             n = sc.nextInt();             String s1,s2;             s1 = sc.next();             s2 = sc.next();             int a[] = new int[4];             a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0;             for(int i = 0 ; i < n ; i++) {                 if(s1.charAt(i) == '0'&& s2.charAt(i) == '1') a[0]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '0') a[1]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '1') a[2]++;                 else a[3]++;             }                          int n1 = Integer.MAX_VALUE, n2 = Integer.MAX_VALUE, n3 = Integer.MAX_VALUE;                          if (a[0] == a[1]) {                 n1 = 2*a[0];             }             if((a[2] - 1) == a[3]) {                                  n2 = 2*a[3] + 1;             }              if((a[3] + 1) == a[2]) {                                  n3 = 2*a[2] + 1;             }              int ans = Math.min(n1, Math.min(n2,n3));             if(ans == Integer.MAX_VALUE) {                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         } } } ",0
491,"import java.io.*; import java.util.*; public class MonstersAndSpells { public static PrintWriter out; public static void main(String[] args)throws IOException {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st=new StringTokenizer(br.readLine());         out=new PrintWriter(System.out);         int t=Integer.parseInt(st.nextToken());         while(t-->0) {         st=new StringTokenizer(br.readLine());         int n=Integer.parseInt(st.nextToken());         int time[]=new int[n];         int health[]=new int[n];         st=new StringTokenizer(br.readLine());         for(int i=0;i<n;i++) {         time[i]=Integer.parseInt(st.nextToken());         }         st=new StringTokenizer(br.readLine());         for(int i=0;i<n;i++) {         health[i]=Integer.parseInt(st.nextToken());         }         State a[]=new State[n];         for(int i=0;i<n;i++) {         a[i]=new State(time[i]-health[i], time[i]);         }         Arrays.sort(a);         long ans=0;         for(int i=0;i<n;i++) {         int j=i+1;         int max=a[i].time;         while(j<n&&a[j].x<max) {         max=Math.max(max, time[j]);         j++;         }         ans+=((long)(max-a[i].x)*(long)(max-a[i].x+1))/2;         i=j-1;         }         out.println(ans);         }         out.close(); } static class State implements Comparable<State>{ int x, time; public State(int x, int time) { this.x=x;this.time=time; } } } ",import java.io.*; import java.util.*; public class c {     public static void main(String[] args) throws Exception {         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int numcases = Integer.parseInt(in.readLine());         for(int casenum = 0; casenum < numcases; casenum++){             int n = Integer.parseInt(in.readLine());             long[] t = new long[n];             long[] h = new long[n];             StringTokenizer tokenizer = new StringTokenizer(in.readLine());             for(int i = 0; i < n; i++){                 t[i] = Integer.parseInt(tokenizer.nextToken());             }             tokenizer = new StringTokenizer(in.readLine());             for(int i = 0; i < n; i++){                 h[i] = Integer.parseInt(tokenizer.nextToken());             }             long mana = 0;             int index = 0;             while(index < n){                 long start = t[index] - h[index];                 long end = t[index];                 for(int i = index+1; i < n; i++){                     if(t[i] - h[i] < start){                         start = t[i] - h[i];                         end = t[i];                         index = i;                     }                     else if(t[i] - end < h[i]){                         end = t[i];                         index = i;                     }                 }                 mana += (end - start + 1) * (end - start) / 2;                 index++;             }             System.out.println(mana);         }         in.close();         out.close();     } } ,0
492,"import java.io.*; import java.util.*; public class MyClass {     public static void pA(int[]a){         for(int i=0;i<a.length;i++){             System.out.print(a[i]+"" "");         }         System.out.println();     }     public static void main(String args[])throws IOException {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int t=Integer.parseInt(br.readLine());         while(t-->0){             int n=Integer.parseInt(br.readLine());             String s[]=br.readLine().split("" "");             int arr[]=new int[n];             int a[]=new int[n];             for(int i=0;i<n;i++) arr[i]=Integer.parseInt(s[i]);             if(n%2==0){                 for(int i=0;i<n-1;i+=2){                     a[i]=arr[i+1];                     a[i+1]=-1*arr[i];                 }             }             else{                 if(arr[1]+arr[2]!=0){                     a[0]=arr[1]+arr[2];                     a[1]=-1*arr[0];                     a[2]=-1*arr[0];                 }                 else if(arr[0]+arr[1]!=0){                     a[2]=arr[0]+arr[1];                     a[0]=-1*arr[2];                     a[1]=-1*arr[2];                 }                 else{                     a[1]=arr[0]+arr[2];                     a[0]=-1*arr[1];                     a[2]=-1*arr[1];                 }                 for(int i=3;i<n-1;i+=2){                     a[i]=arr[i+1];                     a[i+1]=-1*arr[i];                 }             }             pA(a);         }     } } ","import java.io.*; import java.util.*;   public class cf {       public static void main(String[] args){           FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){    int n=sc.nextInt();             int arr[]=new int[n];             for(int i=0;i<n;i++){                 arr[i]=sc.nextInt();             }             int ans[]=new int[n];             if(n%2==0){                 for(int i=0;i<n;i=i+2){                     ans[i]=-arr[i+1];                     ans[i+1]=arr[i];                 }             }             else{                 if(arr[0]+arr[1]!=0){                     ans[0]=-arr[2];                     ans[1]=-arr[2];                     ans[2]=arr[0]+arr[1];                 }                 else{                     if(arr[1]+arr[2]!=0){                         ans[1]=-arr[0];                         ans[2]=-arr[0];                         ans[0]=arr[1]+arr[2];                     }                     else{                         ans[0]=-arr[1];                         ans[2]=-arr[1];                         ans[1]=arr[0]+arr[2];                     }                 }                 for(int i=3;i<n;i=i+2){                     ans[i]=-arr[i+1];                     ans[i+1]=arr[i];                 }             }             for(int j=0;j<n;j++){                 System.out.print(ans[j]+"" "");             }             System.out.println();                                                                                        }                        }                    } ",0
493,"import java.io.*; import java.util.*; public class Nov1P4 {     public static void main(String[] args) {         MyScanner sc = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));         long o = sc.nextInt();         for(long i = 0; i < o; i++)         {             int n = sc.nextInt();             long[] m = new long[n];             for(int j = 0; j < n; j++)             {                 m[j] = sc.nextLong();             }             String str = sc.nextLine();             ArrayList<Long> a = new ArrayList<Long>();             ArrayList<Long> b = new ArrayList<Long>();             for(int j = 0; j < n; j++)             {                 if(str.charAt(j) == 'B')                 {                     b.add(m[j]);                 }                 else                 {                     a.add(m[j]);                 }             }             Collections.sort(a);             Collections.sort(b);             boolean tf = true;             for(int j = 0; j < b.size(); j++)             {                 if(b.get(j) < (j+1) && tf)                 {                     out.println(""NO"");                     tf = false;                 }             }             for(int j = 0; j < a.size(); j++)             {                 if(a.get(j) > j+1+b.size() && tf)                 {                     out.println(""NO"");                     tf = false;                 }             }             if(tf)                 out.println(""YES"");         }                                  out.close();     }          public static PrintWriter out;                } ","import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int  t=sc.nextInt(); while(t-- >0) { int n=sc.nextInt(); int[] arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextInt(); } String str=sc.next(); ArrayList<Pair> plist=new ArrayList<>(); for(int i=0;i<n;i++) { char ch=str.charAt(i); plist.add(new Pair(arr[i],ch)); } Collections.sort(plist); int counter=1; boolean flag=false; for(int i=0;i<plist.size();i++) { int val=plist.get(i).number; int clr=plist.get(i).color; if(clr=='B') { if(val<counter) { flag=true; break; } } else { if(val>counter) { flag=true; break; } } counter++; } System.out.println(flag?""NO"":""YES""); } } public static class Pair implements Comparable<Pair>{ int number; char color; Pair(int number,char color){ this.number=number; this.color=color; } } } ",0
494,"import java.io.*; import java.util.*; public class ParsasHumongousTree {               static class Pair     {     int a;     int b;     public Pair(int a, int b)     {     this.a=a;     this.b=b;     }     }     static HashMap<Integer,List<Integer>> edge=new HashMap();     static Pair a[];     static long dp[][];     static void dfs(int node, int parent)     {         for(int i:edge.get(node))         {             if(i!=parent)             {                 dfs(i,node);                 dp[node][0]+=Math.max(Math.abs(a[node].a-a[i].a)+dp[i][0],Math.abs(a[node].a-a[i].b)+dp[i][1]);                 dp[node][1]+=Math.max(Math.abs(a[node].b-a[i].a)+dp[i][0],Math.abs(a[node].b-a[i].b)+dp[i][1]);             }         }     }     public static void main(String args[])     {         FastReader sc=new FastReader();         Output out=new Output(System.out);         int t=sc.nextInt();         while(t-->0)         {             int n=sc.nextInt();             a=new Pair[n+1];             edge.clear();             for(int i=1;i<n+1;i++)             {                 int l=sc.nextInt();                 int r=sc.nextInt();                 Pair p=new Pair(l,r);                 a[i]=p;             }             for(int i=0;i<n-1;i++)             {                 int u=sc.nextInt();                 int v=sc.nextInt();                 if(edge.containsKey(u))                 {                     List<Integer> list=edge.get(u);                     list.add(v);                     edge.put(u,list);                 }                 else                 {                     List<Integer> list=new ArrayList();                     list.add(v);                     edge.put(u,list);                 }                 if(edge.containsKey(v))                 {                     List<Integer> list=edge.get(v);                     list.add(u);                     edge.put(v,list);                 }                 else                 {                     List<Integer> list=new ArrayList();                     list.add(u);                     edge.put(v,list);                 }             }             dp=new long[n+1][2];             dfs(1,0);             out.printLine(((long)Math.max(dp[1][0],dp[1][1])));             out.flush();         }     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import static javax.swing.UIManager.get; import static javax.swing.UIManager.getString; public class Main {     static class Pair implements Comparable<Pair> {         int x = 0;         int y = 0;         public Pair(int x1, int y1) {             x = x1;             y = y1;         }              }                    static int min = Integer.MAX_VALUE;     public static void main(String[] args) throws IOException {         FastReader sc = new FastReader();                                      int t = sc.nextInt();         while (t-- > 0) {             int n =sc.nextInt();             ArrayList<ArrayList<Integer>> list = new ArrayList<>();             for(int i=0;i<n;i++)                 list.add(new ArrayList<Integer>());             ArrayList<Pair> list1 = new ArrayList<>();             for(int i=0;i<n;i++)             list1.add(new Pair(sc.nextInt(),sc.nextInt()));             for(int i=0;i<n-1;i++)             {                 int a =sc.nextInt()-1,b=sc.nextInt()-1;                 list.get(a).add(b);                 list.get(b).add(a);             }             long[][] dp = new long[2][n];             dfs(0,-1,dp,list,list1); System.out.println(Math.max(dp[0][0],dp[1][0]));         } } static void dfs(int u,int p,long[][] dp,ArrayList<ArrayList<Integer>> list,ArrayList<Pair> list1) {     for(int v:list.get(u))     {  if(v==p)         continue;         dfs(v,u,dp,list,list1);         dp[1][u]+= Math.max(Math.abs(list1.get(u).y-list1.get(v).x)+dp[0][v],Math.abs(list1.get(u).y-list1.get(v).y)+dp[1][v]);         dp[0][u]+=Math.max(Math.abs(list1.get(u).x-list1.get(v).x)+dp[0][v],Math.abs(list1.get(u).x-list1.get(v).y)+dp[1][v]);     } }                                                                                 } ",0
495,"import java.io.*; import java.util.*; public class PheonixAndTowers { public static void main(String[] args)throws Exception{ new PheonixAndTowers().run();}  long mod=1000000000+7; void solve() throws Exception { for(int tt=ni();tt>0;tt--){ int n = ni(); int m =ni(); int x =ni(); int[] a = new int[n]; for(int i=0;i<n;i++){ a[i] =ni(); } PriorityQueue<Pair> pq = new PriorityQueue<>(); for(int i=1;i<=m;i++) pq.add(new Pair(i)); out.println(""YES""); for(int i:a){ Pair r = pq.remove(); r.sum+=i; pq.add(r); out.print(r.id+"" ""); } out.println(); } } class Pair implements Comparable<Pair>{ int id; long sum=0; public Pair(int i){ this.id=i; } }   private byte[] buf=new byte[1024]; private int index; private InputStream in; private int total; private SpaceCharFilter filter; PrintWriter out;   void run()throws Exception { in=System.in; out = new PrintWriter(System.out); solve(); out.flush(); } private int scan()throws IOException { if(total<0) throw new InputMismatchException(); if(index>=total) { index=0; total=in.read(buf); if(total<=0) return -1; } return buf[index++]; } private int ni() throws IOException  { int c = scan(); while (isSpaceChar(c)) c = scan(); int sgn = 1; if (c == '-') { sgn = -1; c = scan(); } int res = 0; do { if (c < '0' || c > '9') throw new InputMismatchException(); res *= 10; res += c - '0'; c = scan(); } while (!isSpaceChar(c)); return res * sgn; } private boolean isWhiteSpace(int n) { if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1) return true; return false; } private boolean isSpaceChar(int c) { if (filter != null) return filter.isSpaceChar(c); return isWhiteSpace(c); } private interface SpaceCharFilter { public boolean isSpaceChar(int ch); } } ","import java.io.*; import java.util.*; public class ques3 { public static void main(String[] args)throws Exception{ new ques3().run();}  long mod=1000000000+7; void solve() throws Exception { for(int ii=ni();ii>0;ii--) { int n=ni(); int m=ni(); int x=ni(); long h[]=new long[n]; for (int i = 0; i <n; i++)  h[i]=nl(); int dp[]=new int[n]; PriorityQueue<long[]> pq=new PriorityQueue<long[]>(new Comparator<long[]>() { }); for (int i = 1; i <=m; i++)  pq.add(new long[] {i,0}); for(int i=0;i<n;i++) { long tem[]=pq.poll(); tem[1]+=h[i]; dp[i]=(int)tem[0]; pq.add(tem); } long min=Integer.MAX_VALUE; long max=Integer.MIN_VALUE; while(!pq.isEmpty()) { long tem[]=pq.poll(); min=Math.min(min,tem[1]); max=Math.max(max,tem[1]); } if(max-min>x) { out.println(""NO""); } else { out.println(""YES""); for (int i = 0; i < dp.length; i++) { out.print(dp[i]+"" ""); } out.println(); } } } private byte[] buf=new byte[1024]; private int index; private InputStream in; private int total; private SpaceCharFilter filter; PrintWriter out;   void run()throws Exception { in=System.in; out = new PrintWriter(System.out); solve(); out.flush(); } private int scan()throws IOException { if(total<0) throw new InputMismatchException(); if(index>=total) { index=0; total=in.read(buf); if(total<=0) return -1; } return buf[index++]; } private int ni() throws IOException  { int c = scan(); while (isSpaceChar(c)) c = scan(); int sgn = 1; if (c == '-') { sgn = -1; c = scan(); } int res = 0; do { if (c < '0' || c > '9') throw new InputMismatchException(); res *= 10; res += c - '0'; c = scan(); } while (!isSpaceChar(c)); return res * sgn; } private long nl() throws IOException  { long num = 0; int b; boolean minus = false; while ((b = scan()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ; if (b == '-') { minus = true; b = scan(); } while (true) { if (b >= '0' && b <= '9') { num = num * 10 + (b - '0'); } else { return minus ? -num : num; } b = scan(); } } private boolean isWhiteSpace(int n) { if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1) return true; return false; } private boolean isSpaceChar(int c) { if (filter != null) return filter.isSpaceChar(c); return isWhiteSpace(c); } private interface SpaceCharFilter { public boolean isSpaceChar(int ch); } } ",0
496,"import java.io.*; import java.util.*; public class PhoenixAndTowers { public static void main(String[] args) throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); PrintWriter out = new PrintWriter(System.out); int T = Integer.parseInt(in.readLine()); for (int i = 0; i < T; i++) { StringTokenizer st = new StringTokenizer(in.readLine()); int N = Integer.parseInt(st.nextToken()); int M = Integer.parseInt(st.nextToken()); int X = Integer.parseInt(st.nextToken()); PriorityQueue<Tower> towers = new PriorityQueue<Tower>(); for (int j = 1; j <= M; j++) towers.add(new Tower(j, 0)); out.println(""YES""); st = new StringTokenizer(in.readLine()); for (int j = 0; j < N; j++) { Tower t = towers.remove(); t.size += Integer.parseInt(st.nextToken()); towers.add(t); out.print(t.idx + "" ""); } out.println(); } out.close(); in.close(); } public static class Tower implements Comparable<Tower> { int idx, size; public Tower(int idx, int size) { this.idx = idx; this.size = size; } } } ","import java.io.*; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.util.HashMap; import java.util.Map; import java.util.*; import java.io.*; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.*; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.math.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Vector; import static java.lang.Math.sqrt; import static java.lang.Math.floor; public class topcoder {     static class pairr implements  Comparable<pairr>{ Integer value; Integer index;    public pairr(Integer value, Integer index) {     this.value = value;     this.index = index;    }     }                                                                                                              public static int add(long n, long num, long a, int i) {   if(num > n)return -1;   if(num == n) {      return i;   }    if(a < 2050)return -1;        long temp = num+a;      if(temp <= n) { return  add(n,temp,a,i+1);   }else if(temp > n){   a /= 10;   return add(n,num,a,i);   }          return -1;   }                                                    public static void main(String args[])throws IOException{             BufferedReader ob = new BufferedReader(new InputStreamReader(System.in));                     int t = Integer.parseInt(ob.readLine());                  while( t--> 0) {          StringTokenizer st = new StringTokenizer(ob.readLine());      int n = Integer.parseInt(st.nextToken());      int m = Integer.parseInt(st.nextToken());      int x = Integer.parseInt(st.nextToken());            int []ar = new int[n];      st = new StringTokenizer(ob.readLine());      PriorityQueue<Integer>pq = new PriorityQueue<>();            for(int i = 0; i < n; i++) {      ar[i] = Integer.parseInt(st.nextToken());      pq.add(ar[i]);      }                 PriorityQueue<pairr>p = new PriorityQueue<>();     for(int i =0; i < n; i++) {     p.add(new pairr(ar[i],i));     }     int []ans = new int[n];               for(int i = 0; i < n; i++) {     pairr a = p.poll();     ans[a.index] = (i%m)+1;     }          System.out.println(""YES"");     for(int i = 0; i < n; i++ ) {     System.out.print(ans[i]+"" "");     }     System.out.println();      }     } } ",0
497,"import java.io.*; import java.util.*; public class PhoenixAndTowers { public static void main(String[] args) throws IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); PrintWriter out = new PrintWriter(System.out); int T = Integer.parseInt(in.readLine()); for (int i = 0; i < T; i++) { StringTokenizer st = new StringTokenizer(in.readLine()); int N = Integer.parseInt(st.nextToken()); int M = Integer.parseInt(st.nextToken()); int X = Integer.parseInt(st.nextToken()); PriorityQueue<Tower> towers = new PriorityQueue<Tower>(); for (int j = 1; j <= M; j++) towers.add(new Tower(j, 0)); out.println(""YES""); st = new StringTokenizer(in.readLine()); for (int j = 0; j < N; j++) { Tower t = towers.remove(); t.size += Integer.parseInt(st.nextToken()); towers.add(t); out.print(t.idx + "" ""); } out.println(); } out.close(); in.close(); } public static class Tower implements Comparable<Tower> { int idx, size; public Tower(int idx, int size) { this.idx = idx; this.size = size; } } } ","import java.util.*; import java.lang.*; import java.io.*; public class Template { static class Pair implements Comparable<Pair> { int h; int ind; Pair(int h, int ind) { this.h = h; this.ind = ind; } } public static void main(String[] args) { FastReader fs=new FastReader(); int T=fs.nextInt(); for (int tt=0; tt<T; tt++) { int n = fs.nextInt(); int m = fs.nextInt(); int x = fs.nextInt(); if(n < m) { System.out.println(""NO""); continue; } Pair a[] = new Pair[n]; PriorityQueue<Pair> heap = new PriorityQueue<>(); for(int i=0;i<n;i++) { a[i] = new Pair(fs.nextInt(), i); } Arrays.sort(a); for(int i=1;i<=m;i++) { heap.add(new Pair(0, i)); } int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; int ans[] = new int[n]; int idx = 0; while(!heap.isEmpty() && idx < n) { Pair curr = heap.poll(); curr.h += a[idx].h; ans[a[idx].ind] = curr.ind; heap.add(new Pair(curr.h,  curr.ind)); idx++; } System.out.println(""YES""); for(int i:ans) System.out.print(i+"" ""); System.out.println(); } } } ",0
498,"import java.io.*; import java.util.*; public class PhoenixAndTowers { static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); static StringTokenizer st; static class Pair implements Comparable<Pair> { int val, idx; Pair (int val, int idx) { this.val = val; this.idx = idx; } } public static void main(String[] args) throws IOException { int T = readInt(); for (int t = 0; t < T; t ++) { int n = readInt(), m = readInt(), x = readInt(); Pair[] h = new Pair[n + 1]; h[0] = new Pair(100000, 0); for (int i = 1; i <= n; i ++) h[i] = new Pair(readInt(), i); Arrays.sort(h, Collections.reverseOrder()); int[] ans = new int[n + 1], sum = new int[m + 1]; PriorityQueue<Pair> q = new PriorityQueue<Pair>(); for (int i = 1; i <= m; i ++) q.add(new Pair(0, i)); for (int i = 1; i <= n; i ++) { Pair p = q.poll(); sum[p.idx] += h[i].val; ans[h[i].idx] = p.idx; q.add(new Pair(p.val + h[i].val, p.idx)); } int max = 0, min = Integer.MAX_VALUE; for (int i = 1; i <= m; i ++) { max = Math.max(max, sum[i]); min = Math.min(min, sum[i]); } if (max - min > x) System.out.println(""NO""); else { System.out.println(""YES""); for (int i = 1; i < n; i ++) System.out.print(ans[i] + "" ""); System.out.println(ans[n]); } } } static String next() throws IOException { while (st == null || !st.hasMoreTokens())  st = new StringTokenizer(br.readLine().trim()); return st.nextToken(); } static int readInt() throws IOException { return Integer.parseInt(next()); } static String readLine() throws IOException { return br.readLine().trim(); } } ","import java.util.*; import java.lang.*; import java.io.*; public class C {     static class Tower implements Comparable<Tower>{         int index;         int height = 0;         LinkedList<Integer> blocks;         public Tower(int index) {             this.index = index;             blocks = new LinkedList<>();         }         void addBlock(int block){             blocks.add(block);             height += block;         }              }     void solve() throws IOException {         int ts = getInt();         for (int t = 1; t <= ts; t++){             int n = getInt();             int m = getInt();             int x = getInt();             Integer[] h = new Integer[n];             Integer[] org = new Integer[n];             for (int i = 0; i < n; i++){                 h[i] = getInt();                 org[i] = h[i];             }             if(m==1){                 println(""YES"");                 for (int i = 0; i < n; i++) {                     print(""1 "");                 }                 println("""");                 continue;             }             TreeSet<Tower> towers = new TreeSet<>();             for (int i = 0; i < m; i++){                 Tower tower = new Tower(i+1);                 towers.add(tower);             }             Arrays.sort(h, Comparator.reverseOrder());             for (int i = 0; i < n; i++) {                 Tower tower = towers.pollFirst();                 if(tower!=null){                     tower.addBlock(h[i]);                     towers.add(tower);                 }             }             Tower first = towers.first();             Tower last = towers.last();             int diff = Math.abs(first.height-last.height);             if(diff<=x){                 println(""YES"");                 HashMap<Integer, LinkedList<Integer>> map = new HashMap<>();                 for (Tower tower : towers){                     for(int block : tower.blocks){                         LinkedList<Integer> list;                         if(map.containsKey(block)){                             list = map.get(block);                         }else {                             list = new LinkedList<>();                             map.put(block, list);                         }                         list.add(tower.index);                     }                 }                 for (int i = 0; i < n; i++) {                     int block = org[i];                     LinkedList<Integer> list = map.get(block);                     if(!list.isEmpty()){                         int e = list.pollFirst();;                         print(e+"" "");                     }                 }                 println("""");             }else {                 println(""NO"");             }         }     }     public static void main(String[] args) throws Exception {         if (isOnlineJudge()) {             in = new BufferedReader(new InputStreamReader(System.in));             out = new BufferedWriter(new OutputStreamWriter(System.out));             new C().solve();             out.flush();         } else {             Thread judge = new Thread();             in = new BufferedReader(new FileReader(""input.txt""));             out = new BufferedWriter(new FileWriter(""output.txt""));             judge.start();             new C().solve();             out.flush();             judge.suspend();         }     }     static boolean isOnlineJudge(){         try {             return System.getProperty(""ONLINE_JUDGE"")!=null                     || System.getProperty(""LOCAL"")==null;         }catch (Exception e){             return true;         }     }          static BufferedReader in;     static StringTokenizer st;     static BufferedWriter out;     static String getLine() throws IOException{         return in.readLine();     }     static String getToken() throws IOException{         if(st==null || !st.hasMoreTokens())             st = new StringTokenizer(getLine());         return st.nextToken();     }     static int getInt() throws IOException {         return Integer.parseInt(getToken());     }          static void print(Object s) throws IOException{         out.write(String.valueOf(s));     }     static void println(Object s) throws IOException{         out.write(String.valueOf(s));         out.newLine();     } } ",0
499,"import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException { int t=1; t=sc.nextInt(); while(t-->0) solve(); out.close(); out.flush(); } static void solve() throws IOException { int n=sc.nextInt(); int arr[]=new int[n]; for(int i=0;i<n;i++) arr[i]=sc.nextInt(); String s=sc.next(); ArrayList<Integer> blue=new ArrayList<Integer>(); ArrayList<Integer> red=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(s.charAt(i)=='B') blue.add(arr[i]); else red.add(arr[i]); } Collections.sort(blue); Collections.sort(red); for(int i=0;i<blue.size();i++) { if(blue.get(i)<i+1) { out.println(""NO""); return; } } for(int i=0;i<red.size();i++) { if(red.get(i)>i+1+blue.size()) { out.println(""NO""); return; } } out.println(""YES""); }   } ","import java.io.*; import java.util.*; public class Codeforces {     public static void main(String[] args) throws IOException{         try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {             int t = Integer.parseInt(br.readLine());             while (t-- > 0) {                 int n = Integer.parseInt(br.readLine());                 String[] s = br.readLine().split("" "");                 String c = br.readLine();                 ArrayList<Integer> blue = new ArrayList<>();                 ArrayList<Integer> red = new ArrayList<>();                                  for (int i = 0; i < n; i++) {                     if (c.charAt(i) == 'B') blue.add(Integer.parseInt(s[i]));                     else                         red.add(Integer.parseInt(s[i]));                 }                 Collections.sort(blue);                 Collections.sort(red);                 int p1 = 0, p2 = 0, num = 1, flag = 1;                 while (num <= n) {                     if (p1 < blue.size()) {                         if (blue.get(p1) < num) {                             flag = 0;                             break;                         }                         p1++;                     }                     else if (p2 < red.size()) {                         if (red.get(p2) > num) {                             flag = 0;                             break;                         }                         p2++;                     }                     num++;                 }                 if (flag == 1)  System.out.println(""YES"");                 else                     System.out.println(""NO"");             }         }     } } ",0
500,"import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException { int t=1; t=sc.nextInt(); while(t-->0) solve(); out.close(); out.flush(); } static void solve() throws IOException { int n=sc.nextInt(); int arr[]=new int[n]; for(int i=0;i<n;i++) arr[i]=sc.nextInt(); String s=sc.next(); ArrayList<Integer> blue=new ArrayList<Integer>(); ArrayList<Integer> red=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(s.charAt(i)=='B') blue.add(arr[i]); else red.add(arr[i]); } Collections.sort(blue); Collections.sort(red); for(int i=0;i<blue.size();i++) { if(blue.get(i)<i+1) { out.println(""NO""); return; } } for(int i=0;i<red.size();i++) { if(red.get(i)>i+1+blue.size()) { out.println(""NO""); return; } } out.println(""YES""); }   } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.StringTokenizer; public class PC3C { static PrintWriter out = new PrintWriter(System.out); static MyFastReaderPC3C in = new MyFastReaderPC3C(); static long mod = (long) (1e9 + 7); public static void main(String[] args) throws Exception { int test = i(); while (test-- > 0) {                int n=i();              int[] arr=arrI(n);              String s=string();                            ArrayList<Integer> lR=new ArrayList<>();              ArrayList<Integer> lB=new ArrayList<>();              for(int i=0;i<n;i++) {                          if(s.charAt(i)=='R') lR.add(arr[i]);             else lB.add(arr[i]);                            }                                          Collections.sort(lB);              Collections.sort(lR,Collections.reverseOrder());                                          int k=1;              boolean st=true;              for(int i=0;i<lB.size();i++) {                            if(lB.get(i)>=k) {             k+=1;               }              else {             st=false;             break;              }                            }              boolean st2=true;                k=n;                for(int i=0;i<lR.size();i++) {                            if(lR.get(i)>k) {                st2=false;                break;              }              else {             k-=1;               }                            }                                if(st && st2) out.print(""YES"");                else out.print(""NO"");                             out.print(""\n""); out.flush(); } out.close(); } static void sort(long[] a)  { ArrayList<Long> l = new ArrayList<>(); for (long i : a) l.add(i); Collections.sort(l); for (int i = 0; i < a.length; i++) a[i] = l.get(i); } static void sort(int[] a) { ArrayList<Integer> l = new ArrayList<>(); for (int i : a) l.add(i); Collections.sort(l); for (int i = 0; i < a.length; i++) a[i] = l.get(i); } static void print(char A[]) { for (char c : A) System.out.print(c + "" ""); System.out.println(); } static void print(boolean A[]) { for (boolean c : A) System.out.print(c + "" ""); System.out.println(); } static void print(int A[]) { for (int a : A) System.out.print(a + "" ""); System.out.println(); } static void print(long A[]) { for (long i : A) System.out.print(i + "" ""); System.out.println(); } static void print(ArrayList<Integer> A) { for (int a : A) System.out.print(a + "" ""); System.out.println(); } public static Map<Character, Integer> mapSortByValue(Map<Character, Integer> hm) { List<Map.Entry<Character, Integer>> list = new LinkedList<Map.Entry<Character, Integer>>(hm.entrySet()); Collections.sort(list, new Comparator<Map.Entry<Character, Integer>>() { }); Map<Character, Integer> temp = new LinkedHashMap<Character, Integer>(); for (Map.Entry<Character, Integer> aa : list) { temp.put(aa.getKey(), aa.getValue()); } return temp; } static String string() { return in.nextLine(); } static int i() { return in.nextInt(); } static long l() { return in.nextLong(); } static int[] arrI(int N) { int A[] = new int[N]; for (int i = 0; i < N; i++) { A[i] = in.nextInt(); } return A; } } ",0
501,"import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException { int t=1; t=sc.nextInt(); while(t-->0) solve(); out.close(); out.flush(); } static void solve() throws IOException { int n=sc.nextInt(); int arr[]=new int[n]; for(int i=0;i<n;i++) arr[i]=sc.nextInt(); String s=sc.next(); ArrayList<Integer> blue=new ArrayList<Integer>(); ArrayList<Integer> red=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(s.charAt(i)=='B') blue.add(arr[i]); else red.add(arr[i]); } Collections.sort(blue); Collections.sort(red); for(int i=0;i<blue.size();i++) { if(blue.get(i)<i+1) { out.println(""NO""); return; } } for(int i=0;i<red.size();i++) { if(red.get(i)>i+1+blue.size()) { out.println(""NO""); return; } } out.println(""YES""); }   } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class D { public static void main(String[] args) throws IOException { FastScanner fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); for (int tc = 0; tc < t; tc++) { int n = fs.nextInt(); int[] a = fs.readArray(n); String s = fs.nextLine(); ArrayList<Integer> blues = new ArrayList<Integer>(); ArrayList<Integer> reds = new ArrayList<Integer>(); for (int i = 0; i < s.length(); i++) { if (s.charAt(i) == 'B') { blues.add(a[i]); } else { reds.add(a[i]); } } Collections.sort(blues); Collections.sort(reds); boolean ok = true; for (int i = 1; i <= blues.size(); i++) { if (blues.get(i - 1) < i) { ok = false; break; } } for (int i = blues.size() + 1; i <= n; i++) { if (reds.get(i - blues.size() - 1) > i) { ok = false; break; } } if (ok) { out.println(""YES""); } else { out.println(""NO""); } } out.close(); } } ",0
502,"import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException { int t=1; t=sc.nextInt(); while(t-->0) solve(); out.close(); out.flush(); } static void solve() throws IOException { int n=sc.nextInt(); int arr[]=new int[n]; for(int i=0;i<n;i++) arr[i]=sc.nextInt(); String s=sc.next(); ArrayList<Integer> blue=new ArrayList<Integer>(); ArrayList<Integer> red=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(s.charAt(i)=='B') blue.add(arr[i]); else red.add(arr[i]); } Collections.sort(blue); Collections.sort(red); for(int i=0;i<blue.size();i++) { if(blue.get(i)<i+1) { out.println(""NO""); return; } } for(int i=0;i<red.size();i++) { if(red.get(i)>i+1+blue.size()) { out.println(""NO""); return; } } out.println(""YES""); }   } ","import java.util.*; import java.util.concurrent.Exchanger; public class Codeforces {     static int[] mass = new int[200_001];     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         StringBuilder stringBuilder = new StringBuilder();         int t = scanner.nextInt();         for (int z =0 ; z < t ; ++z) {             solve(scanner, stringBuilder);         }         System.out.print(stringBuilder);     }     private static void solve(Scanner scanner, StringBuilder stringBuilder) {         int n = scanner.nextInt();         for (int i = 0 ; i < n ; ++i) {             mass[i] = scanner.nextInt();         }         String colors = scanner.next();         List<Integer> red = new ArrayList<>(n);         List<Integer> blue = new ArrayList<>(n);         for (int i = 0 ; i < n ; ++i) {             if(colors.charAt(i) == 'R') red.add(mass[i]);             else blue.add(mass[i]);         }         red.sort(Comparator.reverseOrder());         blue.sort(Comparator.naturalOrder());         int creatd = 0;         int upper = n;         int down = 1;         for (Integer integer : red) {             if (integer > upper) {                 stringBuilder.append(""NO\n"");                 return;             } else {                 creatd++;                 upper--;             }         }         for (Integer integer : blue) {             if (integer < down) {                 stringBuilder.append(""NO\n"");                 return;             } else {                 creatd++;                 down++;             }         }         if (creatd == n) stringBuilder.append(""YES\n"");         else stringBuilder.append(""NO\n"");     } } ",0
503,"import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException { int t=1; t=sc.nextInt(); while(t-->0) solve(); out.close(); out.flush(); } static void solve() throws IOException { int n=sc.nextInt(); int arr[]=new int[n]; for(int i=0;i<n;i++) arr[i]=sc.nextInt(); String s=sc.next(); ArrayList<Integer> blue=new ArrayList<Integer>(); ArrayList<Integer> red=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(s.charAt(i)=='B') blue.add(arr[i]); else red.add(arr[i]); } Collections.sort(blue); Collections.sort(red); for(int i=0;i<blue.size();i++) { if(blue.get(i)<i+1) { out.println(""NO""); return; } } for(int i=0;i<red.size();i++) { if(red.get(i)>i+1+blue.size()) { out.println(""NO""); return; } } out.println(""YES""); }   } ","import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ",0
504,"import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException { int t=1; t=sc.nextInt(); while(t-->0) solve(); out.close(); out.flush(); } static void solve() throws IOException { int n=sc.nextInt(); int arr[]=new int[n]; for(int i=0;i<n;i++) arr[i]=sc.nextInt(); String s=sc.next(); ArrayList<Integer> blue=new ArrayList<Integer>(); ArrayList<Integer> red=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(s.charAt(i)=='B') blue.add(arr[i]); else red.add(arr[i]); } Collections.sort(blue); Collections.sort(red); for(int i=0;i<blue.size();i++) { if(blue.get(i)<i+1) { out.println(""NO""); return; } } for(int i=0;i<red.size();i++) { if(red.get(i)>i+1+blue.size()) { out.println(""NO""); return; } } out.println(""YES""); }   } ","import java.util.*; public class Solution{     public static void main(String[] args){     Scanner sc=new Scanner(System.in);     int t=sc.nextInt();     while(t-->0) {         int n=sc.nextInt();         int[] a=new int[n];         for(int i=0;i<n;i++)              a[i]=sc.nextInt();      char[] c=sc.next().toCharArray();         Vector<Integer> l=new Vector<>(), r=new Vector<>();         for(int i=0;i<n;i++)             (c[i] == 'B' ? l : r).add(a[i]);         Collections.sort(l);         Collections.sort(r,Collections.reverseOrder());         boolean ok = true;         for(int i=0;i<l.size();i++)             if (l.get(i) < i + 1)                 ok = false;         for(int i=0;i<r.size();i++)             if (r.get(i) > n - i)                 ok = false;          System.out.print((ok ? ""YES"" : ""NO"")+'\n');     }     } } ",0
505,"import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=1; t=sc.nextInt(); for(int i=1;i<=t;i++) solve(i); out.close(); out.flush(); } static void solve(int CASENO) throws IOException, CloneNotSupportedException { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } }   } ","import java.util.*; import java.io.*; import java.time.*; import static java.lang.Math.*; @SuppressWarnings(""unused"") public class C { static boolean DEBUG = false; static Reader fs; static PrintWriter pw; static void solve() { int n = fs.nextInt(), k[] = fs.readArray(n), h[] = fs.readArray(n); int prev_h = h[0], prev_k = k[0]; ArrayList<pair> intervals = new ArrayList<>(); for (int i = 0; i < n; i++) { int start = k[i] - h[i] + 1; int end = k[i]; intervals.add(new pair(start, end)); } Collections.sort(intervals); ArrayList<pair> merged = new ArrayList<>(); merge(intervals, merged); long ans = 0; for(int i = 0 ; i < merged.size() ; i++) { ans += sum(merged.get(i).len()); } pw.println(ans); } static void merge(ArrayList<pair>a1, ArrayList<pair>a2) { int n = a1.size(); int index = 0; for(int i =1 ; i < n ; i++) { if(a1.get(index).s >= a1.get(i).f) { a1.get(index).s = max(a1.get(index).s, a1.get(i).s); } else { index++; a1.set(index, a1.get(i)); } } for(int i = 0 ; i <= index ; i++) { a2.add(a1.get(i)); } } static pair merge(pair p1, pair p2) { return new pair(min(p1.f, p2.f), max(p1.s, p2.s)); } static long sum(long n) { return (n * (n + 1) / 2); } static class pair implements Comparable<pair>{ int f, s; pair(int f, int s) { this.f = f; this.s = s; } public int len() { return s - f + 1; } } public static void main(String[] args) throws IOException { Instant start = Instant.now(); if (args.length == 2) { System.setIn(new FileInputStream(new File(""D:\\program\\javaCPEclipse\\CodeForces\\src\\input.txt""))); System.setErr(new PrintStream(new File(""D:\\program\\javaCPEclipse\\CodeForces\\src\\error.txt""))); DEBUG = true; } fs = new Reader(); pw = new PrintWriter(System.out); int t = fs.nextInt(); while (t-- > 0) { solve(); } Instant end = Instant.now(); if (DEBUG) { pw.println(Duration.between(start, end)); } pw.close(); } static void sort(int a[]) { ArrayList<Integer> l = new ArrayList<Integer>(); for (int x : a) l.add(x); Collections.sort(l); for (int i = 0; i < a.length; i++) { a[i] = l.get(i); } } } ",0
506,"import java.io.*; import java.util.*; public class Program{     static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     static PrintWriter pw = new PrintWriter(System.out);     static StringTokenizer st = new StringTokenizer("""");     static int T, N, a[];     static boolean ok;     static void dfs(int i, int sum){         if(sum == a[N-1]){             ok = true;             return;         }         if(ok || i == N-1) return;         dfs(i+1, sum);         if(ok) return;         dfs(i+1, sum + a[i]);         if(ok) return;         dfs(i+1, sum - a[i]);     }     public static void main(String args[]) throws IOException{         T = nexti();         while(T-- > 0){             N = nexti();             a = new int[N];             for(int i = 0; i < N; i++) a[i] = nexti();             ok = false;             for(int i = 0; i < N; i++){                 dfs(0, 0);                 int tmp = a[i];                 a[i] = a[N-1];                 a[N-1] = tmp;             }             pw.println((ok ? ""YES"" : ""NO""));         }         br.close(); pw.close();     }     static String next() throws IOException{         while(!st.hasMoreTokens()) st = new StringTokenizer(br.readLine());         return st.nextToken();     }     static int nexti() throws IOException{         return Integer.parseInt(next());     } } ","import java.io.*; import java.util.*; public class Program{     static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     static PrintWriter pw = new PrintWriter(System.out);     static StringTokenizer st = new StringTokenizer("""");     static int T, N, a[];     static boolean ok;     static void dfs(int i, int sum){         if(sum == a[N-1]){             ok = true;             return;         }         if(ok || i == N-1) return;         dfs(i+1, sum);         if(ok) return;         dfs(i+1, sum + a[i]);         if(ok) return;         dfs(i+1, sum - a[i]);     }     public static void main(String args[]) throws IOException{         T = nexti();         while(T-- > 0){             N = nexti();             a = new int[N];             for(int i = 0; i < N; i++) a[i] = nexti();             ok = false;             for(int i = 0; i < N; i++){                 dfs(0, 0);                 int tmp = a[i];                 a[i] = a[N-1];                 a[N-1] = tmp;             }             pw.println((ok ? ""YES"" : ""NO""));         }         br.close(); pw.close();     }     static String next() throws IOException{         while(!st.hasMoreTokens()) st = new StringTokenizer(br.readLine());         return st.nextToken();     }     static int nexti() throws IOException{         return Integer.parseInt(next());     } } ",1
507,"import java.io.*; import java.util.*; public class Pupsen { public static void main(String[] args) throws Exception { FastIO in = new FastIO(); int t = in.nextInt(); for (int tc=0; tc<t; tc++) { int n = in.nextInt(); int[] a = new int[n]; for (int i=0; i<n; i++) { a[i] = in.nextInt(); } int[] b = new int[n]; if (n%2==0) { for (int i=0; i<n-1; i+=2) { b[i] = -a[i+1]; b[i+1] = a[i]; } for (int i=0; i<n; i++) System.out.print(b[i]+"" ""); } else { if (a[0]+a[1]!=0) { b[0] = -a[2]; b[1] = -a[2]; b[2] = a[0]+a[1]; } else if (a[0]+a[2]!=0) { b[0] = -a[1]; b[2] = -a[1]; b[1] = a[0]+a[2]; } else { b[1] = -a[0]; b[2] = -a[0]; b[0] = a[1]+a[2]; } for (int i=3; i<n-1; i+=2) { b[i] = -a[i+1]; b[i+1] = a[i]; } for (int i=0; i<n; i++) System.out.print(b[i]+"" ""); } System.out.println(); } } } ","import java.io.*; import java.util.*;   public class cf {       public static void main(String[] args){           FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){    int n=sc.nextInt();             int arr[]=new int[n];             for(int i=0;i<n;i++){                 arr[i]=sc.nextInt();             }             int ans[]=new int[n];             if(n%2==0){                 for(int i=0;i<n;i=i+2){                     ans[i]=-arr[i+1];                     ans[i+1]=arr[i];                 }             }             else{                 if(arr[0]+arr[1]!=0){                     ans[0]=-arr[2];                     ans[1]=-arr[2];                     ans[2]=arr[0]+arr[1];                 }                 else{                     if(arr[1]+arr[2]!=0){                         ans[1]=-arr[0];                         ans[2]=-arr[0];                         ans[0]=arr[1]+arr[2];                     }                     else{                         ans[0]=-arr[1];                         ans[2]=-arr[1];                         ans[1]=arr[0]+arr[2];                     }                 }                 for(int i=3;i<n;i=i+2){                     ans[i]=-arr[i+1];                     ans[i+1]=arr[i];                 }             }             for(int j=0;j<n;j++){                 System.out.print(ans[j]+"" "");             }             System.out.println();                                                                                        }                        }                    } ",1
508,"import java.io.*; import java.util.*; public class Pupsen { public static void main(String[] args) throws Exception { FastIO in = new FastIO(); int t = in.nextInt(); for (int tc=0; tc<t; tc++) { int n = in.nextInt(); int[] a = new int[n]; for (int i=0; i<n; i++) { a[i] = in.nextInt(); } int[] b = new int[n]; if (n%2==0) { for (int i=0; i<n-1; i+=2) { b[i] = -a[i+1]; b[i+1] = a[i]; } for (int i=0; i<n; i++) System.out.print(b[i]+"" ""); } else { if (a[0]+a[1]!=0) { b[0] = -a[2]; b[1] = -a[2]; b[2] = a[0]+a[1]; } else if (a[0]+a[2]!=0) { b[0] = -a[1]; b[2] = -a[1]; b[1] = a[0]+a[2]; } else { b[1] = -a[0]; b[2] = -a[0]; b[0] = a[1]+a[2]; } for (int i=3; i<n-1; i+=2) { b[i] = -a[i+1]; b[i+1] = a[i]; } for (int i=0; i<n; i++) System.out.print(b[i]+"" ""); } System.out.println(); } } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.*;   public class Codeforces { static int mod=1000000007 ; static List<Integer>[] adj; static boolean vst[]; static int dp[]; public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out); FastScanner fs=new FastScanner(); int t=fs.nextInt(); while(t-->0) { int n=fs.nextInt(); int arr[]=fs.readArray(n); int ans[]=new int[n]; if(n%2==0) { for(int i=0;i<n;i+=2) { ans[i]=-arr[i+1]; ans[i+1]=arr[i]; } } else { for(int i=3;i<n;i+=2) { ans[i]=-arr[i+1]; ans[i+1]=arr[i]; } int a=0, b=0, c=0; outer:for(int i=0;i<3;i++) { for(int j=i+1;j<3;j++) { if(arr[i]+arr[j]!=0) { b=i; c=j; a= 3-c-b; break outer; } } } ans[a]=arr[b]+arr[c]; ans[b]=-arr[a]; ans[c]=-arr[a]; } for(int i=0;i<n;i++) { out.print(ans[i]+"" ""); } out.println(); } out.close(); }   } ",0
509,"import java.io.*; import java.util.*; public class Solution {     public static void main(String[] args) throws Exception {         int tc = io.nextInt();         for (int i = 0; i < tc; i++) {             solve();         }         io.close();     }     private static void solve() throws Exception {         int n = io.nextInt();         String a = io.next();         String b = io.next();         int zz = 0;         int zo = 0;         int oo = 0;         int oz = 0;         for (int i = 0; i < a.length(); i++) {             if (a.charAt(i) == '1' && b.charAt(i) == '0') {                 oz++;             }             if (a.charAt(i) == '0' && b.charAt(i) == '0') {                 zz++;             }             if (a.charAt(i) == '1' && b.charAt(i) == '1') {                 oo++;             }             if (a.charAt(i) == '0' && b.charAt(i) == '1') {                 zo++;             }         }         int ans = Integer.MAX_VALUE;         if (oz == zo) {             ans = Math.min(ans, oz + zo);         }         if (oo - 1 == zz) {             ans = Math.min(ans, oo + zz);         }         if (ans == Integer.MAX_VALUE) {             ans = -1;         }         io.println(ans);     }               public static FastIO io = new FastIO();                } ","import java.util.*; import java.util.stream.Collectors; import java.io.*; import java.math.*; public class GR18_C2 { public static FastScanner sc; public static StringBuilder sb ;public static int MOD= 1000000007;     public static void solve(int t) throws IOException {     int n=sc.nextInt();     String a=sc.next();     String b=sc.next();          int _00=0;     int _01=0;     int _10=0;     int _11=0;          for(int i=0;i<n;i++) {     if(a.charAt(i)=='0' && b.charAt(i)=='0') _00++;     if(a.charAt(i)=='0' && b.charAt(i)=='1') _01++;     if(a.charAt(i)=='1' && b.charAt(i)=='0') _10++;     if(a.charAt(i)=='1' && b.charAt(i)=='1') _11++;     }          int ans=Integer.MAX_VALUE;                    if(_01==_10) {     ans=Math.min(ans, _10*2);     }               if(_00+1==_11) {     ans=Math.min(ans, (_11-1)*2+1);     }     if(ans==Integer.MAX_VALUE) sb.append(-1).append('\n');     else sb.append(ans).append('\n');     }      public static void main(String[] args) throws IOException { sb = new StringBuilder(""""); sc = new FastScanner(); int t=sc.nextInt(); for(int i=1;i<=t;i++){ solve(i); } System.out.println(sb); } } ",1
510,"import java.io.*; import java.util.*; public class Solution {     public static void main(String[] args) throws Exception {         int tc = io.nextInt();         for (int i = 0; i < tc; i++) {             solve();         }         io.close();     }     private static void solve() throws Exception {         int n = io.nextInt();         String a = io.next();         String b = io.next();         int zz = 0;         int zo = 0;         int oo = 0;         int oz = 0;         for (int i = 0; i < a.length(); i++) {             if (a.charAt(i) == '1' && b.charAt(i) == '0') {                 oz++;             }             if (a.charAt(i) == '0' && b.charAt(i) == '0') {                 zz++;             }             if (a.charAt(i) == '1' && b.charAt(i) == '1') {                 oo++;             }             if (a.charAt(i) == '0' && b.charAt(i) == '1') {                 zo++;             }         }         int ans = Integer.MAX_VALUE;         if (oz == zo) {             ans = Math.min(ans, oz + zo);         }         if (oo - 1 == zz) {             ans = Math.min(ans, oo + zz);         }         if (ans == Integer.MAX_VALUE) {             ans = -1;         }         io.println(ans);     }               public static FastIO io = new FastIO();                } ","import javax.swing.plaf.IconUIResource; import java.lang.reflect.Array; import java.text.CollationElementIterator; import java.util.*; import java.io.*;       public class Main {                           public static int mod = (int) (1e9 + 7);     static int ans = Integer.MAX_VALUE;       public static void main(String hi[]) throws Exception {         FastReader sc = new FastReader();         int t =sc.nextInt();         while(t-->0)         {             int n =sc.nextInt();             String a = sc.nextLine(),b=sc.nextLine();               int count1=0,count2=0,count3=0,count4=0;               for(int i=0;i<n;i++)             {                 if(a.charAt(i)=='0'&&b.charAt(i)=='0')                     count1++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='1')                     count2++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='0')                     count3++;                 else  if(a.charAt(i)=='0'&&b.charAt(i)=='1')                     count4++;             }             int ans=Integer.MAX_VALUE;               if(count3==count4)                 ans=Math.min(count3*2,ans);               if(count2==count1+1)                 ans=Math.min(ans,2*count1+1);                           if(ans==Integer.MAX_VALUE)                 System.out.println(-1);             else System.out.println(ans);           }       }                                                                 } ",0
511,"import java.io.*; import java.util.*; public class Solution { public static void main(String[] args) throws java.lang.Exception { FastReader fr = new FastReader(); PrintWriter out = new PrintWriter(System.out); int t = fr.ni(); while(t-->0) { int n = fr.ni(); long arr [] = new long[n]; for(int i = 0 ; i < n ; i++) arr[i]= fr.nl(); long even = arr[0]; long odd = arr[1]; long minEven = arr[0]; long minOdd = arr[1]; long ans = (minEven*n) + (minOdd*n); for(int i = 2 ; i < n ; i++) { if((i&1) == 0) { even += arr[i]; minEven = Math.min(minEven, arr[i]); long a = (i+2)/2; long b = (i+1)-a; long temp = (even + (minEven*(n - a))); temp += (odd + (minOdd*(n - b))); ans = Math.min(ans, temp); }else { odd += arr[i]; minOdd = Math.min(minOdd, arr[i]); long a = (i+2)/2; long b = (i+1)-a; long temp = (even + (minEven*(n - a))); temp += (odd + (minOdd*(n - b))); ans = Math.min(ans, temp); } } out.println(ans); } out.close(); } } ","import java.io.BufferedReader;  import java.io.IOException;  import java.io.InputStreamReader;  import java.util.Scanner;  import java.util.Random; import java.util.Arrays; import java.util.StringTokenizer;  import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.Collections; import java.util.*; public class C  {      public static void main(String[] args)  {  FastReader sc=new FastReader();  StringBuffer ans=new StringBuffer(); int test=sc.nextInt(); while(test-->0) { int n=sc.nextInt(); long arr[]=new long[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextLong(); } long nn=n; long ep=1; long op=1; long se=arr[0]; long so=arr[1]; long sume=se;long sumo=so; long minm = (se*nn) +(so*nn); for(int i=2;i<n;i++) { if(i%2 == 0) { ++ep; sume+=arr[i]; se=Math.min(se, arr[i]); } else { ++op; sumo+=arr[i]; so=Math.min(so, arr[i]); } long cost = (sume)+(se*(nn-ep)); cost+=((sumo)+(so*(nn-op))); minm=Math.min(cost, minm); } ans.append(minm+""\n""); }     System.out.print(ans); }               static final Random random=new Random();        } ",0
512,"import java.io.*; import java.util.*; public class Solution { public static void main(String[] args) throws java.lang.Exception { FastReader fr = new FastReader(); PrintWriter out = new PrintWriter(System.out); int t = fr.ni(); while(t-->0) { int n = fr.ni(); long arr [] = new long[n]; for(int i = 0 ; i < n ; i++) arr[i]= fr.nl(); long even = arr[0]; long odd = arr[1]; long minEven = arr[0]; long minOdd = arr[1]; long ans = (minEven*n) + (minOdd*n); for(int i = 2 ; i < n ; i++) { if((i&1) == 0) { even += arr[i]; minEven = Math.min(minEven, arr[i]); long a = (i+2)/2; long b = (i+1)-a; long temp = (even + (minEven*(n - a))); temp += (odd + (minOdd*(n - b))); ans = Math.min(ans, temp); }else { odd += arr[i]; minOdd = Math.min(minOdd, arr[i]); long a = (i+2)/2; long b = (i+1)-a; long temp = (even + (minEven*(n - a))); temp += (odd + (minOdd*(n - b))); ans = Math.min(ans, temp); } } out.println(ans); } out.close(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintStream; import java.util.StringTokenizer; public class Solution {          public static void main(String[] args) {         PrintStream out = System.out;         FastScanner fs = new FastScanner();         int T = fs.nextInt();         while (T-- > 0) {             int n = fs.nextInt();             long[] arr = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = fs.nextLong();             }             long[] ps = new long[n];             ps[0] = arr[0];             for (int i = 1; i < n; i++) {                 ps[i] = ps[i - 1] + arr[i];             }             long min = arr[0] * n + arr[1] * n;             int even = 0;             int odd = 1;             for (int i = 2; i < n; i++) {                 if (i % 2 == 0) {                     if (arr[i] < arr[even]) {                         even = i;                     }                 } else {                     if (arr[i] < arr[odd]) {                         odd = i;                     }                 }                 int tmp = i + 1;                 int oddCount = tmp / 2;                 int evenCount = (tmp + 1) / 2;                 long local = ps[i];                 local += (n - oddCount) * arr[odd];                 local += (n - evenCount) * arr[even];                 min = Math.min(min, local);             }             out.println(min);         }     }                } ",0
513,"import java.io.*; import java.util.*; public class Solution { public static void main(String[] args) throws java.lang.Exception { FastReader fr = new FastReader(); PrintWriter out = new PrintWriter(System.out); int t = fr.ni(); while(t-->0) { int n = fr.ni(); long arr [] = new long[n]; for(int i = 0 ; i < n ; i++) arr[i]= fr.nl(); long even = arr[0]; long odd = arr[1]; long minEven = arr[0]; long minOdd = arr[1]; long ans = (minEven*n) + (minOdd*n); for(int i = 2 ; i < n ; i++) { if((i&1) == 0) { even += arr[i]; minEven = Math.min(minEven, arr[i]); long a = (i+2)/2; long b = (i+1)-a; long temp = (even + (minEven*(n - a))); temp += (odd + (minOdd*(n - b))); ans = Math.min(ans, temp); }else { odd += arr[i]; minOdd = Math.min(minOdd, arr[i]); long a = (i+2)/2; long b = (i+1)-a; long temp = (even + (minEven*(n - a))); temp += (odd + (minOdd*(n - b))); ans = Math.min(ans, temp); } } out.println(ans); } out.close(); } } ","import java.util.*; public class ss {     public static void main(String[]args)     {         Scanner in=new Scanner (System.in);         int t=in.nextInt();         for(int i1=0;i1<t;i1++)         {             int n=in.nextInt(); long[] ar=new long[n]; for(int i=0;i<n;i++) { ar[i]=in.nextLong(); } long[] ans=new long[n]; ans[0]=ar[0]*n; long m=ar[0]; long s1=ar[0]; for(int i=2;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2);       } ans[1]=ar[1]*n;  m=ar[1];  s1=ar[1]; for(int i=3;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2); } long mini=ans[0]+ans[1]; for(int i=1;i<n-1;i++) { mini=Math.min(ans[i]+ans[i+1],mini); } System.out.println(mini); } } } ",0
514,"import java.io.*; import java.util.*; public class Solution { static int mod = (int) 1e9 + 7; static StringBuilder out = new StringBuilder(); static int pri[] = new int[(int) 1e5 + 5]; public static void main(String[] args) throws IOException { int t = sc.nextInt(); int tc = 1; while (tc <= t) { Solution run = new Solution(); run.run(); tc++; } System.out.println(out); } ArrayList<Integer> gr[]; long a[][]; public void run() throws IOException { int n = sc.nextInt(); gr=new ArrayList[n+1]; a=new long[n+1][2]; for(int i=0;i<=n;i++)gr[i]=new ArrayList<>(); for(int i=1;i<=n;i++) { a[i][0]=sc.nextInt(); a[i][1]=sc.nextInt(); } for(int i=0;i<n-1;i++) { int u=sc.nextInt(); int v=sc.nextInt(); gr[u].add(v); gr[v].add(u); } dp=new long[n+1][2]; for(long a1[]:dp)Arrays.fill(a1, -1L); long res=Math.max(dfs(1,-1,0), dfs(1,-1,1)); out.append(res+""\n""); } long dp[][]; long dfs(int u, int pa,int ok) { if(dp[u][ok]!=-1)return dp[u][ok]; long ans=0; for(int ch: gr[u]) { if(ch==pa)continue; long res=0; if(ok==0) { res=Math.max(dfs(ch,u,0)+Math.abs(a[u][0]-a[ch][0]), dfs(ch,u,1)+Math.abs(a[u][0]-a[ch][1])); } else { res=Math.max(dfs(ch,u,0)+Math.abs(a[u][1]-a[ch][0]), dfs(ch,u,1)+Math.abs(a[u][1]-a[ch][1])); } ans+=res; } return dp[u][ok]=ans; } void dfs(int u, int pa) { if(gr[u].size()==1) { dp[u][0]=dp[u][1]=0L; } for(int ch:gr[u]) { if(ch==pa)continue; dfs(ch,u); } for(int ch: gr[u]) { if(ch==pa)continue; long ans1=0; long ans2=0; ans1=Math.max(dp[ch][0]+Math.abs(a[u][0]-a[ch][0]), dp[ch][1]+Math.abs(a[u][0]-a[u][1])); dp[u][0]+=ans1; ans1=Math.max(dp[ch][0]+Math.abs(a[u][1]-a[ch][0]), dp[ch][1]+Math.abs(a[u][1]-a[u][1])); dp[u][1]+=ans2; } } static Reader sc = new Reader(); } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.StringTokenizer; import java.io.BufferedReader; import java.io.FileReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         Scanner in = new Scanner(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CParsasHumongousTree solver = new CParsasHumongousTree();         solver.solve(1, in, out);         out.close();     }     static class CParsasHumongousTree {         int n;         long[] l;         long[] r;         ArrayList<Integer>[] adj;         long[][] dp;         public void solve(int testNumber, Scanner sc, PrintWriter pw) {             int t = 1;             t = sc.nextInt();             while (t-- > 0) {                 n = sc.nextInt();                 l = new long[n];                 r = new long[n];                 for (int i = 0; i < n; i++) {                     l[i] = sc.nextInt();                     r[i] = sc.nextInt();                 }                 adj = new ArrayList[n];                 for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();                 for (int i = 0; i < n - 1; i++) {                     int x = sc.nextInt() - 1;                     int y = sc.nextInt() - 1;                     adj[x].add(y);                     adj[y].add(x);                 }                 dp = new long[n + 1][2];                 for (long[] x : dp) Arrays.fill(x, -1);                 long ans = solve(-1, 0, 0);                 for (long[] x : dp) Arrays.fill(x, -1);                 ans = Math.max(ans, solve(-1, 0, 1));                 pw.println(ans);             }         }         long solve(int from, int i, int f) {             if (dp[i][f] != -1) return dp[i][f];             long ans = 0;             long a = f == 0 ? l[i] : r[i];             for (int x : adj[i]) {                 if (x != from)                     ans += Math.max((Math.abs(l[x] - a) + solve(i, x, 0)), (Math.abs(r[x] - a) + solve(i, x, 1)));             }             return dp[i][f] = ans;         }     }      } ",0
515,"import java.io.*; import java.util.*; public class Solution{     public static int in = 0, count=0;     static class comparator implements Comparator<int[]>{              }     public static int solve(ArrayList<int[]> al, int[] total){         ArrayList<int[]> c = (ArrayList<int[]>) al.clone();         java.util.Collections.sort(c, new comparator());         int i= al.size()-1;         int sum=0; for(int ii:total) sum+=ii;         int check = total[in];         sum-=check;         for(; i>=0; i--){             if(check>sum) return i+1;             else{                 int newSum=0; for(int ii:c.get(i)) newSum+=ii;                 newSum-=c.get(i)[in];                 sum-=newSum;                 check-=c.get(i)[in];             }         }         return 0;     }     public static void main (String[] args) throws java.lang.Exception {         FastReader sc = new FastReader();         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));         int testCase = sc.nextInt();         while (testCase-->0){             int n = sc.nextInt();             String[] strArr = new String[n];             for(int i=0; i<n; i++) {                 strArr[i]=sc.nextLine();             }             int[] total = new int[5];             ArrayList<int[]> al = new ArrayList<>();             for(int i=0; i<n; i++){                 int[] arr= new int[5];                 for(int j=0; j<strArr[i].length(); j++){                     arr[strArr[i].charAt(j)-'a']++;                 }                 for(int j=0; j<5; j++){                     total[j]+=arr[j];                 }                 al.add(arr);             }             int ans = Integer.MIN_VALUE;             for(int i=0; i<5; i++) {                 in = i;                 ans = Math.max(solve(al, total), ans);                 count=0;             }             System.out.println(ans);         }     }           } ","import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; public class Practice {     static HashMap<String, Integer> map = new HashMap<>();     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             int[][] occurances = new int[5][n];             for(int i=0;i<n;i++){                 String s = sc.next();                 int[] count = new int[5];                 int len = s.length();                 for(int j=0;j<s.length();j++){                     count[s.charAt(j)-'a']++;                 }                 for(int j=0;j<5;j++){                     occurances[j][i] = count[j] - (len-count[j]);                 }             }             int ans = 0;             for(int i=0;i<5;i++){                 Arrays.sort(occurances[i]);                 int tmpAns = 0; int tmpSum=0;                 for(int j=n-1;j>=0;j--){                     tmpSum+=occurances[i][j];                     if(tmpSum>0) tmpAns++;                     else break;                 }                 ans = Math.max(ans, tmpAns);             }             System.out.println(ans);         }     } } ",0
516,"import java.io.*; import java.util.*; public class T4  {     public static void main(String[] args) {         FastScanner s = new FastScanner();         T4 main = new T4();         int n = 1;         while (n-- > 0) {             main.MainPrint(s);         }     }     long mod =  998244353L;     private void MainPrint(FastScanner s) {         int n = s.nextInt();         k = s.nextInt();         TreeMap<Integer, int[]> map = new TreeMap<>();         int l, r;         int[] get;         for (int i = 0; i < n; i++) {             l = s.nextInt();             r = s.nextInt();             if (!map.containsKey(l)) {                 get = new int[2];                 get[0]++;                 map.put(l, get);             } else {                 get = map.get(l);                 get[0]++;             }             if (!map.containsKey(r + 1)) {                 get = new int[2];                 get[1]++;                 map.put(r + 1, get);             } else {                 get = map.get(r + 1);                 get[1]++;             }         }         int count = 0;         long ans = 0;         precomp();         for (int i : map.keySet()) {             get = map.get(i);             count += get[0] - get[1];             ans += rem[count] - rem[count-get[0]];             ans %= mod;         }         if (ans<0) ans+=mod;         System.out.println(ans%mod);     }     long mul(long a, long b) {         return a*b%mod;     }     long exp(long base, long e) {         if (e==0) return 1;         long half=exp(base, e/2);         if (e%2==0) return mul(half, half);         return mul(half, mul(half, base));     }     long modInv(long x) {         return exp(x, mod-2);     }     long[] facts;     long[] factInvs;     long[] rem;     int k;     void precomp() {         facts=new long[300_001];         factInvs=new long[300_001];         rem = new long[300_001];         factInvs[0]=facts[0]=1;         for (int i=1; i<facts.length; i++)             facts[i]=mul(facts[i-1], i);         factInvs[facts.length-1]=modInv(facts[facts.length-1]);         for (int i=facts.length-2; i>=0; i--)             factInvs[i]=mul(factInvs[i+1], i+1);         for (int i = k;i<rem.length;i++){             rem[i] =mul(facts[i], mul(factInvs[k], factInvs[i-k]));         }     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; import java.lang.*; public class Practice { public static long mod = 998244353; public static long mod2 = 998244353; public static long tt = 0; public static int[] ttt = new int[2]; public static long[] fac = new long[500000]; public static ArrayList<Integer> prime; public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(System.out); fac(); String[] s1 = br.readLine().split("" ""); int n = Integer.parseInt(s1[0]); int k = Integer.parseInt(s1[1]); Long[][] arr = new Long[n][2]; Long[] st = new Long[n]; Long[] end = new Long[n]; for (int i = 0; i < n; i++) { String str = (br.readLine()); String[] s2 = str.split("" ""); arr[i][0] = Long.parseLong(s2[0]); st[i] = arr[i][0]; arr[i][1] = Long.parseLong(s2[1]); end[i] = arr[i][1]; } Arrays.sort(st); Arrays.sort(end); long pp = (power(fac[k], mod - 2)); long[] comb = new long[n + 1]; for (int i = 1; i <= n; i++) { if (i < k) { continue; } comb[i] = (fac[i] * pp) % mod; comb[i] = (comb[i] * (power(fac[i - k], mod - 2))) % mod; } HashMap<Long, Integer> map1 = new HashMap<Long, Integer>(); HashMap<Long, Integer> map = new HashMap<>(); for (int i = 0; i < n; i++) { if (map.containsKey(arr[i][0])) { map.put(arr[i][0], map.getOrDefault(arr[i][0], 0) + 1); continue; } int a = getLower(arr[i][0] - 1, st); int b = getLower(arr[i][0] - 1, end); map.put(arr[i][0], map.getOrDefault(arr[i][0], 0) + 1); map1.put(arr[i][0], map1.getOrDefault(arr[i][0], 0)); if (a != -1 || b != -1) { if (b == -1) { int curr = a + 1; map1.put(arr[i][0], map1.getOrDefault(arr[i][0], 0) + curr); continue; } int curr = a - b; map1.put(arr[i][0], map1.getOrDefault(arr[i][0], 0) + curr); } } long ans = 0; for (long a : map.keySet()) { ans = (ans + comb[map.get(a) + map1.get(a)] + mod - comb[map1.get(a)]) % mod; } pw.println(ans); pw.close(); } private static long power(long a, long p) { long res = 1; while (p > 0) { if (p % 2 == 1) { res = (res * a) % mod; } p = p / 2; a = (a * a) % mod; } return res; } private static void fac() { fac[0] = 1; for (int i = 1; i < fac.length; i++) { if (i == 1) { fac[i] = 1; } else { fac[i] = i * fac[i - 1]; } if (fac[i] > mod) { fac[i] = fac[i] % mod; } } } private static int getLower(Long long1, Long[] st) { int left = 0, right = st.length - 1; int ans = -1; while (left <= right) { int mid = (left + right) / 2; if (st[mid] <= long1) { ans = mid; left = mid + 1; } else { right = mid - 1; } } return ans; } } ",0
517,"import java.io.*; import java.util.*; public class Template { static int mod = 1000000007; public static void main(String[] args) { FastScanner sc = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int yo = sc.nextInt(); while (yo-- > 0) { int n = sc.nextInt(); Map<Integer,Pair> map = new HashMap<>(); for(int i = 0; i < n; i++) { map.put(i, new Pair(sc.nextLong(),sc.nextLong())); } List<List<Integer>> list = new ArrayList<>(); for(int i = 0; i < n; i++) { list.add(new ArrayList<>()); } for(int i = 0; i < n-1; i++) { int x = sc.nextInt()-1; int y = sc.nextInt()-1; list.get(x).add(y); list.get(y).add(x); } for(int i = 0; i < 1e5+3; i++) { for(int j = 0; j < 2; j++) { dp[i][j] = -1; } } long a1 = dfs(map,list,0,0,-1); long a2 = dfs(map,list,1,0,-1); long ans = Math.max(a1, a2); out.println(ans); } out.close(); } static long[][] dp = new long[(int)1e5+10][2]; private static long dfs(Map<Integer, Pair> map, List<List<Integer>> list,  int x, int node, int parent) { if(dp[node][x] != -1) { return dp[node][x]; } List<Integer> neighbours = list.get(node); long ans1 = 0; if(x == 0) { ans1 = map.get(node).x; } else { ans1 = map.get(node).y; } long uAns = 0; for(int e : neighbours) { if(e == parent) continue; long ua1 = dfs(map,list,0,e,node); long ua2 = dfs(map,list,1,e,node); long a1 = ua1 + Math.abs(map.get(e).x-ans1); long a2 = ua2 + Math.abs(map.get(e).y-ans1); uAns += Math.max(a1, a2); } return dp[node][x] = uAns; } static class Pair { long x; long y; public Pair(long x, long y) { this.x = x; this.y = y; } } } ","import java.util.*; import java.io.*; public class Solution {     static LinkedList<Integer> graph[];     static long key[][];     static long value[][];     public static void main(String[] args) throws IOException {         Scanner in = new Scanner(System.in);         StringBuffer out=new StringBuffer();         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int t=Integer.parseInt(br.readLine());         String input[];         OUTER:         while(t--!=0) {             int n=Integer.parseInt(br.readLine());             value=new long[n][2];             key=new long[n][2];             for(int i=0; i<n; i++) {                 input= br.readLine().split(""\\s"");                 for(int j=0; j<2; j++) {                     key[i][j] = Integer.parseInt(input[j]);                 }             }             graph=new LinkedList[n];             for(int i=0; i<n; i++)                 graph[i]=new LinkedList();             for(int i=1; i<n; i++) {                 input= br.readLine().split(""\\s"");                 int u=Integer.parseInt(input[0])-1, v=Integer.parseInt(input[1])-1;                 graph[u].add(v);                 graph[v].add(u);             }             int root=-1;             for(int i=0; i<n; i++)                 if(graph[i].size()==1) {                     root=i;                     break;                 }             solve(root, -1);             out.append(Math.max(value[root][0], value[root][1])+""\n"");         }         System.out.print(out);     }     private static void solve(int vertex, int parent) {         for(int child: graph[vertex]) {             if(child!=parent) {                 solve(child, vertex);                 for(int i=0; i<2; i++) {                     long max=Long.MIN_VALUE;                     for(int j=0; j<2; j++) {                         max=Math.max(max, Math.abs(key[vertex][i]-key[child][j])+value[child][j]);                     }                     value[vertex][i]+=max;                 }             }         }     } } ",0
518,"import java.io.*; import java.util.*; public class Test {     static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     static StringTokenizer st;     static boolean[] vis;     static ArrayList<Integer>[] adj;     static int[] l, r;     static long[][] dp;     @SuppressWarnings(""unchecked"")     public static void main(String[] args) throws IOException {         int T = readInt();         for (int t = 0; t < T; t++) {             int n = readInt();             l = new int[n + 1];             r = new int[n + 1];             for (int i = 1; i <= n; i++) {                 l[i] = readInt();                 r[i] = readInt();             }             adj = new ArrayList[n + 1];             for (int i = 1; i <= n; i++) adj[i] = new ArrayList<>();             for (int i = 0; i < n - 1; i++) {                 int u = readInt(), v = readInt();                 adj[u].add(v);                 adj[v].add(u);             }             dp = new long[n + 1][2];             vis = new boolean[n + 1];             vis[1] = true;             dfs(1);             System.out.println(Math.max(dp[1][0], dp[1][1]));         }     }     static void dfs(int u) {         for (int x : adj[u]) {             if (!vis[x]) {                 vis[x] = true;                 dfs(x);                 dp[u][0] += Math.max(dp[x][0] + Math.abs(l[u] - l[x]), dp[x][1] + Math.abs(l[u] - r[x]));                 dp[u][1] += Math.max(dp[x][0] + Math.abs(r[u] - l[x]), dp[x][1] + Math.abs(r[u] - r[x]));             }         }     }     static String next() throws IOException {         while (st == null || !st.hasMoreTokens())             st = new StringTokenizer(br.readLine().trim());         return st.nextToken();     }     static int readInt() throws IOException {         return Integer.parseInt(next());     } } ","import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.*; public class C {     private static final boolean TEST_MODE = true;     private static Node[] tree;     private static long[] lWt, rWt;     public static void main(String[] args) throws Exception {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int T = getInt(br);         for (int t=0; t<T; t++) {             int N = getInt(br);             tree = new Node[N+1];             for (int v = 1; v <= N; v++) {                 String s = br.readLine();                 tree[v] = new Node(s);             }             for (int e=1; e<=N-1; e++) {                 int[] arr = getIntArray(2, br);                 int u = arr[0];                 int v = arr[1];                 tree[u].addNbr(v);                 tree[v].addNbr(u);             }             rootTheTree();             lWt = new long[N + 1];             rWt = new long[N + 1];             Arrays.fill(lWt, -1);             Arrays.fill(rWt, -1);             getMaxBeauty();         }     }     private static void rootTheTree() {                 Node root = tree[1];         root.parent = 0;         Queue<Integer> q = new LinkedList<>();         q.add(1);                  while (!q.isEmpty()) {             int currId = q.poll();             Node currNode = tree[currId];                          for (int nbrId : currNode.nbrs) {                 if (nbrId == currNode.parent) {                     continue;                 }                 tree[nbrId].parent = currId;                 currNode.addChild(nbrId);                 q.add(nbrId);             }         }     }     private static void getMaxBeauty() throws Exception {         Stack<Integer> stack = new Stack<>();         stack.add(1);         while (!stack.isEmpty()) {             int currId = stack.pop();             Node curr = tree[currId];                          if (curr.children.size() == 0) {                 lWt[currId] = 0;                 rWt[currId] = 0;                 continue;             }                          boolean allChildrenProcessed = (lWt[curr.children.get(0)] >= 0);             if (allChildrenProcessed) {                 lWt[currId] = 0;                 rWt[currId] = 0;                                  for (int childId : curr.children) {                     Node childNode = tree[childId];                     long ll = Math.abs(curr.left - childNode.left) + lWt[childId];                     long lr = Math.abs(curr.left - childNode.right) + rWt[childId];                     lWt[currId] += Math.max(ll, lr);                     long rl = Math.abs(curr.right - childNode.left) + lWt[childId];                     long rr = Math.abs(curr.right - childNode.right) + rWt[childId];                     rWt[currId] += Math.max(rl, rr);                 }             } else {                  stack.add(currId);                 stack.addAll(curr.children);             }         }         long res = Math.max(lWt[1], rWt[1]);         System.out.println(res);     }               private static Integer getInt(BufferedReader br) throws Exception {         return Integer.parseInt(br.readLine());     }          private static int[] getIntArray(int N, BufferedReader br) throws Exception {         String s = br.readLine();         String[] tokens = s.split("" "");         int[] result = new int[N];         for (int i=0; i<N; i++) {             result[i] = Integer.parseInt(tokens[i]);         }         return result;     }           } class Node {     int parent = -1;     List<Integer> nbrs = new ArrayList<>();     List<Integer> children = new ArrayList<>();     int left, right;     public Node(int l, int r) {         this.left = l;         this.right = r;     }     public Node(String s) {         String[] tokens = s.split("" "");         this.left = Integer.parseInt(tokens[0]);         this.right = Integer.parseInt(tokens[1]);     }     public void addNbr(int nbr) {         nbrs.add(nbr);     }     public void addChild(int child) {         children.add(child);     } } ",0
519,"import java.io.*; import java.util.*; public class Test {     static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     static StringTokenizer st;     static boolean[] vis;     static ArrayList<Integer>[] adj;     static int[] l, r;     static long[][] dp;     @SuppressWarnings(""unchecked"")     public static void main(String[] args) throws IOException {         int T = readInt();         for (int t = 0; t < T; t++) {             int n = readInt();             l = new int[n + 1];             r = new int[n + 1];             for (int i = 1; i <= n; i++) {                 l[i] = readInt();                 r[i] = readInt();             }             adj = new ArrayList[n + 1];             for (int i = 1; i <= n; i++) adj[i] = new ArrayList<>();             for (int i = 0; i < n - 1; i++) {                 int u = readInt(), v = readInt();                 adj[u].add(v);                 adj[v].add(u);             }             dp = new long[n + 1][2];             vis = new boolean[n + 1];             vis[1] = true;             dfs(1);             System.out.println(Math.max(dp[1][0], dp[1][1]));         }     }     static void dfs(int u) {         for (int x : adj[u]) {             if (!vis[x]) {                 vis[x] = true;                 dfs(x);                 dp[u][0] += Math.max(dp[x][0] + Math.abs(l[u] - l[x]), dp[x][1] + Math.abs(l[u] - r[x]));                 dp[u][1] += Math.max(dp[x][0] + Math.abs(r[u] - l[x]), dp[x][1] + Math.abs(r[u] - r[x]));             }         }     }     static String next() throws IOException {         while (st == null || !st.hasMoreTokens())             st = new StringTokenizer(br.readLine().trim());         return st.nextToken();     }     static int readInt() throws IOException {         return Integer.parseInt(next());     } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; public class ParsasHumongousTree {     public static void main(String args[]) throws IOException {         Reader scan = new Reader();         StringBuilder sb = new StringBuilder();         int t = scan.nextInt();         while (t-- > 0) {             int n = scan.nextInt();             int[] l = new int[n + 1];             int[] r = new int[n + 1];             for (int i = 1; i <= n; i++) {                 l[i] = scan.nextInt();                 r[i] = scan.nextInt();             }             Graph g = new Graph(n);             for (int i = 0; i < n - 1; i++) {                 g.addEdge(scan.nextInt(), scan.nextInt());             }             sb.append(g.dfs(l, r) + ""\n"");         }         System.out.println(sb);     } } class Graph {     ArrayList<Integer>[] node;     int n;     int c = 0;     boolean[] vis;     Graph(int s) {         n = s + 1;         vis = new boolean[n + 1];         node = new ArrayList[n + 1];         for (int i = 0; i < n + 1; i++) {             node[i] = new ArrayList<>();         }     }     void addEdge(int u, int v) {         node[u].add(v);         node[v].add(u);         if (node[u].size() == 1) {             c = u;         }         if (node[v].size() == 1) {             c = v;         }     }     void cleanVisArray() {         for (int i = 0; i < n + 1; i++) {             vis[i] = false;         }     }     long dfs(int[] l, int[] r) {         cleanVisArray();         long[][] dp = new long[n][2];         dfsMain(1, dp, l, r);         return Math.max(dp[1][0], dp[1][1]);     }     void dfsMain(int v, long[][] dp, int[] l, int[] r) {         vis[v] = true;         for (int i : node[v]) {             if (!vis[i]) {                 dfsMain(i, dp, l, r);                 dp[v][0] += Math.max(Math.abs(l[v] - l[i]) + dp[i][0], Math.abs(l[v] - r[i]) + dp[i][1]);                 dp[v][1] += Math.max(Math.abs(r[v] - l[i]) + dp[i][0], Math.abs(r[v] - r[i]) + dp[i][1]);             }         }     } } ",0
520,"import java.io.*; import java.util.*; public class Test2  { static class node{ int l,r; ArrayList<Integer> child; node(int l,int r){ child = new  ArrayList<Integer>(); this.l = l; this.r = r; } }   static FastReader f = new FastReader(); public static void main(String[] args) throws IOException { int t =f.nextInt(); while(t-->0) { int n = f.nextInt(); ArrayList<node> arr = new  ArrayList<node>(); for(int i = 0;i<n;i++) { int l = f.nextInt(),r = f.nextInt(); arr.add(new node(l,r)); } for(int i = 0;i<n-1;i++) { int u = f.nextInt()-1,v = f.nextInt()-1; arr.get(u).child.add(v); arr.get(v).child.add(u); } long dp[][] = new long[n][2]; for(int i = 0;i<n;i++)Arrays.fill(dp[i],-1); long min = 0; long max = 0; for(int e:arr.get(0).child) {  min+=fun(arr, e, 0, arr.get(0).l,dp); } for(int e:arr.get(0).child) {  max+=fun(arr, e, 0, arr.get(0).r,dp); } System.out.println(Math.max(min, max));      }      }    static long fun(ArrayList<node> arr,int i,int p,int pre,long dp[][]) {    long min = 0,max = 0;    if(dp[i][0]!=-1) {    min = dp[i][0];    }else {    for(int e:arr.get(i).child) {    if(e!=p) {    min+=fun(arr, e, i, arr.get(i).l,dp);    }    }    dp[i][0] =min;    }    if(dp[i][1]!=-1) {    max = dp[i][1];    }else {    for(int e:arr.get(i).child) {    if(e!=p) {    max+=fun(arr, e, i, arr.get(i).r,dp);    }    }dp[i][1] = max;    }    min+=(Math.abs(arr.get(i).l-pre));    max +=Math.abs(arr.get(i).r-pre);        return Math.max(min, max);    } } ","import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int t=Integer.parseInt(bu.readLine());         while(t-->0)         {             int n=Integer.parseInt(bu.readLine());             g=new ArrayList[n];             int i;             for(i=0;i<n;i++)             {                 g[i]=new ArrayList<>();                 String st[]=bu.readLine().split("" "");                 a[i][0]=Integer.parseInt(st[0]); a[i][1]=Integer.parseInt(st[1]);                 s[i][0]=s[i][1]=0;             }             for(i=0;i<n-1;i++)             {                 String st[]=bu.readLine().split("" "");                 int u=Integer.parseInt(st[0])-1,v=Integer.parseInt(st[1])-1;                 g[u].add(v); g[v].add(u);             }             dfs(0,-1);             sb.append(Math.max(s[0][0],s[0][1])+""\n"");         }         System.out.print(sb);     }     static ArrayList<Integer> g[];     static int N=100000,a[][]=new int[N][2];     static long s[][]=new long[N][2];     static void dfs(int n,int p)     {         for(int x:g[n])         if(x!=p)         {             dfs(x,n);             s[n][0]+=Math.max(s[x][0]+Math.abs(a[x][0]-a[n][0]),s[x][1]+Math.abs(a[x][1]-a[n][0]));             s[n][1]+=Math.max(s[x][0]+Math.abs(a[x][0]-a[n][1]),s[x][1]+Math.abs(a[x][1]-a[n][1]));         }     } } ",0
521,"import java.io.*; import java.util.*; public class a {     public static void main(String[] args){         FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             String a = sc.next();             String b = sc.next();             int change = 0;             int nochange = 0;             for(int i=0; i<n; i++){                 if(a.charAt(i) == b.charAt(i)){                     nochange++;                 }                 else{                     change++;                 }             }             if(change%2 == 0 && nochange%2 == 0){                                  int count1 = 0;                 for(int i=0; i<n; i++){                     if(a.charAt(i) != b.charAt(i) && a.charAt(i) == '1'){                         count1++;                     }                 }                 if(count1 == change/2){                     System.out.println(change);                 }                 else{                     System.out.println(-1);                 }             }             else if(change%2 == 0 && nochange%2 == 1){                                  int count1 = 0;                 int ans = Integer.MAX_VALUE;                 for(int i=0; i<n; i++){                     if(a.charAt(i) == b.charAt(i) && a.charAt(i) == '1'){                         count1++;                     }                 }                 if(count1 == nochange/2 + 1){                     ans = Math.min(ans, nochange);                 }                 count1 = 0;                 for(int i=0; i<n; i++){                     if(a.charAt(i) != b.charAt(i) && a.charAt(i) == '1'){                         count1++;                     }                 }                 if(count1 == change/2){                     ans = Math.min(ans, change);                 }                 if(ans == Integer.MAX_VALUE){                     System.out.println(-1);                 }                 else{                     System.out.println(ans);                 }             }             else if(change%2 == 1 && nochange%2 == 0){                 System.out.println(-1);             }             else{                 int count1 = 0;                 for(int i=0; i<n; i++){                     if(a.charAt(i) == b.charAt(i) && a.charAt(i) == '1'){                         count1++;                     }                 }                 if(count1 == nochange/2 + 1){                     System.out.println(nochange);                 }                 else{                     System.out.println(-1);                 }             }         }     } } ","import java.io.*; import java.util.*; public class GFG { public static void main (String[] args) { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); while(t-->0){     int n=sc.nextInt();     String a=sc.next();     String b=sc.next();    int i;    int zero=0,one=0;      int x=0,y=0,x1=0,y1=0;     for(i=0;i<n;i++){         if(a.charAt(i)=='0')         zero++;         else         one++;     }     if(one==0){         if(a.equals(b))         System.out.println(""0"");         else         System.out.println(""-1"");     }     else{         int same=0,diff=0;         for(i=0;i<n;i++){             if(a.charAt(i)==b.charAt(i)){                 same++;                 x++;                 if(a.charAt(i)=='1'){                     x1++;                                      }             }             else{                 diff++;                 y++;                 if(a.charAt(i)=='1'){                     y1++;                                      }             }                      }         int ans=Integer.MAX_VALUE;     if(x%2!=0&&(x+1)/2==x1){         ans=x;              }     if(y%2==0&&(y/2)==y1){ ans=Math.min(ans,y);     }     if(ans==Integer.MAX_VALUE){                  System.out.println(""-1"");              }else{                  System.out.println(ans);     }             }      }      }      } ",0
522,"import java.io.*; import java.util.*; public class blue_red_permutation {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int T = Integer.parseInt(br.readLine());         while (T-- > 0) {             int N = Integer.parseInt(br.readLine());             String line1[] = br.readLine().split("" "");             char line2[] = br.readLine().toCharArray();             Range ranges[] = new Range[N];             for (int i = 0; i < N; i++) {                 int cnt = Integer.parseInt(line1[i]);                 int low = line2[i] == 'B' ? Math.min(1, cnt) : Math.max(1, cnt);                 int high = line2[i] == 'R' ? Math.max(N, cnt) : Math.min(N, cnt);                 ranges[i] = new Range(low, high);             }             Arrays.sort(ranges);             boolean doable = true;             for (int i = 0; i < N; i++) {                 if (!ranges[i].contains(i + 1)) { doable = false; break; }             }             System.out.println(doable ? ""YES"" : ""NO"");         }     }     static class Range implements Comparable<Range> {         final int low, high;                  Range(int low,int high) {             this.low = low;             this.high = high;         }         public boolean contains(int val) {             return val >= this.low && val <= this.high;         }              } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",0
523,"import java.io.*; import java.util.*; public class c {     public static BufferedReader in;     public static void main(String[] args) throws Exception {         in = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int numcases = Integer.parseInt(in.readLine());         for (int casenum = 0; casenum < numcases; casenum++) {             int n = Integer.parseInt(in.readLine());             int[] p = new int[n];             Arrays.fill(p, -1);             for (int i = 0; i < n; i++) {                 if (p[i] != -1)                     continue;                 ArrayList<Integer> cycle = new ArrayList<>();                 cycle.add(query(i));                 while (cycle.size() == 1 || !cycle.get(0).equals(cycle.get(cycle.size() - 1))) {                     cycle.add(query(i));                 }                 cycle.remove(cycle.size() - 1);                 for (int j = 0; j < cycle.size() - 1; j++) {                     p[cycle.get(j)] = cycle.get(j + 1);                 }                 p[cycle.get(cycle.size() - 1)] = cycle.get(0);                              }             StringBuilder b = new StringBuilder();             b.append(""! "");             for (int i = 0; i < n; i++) {                 b.append((p[i] + 1) + (i < n - 1 ? "" "" : ""\n""));             }             System.out.print(b);             System.out.flush();         }         in.close();         out.close();     }     public static int query(int i) throws Exception {         System.out.println(""? "" + (i + 1));         System.out.flush();         int k = Integer.parseInt(in.readLine());         return k - 1;     } } ","import java.io.*; import java.util.*; public class c { public static BufferedReader in; public static void main(String[] args) throws Exception { in = new BufferedReader(new InputStreamReader(System.in)); PrintWriter out = new PrintWriter(System.out); int numcases = Integer.parseInt(in.readLine()); for (int casenum = 0; casenum < numcases; casenum++) { int n = Integer.parseInt(in.readLine()); int[] p = new int[n]; Arrays.fill(p, -1); for (int i = 0; i < n; i++) { if (p[i] != -1) continue; ArrayList<Integer> cycle = new ArrayList<>(); cycle.add(query(i)); while (cycle.size() == 1 || !cycle.get(0).equals(cycle.get(cycle.size() - 1))) { cycle.add(query(i)); } cycle.remove(cycle.size() - 1); for(int j = 0; j < cycle.size() - 1; j++){ p[cycle.get(j)] = cycle.get(j + 1); } p[cycle.get(cycle.size() - 1)] = cycle.get(0); } StringBuilder b = new StringBuilder(); b.append(""! ""); for (int i = 0; i < n; i++) { b.append((p[i] + 1) + (i < n - 1 ? "" "" : ""\n"")); } System.out.print(b); System.out.flush(); } in.close(); out.close(); } public static int query(int i) throws Exception { System.out.println(""? "" + (i + 1)); System.out.flush(); int k = Integer.parseInt(in.readLine()); return k - 1; } } ",1
524,"import java.io.*; import java.util.*; public class c {     public static void main(String[] args) throws Exception {         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int numCases = Integer.parseInt(in.readLine());         for (int casenum = 0; casenum < numCases; casenum++) {             int n = Integer.parseInt(in.readLine());             long[] arr = new long[n];             StringTokenizer tokenizer = new StringTokenizer(in.readLine());             for (int i = 0; i < n; i++) {                 arr[i] = Long.parseLong(tokenizer.nextToken());             }             long low = 0;             long high = 1000000000;             low--;             while (low < high) {                 long mid = low + (high - low + 1) / 2;                 boolean works = test(arr, mid);                 if (works) {                     low = mid;                 } else {                     high = mid - 1;                 }                              }             System.out.println(low);         }         in.close();         out.close();     }     public static boolean test(long[] arr, long k) {         long[] h = new long[arr.length];         for (int i = 0; i < arr.length; i++) {             h[i] = arr[i];         }         for (int i = h.length - 1; i - 2 >= 0; i--) {             if (h[i] < k)                 break;             long d = Math.min((h[i]-k) / 3, arr[i]/3);             h[i] -= 3 * d;             h[i - 1] += d;             h[i-+ 2] += 2 * d;         }         for (int i = 0; i < h.length; i++) {             if (h[i] < k)                 return false;         }                  return true;     } } ","import java.util.*; import java.io.*; public class BalancedStones { public static void main(String[] args) throws IOException { BufferedReader f = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(f.readLine()); while (t > 0) { t--; int n = Integer.parseInt(f.readLine()); int[] arr = new int[n]; StringTokenizer st = new StringTokenizer(f.readLine()); for (int i = 0; i < n; i++) { arr[i] = Integer.parseInt(st.nextToken()); } int low = 0; int high = 1000000000; int answer = -1; while (low <= high) { int mid = low + (high - low) / 2; if (check(mid, arr)) { answer = mid; low = mid + 1; } else { high = mid - 1; } } System.out.println(answer); } } public static boolean check(int value, int[] old) { int[] newarr = new int[old.length]; for (int i = 0; i < old.length; i++) { newarr[i] = old[i]; } for (int i = old.length - 1; i >= 0; i--) { if (newarr[i] < value) return false; if (i > 1) { int d = Math.min(newarr[i] - value, old[i]) / 3; newarr[i] -= 3 * d; newarr[i - 1] += d; newarr[i - 2] += 2 * d; } } return true; } } ",0
525,"import java.io.*; import java.util.*; public class c { public static BufferedReader in; public static void main(String[] args) throws Exception { in = new BufferedReader(new InputStreamReader(System.in)); PrintWriter out = new PrintWriter(System.out); int numcases = Integer.parseInt(in.readLine()); for (int casenum = 0; casenum < numcases; casenum++) { int n = Integer.parseInt(in.readLine()); int[] p = new int[n]; Arrays.fill(p, -1); for (int i = 0; i < n; i++) { if (p[i] != -1) continue; ArrayList<Integer> cycle = new ArrayList<>(); cycle.add(query(i)); while (cycle.size() == 1 || !cycle.get(0).equals(cycle.get(cycle.size() - 1))) { cycle.add(query(i)); } cycle.remove(cycle.size() - 1); for(int j = 0; j < cycle.size() - 1; j++){ p[cycle.get(j)] = cycle.get(j + 1); } p[cycle.get(cycle.size() - 1)] = cycle.get(0); } StringBuilder b = new StringBuilder(); b.append(""! ""); for (int i = 0; i < n; i++) { b.append((p[i] + 1) + (i < n - 1 ? "" "" : ""\n"")); } System.out.print(b); System.out.flush(); } in.close(); out.close(); } public static int query(int i) throws Exception { System.out.println(""? "" + (i + 1)); System.out.flush(); int k = Integer.parseInt(in.readLine()); return k - 1; } } ","import java.io.*; import java.util.ArrayList; import java.util.List; import java.util.StringTokenizer; public class C {     private static StringTokenizer st;     private static BufferedReader br;     private static PrintWriter out;     static boolean[]used;     static int[]p;     public static void main(String[] args) throws IOException {         br = new BufferedReader(new InputStreamReader(System.in));         out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));         int t = nextInt();         while (t --> 0) {             int n = nextInt();             used = new boolean[n+1];             p = new int[n+1];             for (int i = 1; i <= n; i++) {                 if (!used[i]) {                     go(i);                 }             }             System.out.print(""! "");             for (int i = 1; i <= n; i++) {                 System.out.print(p[i]+"" "");             }             System.out.println();         }         out.close();     }     private static void go(int i) throws IOException {         List<Integer> inCycle = new ArrayList<>();         int first = -1;         while (true) {             System.out.println(""? "" + i);             int x = nextInt();             used[x] = true;             if (x == first) {                 break;             }             if (first == -1) {                 first = x;             }             inCycle.add(x);         }         List<Integer> numbers = new ArrayList<>();         for (int j = 0; j < inCycle.size(); j++) {             if (inCycle.get(j) == i) {                 for (int k = j; k < inCycle.size(); k++) {                     numbers.add(inCycle.get(k));                 }                 for (int k = 0; k < j; k++) {                     numbers.add(inCycle.get(k));                 }                 break;             }         }         if (numbers.size() == 1) {             p[numbers.get(0)] = numbers.get(0);         } else {             for (int j = 0; j < numbers.size()-1; j++) {                 p[numbers.get(j)] = numbers.get(j+1);             }             p[numbers.get(numbers.size()-1)] = numbers.get(0);         }     }     private static int nextInt() throws IOException {         return Integer.parseInt(next());     }               private static String next() throws IOException {         while (st==null || !st.hasMoreTokens())             st = new StringTokenizer(br.readLine());         return st.nextToken();     } } ",0
526,"import java.io.*; import java.util.*; public class c { public static void main(String args[]) throws IOException { FastScanner in = new FastScanner(System.in); PrintWriter out = new PrintWriter(System.out); int t = in.nextInt(); for ( ; t > 0; t--) { int n = in.nextInt(); long[] vals = new long[n]; for (int i = 0; i < n; i++) vals[i] = in.nextInt(); long oo = (long)(1e18); long[] min = {oo, oo}; long[] sub = {n, n}; long sum = 0; long max = oo; for (int i = 0; i < n; i++) { min[i % 2] = Math.min(min[i % 2], vals[i]); sub[i % 2]--; sum += vals[i]; if (i > 0) { max = Math.min(max, sum + min[0] * sub[0] + min[1] * sub[1]); } } out.println(max); } out.close(); } } ","import java.util.Scanner; public class C1499 { public static void main(String[] args) { Scanner in = new Scanner(System.in); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); long[] mn = { Long.MAX_VALUE, Long.MAX_VALUE }; long[] rem = { n, n }; long sum = 0; long ans = Long.MAX_VALUE; for (int i = 0; i < n; i++) { int temp = in.nextInt(); mn[i % 2] = Math.min(mn[i % 2], temp); rem[i % 2]--; sum += temp; if (i > 0) { long cur = sum + rem[0] * mn[0] + rem[1] * mn[1]; ans = Math.min(ans, cur); } } System.out.println(ans); } } } ",1
527,"import java.io.*; import java.util.*; public class codeforces2 {     static List<Integer> primes;     static final long X = 10000000000L;     public static void main(String[] args) {         FastScanner sc = new FastScanner();         PrintWriter pw = new PrintWriter(System.out);         int tc = sc.ni();         for (int rep = 0; rep < tc; rep++) {             int N = sc.ni();             int[][] edges= new int[N-1][];             for (int i = 0; i < edges.length; i++) {                 edges[i] = new int[] {sc.ni() - 1, sc.ni() - 1};             }             pw.println(solve(edges, N));                      }         pw.close();     }     public static String solve(int[][] edges, int N) {         Map<Integer, Set<Integer>> graph = new HashMap();         Map<Long, Integer> hash = new HashMap();         int idx = 0;         for (int[] e : edges) {             graph.putIfAbsent(e[0], new HashSet());             graph.get(e[0]).add(e[1]);             graph.putIfAbsent(e[1], new HashSet());             graph.get(e[1]).add(e[0]);                                                    hash.put(getHash(e[0], e[1]), idx);             idx++;         }                  Queue<int[]> q = new LinkedList();                  int[] initial = new int[2];         for (int node : graph.keySet()) {             int len = graph.get(node).size();             if (len > 2) return ""-1"";             if (len == 2) initial = new int[] {node, -1};         }         q.offer(initial);                  int rotate = 0;                     int[] ret = new int[edges.length];         boolean[] vis = new boolean[N];         vis[initial[0]] = true;         while (!q.isEmpty()) {             int[] temp = q.poll();             int node = temp[0];             int old_color = temp[1];                          if (old_color == -1) {                 int[] arr = new int[] {2, 11};                 int p = 0;                 for (int neighbor : graph.get(node)) {                     ret[hash.get( getHash(node,neighbor) )] = arr[p];                     q.offer(new int[] {neighbor, arr[p]});                     p++;                     vis[neighbor] = true;                                      }                              }             else if (old_color == 2) {                                  int amt = 0;                 for (int neighbor : graph.get(node)) {                     if (vis[neighbor] == true) continue;                     vis[neighbor] = true;                                          ret[hash.get( getHash(node,neighbor) )] = 11;                     q.offer(new int[] {neighbor, 11});                                          amt++;                 }                 if (amt >= 2) return ""-1"";             }             else {                                  int amt = 0;                 for (int neighbor : graph.get(node)) {                     if (vis[neighbor] == true) continue;                     vis[neighbor] = true;                                          ret[hash.get( getHash(node,neighbor) )] = 2;                     q.offer(new int[] {neighbor, 2});                                          amt++;                 }                 if (amt >= 2) return ""-1"";                          }         }         StringBuilder sb = new StringBuilder();         for (int x : ret) sb.append(x + "" "");         return sb.substring(0, sb.length() -1);              }     static long getHash(int u, int v) {                  if (u > v) {             int temp = u;             u = v;             v = temp;         }         return u*X+v;     }                                                                                                                                } ","import java.io.*; import java.util.*; import static java.lang.Math.*; public class C {     static InputReader in;     static PrintWriter out;     public static void main(String[] args) {                  initReaderPrinter(false);         solve(in.nextInt());              }                    static int n;     static List<int[]>[] adj;     static int[] ans;     static void solve(int testCnt) {         for (int testNumber = 0; testNumber < testCnt; testNumber++) {             n = in.nextInt();             adj = new List[n + 1];             for(int i = 0; i <= n; i++) {                 adj[i] = new ArrayList<>();             }             ans = new int[n - 1];             for(int i = 0; i < n - 1; i++) {                 int u = in.nextInt(), v = in.nextInt();                 adj[u].add(new int[]{v, i});                 adj[v].add(new int[]{u, i});             }             if(adj[1].size() > 2) out.println(-1);             else {                 boolean can = false;                 if(adj[1].size() == 1) {                     ans[adj[1].get(0)[1]] = 2;                     if(dfs(adj[1].get(0)[0], 1, 2)) {                         can = true;                     }                 }                 else {                     ans[adj[1].get(0)[1]] = 2;                     ans[adj[1].get(1)[1]] = 3;                     if(dfs(adj[1].get(0)[0] ,1, 2) && dfs(adj[1].get(1)[0], 1, 3)) {                         can = true;                     }                 }                 if(can) {                     for(int v : ans) out.print(v + "" "");                     out.println();                 }                 else out.println(-1);             }         }         out.close();     }     static boolean dfs(int curr, int par, int prev) {         if(adj[curr].size() - 1 > 1) return false;         for(int[] next : adj[curr]) {             if(next[0] == par) continue;             ans[next[1]] = prev == 2 ? 3 : 2;             if(!dfs(next[0], curr, prev == 2 ? 3 : 2)) {                 return false;             }         }         return true;     }     static void initReaderPrinter(boolean test) {         if (test) {             try {                 in = new InputReader(new FileInputStream(""src/input.in""));                 out = new PrintWriter(new FileOutputStream(""src/output.out""));             } catch (IOException e) {                 e.printStackTrace();             }         } else {             in = new InputReader(System.in);             out = new PrintWriter(System.out);         }     }      } ",0
528,"import java.io.*; import java.util.*; public class cp { static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0)); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i)); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } out.flush(); out.close(); System.gc(); }                                           static ArrayList<Integer> ans;                                                  static class Pair implements Comparable<Pair>     {        int x;        int y;        Pair(int x,int y)         {            this.x=x;            this.y=y;                    }                             }                        static  PrintWriter out=new PrintWriter(System.out); } ","import java.io.*; import java.util.*; public class CP { static Scanner sc=new Scanner(System.in); public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } System.out.println(mana);  } } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } } } ",1
529,"import java.io.*; import java.util.*; public class cp { static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0)); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i)); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } out.flush(); out.close(); System.gc(); }                                           static ArrayList<Integer> ans;                                                  static class Pair implements Comparable<Pair>     {        int x;        int y;        Pair(int x,int y)         {            this.x=x;            this.y=y;                    }                             }                        static  PrintWriter out=new PrintWriter(System.out); } ","import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=1; t=sc.nextInt(); for(int i=1;i<=t;i++) solve(i); out.close(); out.flush(); } static void solve(int CASENO) throws IOException, CloneNotSupportedException { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } }   } ",1
530,"import java.io.*; import java.util.*; public class cp { static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0)); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i)); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } out.flush(); out.close(); System.gc(); }                                           static ArrayList<Integer> ans;                                                  static class Pair implements Comparable<Pair>     {        int x;        int y;        Pair(int x,int y)         {            this.x=x;            this.y=y;                    }                             }                        static  PrintWriter out=new PrintWriter(System.out); } ","import java.io.*; import java.util.*; public class cp { static int mod=(int)1e9+7; static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0)); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i)); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } out.flush(); out.close(); System.gc(); }                                                                                      static class Pair implements Comparable<Pair>     {        int x;        int y;        Pair(int x,int y)         {            this.x=x;            this.y=y;                    }                             }                        static  PrintWriter out=new PrintWriter(System.out); } ",1
531,"import java.io.*; import java.util.*; public class cp { static int mod=(int)1e9+7; static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0)); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i)); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } out.flush(); out.close(); System.gc(); }                                                                                      static class Pair implements Comparable<Pair>     {        int x;        int y;        Pair(int x,int y)         {            this.x=x;            this.y=y;                    }                             }                        static  PrintWriter out=new PrintWriter(System.out); } ","import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException, CloneNotSupportedException { int t=1; t=sc.nextInt(); for(int i=1;i<=t;i++) solve(i); out.close(); out.flush(); } static void solve(int CASENO) throws IOException, CloneNotSupportedException { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0).clone()); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i).clone()); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } static class Pair implements Cloneable, Comparable<Pair> { int x,y; Pair(int a,int b) { this.x=a; this.y=b; } @Override protected Pair clone() throws CloneNotSupportedException { return new Pair(this.x,this.y); } }   } ",1
532,"import java.io.*; import java.util.*; public class cp { static int mod=(int)1e9+7; static FastReader sc=new FastReader(System.in); public static void main(String[] args) throws IOException {  long tc=sc.nextLong(); while(tc-->0) { int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) k[i]=sc.nextInt(); for(int i=0;i<n;i++) h[i]=sc.nextInt(); ArrayList<Pair> interval=new ArrayList<Pair>(); ArrayList<Pair> act=new ArrayList<Pair>(); for(int i=0;i<n;i++) interval.add(new Pair(k[i]-h[i]+1,k[i])); Collections.sort(interval); act.add(interval.get(0)); for(int i=1;i<n;i++) { Pair p=act.get(act.size()-1); if(p.y<interval.get(i).x) act.add(interval.get(i)); else p.y=Math.max(p.y, interval.get(i).y); } long mana=0; for(Pair p: act) { long x=p.y-p.x+1; mana+=(x*(x+1))/2; } out.println(mana); } out.flush(); out.close(); System.gc(); }                                                                                      static class Pair implements Comparable<Pair>     {        int x;        int y;        Pair(int x,int y)         {            this.x=x;            this.y=y;                    }                             }                        static  PrintWriter out=new PrintWriter(System.out); } ","import java.util.*; import java.io.*; import java.time.*; import static java.lang.Math.*; @SuppressWarnings(""unused"") public class C { static boolean DEBUG = false; static Reader fs; static PrintWriter pw; static void solve() { int n = fs.nextInt(), k[] = fs.readArray(n), h[] = fs.readArray(n); int prev_h = h[0], prev_k = k[0]; ArrayList<pair> intervals = new ArrayList<>(); for (int i = 0; i < n; i++) { int start = k[i] - h[i] + 1; int end = k[i]; intervals.add(new pair(start, end)); } Collections.sort(intervals); ArrayList<pair> merged = new ArrayList<>(); merge(intervals, merged); long ans = 0; for(int i = 0 ; i < merged.size() ; i++) { ans += sum(merged.get(i).len()); } pw.println(ans); } static void merge(ArrayList<pair>a1, ArrayList<pair>a2) { int n = a1.size(); int index = 0; for(int i =1 ; i < n ; i++) { if(a1.get(index).s >= a1.get(i).f) { a1.get(index).s = max(a1.get(index).s, a1.get(i).s); } else { index++; a1.set(index, a1.get(i)); } } for(int i = 0 ; i <= index ; i++) { a2.add(a1.get(i)); } } static pair merge(pair p1, pair p2) { return new pair(min(p1.f, p2.f), max(p1.s, p2.s)); } static long sum(long n) { return (n * (n + 1) / 2); } static class pair implements Comparable<pair>{ int f, s; pair(int f, int s) { this.f = f; this.s = s; } public int len() { return s - f + 1; } } public static void main(String[] args) throws IOException { Instant start = Instant.now(); if (args.length == 2) { System.setIn(new FileInputStream(new File(""D:\\program\\javaCPEclipse\\CodeForces\\src\\input.txt""))); System.setErr(new PrintStream(new File(""D:\\program\\javaCPEclipse\\CodeForces\\src\\error.txt""))); DEBUG = true; } fs = new Reader(); pw = new PrintWriter(System.out); int t = fs.nextInt(); while (t-- > 0) { solve(); } Instant end = Instant.now(); if (DEBUG) { pw.println(Duration.between(start, end)); } pw.close(); } static void sort(int a[]) { ArrayList<Integer> l = new ArrayList<Integer>(); for (int x : a) l.add(x); Collections.sort(l); for (int i = 0; i < a.length; i++) { a[i] = l.get(i); } } } ",0
533,"import java.io.*; import java.util.*; public class ddd {          public static void main(String[] args)             throws IOException {         ADMIN_MODE();         int t = sc.ni();while(t-->0)             solve();     }     static boolean[] neg;     static void solve() throws IOException {         int n = sc.ni();         neg = new boolean[n];         pr[] arr = new pr[n];         for(int i = 0; i < n; i++) {             long curr = sc.nl();             if(curr < 0) neg[i] = true;             arr[i] = new pr(Math.abs(curr), i);         }         Arrays.sort(arr);         long[] res = new long[n];         for(int i = 0; i < n-1; i+=2) {             long lcm = lcm(arr[i].val, arr[i+1].val);             res[arr[i].idx] = lcm/arr[i].val * (neg[arr[i].idx] ? -1 :1) * -1;             res[arr[i+1].idx] = lcm/arr[i+1].val * (neg[arr[i+1].idx] ? -1 :1);         }         if(n%2==1) {             long aa = arr[n-3].val * (neg[arr[n-3].idx] ? -1 : 1);             long bb = arr[n-2].val * (neg[arr[n-2].idx] ? -1 : 1);             long cc = arr[n-1].val * (neg[arr[n-1].idx] ? -1 : 1);             if (aa == -1*bb) {                 if(aa == cc) {                     pr temp = arr[n-1];                     arr[n-1] = arr[n-2];                     arr[n-2] = temp;                 } else {                     pr temp = arr[n-3];                     arr[n-3] = arr[n-1];                     arr[n-1] = temp;                 }             }         }         if(n%2==1) {             long a = arr[n-2].val * (neg[arr[n-2].idx] ? -1 :1) +                     arr[n-3].val * (neg[arr[n-3].idx] ? -1 :1);             boolean f = (a < 0);             a = Math.abs(a);             long b = arr[n-1].val;             long lcm = lcm(a, b);             if(f) {                 res[arr[n-2].idx] = lcm/a * -1;                 res[arr[n-3].idx] = lcm/a * -1;             } else {                 res[arr[n - 2].idx] = lcm / a;                 res[arr[n - 3].idx] = lcm / a;             }             res[arr[n-1].idx] = lcm/b * (neg[arr[n-1].idx] ? -1 :1) * - 1;         }         for(int i = 0; i < n; i++) {             System.out.println(res[i]+"" "");         }         System.out.println();     }     static class pr implements Comparable<pr>{         long val;int idx;         public pr(long val, int idx) {             this.val = val;             this.idx = idx;         }              }                              static FastReader sc = new FastReader();     static OutputStream outputStream = System.out;               private static void ADMIN_MODE() throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             sc = new FastReader(new FileInputStream(""input.txt""));         }     }          static long gcd(long a, long b) {         return b == 0 ? (a < 0L ? -a: a) : gcd(b, a%b);     }     static long lcm(long a, long b) {         return a/gcd(a, b)*b;     }                } ","import java.io.*; import java.util.*; public class ddd {          public static void main(String[] args)             throws IOException {         ADMIN_MODE();         int t = sc.ni();while(t-->0)             solve();         w.close();     }     static boolean[] neg;     static void solve() throws IOException {         int n = sc.ni();         neg = new boolean[n];         pr[] arr = new pr[n];         for(int i = 0; i < n; i++) {             long curr = sc.nl();             if(curr < 0) neg[i] = true;             arr[i] = new pr(Math.abs(curr), i);         }         Arrays.sort(arr);         long[] res = new long[n];         for(int i = 0; i < n-1; i+=2) {             long lcm = lcm(arr[i].val, arr[i+1].val);             res[arr[i].idx] = lcm/arr[i].val * (neg[arr[i].idx] ? -1 :1) * -1;             res[arr[i+1].idx] = lcm/arr[i+1].val * (neg[arr[i+1].idx] ? -1 :1);         }         if(n%2==1) {             long aa = arr[n-3].val * (neg[arr[n-3].idx] ? -1 : 1);             long bb = arr[n-2].val * (neg[arr[n-2].idx] ? -1 : 1);             long cc = arr[n-1].val * (neg[arr[n-1].idx] ? -1 : 1);             if (aa == -1*bb) {                 if(aa == cc) {                     pr temp = arr[n-1];                     arr[n-1] = arr[n-2];                     arr[n-2] = temp;                 } else {                     pr temp = arr[n-3];                     arr[n-3] = arr[n-1];                     arr[n-1] = temp;                 }             }         }         if(n%2==1) {             long a = arr[n-2].val * (neg[arr[n-2].idx] ? -1 :1) +                     arr[n-3].val * (neg[arr[n-3].idx] ? -1 :1);             boolean f = (a < 0);             a = Math.abs(a);             long b = arr[n-1].val;             long lcm = lcm(a, b);             if(f) {                 res[arr[n-2].idx] = lcm/a * -1;                 res[arr[n-3].idx] = lcm/a * -1;             } else {                 res[arr[n - 2].idx] = lcm / a;                 res[arr[n - 3].idx] = lcm / a;             }             res[arr[n-1].idx] = lcm/b * (neg[arr[n-1].idx] ? -1 :1) * - 1;         }         for(int i = 0; i < n; i++) {             System.out.println(res[i]+"" "");         }     }     static class pr implements Comparable<pr>{         long val;int idx;         public pr(long val, int idx) {             this.val = val;             this.idx = idx;         }              }                              static FastReader sc = new FastReader();     static OutputStream outputStream = System.out;               private static void ADMIN_MODE() throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             sc = new FastReader(new FileInputStream(""input.txt""));         }     }          static long gcd(long a, long b) {         return b == 0 ? (a < 0L ? -a: a) : gcd(b, a%b);     }     static long lcm(long a, long b) {         return a/gcd(a, b)*b;     }                } ",1
534,"import java.io.*; import java.util.*; public class huge implements Runnable  { private boolean console=false; ArrayList<Integer> adj[]; int maxi,maxc; int dis[]; int vis[]; Queue<Integer> q; public void solve()  { int i; int n=in.ni(); maxi=0; maxc=0; int a=in.ni()-1,b=in.ni()-1;  int da=in.ni(); int db=in.ni(); adj=new ArrayList[n]; for(i=0;i<n;i++) adj[i]=new ArrayList(); for(i=0;i<n-1;i++) { int u=in.ni()-1; int v=in.ni()-1; adj[u].add(v); adj[v].add(u);  } maxc=maxi=0; vis=new int[n]; int cur=-1; dfs(1,cur); Arrays.fill(vis,0); cur=-1; maxc=0; dfs(maxi,cur); int d=(maxc); int ans=1; if(db<=2*da||2*da>=d||da>=db) ans=0; q= new LinkedList(); vis=new int[n]; q.add(a); dis=new int[n]; dis[a]=0; int cu=0; while(!q.isEmpty()||vis[b]==0) { int v=q.poll(); vis[v]=1; bfs(v); } if(dis[b]<=da) ans=0; if(ans==1) out.println(""Bob""); else out.println(""Alice""); } public void bfs(int v) { for(int node:adj[v]) { if(vis[node]==0) { q.add(node); dis[node]=dis[v]+1; } } } public void dfs(int v,int cur) { cur++; if(cur>maxc) { maxc=cur; maxi=v; } vis[v]=1; for(int node:adj[v]) { if(vis[node]==0) dfs(node,cur); } } @Override public void run() { try {  init();  }  catch (FileNotFoundException e) {  e.printStackTrace();   } int t= in.ni(); while (t-->0) { solve(); out.flush(); } } private FastInput in;    private PrintWriter out; public static void main(String[] args) throws Exception { new huge().run(); } private void init() throws FileNotFoundException { InputStream inputStream = System.in;  OutputStream outputStream = System.out; try {  if (!console && System.getProperty(""user.name"").equals(""sachan"")) { outputStream = new FileOutputStream(""/home/sachan/Desktop/output.txt""); inputStream = new FileInputStream(""/home/sachan/Desktop/input.txt"");   } }catch (Exception ignored) {} out = new PrintWriter(outputStream);  in = new FastInput(inputStream); } } ","import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class Template { static int mod = 1000000007; public static void main(String[] args) { FastScanner sc = new FastScanner(); int yo = sc.nextInt(); while (yo-- > 0) { int n = sc.nextInt();             int a = sc.nextInt()-1;             int b = sc.nextInt()-1;             int da = sc.nextInt();             int db = sc.nextInt();                          List<List<Integer>> list = new ArrayList<>();             for(int i = 0; i < n; i++) list.add(new ArrayList<>());                          for(int i = 0; i < n-1; i++){                 int x = sc.nextInt()-1;                 int y = sc.nextInt()-1;                 list.get(x).add(y);                 list.get(y).add(x);             }                          for(int i = 0; i <= n; i++) depth[i] = 0;             diam = 0;             dfs(a,-1,list);                          if(2 * da >= min(diam, db) || depth[b] <= da){                 out.println(""Alice"");             }             else {                 out.println(""Bob"");             }              } }          static int[] depth = new int[200001];     static int diam = 0;     static int dfs(int x, int p, List<List<Integer>> list) {         int len = 0;         List<Integer> ne = list.get(x);         for(int y : ne) {             if(y != p) {                 depth[y] = depth[x] + 1;                 int cur = 1 + dfs(y, x,list);                 diam = max(diam, cur + len);                 len = max(len, cur);             }         }         return len;     }     } ",0
535,"import java.io.*; import java.util.*; public class new1{           public static void main(String[] args)  throws IOException{ BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out)); FastReader s = new FastReader(); int t = s.nextInt(); for(int z = 0; z < t; z++) { int n = s.nextInt(); int[] ti = new int[n]; for(int i = 0; i < n; i++) ti[i] = s.nextInt(); int[] he = new int[n]; for(int i = 0; i < n; i++) he[i] = s.nextInt(); long ans = 0; int st = ti[n - 1] - he[n - 1] + 1; int en = ti[n - 1]; for(int i = n - 2; i >= 0; i--) { int st1 = ti[i] - he[i] + 1; int en1 = ti[i]; if(en1 >= st) { st = Math.min(st, st1); } else { long a1 = ((en - st + 1L) *  (en - st + 2L)) / 2; ans = ans + a1; st = st1; en = en1; } } ans = ans + ((en - st + 1L) *  (en - st + 2L)) / 2; System.out.println(ans); }       } }   ","import java.util.*; import java.lang.*; import java.io.*; import java.math.BigInteger; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.math.BigInteger; import java.util.List; import java.util.Map; import java.util.Map.Entry; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; public class k {                public static HashMap<Integer, Integer> sortByValue(HashMap<Integer, Integer> hm)     {                  List<Map.Entry<Integer, Integer> > list =                new LinkedList<Map.Entry<Integer, Integer> >(hm.entrySet());                    Collections.sort(list, new Comparator<Map.Entry<Integer, Integer> >() {                      });                            HashMap<Integer, Integer> temp = new LinkedHashMap<Integer, Integer>();         for (Map.Entry<Integer, Integer> aa : list) {             temp.put(aa.getKey(), aa.getValue());         }         return temp;     }  static int sieve =  1000000 ;  static boolean[] prime =  new boolean[sieve + 1] ;                 public static void sortbyColumn(int arr[][], int col)       {         Arrays.sort(arr, new Comparator<int[]>() {                           });     }  public static void sortbyColumn1(int arr[][], int col)       {         Arrays.sort(arr, new Comparator<int[]>() {                           });     }                                  public static void main(String args[]) throws NumberFormatException, IOException ,java.lang.Exception { Reader reader = new Reader();   PrintWriter out = new PrintWriter(System.out); BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out)); int cases=reader.nextInt();    while (cases-->0){        int N=reader.nextInt();                           HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();                                   int[] sec=new int[N];    int[] pow=new int[N];    ArrayList<Long> list=new ArrayList<Long>();            for(int i=0;i<N;i++)        {    sec[i]=reader.nextInt();    }    for(int i=0;i<N;i++)    {    pow[i]=reader.nextInt();    }    int last=sec[N-1];    int ind=sec[N-1]-pow[N-1]+1;    long ans=0;    int i=N-2;    while(i>=0)    {    if(sec[i]>=ind)    {    if(sec[i]-ind+1<pow[i])    {    ind=ind-(pow[i]-sec[i]+ind-1);    }    i--;    }    else if(sec[i]<ind)    {    ans=ans+((long)(last-ind+1))*((long)(last-ind+2))/(long)(2);    last=sec[i];       ind=sec[i]-pow[i]+1;       i--;    }            }    ans=ans+((long)(last-ind+1))*((long)(last-ind+2))/(long)(2);    System.out.println(ans);        }     }   } ",0
536,"import java.io.*; import java.util.*; public class practice { static FastScanner fs = new FastScanner(); public static void main(String[] args) { int t = 1; t = fs.nextInt();    for(int i=1;i<=t;i++) { solve(t); } } public static void dfs(int u, boolean visited[], ArrayList<ArrayList<Integer>> g[], int ans[], int x) { visited[u] = true; for(ArrayList<Integer> v:g[u]) { if(!visited[v.get(0)]) { ans[v.get(1)]=x; dfs(v.get(0),visited,g,ans,x^1); } } return; } @SuppressWarnings(""unused"") public static void solve(int tt) { int n = fs.nextInt(); @SuppressWarnings(""unchecked"") ArrayList<ArrayList<Integer>> g[] = new ArrayList[n]; for(int i=0;i<n;i++)g[i]=new ArrayList<ArrayList<Integer>>(); int ans[] = new int[n]; boolean visited[] = new boolean[n]; int deg[] = new int[n]; for(int i=0;i<n;i++)deg[i]=0; for(int i=0;i<n-1;i++) { int u = fs.nextInt() - 1;int v = fs.nextInt() - 1; ArrayList<Integer> L1=new ArrayList<Integer>(); L1.add(v);L1.add(i); g[u].add(L1); ArrayList<Integer> L2=new ArrayList<Integer>(); L2.add(u);L2.add(i); g[v].add(L2); deg[u]++; deg[v]++; } int leaf=-1; boolean notcool=false; for(int i=0;i<n;i++) { if(deg[i]>2) { System.out.println(-1); return; } } for(int i=0;i<n;i++) { if(deg[i]==1) { leaf=i; break; } } dfs(leaf,visited,g,ans,2); for(int i=0;i<n-1;i++)System.out.print(ans[i]+"" ""); System.out.println(); return; } } ","import java.io.*; import java.util.*; public class C {     static FastScanner sc = new FastScanner();     static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));     static class pair{         public pair(int x, int y) {             this.x = x;             this.y = y;         }         int x;         int y;                       }     static void solve(){         int n = sc.nextInt();         int[]degree = new int[n];         List<Integer>[]grid = new List[n];         for (int i = 0; i < n; i++) {             grid[i] = new ArrayList();         }         List<pair>list = new ArrayList<>();         for (int i = 0; i < n - 1; i++) {             int x = sc.nextInt() - 1;             int y = sc.nextInt() - 1;             grid[x].add(y);             grid[y].add(x);             degree[x]++;             degree[y]++;             list.add(new pair(Math.min(x,y),Math.max(x,y)));         }         int begin = 0;         for(int i = 0;i < degree.length;i++){             if(degree[i] > 2){                 System.out.println(-1);                 return;             }             if(degree[i] == 1){                 begin = i;             }         }         boolean[]used = new boolean[n];         int[]p = new int[]{5,2,11,2};         int idx = 0;         HashMap<pair,Integer>map = new HashMap<>();         while (!used[begin]){             used[begin] = true;             for(int next : grid[begin]){                 if(used[next])                     continue;                 map.put(new pair(Math.min(begin,next),Math.max(begin,next)),p[idx % 4]);                 idx++;                 begin = next;             }         }         StringBuilder bd = new StringBuilder();         for(pair pp : list){             bd.append(map.get(pp) + "" "");         }         System.out.println(bd.toString().trim());     }     public static void main(String[] args) {         int n = sc.nextInt();         for(int i = 0;i < n;i++){             solve();         }     }      } ",0
537,"import java.io.*; import java.util.*; public class q3 {     public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     public static void solve() throws Exception {         String[] parts = br.readLine().split("" "");         int n = Integer.parseInt(parts[0]);         int[] arr = new int[n + 1];         boolean[] vis = new boolean[n + 1];         for(int i = 1;i <= n;i++){             if(vis[i]) continue;             ArrayList<Integer> list = new ArrayList<>();             while(true){                 System.out.println(""? "" + i);                 int val = Integer.parseInt(br.readLine());                 vis[val] = true;                 list.add(val);                 if(list.size() > 1 && val == list.get(0)) break;             }             for(int j = 0;j < list.size() - 1;j++) arr[list.get(j)] = list.get(j + 1);         }         System.out.print(""! "");         StringBuilder ans = new StringBuilder();         for(int i = 1;i <= n;i++) ans.append(arr[i]).append("" "");         System.out.println(ans);     }     public static void main(String[] args) throws Exception {         int tests = Integer.parseInt(br.readLine());         for (int test = 1; test <= tests; test++) {             solve();         }     } } ","import java.io.*; import java.util.*; public class q3 {     public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     public static void solve() throws Exception {         String[] parts = br.readLine().split("" "");         int n = Integer.parseInt(parts[0]);         int[] arr = new int[n + 1];         boolean[] vis = new boolean[n + 1];         for(int i = 1;i <= n;i++){             if(vis[i]) continue;             ArrayList<Integer> list = new ArrayList<>();             while(true){                 System.out.println(""? "" + i);                 int val = Integer.parseInt(br.readLine());                 vis[val] = true;                 list.add(val);                 if(list.size() > 1 && val == list.get(0)) break;             }             for(int j = 0;j < list.size() - 1;j++) arr[list.get(j)] = list.get(j + 1);         }         System.out.print(""! "");         StringBuilder ans = new StringBuilder();         for(int i = 1;i <= n;i++) ans.append(arr[i]).append("" "");         System.out.println(ans);     }     public static void main(String[] args) throws Exception {         int tests = Integer.parseInt(br.readLine());         for (int test = 1; test <= tests; test++) {             solve();         }     } } ",1
538,"import java.io.*; import java.util.*; public class solution { static long cr[][]=new long[1001][1001];    static long mod=1000000007;     public static void main(String[] args)  { FScanner sc = new FScanner(); int t=sc.nextInt(); StringBuilder sb = new StringBuilder();       while(t-->0) {       int n=sc.nextInt();       long arr[]=new long[n];       long dp[]=new long[n];       long sum=0;       for(int i=0;i<n;i++)       {       arr[i]=sc.nextInt();       dp[i]=arr[i];       }                long l=0;long r=1000000000;       long ans=0;       while(l<=r)       {       long mid=(l+r)/2;       dp=Arrays.copyOf(arr, n);       if(solve(arr,dp,mid,n) )       {       ans=mid;       l=mid+1;       }       else       r=mid-1;              }              sb.append(ans);         sb.append(""\n""); }       System.out.println(sb.toString()); }    public static boolean solve(long arr[],long dp[],long sum,int n)  {       for(int i=n-1;i>1;i--)      {    if(dp[i]<=sum)          continue;      long val=Math.min(arr[i],dp[i]-sum)/3;      dp[i-1]+=val;      dp[i-2]+=2*val;      }      long min=Integer.MAX_VALUE;      for(int i=0;i<n;i++)      {      min=Math.min(min,dp[i]);      }      if(min>=sum)      return true;      else      return false;  }         }          ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.*;   public class Codeforces { static int mod= 998244353; public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out); FastScanner fs=new FastScanner(); int t=fs.nextInt(); outer:while(t-->0) { int n=fs.nextInt(); int arr[]=fs.readArray(n); int l=0, r=1000000000; while(l<r) { int mid=(l+r+1)/2; if(check(arr,mid)) { l=mid; } else r=mid-1; } out.println(l); } out.close(); } static boolean check(int arr[],int min) { int n=arr.length; int brr[]=new int[n]; for(int i=n-1;i>1;i--) { if(brr[i]+arr[i]<min) return false; int cur= Math.min(arr[i], arr[i]+brr[i]-min); int d=cur/3; brr[i-1]+=d; brr[i-2]+=2*d; } return (arr[0]+brr[0]>=min)&&(arr[1]+brr[1]>=min); }   } ",0
539,"import java.io.*; import java.util.*; public class stones {     public static void main (String[] args) throws IOException {                  BufferedReader input = new BufferedReader(new InputStreamReader(System.in));                  PrintWriter out = new PrintWriter(System.out);         int T = Integer.parseInt(input.readLine());         for (int i=0;i<T;i++) {                          int n = Integer.parseInt(input.readLine());             int[] seq = new int[n];             StringTokenizer st = new StringTokenizer(input.readLine());             int low = 0;             int high = 0;             for (int j=0;j<n;j++) {                 seq[j] = Integer.parseInt(st.nextToken());                 high = Math.max(high, seq[j]);             }                          while (low<high) {                 int mid = (low+high+1)/2;                                  if (possible(seq, mid)) {                     low = mid; }                 else high = mid-1; }             out.println(low);         }         out.close();     }     static boolean possible(int[] seq, int goal) {                           int L = seq.length;         int[] arr = Arrays.copyOf(seq, L);                  for (int i=L-1;i>=2;i--) {                          if (arr[i] < goal) return false;             int max_d = Math.min((arr[i] - goal)/3, seq[i]/3);                                       arr[i-1] += max_d;             arr[i-2] += max_d*2;             arr[i] -= max_d*3;         }                  for (int num: arr) {             if (num < goal) return false; }         return true;     } } ","import java.io.*; import java.util.*; import javax.sound.midi.MidiChannel; public class Main {     static PrintWriter out;     static FastReader sc;     public static void main(String[] args) throws FileNotFoundException {         boolean t = true;         boolean f = false;         if (f) {             out = new PrintWriter(""output.txt"");             sc = new FastReader(""input.txt"");         } else {             out = new PrintWriter((System.out));             sc = new FastReader();         }         int tt = 1;         tt = sc.nextInt();         while (tt-- > 0) {             solve();         }         out.flush();         out.close();     }     static boolean bs(int[] arr, int a){                   int[] curr = Arrays.copyOf(arr, arr.length);      for(int i = arr.length - 1; i >= 2; i--){        if(arr[i] < a){          return false;        }        int min = Math.min(arr[i] - a, curr[i]);        min = min/3;        arr[i] -= 3*min;        arr[i - 1] += min;        arr[i-2] += 2*min;      }       for(int i: arr){         if(i < a){           return false;         }       }       return true;     }     public static void solve() {        int n = sc.nextInt();        int[] arr = new int[n];        int max = Integer.MIN_VALUE;        for(int i = 0; i < n; i++){          arr[i] = sc.nextInt();          max = Math.max(max, arr[i]);        }        int l = 0, r = max, ans = 0;        while(l <= r){          int mid = (l+r)/2;                   int[] aa = Arrays.copyOf(arr, arr.length);          if(bs(aa, mid)){                        ans = mid;             l = mid+1;          }else{            r = mid-1;          }        }        out.println(ans);     }                     } ",0
540,"import java.io.*; import java.util.*; public class table {          public static void main(String[] args) throws java.io.IOException {         File file = new File(""hoofball.in"");          FastReader input = new FastReader();          PrintWriter output = new PrintWriter(""hoofball.out"");          int testcases = input.nextInt();         for (int t = 0; t < testcases; t++) {             int rows = input.nextInt();             int columns = input.nextInt();             char[][] matrix = new char[rows][columns];             for (int i = 0; i < rows; i++) {                 matrix[i] = input.next().toCharArray();             }             int counter = 0;             ArrayList<String> list = new ArrayList<String>();             for (int r = 0; r < rows - 1; r++) {                 for (int c = 0; c < columns - 1; c++) {                     int r1 = r + 1;                     int c1 = c + 1;                     int r2 = r + 2;                     int c2 = c + 2;                     while (matrix[r][c] == '1' || matrix[r+1][c] == '1' || matrix[r][c+1] == '1' || matrix[r+1][c+1] == '1') {                         if (matrix[r][c] == '0' && matrix[r+1][c] == '1' && matrix[r][c+1] == '1' && matrix[r+1][c+1] == '1') {                              list.add(r2 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r+1][c] = '0';                             matrix[r][c+1] = '0';                             matrix[r+1][c+1] = '0';                         } else if (matrix[r][c] == '1' && matrix[r+1][c] == '0' && matrix[r][c+1] == '1' && matrix[r+1][c+1] == '1') {                              list.add(r1 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r][c] = '0';                             matrix[r][c+1] = '0';                             matrix[r+1][c+1] = '0';                         } else if (matrix[r][c] == '1' && matrix[r+1][c] == '1' && matrix[r][c+1] == '0' && matrix[r+1][c+1] == '1') {                              list.add(r1 +"" ""+ c1 +"" ""+ r2 +"" ""+ c1 +"" ""+ r2 +"" ""+ c2);                             matrix[r][c] = '0';                             matrix[r+1][c] = '0';                             matrix[r+1][c+1] = '0';                         } else if (matrix[r][c] == '1' && matrix[r+1][c] == '1' && matrix[r][c+1] == '1' && matrix[r+1][c+1] == '0') {                              list.add(r1 +"" ""+ c1 +"" ""+ r2 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2);                             matrix[r][c] = '0';                             matrix[r+1][c] = '0';                             matrix[r][c+1] = '0';                         } else if (matrix[r][c] == '1' && matrix[r+1][c] == '1' && matrix[r][c+1] == '0' && matrix[r+1][c+1] == '0') {                              list.add(r1 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r][c] = '0';                             matrix[r][c+1] = '1';                             matrix[r+1][c+1] = '1';                         } else if (matrix[r][c] == '0' && matrix[r+1][c] == '0' && matrix[r][c+1] == '1' && matrix[r+1][c+1] == '1') {                              list.add(r1 +"" ""+ c1 +"" ""+ r2 +"" ""+ c1 +"" ""+ r2 +"" ""+ c2);                             matrix[r][c] = '1';                             matrix[r+1][c] = '1';                             matrix[r+1][c+1] = '0';                         } else if (matrix[r][c] == '1' && matrix[r+1][c] == '0' && matrix[r][c+1] == '1' && matrix[r+1][c+1] == '0') {                              list.add(r1 +"" ""+ c1 +"" ""+ r2 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2);                             matrix[r][c] = '0';                             matrix[r+1][c] = '1';                             matrix[r][c+1] = '0';                         } else if (matrix[r][c] == '0' && matrix[r+1][c] == '1' && matrix[r][c+1] == '0' && matrix[r+1][c+1] == '1') {                              list.add(r1 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r][c] = '1';                             matrix[r][c+1] = '1';                             matrix[r+1][c+1] = '0';                         } else if (matrix[r][c] == '1' && matrix[r+1][c] == '0' && matrix[r][c+1] == '0' && matrix[r+1][c+1] == '0') {                              list.add(r1 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r][c] = '0';                             matrix[r][c+1] = '1';                             matrix[r+1][c+1] = '1';                         } else if (matrix[r][c] == '0' && matrix[r+1][c] == '1' && matrix[r][c+1] == '0' && matrix[r+1][c+1] == '0') {                              list.add(r2 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r+1][c] = '0';                             matrix[r][c+1] = '1';                             matrix[r+1][c+1] = '1';                         } else if (matrix[r][c] == '0' && matrix[r+1][c] == '0' && matrix[r][c+1] == '1' && matrix[r+1][c+1] == '0') {                              list.add(r2 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r+1][c] = '1';                             matrix[r][c+1] = '0';                             matrix[r+1][c+1] = '1';                         } else if (matrix[r][c] == '0' && matrix[r+1][c] == '0' && matrix[r][c+1] == '0' && matrix[r+1][c+1] == '1') {                              list.add(r1 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r][c] = '1';                             matrix[r][c+1] = '1';                             matrix[r+1][c+1] = '0';                         } else if (matrix[r][c] == '1' && matrix[r+1][c] == '1' && matrix[r][c+1] == '1' && matrix[r+1][c+1] == '1') {                              list.add(r2 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c2);                             matrix[r+1][c] = '0';                             matrix[r][c+1] = '0';                             matrix[r+1][c+1] = '0';                         } else if (matrix[r][c] == '1' && matrix[r+1][c] == '0' && matrix[r][c+1] == '0' && matrix[r+1][c+1] == '1') {                              list.add(r1 +"" ""+ c1 +"" ""+ r1 +"" ""+ c2 +"" ""+ r2 +"" ""+ c1);                             matrix[r][c] = '0';                             matrix[r][c+1] = '1';                             matrix[r+1][c] = '1';                         } else if (matrix[r][c] == '0' && matrix[r+1][c] == '1' && matrix[r][c+1] == '1' && matrix[r+1][c+1] == '0') {                              list.add(r1 +"" ""+ c1 +"" ""+ r2 +"" ""+ c1 +"" ""+ r2 +"" ""+ c2);                             matrix[r][c] = '1';                             matrix[r+1][c] = '0';                             matrix[r+1][c+1] = '1';                         } else {                             System.out.println(""error"");                         }                         counter++;                     }                 }             }             System.out.println(counter);             for (int i = 0; i < list.size(); i++) {                 System.out.println(list.get(i));             }         }         output.close();     } } ","import java.io.*; import java.util.ArrayList; import java.util.Arrays; import java.util.StringTokenizer; public class C2 {     static ArrayList<Integer[]> list;     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         int t = in.nextInt();         for (int i = 0; i < t; i++) {             list = new ArrayList<>();             int n = in.nextInt();             int m = in.nextInt();             char[][] arr = new char[n][m];             for (int j = 0; j < n; j++) {                 arr[j] = in.next().toCharArray();             }             for (int j = 0; j < n; j += 2) {                 for (int k = 0; k < m; k += 2) {                     if (j == n - 1) j = n - 2;                     if (k == m - 1) k = m - 2;                     int cnt = 0;                     while (arr[j][k] == '1' || arr[j + 1][k] == '1' || arr[j][k + 1] == '1' || arr[j + 1][k + 1] == '1') {                         if (checkThree(arr, j, k)) {                             continue;                         } else if (checkTwo(arr, j, k)) {                             checkThree(arr, j, k);                             continue;                         } else if (checkDiagonal(arr, j, k)) {                         } else if (checkOne(arr, j, k)) {                         }                     }                 }             }             out.println(list.size());             for (Integer[] integers : list) {                 for (int j = 0; j < integers.length; j++) {                     out.print((integers[j] + 1) + "" "");                 }                 out.println();             }         }         out.close();     }     public static boolean checkThree(char[][] arr, int i, int j) {         if (arr[i][j] == '1' && arr[i][j + 1] == '1' && arr[i + 1][j] == '1') {             arr[i][j] = '0';             arr[i][j + 1] = '0';             arr[i + 1][j] = '0';             list.add(new Integer[]{i, j, i, (j + 1), (i + 1), j});             return true;         } else if (arr[i][j] == '1' && arr[i][j + 1] == '1' && arr[i + 1][j + 1] == '1') {             arr[i][j] = '0';             arr[i][j + 1] = '0';             arr[i + 1][j + 1] = '0';             list.add(new Integer[]{i, j, i, (j + 1), (i + 1), j + 1});             return true;         } else if (arr[i + 1][j] == '1' && arr[i + 1][j + 1] == '1' && arr[i][j] == '1') {             arr[i + 1][j] = '0';             arr[i + 1][j + 1] = '0';             arr[i][j] = '0';             list.add(new Integer[]{i + 1, j, i + 1, j + 1, (i), j});             return true;         } else if (arr[i + 1][j] == '1' && arr[i + 1][j + 1] == '1' && arr[i][j + 1] == '1') {             arr[i + 1][j] = '0';             arr[i + 1][j + 1] = '0';             arr[i][j + 1] = '0';             list.add(new Integer[]{i + 1, j, i + 1, j + 1, (i), j + 1});             return true;         }         return false;     }     public static boolean checkDiagonal(char[][] arr, int i, int j) {         if (arr[i][j] == '1' && arr[i + 1][j + 1] == '1') {             arr[i][j] = '0';             arr[i][j + 1] = '1';             arr[i + 1][j] = '1';             list.add(new Integer[]{i, j, i, j + 1, (i + 1), j});             return true;         } else if (arr[i + 1][j] == '1' && arr[i][j + 1] == '1') {             arr[i + 1][j] = '0';             arr[i][j] = '1';             arr[i + 1][j + 1] = '1';             list.add(new Integer[]{i + 1, j, i, j, (i + 1), j + 1});             return true;         }         return false;     }     public static boolean checkOne(char[][] arr, int i, int j) {         if (arr[i][j] == '1') {             arr[i][j] = '0';             arr[i + 1][j] = '1';             arr[i][j + 1] = '1';             list.add(new Integer[]{i, j, i + 1, j, (i), j + 1});             return true;         } else if (arr[i + 1][j] == '1') {             arr[i + 1][j] = '0';             arr[i][j] = '1';             arr[i + 1][j + 1] = '1';             list.add(new Integer[]{i + 1, j, i, j, (i + 1), j + 1});             return true;         } else if (arr[i][j + 1] == '1') {             arr[i][j + 1] = '0';             arr[i][j] = '1';             arr[i + 1][j + 1] = '1';             list.add(new Integer[]{i, j + 1, i, j, (i + 1), j + 1});             return true;         } else if (arr[i + 1][j + 1] == '1') {             arr[i + 1][j + 1] = '0';             arr[i + 1][j] = '1';             arr[i][j + 1] = '1';             list.add(new Integer[]{i + 1, j + 1, i + 1, j, (i), j + 1});             return true;         }         return false;     }     public static char changeValue(char c) {         return c == '1' ? '0' : '1';     }     public static boolean checkTwo(char[][] arr, int i, int j) {         if (arr[i][j] == '1' && arr[i][j + 1] == '1') {             arr[i][j] = '0';             arr[i + 1][j + 1] = changeValue(arr[i + 1][j + 1]);             arr[i + 1][j] = changeValue(arr[i + 1][j]);             list.add(new Integer[]{i, j, i + 1, j + 1, (i + 1), j});             return true;         } else if (arr[i][j] == '1' && arr[i + 1][j] == '1') {             arr[i][j] = '0';             arr[i + 1][j + 1] = changeValue(arr[i + 1][j + 1]);             arr[i][j + 1] = changeValue(arr[i][j + 1]);             list.add(new Integer[]{i, j, i + 1, j + 1, (i), j + 1});             return true;         } else if (arr[i + 1][j] == '1' && arr[i + 1][j + 1] == '1') {             arr[i + 1][j] = '0';             arr[i][j + 1] = changeValue(arr[i][j + 1]);             arr[i][j] = changeValue(arr[i][j]);             list.add(new Integer[]{i + 1, j, i, j + 1, (i), j});             return true;         } else if (arr[i][j + 1] == '1' && arr[i + 1][j + 1] == '1') {             arr[i][j + 1] = '0';             arr[i][j] = changeValue(arr[i][j]);             arr[i + 1][j] = changeValue(arr[i + 1][j]);             list.add(new Integer[]{i, j + 1, i, j, (i + 1), j});             return true;         }         return false;     }      } ",0
541,"import java.io.*; import java.util.*; public class tank {     static final FastScanner fs = new FastScanner();     static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) {         int t = fs.nextInt();         while(t-- > 0) run_case();         out.close();     }     static void run_case() {         int n = fs.nextInt();         long k = fs.nextLong();         int[] a = fs.readArray(n);         Arrays.sort(a);         long sum = 0;         for(int i: a) sum += i;         if(sum <= k) {             out.println(0);             return;         }         long ans = sum - k, dif;         for (int i = 1; i < n; i++) {             sum -= a[n - i];             sum += a[0];                          if(sum <= k) {                 ans = Math.min(ans, i);                 continue;             }             dif = sum - k;             if(dif % (i + 1) == 0) {                 ans = Math.min(ans, dif / (i + 1) + i);             } else {                 ans = Math.min(ans, dif / (i + 1) + 1 + i);             }         }         out.println(ans);     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.StringTokenizer; public class C{     static int n;     static long k;     static long[] a;     static long[] s;      public static void main(String[] args){         FastScanner sc = new FastScanner();         int T = sc.nextInt();         while(T-- > 0){             n = sc.nextInt();             k = sc.nextLong();             a = new long[n + 1];             for(int i = 1; i <= n; i++) a[i] = sc.nextInt();             System.out.println(slover());         }     }     static long slover(){         Arrays.sort(a);                           s = new long[n + 1];         for(int i = 1; i <= n; i++) s[i] = s[i - 1] + a[i];                  long res = (long)1e10;                  for(int i = 1; i <= n; i++){             long t;             if(s[i] + (n-i)*a[1] - k <= 0) t = 0;             else t = (long) Math.ceil((s[i] + (n-i) * a[1] - k) * 1.0 / (n-i+1));             res = Math.min(res, n - i + t);                      }         return res;     }      } ",0
542,"import java.io.*; import java.util.*; public class test3 { public static void main(String[] args) throws  IOException { FastReader f = new FastReader(); int t = f.nextInt(); while(t-->0) {  int n = f.nextInt();  int C[] = new int[n];  long ans=Long.MAX_VALUE,pre = 0;  PriorityQueue<Integer> epq = new PriorityQueue<Integer>();  PriorityQueue<Integer> opq = new PriorityQueue<Integer>();  for(int i = 0;i<n;i++) {  C[i] = f.nextInt();  if(i%2==0)epq.add(C[i]);  else opq.add(C[i]);  pre+=C[i];  if(i>0) {  ans  = Math.min(ans,pre+ ((long)n-(long)epq.size())*(long)epq.peek()  + ((long)n-(long)opq.size())*(long)opq.peek());  }  }  System.out.println(ans); }     }              } ","import java.io.*; import java.util.*; public class GFG {                public static void main (String[] args) {     Scanner sc = new Scanner(System.in);     int t = sc.nextInt();      while(t-- > 0){          int n = sc.nextInt();          long pre = 0,ans = Long.MAX_VALUE;          long[] arr = new long[n];          PriorityQueue<Long> epq = new PriorityQueue<>();          PriorityQueue<Long> opq = new PriorityQueue<>();          for(int i=0;i<n;i++)          {              arr[i] = sc.nextLong();              if(i%2==0)              epq.add(arr[i]);              else              opq.add(arr[i]);              pre+=arr[i];              if(i>0)              ans = Math.min(ans,pre+(n-epq.size())*epq.peek()+(n-opq.size())*opq.peek());          }          System.out.println(ans);      }     } } ",1
543,"import java.io.*; import java.util.*; public class test3 { public static void main(String[] args) throws  IOException { FastReader f = new FastReader(); int t = f.nextInt(); while(t-->0) {  int n = f.nextInt();  int C[] = new int[n];  long ans=Long.MAX_VALUE,pre = 0;  PriorityQueue<Integer> epq = new PriorityQueue<Integer>();  PriorityQueue<Integer> opq = new PriorityQueue<Integer>();  for(int i = 0;i<n;i++) {  C[i] = f.nextInt();  if(i%2==0)epq.add(C[i]);  else opq.add(C[i]);  pre+=C[i];  if(i>0) {  ans  = Math.min(ans,pre+ ((long)n-(long)epq.size())*(long)epq.peek()  + ((long)n-(long)opq.size())*(long)opq.peek());  }  }  System.out.println(ans); }     }              } ","import java.util.*; public class Solve{     public static void main(String[] args){         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();                         while(t-->0){             int n=sc.nextInt();            long ans=Long.MAX_VALUE;            long pre=0;            PriorityQueue<Long> epq=new PriorityQueue<>();            PriorityQueue<Long> opq=new PriorityQueue<>();            for(int i=0;i<n;i++){                long a=sc.nextInt();                if(i%2==0)opq.add(a);                else epq.add(a);                pre+=a;               if(i>0) ans=Math.min(ans,pre+opq.peek()*(n-opq.size())+epq.peek()*(n-epq.size()));                            }           System.out.println(ans);         }     } } ",1
544,"import java.io.*; import java.util.*; public class three{ public static class Pair implements Comparable<Pair>{ int min; int idx; } public static void main(String[] args) throws Exception {         MyScanner scn = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));                        int t = scn.nextInt();       while(t-- > 0){       int n = scn.nextInt();       int m = scn.nextInt();       int x = scn.nextInt();       int arr[] = scn.nextIntArray(n);       PriorityQueue<Pair> pq = new PriorityQueue<>();             System.out.println(""YES"");       for(int i=0;i<m;i++){       Pair p = new Pair();       p.min = arr[i];       p.idx = i+1;       pq.add(p);       System.out.print(p.idx + "" "");       }       for(int i=m;i<n;i++){       Pair p = pq.peek();       int mini = p.min;       int index = p.idx;       System.out.print(index + "" "");       pq.remove();       Pair np = new Pair();       np.min = arr[i] + mini;       np.idx = index;       pq.add(np);       }       System.out.println();              }                out.close();            }         public static PrintWriter out;                                                                                                                                                          } ","import java.io.*; import java.util.*; public class Asd {     static PrintWriter w = new PrintWriter(System.out);     static FastScanner s = new FastScanner();     static boolean sd = false;        public static void main(String[] args) {        int t = s.nextInt();                  while (t-- > 0) {             solve();         }         w.close();     }   public static class Student {     public int i1;     public int value;                     public Student(int i1,int i2) {                this.i1 = i1;         this.value=i2;     }            public int getkey() {         return i1;     }      public int getValue() {         return value;     }  }    static class StudentComparator implements Comparator<Student>{                                                                       }               public static void solve() {         int n=s.nextInt();         int m=s.nextInt();         int x=s.nextInt();         int arr[]=new int[n];int res[]=new int[n];         for(int i=0;i<n;i++)             arr[i]=s.nextInt();                  PriorityQueue<Student> pq=new PriorityQueue<Student>(new StudentComparator());         for(int i=0;i<m;i++){             pq.add(new Student(arr[i],i));res[i]=i;}         for(int i=m;i<n;i++)         {             Student s1=pq.poll();             int k2=s1.getkey()+arr[i];             int v2=s1.getValue();res[i]=v2;             pq.add(new Student(k2,v2));         }         w.println(""YES"");         for(int i=0;i<n;i++)             w.print(res[i]+1+"" "");         w.println();             }                               } ",0
545,"import java.io.*; import java.util.*; public class three{ public static class Pair implements Comparable<Pair>{ int min; int idx; } public static void main(String[] args) throws Exception {         MyScanner scn = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));                        int t = scn.nextInt();       while(t-- > 0){       int n = scn.nextInt();       int m = scn.nextInt();       int x = scn.nextInt();       int arr[] = scn.nextIntArray(n);       PriorityQueue<Pair> pq = new PriorityQueue<>();             System.out.println(""YES"");       for(int i=0;i<m;i++){       Pair p = new Pair();       p.min = arr[i];       p.idx = i+1;       pq.add(p);       System.out.print(p.idx + "" "");       }       for(int i=m;i<n;i++){       Pair p = pq.peek();       int mini = p.min;       int index = p.idx;       System.out.print(index + "" "");       pq.remove();       Pair np = new Pair();       np.min = arr[i] + mini;       np.idx = index;       pq.add(np);       }       System.out.println();              }                out.close();            }         public static PrintWriter out;                                                                                                                                                          } ","import java.util.*; import java.lang.*; import java.io.*; public class Main {    static  Reader sc=new Reader();      static class PairComparator implements Comparator<Pair>{                                                                           }  public static void main (String[] args) throws java.lang.Exception    {        int t = sc.nextInt();   while(t-->0)     {         int n=sc.nextInt();        int m=sc.nextInt();        int x=sc.nextInt();        PriorityQueue<Pair> pq=new PriorityQueue<>(m, new PairComparator());        for(int i=1;i<=m;i++)          {           Pair p=new Pair(0,i);           pq.add(p);          }        out.println(""YES"");        int a[]=new int[n];        for(int i=0;i<n;i++)          {            a[i]=sc.nextInt();            Pair shortest=pq.poll();            out.print(shortest.y+"" "");            Pair update=new Pair(shortest.x+a[i],shortest.y);            pq.add(update);          }              out.println( );     }      out.flush();      out.close(); }             static void print(int a[])   {      int n=a.length;      for(int i=0;i<n;i++)        {           out.print(a[i]+"" "");        }      out.println();      out.flush();   } static void print(long a[])   {      int n=a.length;      for(int i=0;i<n;i++)        {           out.print(a[i]+"" "");        }      out.println();      out.flush();   }            static class Pair    {       int x,y;       Pair(int x,int y)        {           this.x=x;           this.y=y;        }    }                            static  PrintWriter out=new PrintWriter(System.out);   static int int_max=Integer.MAX_VALUE;   static int int_min=Integer.MIN_VALUE;   static long long_max=Long.MAX_VALUE;   static long long_min=Long.MIN_VALUE; } ",0
546,"import java.io.*; import java.util.ArrayList; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; public class C {     public static void main(String[] args) {         FastReader scan = new FastReader();         PrintWriter out = new PrintWriter(System.out);         Task solver = new Task();         int t = scan.nextInt();         for(int tt = 1; tt <= t; tt++) solver.solve(tt, scan, out);         out.close();     }     static class Task {         int n, m;         char[][] a;         ArrayList<int[]> moves;         public void solve(int testNumber, FastReader scan, PrintWriter out) {             n = scan.nextInt();             m = scan.nextInt();             a = new char[n][m];             moves = new ArrayList<>();             for(int i = 0; i < n; i++) a[i] = scan.next().toCharArray();             if(n % 2 == 0) {                 for (int i = 0; i < n; i += 2) {                     if (m % 2 == 0) {                         for (int j = 0; j < m; j += 2) move(i, j);                     } else {                         for (int j = 0; j < m - 3; j += 2) move(i, j);                         if (one(i, m - 2).size() == 4) {                             move(i, m - 3);                             move(i, m - 2);                         } else {                             move(i, m - 3);                             move(i, m - 2);                         }                     }                 }             }             else {                 for (int i = 0; i < n - 1; i += 2) {                     if (m % 2 == 0) {                         for (int j = 0; j < m; j += 2) move(i, j);                     } else {                         for (int j = 0; j < m - 3; j += 2) move(i, j);                         if (one(i, m - 2).size() == 4) {                             move(i, m - 3);                             move(i, m - 2);                         } else {                             move(i, m - 3);                             move(i, m - 2);                         }                     }                 }                 if (m % 2 == 0) {                     for (int j = 0; j < m; j += 2) move(n - 2, j);                 } else {                     for (int j = 0; j < m - 3; j += 2) move(n - 2, j);                     if (one(n - 2, m - 2).size() == 4) {                         move(n - 2, m - 3);                         move(n - 2, m - 2);                     } else {                         move(n - 2, m - 3);                         move(n - 2, m - 2);                     }                 }             }             out.println(moves.size() / 3);             for(int i = 0; i < moves.size(); i += 3) {                 for(int j = 0; j < 3; j++) out.printf(""%d %d "", moves.get(i + j)[0], moves.get(i + j)[1]);                 out.println();             }         }         void move(int y, int x) {             ArrayList<int[]> o = one(y, x), z = zero(y, x);             while(!o.isEmpty()) {                 int first = -1, second = -1;                 if(o.size() <= 2) {                     first = 1;                     second = 2;                 }                 else {                     first = 3;                     second = 0;                 }                 for(int i = 0; i < first; i++) {                     int[] t = o.get(i);                     a[t[0] - 1][t[1] - 1] = '0';                     moves.add(t);                 }                 for(int i = 0; i < second; i++) {                     int[] t = z.get(i);                     a[t[0] - 1][t[1] - 1] = '1';                     moves.add(t);                 }                 o = one(y, x);                 z = zero(y, x);             }         }         ArrayList<int[]> one(int y, int x) {             ArrayList<int[]> res = new ArrayList<>();             for(int i = y + 1; i >= y; i--) {                 for(int j = x + 1; j >= x; j--) {                     if(a[i][j] == '1') res.add(new int[] {i + 1, j + 1});                 }             }             return res;         }         ArrayList<int[]> zero(int y, int x) {             ArrayList<int[]> res = new ArrayList<>();             for(int i = y; i <= y + 1; i++) {                 for(int j = x; j <= x + 1; j++) {                     if(a[i][j] == '0') res.add(new int[] {i + 1, j + 1});                 }             }             return res;         }     }                } ","import java.util.*; import java.math.*; import java.io.*; public class B{ public static void main(String[] args){ FastReader in = new FastReader();  int t = in.nextInt(); while(t-- != 0){ int n = in.nextInt(), m = in.nextInt();    int[][] arr = new int[n][m];    for(int i = 0; i < n; i++){  String s = in.next();  for(int j = 0; j < m; j++){  arr[i][j] = s.charAt(j)-'0';  }  }        int res = 0;  for(int i = 0; i < n-1; i += 2){  for(int j = 0; j < m-1; j += 2){  int r = arr[i][j] + arr[i][j+1] + arr[i+1][j] + arr[i+1][j+1];  if(r == 1) res += 3;  else if(r == 2) res += 2;  else if(r == 3) res += 1;  else if(r == 4) res += 4;  }  }    if(n % 2 == 1){  for(int j = 0; j < m-1; j += 2){  int r = arr[n-1][j] + arr[n-1][j+1];  if(r == 1) res += 3;  else if(r == 2) res += 2;  }  }  if(m % 2 == 1){  for(int i = 0; i < n-1; i += 2){  int r = arr[i][m-1] + arr[i+1][m-1];  if(r == 1) res += 3;  else if(r == 2) res += 2;  }  }  if(n % 2 == 1 && m % 2 == 1){  if(arr[n-1][m-1] == 1) res+= 3;  }  System.out.println(res);  for(int i = 0; i < n-1; i += 2){  for(int j = 0; j < m-1; j += 2){  int a = arr[i][j], b = arr[i][j+1], c = arr[i+1][j], d = arr[i+1][j+1];  int r = a+b+c+d;  if(r == 1){  print1(i+1, j+1, a,b,c,d);  }  else if(r == 2){  print2(i+1, j+1, a,b,c,d);  }  else if(r == 3){  print3(i+1, j+1, a,b,c,d);  }  else if(r == 4){  print4(i+1, j+1, a,b,c,d);  }  }  }    if(n % 2 == 1){  for(int j = 0; j < m-1; j += 2){  int r = arr[n-1][j] + arr[n-1][j+1];  int a = 0, b = 0, c = arr[n-1][j], d=arr[n-1][j+1];  if(r == 1) print1(n-1,j+1, a,b,c,d);  else if(r==2)print2(n-1,j+1, a,b,c,d);      }  }  if(m % 2 == 1){  for(int i = 0; i < n-1; i += 2){  int r = arr[i][m-1] + arr[i+1][m-1];  int a = 0, b = arr[i][m-1], c = 0, d=arr[i+1][m-1];  if(r == 1) print1(i+1,m-1, a,b,c,d);  else if(r==2) print2(i+1,m-1, a,b,c,d);    }  }  if(n % 2 == 1 && m % 2 == 1){  if(arr[n-1][m-1] == 1){  print1(n-1, m-1,0,0,0,1);    }  } } } public static void print3(int i, int j, int a, int b, int c, int d){ if(a == 0){ System.out.printf(""%d %d %d %d %d %d\n"", i, j+1, i+1,j, i+1, j+1); }else if(b == 0){ System.out.printf(""%d %d %d %d %d %d\n"", i,j,i+1,j,i+1,j+1);  }else if(c == 0){ System.out.printf(""%d %d %d %d %d %d\n"", i,j,i,j+1,i+1,j+1);  }else{ System.out.printf(""%d %d %d %d %d %d\n"", i,j,i+1,j,i,j+1);  } } public static void print2(int i, int j, int a, int b, int c, int d){ if(a == 0 && b==0){ System.out.printf(""%d %d %d %d %d %d\n"", i,j, i+1,j, i,j+1);  a = 1; b = 1; c = 0; print3(i, j, a, b, c, d); }else if(a == 0 && c == 0){ System.out.printf(""%d %d %d %d %d %d\n"", i,j, i+1,j, i,j+1);  a = 1; c = 1; b = 0; print3(i, j, a, b, c, d); }else if(a == 0 && d == 0){ System.out.printf(""%d %d %d %d %d %d\n"", i,j, i+1,j+1, i,j+1);  a = 1; d = 1; b = 0; print3(i, j, a, b, c, d); }else if(b == 0 && d == 0){ System.out.printf(""%d %d %d %d %d %d\n"", i,j,i+1,j+1,i,j+1);  a = 0; d = 1; b = 1; print3(i, j, a, b, c, d); }else if(c == 0 && d == 0){ System.out.printf(""%d %d %d %d %d %d\n"", i+1,j,i+1,j+1,i,j+1);  c = 1; d = 1; b = 0; print3(i, j, a, b, c, d); }else if(c == 0 && b == 0){ System.out.printf(""%d %d %d %d %d %d\n"", i+1,j, i+1,j+1, i,j+1);  c = 1; d = 0; b = 1; print3(i, j, a, b, c, d); } } public static void print1(int i, int j, int a, int b, int c, int d){ if(a == 1){ System.out.printf(""%d %d %d %d %d %d\n"", i, j, i+1,j, i+1, j+1); a = 0; c=1; d=1; print2(i, j,a,b,c,d); }else if(b == 1){ System.out.printf(""%d %d %d %d %d %d\n"", i,j+1,i+1,j,i+1,j+1);  b=0; c=1; d=1; print2(i, j,a,b,c,d); }else if(c == 1){ System.out.printf(""%d %d %d %d %d %d\n"", i,j, i+1,j, i+1,j+1);  c=0; a=1; d=1; print2(i, j,a,b,c,d); }else{ System.out.printf(""%d %d %d %d %d %d\n"", i,j,i+1,j,i+1,j+1);  d=0; a=1; c=1; print2(i, j,a,b,c,d); } } public static void print4(int i, int j, int a, int b, int c, int d){ System.out.printf(""%d %d %d %d %d %d\n"", i,j,i+1,j,i+1,j+1);  a=0; d=0; c=0; print1(i,j,a,b,c,d); } } ",0
547,"import java.io.*; import java.util.ArrayList; import java.util.List; import java.util.StringTokenizer; public class C {     public static void main(String[] args) {         new C().solve(System.in, System.out);     }     public void solve(InputStream in, OutputStream out) {         InputReader inputReader = new InputReader(in);         PrintWriter writer = new PrintWriter(new BufferedOutputStream(out));         int t = inputReader.nextInt();         for (int t1 = 0; t1 < t; t1++) {             int n = inputReader.nextInt();             List<Long> c = new ArrayList<>(n);             for (int i = 0; i < n; i++) {                 c.add(inputReader.nextLong());             }             writer.println(solve(n, c));         }         writer.close();     }     public long solve(int n, List<Long> c) {         long[] minEven = new long[n];         long[] minOdd = new long[n];         long[] sumOdd = new long[n];         long[] sumEven = new long[n];         minEven[0] = Long.MAX_VALUE;         minOdd[0] = Long.MAX_VALUE;         for (int i = 0; i < n; i++) {             if (i > 0) {                 minEven[i] = minEven[i - 1];                 minOdd[i] = minOdd[i - 1];                 sumOdd[i] = sumOdd[i - 1];                 sumEven[i] = sumEven[i - 1];             }             if (i % 2 == 0) {                 minEven[i] = Math.min(minEven[i], c.get(i));                 sumEven[i] += c.get(i);             } else {                 minOdd[i] = Math.min(minOdd[i], c.get(i));                 sumOdd[i] += c.get(i);             }         }         long best = Long.MAX_VALUE;         for (int k = 1; k < n; k++) {             int countOdd = (k + 1) / 2;             int countEven = (k + 1) / 2;             if (k % 2 == 0) {                 countEven++;             }             long oddResult = minOdd[k] * (n - countOdd) + sumOdd[k];             long evenResult = minEven[k] * (n - countEven) + sumEven[k];             long current = oddResult + evenResult;             best = Math.min(best, current);         }         return best;     }      } ","import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; public class Main {     private static void run() throws IOException {         int n = in.nextInt();         long[] c = new long[n];         for (int i = 0; i < n; i++) {             c[i] = in.nextInt();         }         long ans = (c[0] + c[1]) * n;         long sum = c[0] + c[1];         long[] min = {c[0], c[1]};         for (int i = 2; i < n; i++) {             sum += c[i];             int index = i % 2;             min[index] = Math.min(min[index], c[i]);             int[] times = new int[2];             times[index] = n - (i / 2 + 1);             times[index ^ 1] = n - ((i - 1) / 2 + 1);             ans = Math.min(ans, sum + min[0] * times[0] + min[1] * times[1]);         }         out.println(ans);     }     public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));         int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }         out.flush();         in.close();         out.close();     }          static final long mod = 1000000007;               @SuppressWarnings(""FieldCanBeLocal"")     private static Reader in;     private static PrintWriter out;                } ",0
548,"import java.io.*; import java.util.Arrays; import java.util.HashSet; import java.util.Random; import java.util.StringTokenizer; public class codeforces_750_D {     private static void solve(FastReader io) {         int n = io.nextInt();         int[] a = io.readArray(n);         if (n % 2 == 0) {             for (int i = 0; i < n; i += 2) {                 io.out.print(a[i + 1] + "" "");                 io.out.print(-a[i] + "" "");             }         } else {             for (int i = 0; i < n - 3; i += 2) {                 io.out.print(a[i + 1] + "" "");                 io.out.print(-a[i] + "" "");             }             if (a[n - 3] + a[n - 2] != 0) {                 io.out.print(-a[n - 1] + "" "");                 io.out.print(-a[n - 1] + "" "");                 io.out.print(a[n - 3] + a[n - 2] + "" "");             } else if (a[n - 3] + a[n - 1] != 0) {                 io.out.print(-a[n - 2] + "" "");                 io.out.print(a[n - 3] + a[n - 1] + "" "");                 io.out.print(-a[n - 2] + "" "");             } else {                 io.out.print(a[n - 2] + a[n - 1] + "" "");                 io.out.print(-a[n - 3] + "" "");                 io.out.print(-a[n - 3] + "" "");             }         }         io.out.println();     }     public static void main(String[] args) throws Exception {         try (FastReader ioAdapter = new FastReader()) {             int count = 1;             count = ioAdapter.nextInt();             while (count-- > 0) {                 solve(ioAdapter);             }         }     }      } ","import java.util.Scanner; public class VupsenPupsenand0 {     public static void main(String args[]) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         while (t-- > 0) {             int n = scan.nextInt();             int[] a = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = scan.nextInt();             }             if (n % 2 == 0) {                 for (int i = 0; i < n; i += 2) {                     System.out.print(a[i + 1] + "" "" + -a[i] + "" "");                 }                 System.out.println();             } else {                 for (int i = 0; i < n - 3; i += 2) {                     System.out.print(a[i + 1] + "" "" + -a[i] + "" "");                 }                 int x = a[n - 3];                 int y = a[n - 2];                 int z = a[n - 1];                 if (x + y != 0) {                     System.out.println(-z + "" "" + (-z) + "" "" + (x + y));                 } else if (y + z != 0) {                     System.out.println((y + z) + "" "" + (-x) + "" "" + (-x));                 } else {                     System.out.println(-y + "" "" + (x + z) + "" "" + (-y));                 }             }         }     } } ",1
549,"import java.io.*; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; public class G {     public static void main(String[] args) {         FastReader scan = new FastReader();         PrintWriter out = new PrintWriter(System.out);         Task solver = new Task();         int t = 1;         for(int tt = 1; tt <= t; tt++) solver.solve(tt, scan, out);         out.close();     }     static class Task {         static int max = (int) (4e5), MOD = 998244353;         static long[] fact = new long[max+1], invFact = new long[max+1], naturalInverse = new long[max+1];         public void solve(int testNumber, FastReader scan, PrintWriter out) {             int n = scan.nextInt(), k = scan.nextInt();             Item[] lanterns = new Item[2 * n];             for(int i = 0; i < n; i++) {                 int l = scan.nextInt(), r = scan.nextInt();                 lanterns[i * 2] = new Item(l, 0);                 lanterns[i * 2 + 1] = new Item(r, 1);             }             Arrays.sort(lanterns);             precomp();             int have = 0;             long ans = 0;             for(Item x : lanterns) {                 if(x.start == 1) have--;                 else {                     ans = (ans + binomial(have, k - 1)) % MOD;                     have++;                 }             }             out.println(ans);         }         static class Item implements Comparable<Item> {             int val;             int start;             public Item(int a, int b) {                 val = a;                 start = b;             }                      }         static void precomp() {             fact[0] = invFact[0] = invFact[1] = naturalInverse[0] = naturalInverse[1] = 1;             for(int i = 1; i <= max; i++) {                 fact[i] = (fact[i-1]*i)%MOD;                 if(i == 1) continue;                 naturalInverse[i] = naturalInverse[MOD % i] * (MOD - MOD/i) % MOD;                 invFact[i] = (invFact[i-1]*naturalInverse[i])%MOD;             }         }         static long binomial(int a, int b) {             if(a < b) return 0;             return ((fact[a]*invFact[b])%MOD*invFact[a-b])%MOD;         }     }                } ","import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static int dp[][][][];  static int mod=1000000007;  static int mod1=998244353;  static int max;  static long bit[];  static long seg[];  static long fact[];  static long A[];  static long[] fac = new long[300001];    static PrintWriter out=new PrintWriter(System.out);   public static void main(String[] args) {                    int ttt=1;               fac[0] = 1;       for (int i = 1; i <= 300000; i++)           fac[i] = fac[i - 1] * i % mod1;         outer :while (ttt-- > 0)  {         int n=i();         int k=i();         Pair P[]=new Pair[2*n];         int c=0;         for(int i=0;i<n;i++) {         P[c]=new Pair(i(),0);         c++;         P[c]=new Pair(i(),1);         c++;         }         Arrays.sort(P);         int cnt=0;         long ans=0;         for(int i=0;i<2*n;i++) {         if(P[i].y==0)         cnt++;         else {         ans+=nCrModPFermat(cnt-1, k-1, mod1);         ans%=mod1;         cnt--;         }         }         System.out.println(ans);                           }               out.close();                                                              }      static long modInverse(long n, int p)     {         return power(n, p - 2, p);     }                 static long nCrModPFermat(int n, int r,                              int p)     {             if (n<r)               return 0;                if (r == 0)             return 1;                    return (fac[n] * modInverse(fac[r], p)                 % p * modInverse(fac[n - r], p)                 % p)             % p;     } static class Pair implements Comparable<Pair>      {      int x;      int y;      Pair(int x,int y){      this.x=x;      this.y=y;            }      } static long power(long x, long y, long p) { if(y==0) return 1; if(x==0) return 0;     long res = 1;     x = x % p;     while (y > 0) {         if (y % 2 == 1)             res = (res * x) % p;         y = y >> 1;          x = (x * x) % p;     }     return res; }      static int i() {      return sc.nextInt();      }                    static void sort(int[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             int tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);      }      static void sort(long[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             long tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);      }   static String sort(String s) {   Character ch[]=new Character[s.length()];   for(int i=0;i<s.length();i++) {   ch[i]=s.charAt(i);   }   Arrays.sort(ch);   StringBuffer st=new StringBuffer("""");   for(int i=0;i<s.length();i++) {   st.append(ch[i]);   }   return st.toString();   }                                                        } ",0
550,"import java.io.*; import java.util.Arrays; import java.util.Scanner; import java.util.StringTokenizer; public class Main {     public static void main(String[] args) throws IOException {         SolveQue solveQue = new SolveQue();         solveQue.ques();     } } class SolveQue {          private static final FastScanner fs = new FastScanner();     private static final Scanner sc = new Scanner(System.in);     private static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     private static final long MOD = (long) (1e9 + 7);     private static PrintWriter out = new PrintWriter(System.out);     private static BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));     private static final int iInf = Integer.MAX_VALUE - (int) (1e6);     private static final long lInf = (long)(1e17);     private static int[] phi;          long[] getP(long[] arr,int n) {         long mn = lInf;         long[] P = new long[n];         Arrays.fill(P,lInf);         long cnt = 0;         for(int i = 0 ; i < n; i++){             long curr = arr[i];             if(mn + cnt < curr){                 P[i] = mn + cnt;             } else {                 mn = arr[i];                 P[i] = arr[i];                 cnt  = 0;             }             cnt++;         }         return  P;     }     long[] getS(long[] arr,int n) {         long mn = lInf;         long[] S = new long[n];         Arrays.fill(S,lInf);         long cnt = 0;         for(int i = n - 1; i >= 0; i--){             long curr = arr[i];             if(mn + cnt < curr){                 S[i] = mn + cnt;             }else{                 mn = arr[i];                 S[i] = arr[i];                 cnt  = 0;             }             cnt++;         }         return  S;     }     void solve(int T) throws IOException {         int n = fs.nextInt();         int k = fs.nextInt();         int[] a = new int[k];         long[] t = new long[k];         long[] arr = new long[n];         Arrays.fill(arr,lInf);         for (int i = 0; i < k; i++) {             a[i] = fs.nextInt();             a[i]--;         }         for (int i = 0; i < k; i++) {             t[i] = fs.nextLong();             arr[a[i]] = t[i];         }         long[] P = getP(arr, n);         long[] S = getS(arr, n);         for(int i = 0 ; i < n ; i++){             System.out.print(Math.min(P[i],S[i]) + "" "");         }         System.out.println();     }     void ques() throws IOException {         int t = 1;         t = fs.nextInt();         int tt = 1;         while (t-- > 0) {             solve(tt);             tt++;         }         System.gc();     } } ","import java.io.*; import java.util.*; public class Codeforce {          static int mod = (int) (1e9 + 7);                                   public static void main(String arg[]) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         StringBuilder sb = new StringBuilder();         while (t-- > 0) {                                 br.readLine();                         String s[]=br.readLine().split("" "");                         int n=Integer.parseInt(s[0]);                         int k=Integer.parseInt(s[1]);                         long a[]=new long[n];                         long b[]=new long[n];                         long c[]=new long[n];                         Arrays.fill(c,Integer.MAX_VALUE);                         String s1[]=br.readLine().split("" "");                         s=br.readLine().split("" "");                         for(int i=0;i<k;i++)                             c[Integer.parseInt(s1[i])-1]=Integer.parseInt(s[i]);                         long p=Integer.MAX_VALUE;                         for(int i=0;i<n;i++)                         {                             p=Math.min(p+1,c[i]);                             a[i]=p;                         }                         p=Integer.MAX_VALUE;                         for(int i=n-1;i>=0;i--){                             p=Math.min(p+1,c[i]);                             b[i]=p;                         }                         for(int i=0;i<n;i++)                             sb.append((Math.min(a[i],b[i]))+"" "");                         sb.append(""\n"");                        }         System.out.println(sb);     } } ",0
551,"import java.io.*; import java.util.Arrays; import java.util.StringTokenizer; public class C_MonstersAndSpells_1700 {     public static void main(String[] args) {         MyScanner sc = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));         int t = sc.nextInt();         while(t-->0) {             int n = sc.nextInt();             int[] times = new int[n];             int[] health = new int[n];             for(int i = 0; i < n; i++) {                 times[i] = sc.nextInt();             }             for(int i = 0; i < n; i++) {                 health[i] = sc.nextInt();             }             Point[] points = new Point[n];             for(int i = 0; i < n; i++) {                 points[i] = new Point(times[i]-health[i], times[i]);             }             Arrays.sort(points);             long ans = 0;             for(int i = 0; i < n; i++) {                 int j = i+1;                 int latestTime = points[i].time;                 while(j < n && points[j].startBy < latestTime) {                     latestTime = Math.max(latestTime, times[j]);                     j++;                 }                 long length = latestTime-points[i].startBy;                 ans += (length*(length + 1))/2;                 i = j - 1;             }             System.out.println(ans);         }         out.close();     }     static class Point implements Comparable<Point> {         Integer startBy;         Integer time;         Point(int startBy, int time) {             this.startBy = startBy;             this.time = time;         }              }     public static PrintWriter out;           } ","import java.io.*; import java.util.*; public class MonstersAndSpells { public static PrintWriter out; public static void main(String[] args)throws IOException {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st=new StringTokenizer(br.readLine());         out=new PrintWriter(System.out);         int t=Integer.parseInt(st.nextToken());         while(t-->0) {         st=new StringTokenizer(br.readLine());         int n=Integer.parseInt(st.nextToken());         int time[]=new int[n];         int health[]=new int[n];         st=new StringTokenizer(br.readLine());         for(int i=0;i<n;i++) {         time[i]=Integer.parseInt(st.nextToken());         }         st=new StringTokenizer(br.readLine());         for(int i=0;i<n;i++) {         health[i]=Integer.parseInt(st.nextToken());         }         State a[]=new State[n];         for(int i=0;i<n;i++) {         a[i]=new State(time[i]-health[i], time[i]);         }         Arrays.sort(a);         long ans=0;         for(int i=0;i<n;i++) {         int j=i+1;         int max=a[i].time;         while(j<n&&a[j].x<max) {         max=Math.max(max, time[j]);         j++;         }         ans+=((long)(max-a[i].x)*(long)(max-a[i].x+1))/2;         i=j-1;         }         out.println(ans);         }         out.close(); } static class State implements Comparable<State>{ int x, time; public State(int x, int time) { this.x=x;this.time=time; } } } ",1
552,"import java.io.*; import java.util.Arrays; import java.util.StringTokenizer; public class InterestingStory {     private static int[] freq;     private static String[] strs;     private static int[] countAlpha(char alpha) {         int[] count = new int[strs.length];         for (int i = 0; i < strs.length; i++)             for (char c : strs[i].toCharArray())                 count[i] += c == alpha ? -1 : 1;         return count;     }     private static int solve(char alpha) {         int[] res = countAlpha(alpha);         Arrays.sort(res);         int freqSum = 0;         for (int j : freq) freqSum += j;         freqSum -= freq[alpha - 'a'];         int k = res.length - 1;                  while (k >= 0 && freq[alpha - 'a'] <= freqSum) {                          freqSum -= res[k--];         }         return k + 1;     }     public static void main(String[] args) {         FastReader in = new FastReader();         PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         int t = in.nextInt();         while (t-- > 0) {             int n = in.nextInt();             freq = new int[7];             strs = new String[n];             for (int i = 0; i < n; i++)                 strs[i] = in.nextLine();             for (String str : strs)                 for (char c : str.toCharArray())                     freq[c - 'a']++;             int max = 0;             for (char c = 'a'; c < 'f'; c++)                 max = Math.max(max, solve(c));             out.println(max);         }         out.close();     }      } ","import java.io.*; import java.util.Arrays; import java.util.StringTokenizer; public class InterestingStory {     private static int[] freq;     private static String[] strs;     private static int[] countAlpha(char alpha) {         int[] count = new int[strs.length];         for (int i = 0; i < strs.length; i++)             for (char c : strs[i].toCharArray())                 count[i] += c == alpha ? -1 : 1;         return count;     }     private static int solve(char alpha) {         int[] res = countAlpha(alpha);         Arrays.sort(res);         int freqSum = 0;         for (int j : freq) freqSum += j;         freqSum -= freq[alpha - 'a'];         int k = res.length - 1;                  while (k >= 0 && freq[alpha - 'a'] <= freqSum)             freqSum -= res[k--];                  return k + 1;     }     public static void main(String[] args) {         FastReader in = new FastReader();         PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         int t = in.nextInt();         while (t-- > 0) {             int n = in.nextInt();             freq = new int[5];             strs = new String[n];             for (int i = 0; i < n; i++)                 strs[i] = in.nextLine();             for (String str : strs)                 for (char c : str.toCharArray())                     freq[c - 'a']++;             int max = 0;             for (char c = 'a'; c < 'f'; c++)                 max = Math.max(max, solve(c));             out.println(max);         }         out.close();     }      } ",1
553,"import java.io.*; import java.util.Arrays; public class C {     static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));     static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));     private static int nextInt() {         try {             in.nextToken();         } catch (IOException e) {             e.printStackTrace();         }         return (int) in.nval;     }          private static String next(){         try {             in.nextToken();         } catch (IOException e) {             e.printStackTrace();         }         return in.sval;     }     public static void main(String[] args) {         int t = nextInt();         for (int c = 0; c < t; c++) {             int n = nextInt();             String[] info = new String[n];             for (int i = 0; i < n; i++) {                 info[i] = next();             }             int ans = 0;             for (int i = 0; i < 5; i++) {                 char cur = (char) (i+'a');                 int[] map = new int[n];                 for (int j = 0; j < n; j++) {                     for (int k = 0; k < info[j].length(); k++) {                         if(info[j].charAt(k)==cur)map[j]++;                         else map[j]--;                     }                 }                 Arrays.sort(map);                 int sum = 0;                 for(int j = n-1; j >= 0; j--) {                     sum += map[j];                     if(sum<=0){                         break;                     }                     ans = Math.max(ans,n-j);                 }             }             System.out.println(ans);         }     } } ","import java.io.*; import java.util.*;     public class Mainnn{                                                      public static void main(String[] args) {       MyScanner sc = new MyScanner();       out = new PrintWriter(new BufferedOutputStream(System.out));                              int test = sc.nextInt();         while(test-- != 0)         {             int n = sc.nextInt();             String[] info = new String[n];             for (int i = 0; i < n; i++) {                 info[i] = sc.next();             }             int ans = 0;             for (int i = 0; i < 5; i++) {                 char cur = (char) (i+'a');                 int[] map = new int[n];                 for (int j = 0; j < n; j++) {                     for (int k = 0; k < info[j].length(); k++) {                         if(info[j].charAt(k)==cur)map[j]++;                         else map[j]--;                     }                 }                 Arrays.sort(map);                 int sum = 0;                 for(int j = n-1; j >= 0; j--) {                     sum += map[j];                     if(sum<=0){                         break;                     }                     ans = Math.max(ans,n-j);                 }             }             System.out.println(ans);         }                     out.close();    }                public static PrintWriter out;                    } ",1
554,import java.io.BufferedInputStream; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; public class EDU121C {     public static void main(String[] args) {         JS scan = new JS();         int t = scan.nextInt();         while(t-->0){             int n = scan.nextInt();             long[] k = new long[n];             long[] h = new long[n];             for(int i =0;i<n;i++){                 k[i] = scan.nextInt();             }             for(int i = 0;i<n;i++){                 h[i] = scan.nextInt();             }             long ans = 0;             long lastD = 0;             long lastHP = 0;             for(int i = 0;i<n;i++){                 long dist = k[i]-lastD;                 long lo = h[i];                 long hi = lastHP+dist;                 long hpComingOut = 0;                 while(lo<=hi){                     long mid = (lo+hi)/2;                     boolean check = false;                     for(int j = i+1;j<n;j++){                         if(k[j]-k[i]<h[j]-mid){                             check = true;                             break;                         }                     }                     if(check){                                                  lo = mid+1;                     }else{                         hi = mid-1;                         hpComingOut = mid;                     }                 }                 if(hpComingOut>dist){                     ans+=summ(dist+lastHP)-summ(lastHP);                     lastHP+=dist;                 }else{                     long diff = dist-hpComingOut;                     ans+=summ(hpComingOut);                     lastHP = hpComingOut;                 }                 lastD = k[i];             }             System.out.println(ans);         }     }     static long summ(long a){         return (a*(a+1))/2;     }      } ,"import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static int dp[];  static boolean v[];  static int mod=1000000007;  static int max;  static int bit[];    static HashMap<Integer,Integer> map;        static PrintWriter out=new PrintWriter(System.out);   public static void main(String[] args)   {     int ttt=1;        ttt =i();                outer :while (ttt-- > 0)          {         int n=i();         long A[]=inputL(n);         long B[]=inputL(n);         long C[]=new long[n];         for(int i=0;i<n;i++) {         C[i]=A[i]-B[i]+1;         }         long min=C[n-1];         long ans=0;         long last=A[n-1];         for(int i=n-1;i>=0;i--) {         if(C[i]>min) {         continue;         }         if(A[i]<min) {         long y=last-min+1;         ans+=y*(y+1)/2;         last=A[i];         min=C[i];         continue;         }                  min=C[i];                  }         long y=last-min+1;     ans+=y*(y+1)/2;         System.out.println(ans);         }               out.close();                                                              }              static long[] inputL(int n) { long A[]=new long[n];    for(int i=0;i<n;i++) {    A[i]=sc.nextLong();    }    return A;    }      static int i() {      return sc.nextInt();      }                                                                                           } ",0
555,import java.io.BufferedInputStream; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; public class EDU121C {     public static void main(String[] args) {         JS scan = new JS();         int t = scan.nextInt();         while(t-->0){             int n = scan.nextInt();             long[] k = new long[n];             long[] h = new long[n];             for(int i =0;i<n;i++){                 k[i] = scan.nextInt();             }             for(int i = 0;i<n;i++){                 h[i] = scan.nextInt();             }             long ans = 0;             long lastD = 0;             long lastHP = 0;             for(int i = 0;i<n;i++){                 long dist = k[i]-lastD;                 long lo = h[i];                 long hi = lastHP+dist;                 long hpComingOut = 0;                 while(lo<=hi){                     long mid = (lo+hi)/2;                     boolean check = false;                     for(int j = i+1;j<n;j++){                         if(k[j]-k[i]<h[j]-mid){                             check = true;                             break;                         }                     }                     if(check){                                                  lo = mid+1;                     }else{                         hi = mid-1;                         hpComingOut = mid;                     }                 }                 if(hpComingOut>dist){                     ans+=summ(dist+lastHP)-summ(lastHP);                     lastHP+=dist;                 }else{                     long diff = dist-hpComingOut;                     ans+=summ(hpComingOut);                     lastHP = hpComingOut;                 }                 lastD = k[i];             }             System.out.println(ans);         }     }     static long summ(long a){         return (a*(a+1))/2;     }      } ,"import java.util.*; import java.io.*; public class monstersandspells { public static void main(String args[]) throws IOException { FastScanner in = new FastScanner(System.in); PrintWriter out = new PrintWriter(System.out); int t = in.nextInt(); for ( ; t > 0; t--) { int n = in.nextInt(); long[] times = new long[n]; long[] health = new long[n]; for (int i = 0; i < n; i++) times[i] = in.nextLong(); for (int i = 0; i < n; i++) health[i] = in.nextLong(); long small = 0; long prev = 0; long lastDamage = 0; for (int i = 0; i < n; i++) { long diff = times[i] - prev; boolean use = true; long delta = 0; if (diff >= health[i]) { delta += health[i]; long curr = health[i]; long lastTime = times[i]; for (int j = i + 1; j < n; j++) { long increase = times[j] - lastTime; if (curr + increase >= health[j]) { curr += increase; lastTime = times[j]; } else { delta += (health[j] - (curr + increase)); curr = health[j]; lastTime = times[j]; } } if (delta <= diff) { use = true; } else use = false; } else use = false; if (use) { small += damageOverTime(delta, 1); lastDamage = delta; } else { small += damageOverTime((times[i] - prev) + lastDamage, lastDamage + 1); lastDamage+=(times[i] - prev); } prev = times[i]; } out.println(small); } out.close(); } public static long damageOverTime(long endPower, long startPower) { return triangleSum(endPower) - triangleSum(startPower - 1); } public static long triangleSum(long a) { return a * (a + 1) / 2; } } ",0
556,"import java.io.BufferedOutputStream; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; public class Main {     static class Clock {         protected long start, stop;         public void start() {             start = System.currentTimeMillis();         }                       }     public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));               static long mod = 1000000007;                         static int parent[];     static int rank[];               public static long arr[];     public static int arr1[];                         public static void main(String[] args) throws Exception {         FastReader sc = new FastReader();         Clock clock = new Clock();         clock.start();        int t1=sc.nextInt();         for (int t = 0; t <t1 ; t++) {           int n=sc.nextInt();           long arr[]=new long[n];             for (int i = 0; i < n; i++) {                 arr[i]=sc.nextLong();             }           long sum1=0;           long sum2=0;           long min1 =Long.MAX_VALUE;           long min2 =Long.MAX_VALUE;           long brr[]=new long[n];             for (int i = 0; i <n ; i+=2) {                 int nn =i/2;                 min1=Math.min(arr[i],min1);                 sum1+=arr[i];                 long x =(sum1-min1) + min1*(n-nn);                                brr[i]=x;             }             for (int i = 1; i <n ; i+=2) {                 int nn =i/2;                                  min2=Math.min(arr[i],min2);                 sum2+=arr[i];                 long x =(sum2-min2) + min2*(n-nn);                 brr[i]=x;             }             long min=Long.MAX_VALUE;             for (int i = 1; i < n; i++) {                 min=Math.min(brr[i]+brr[i-1],min);             }             out.println(min);                                  }         out.close();     } } ","import java.io.BufferedOutputStream; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; public class Main {     static class Clock {         protected long start, stop;         public void start() {             start = System.currentTimeMillis();         }                       }     public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));               static long mod = 1000000007;                         static int parent[];     static int rank[];               public static long arr[];     public static int arr1[];                         public static void main(String[] args) throws Exception {         FastReader sc = new FastReader();         Clock clock = new Clock();         clock.start();        int t1=sc.nextInt();         for (int t = 0; t <t1 ; t++) {           int n=sc.nextInt();           long arr[]=new long[n];             for (int i = 0; i < n; i++) {                 arr[i]=sc.nextLong();             }           long sum1=0;           long sum2=0;           long min1 =Long.MAX_VALUE;           long min2 =Long.MAX_VALUE;           long brr[]=new long[n];             for (int i = 0; i <n ; i+=2) {                 int nn =i/2;                 min1=Math.min(arr[i],min1);                 sum1+=arr[i];                 long x =(sum1-min1) + min1*(n-nn);                                brr[i]=x;             }             for (int i = 1; i <n ; i+=2) {                 int nn =i/2;                                  min2=Math.min(arr[i],min2);                 sum2+=arr[i];                 long x =(sum2-min2) + min2*(n-nn);                 brr[i]=x;             }             long min=Long.MAX_VALUE;             for (int i = 1; i < n; i++) {                 min=Math.min(brr[i]+brr[i-1],min);             }             out.println(min);                                  }         out.close();     } } ",1
557,"import java.io.BufferedReader;  import java.io.IOException;  import java.io.InputStreamReader;  import java.util.*;    public class aa {                public static void main(String[] args)      {             FastReader d=new FastReader();             int t,i,j,c,z,k,l,n;             int mod = (int) 1e9 + 7;             int Inf=Integer.MAX_VALUE;             int negInf=Integer.MIN_VALUE;         t=d.nextInt();                                    while(t-->0)         {             z=c=0;             n=d.nextInt();             int a[]=new int[n];             for(i=0;i<n;i++)             a[i]=d.nextInt();                          long p=0;             long ans;             long x,y;             long e,o;             ans=Long.MAX_VALUE;             x=y=Integer.MAX_VALUE;             e=o=n;             for(i=0;i<n;i++) {                 if(i%2==1) {                p+=a[i];                e--;                x=Long.min(x, a[i]);                ans=Long.min(ans,p+(o*y)+(e*x));                }                else {                p+=a[i];                o--;                y=Long.min(y, a[i]);                ans=Long.min(ans,p+(o*y)+(e*x));                 }                 }                 System.out.println(ans);         }     }  } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.out; import java.util.*; import java.io.PrintStream; import java.io.PrintWriter; public class A {   static final int mod = 1000000007; static final long temp = 998244353; static final long MOD = 1000000007; static final long M = (long)1e9+7;                                                                                                 public static void main(String[] args) throws Exception  { Reader sc = new Reader(); PrintWriter fout = new PrintWriter(System.out); int t = sc.nextInt(); while(t-- > 0) { long INF = 1000000000000000007L; int n = sc.nextInt(); long[] c = new long[n+1]; for(int i = 1;i<=n;i++) c[i] = sc.nextLong(); long ans = INF; long mo = INF,  so = 0, co = 0; long me = INF,  se = 0, ce = 0; for(int i=1;i<=n;i++) { if(i%2 == 1) { mo = min(mo,c[i]); so += c[i]; co++; } else { me = min(me,c[i]); se += c[i]; ce++; } if(i>=2) { long x = so + (n - co) * mo + se + (n - ce) * me; ans=min(ans,x); } } fout.println(ans); } fout.close(); } } ",0
558,"import java.io.BufferedReader;  import java.io.IOException;  import java.io.InputStreamReader;  import java.util.Scanner;  import java.util.StringTokenizer;  import java.util.*;    public class er106c {       public static void main(String[] args)      {          FastReader sc=new FastReader();          try{                             int t=1;                 t=sc.nextInt();                 while(t-->0){                 int n=sc.nextInt();                 long o=n,e=n;                 long maxo=Integer.MAX_VALUE;                 long maxe=Integer.MAX_VALUE;                 long ans=Long.MAX_VALUE;                 long temp=0;                                  int a[]=new int[n];                 for(int i=0;i<n;i++){                     a[i]=sc.nextInt();                 }                 for(int i=0;i<n;i++) {                 if(i%2==1) {                 temp+=a[i];                 e--;                 maxe=Long.min(maxe, a[i]);                 ans=Long.min(ans,temp+(o*maxo)+(e*maxe));                 }                 else {                 temp+=a[i];                 o--;                 maxo=Long.min(maxo, a[i]);                 ans=Long.min(ans,temp+(o*maxo)+(e*maxe));                 }                 }                 System.out.println(ans);                                                            }                                  }catch(Exception e){             return;         }     }           static int mod=1000000007;     static boolean primes[]=new boolean[1000007];     static ArrayList<Integer> b=new ArrayList<>();                                     } ","import java.io.*; import java.lang.reflect.Array; import java.util.*; public class Main {     public static void main(String[] args) {         FastScanner in=new FastScanner();         PrintWriter out=new PrintWriter(System.out);         int t=in.nextInt();         while(t-->0)         solve(in,out);         out.close();     }     static void solve(FastScanner in,PrintWriter out){         int n=in.nextInt();         long a[]=new long[n];         for (int i = 0; i < n; i++) {             a[i]=in.nextLong();         }         long odd=Integer.MAX_VALUE,even=Integer.MAX_VALUE;         even=a[0];         long sum=a[0];         long ans=Long.MAX_VALUE;         for (int i = 1; i < n; i++) {             if(i%2==0) {                 ans=Math.min(ans,(n-i/2)*a[i] + odd*(n-i/2) +sum);                 even=Math.min(even,a[i]);             } else {                 ans=Math.min(ans,(n-i/2)*a[i] + even*(n-i/2-1) +sum);                 odd=Math.min(odd,a[i]);             }             sum+=a[i];         }         out.println(ans);     }                } ",0
559,"import java.io.BufferedReader;  import java.io.IOException;  import java.io.InputStreamReader;  import java.util.Scanner;  import java.util.StringTokenizer;  import java.util.*;    public class er106c {       public static void main(String[] args)      {          FastReader sc=new FastReader();          try{                             int t=1;                 t=sc.nextInt();                 while(t-->0){                 int n=sc.nextInt();                 long o=n,e=n;                 long maxo=Integer.MAX_VALUE;                 long maxe=Integer.MAX_VALUE;                 long ans=Long.MAX_VALUE;                 long temp=0;                                  int a[]=new int[n];                 for(int i=0;i<n;i++){                     a[i]=sc.nextInt();                 }                 for(int i=0;i<n;i++) {                 if(i%2==1) {                 temp+=a[i];                 e--;                 maxe=Long.min(maxe, a[i]);                 ans=Long.min(ans,temp+(o*maxo)+(e*maxe));                 }                 else {                 temp+=a[i];                 o--;                 maxo=Long.min(maxo, a[i]);                 ans=Long.min(ans,temp+(o*maxo)+(e*maxe));                 }                 }                 System.out.println(ans);                                                            }                                  }catch(Exception e){             return;         }     }           static int mod=1000000007;     static boolean primes[]=new boolean[1000007];     static ArrayList<Integer> b=new ArrayList<>();                                     } ","import java.io.BufferedReader;  import java.io.IOException;  import java.io.InputStreamReader;  import java.util.*;    public class aa {                public static void main(String[] args)      {             FastReader d=new FastReader();             int t,i,j,c,z,k,l,n;             int mod = (int) 1e9 + 7;             int Inf=Integer.MAX_VALUE;             int negInf=Integer.MIN_VALUE;         t=d.nextInt();                                    while(t-->0)         {             z=c=0;             n=d.nextInt();             int a[]=new int[n];             for(i=0;i<n;i++)             a[i]=d.nextInt();                          long p=0;             long ans;             long x,y;             long e,o;             ans=Long.MAX_VALUE;             x=y=Integer.MAX_VALUE;             e=o=n;             for(i=0;i<n;i++) {                 if(i%2==1) {                p+=a[i];                e--;                x=Long.min(x, a[i]);                ans=Long.min(ans,p+(o*y)+(e*x));                }                else {                p+=a[i];                o--;                y=Long.min(y, a[i]);                ans=Long.min(ans,p+(o*y)+(e*x));                 }                 }                 System.out.println(ans);         }     }  } ",1
560,"import java.io.BufferedReader; import java.io.*; import java.util.*; public class josph { static BufferedReader br; public static void main(String[] args) throws Exception { br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pr = new PrintWriter(System.out); int tc = 1; tc= cinI(); while(tc-->0){ int n =cinI(); String[] a= new String[n]; int[][] f =new int[10][n]; for(int i=0;i<n;i++){ a[i]=cin(); char[] x = a[i].toCharArray(); for(char c:x){ int index = c-'a'; f[index][i]+=1; } for(int j=0;j<10;j++){ int rem =x.length-f[j][i]; f[j][i]-=rem; } } int max=0; for(int j=0;j<10;j++){ Arrays.sort(f[j]); int cnt=0; int sum=0; for(int i=n-1;i>=0;i--){ sum+=f[j][i]; if(sum>0){ cnt+=1; } else{ break; } } max=Math.max(max,cnt); } System.out.println(max); } } public static String cin() throws Exception { return br.readLine(); } public static Integer cinI() throws Exception { return Integer.parseInt(br.readLine()); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     public static void main(String args[])     {      FastReader s=new FastReader();      int t=s.nextInt();      while(t>0)      {       Solve solve=new Solve();       t--;       int n=s.nextInt();       String str[]=new String[n];       for(int i=0;i<n;i++)       str[i]=s.nextLine();       char array[]=new char[]{'a','b','c','d','e'};       int arr[]=new int[n];       int ans=0;       for(int i=0;i<5;i++)       {         Arrays.fill(arr,0);           for(int j=0;j<n;j++)           {                  for(int k=0;k<str[j].length();k++)                  {                      if(str[j].charAt(k)==array[i])                      arr[j]++;                      else                      arr[j]--;                  }           }           ans=(ans>solve.solve(arr,n))?ans:solve.solve(arr,n);       }       System.out.println(ans);      }     } } class Solve{     public int solve(int arr[],int n)     {         int ans=0;         int sum=0;         Arrays.sort(arr);         for(int i=n-1;i>=0;i--)         {             if(sum+arr[i]>0)             {                 sum+=arr[i];                 ans++;             }             else             break;         }         return ans;     } } ",0
561,"import java.io.BufferedReader; import java.io.*; import java.util.*; public class josph { static BufferedReader br; public static void main(String[] args) throws Exception { br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pr = new PrintWriter(System.out); int tc = 1; tc= cinI(); while(tc-->0){ int n =cinI(); String[] a= new String[n]; int[][] f =new int[10][n]; for(int i=0;i<n;i++){ a[i]=cin(); char[] x = a[i].toCharArray(); for(char c:x){ int index = c-'a'; f[index][i]+=1; } for(int j=0;j<10;j++){ int rem =x.length-f[j][i]; f[j][i]-=rem; } } int max=0; for(int j=0;j<10;j++){ Arrays.sort(f[j]); int cnt=0; int sum=0; for(int i=n-1;i>=0;i--){ sum+=f[j][i]; if(sum>0){ cnt+=1; } else{ break; } } max=Math.max(max,cnt); } System.out.println(max); } } public static String cin() throws Exception { return br.readLine(); } public static Integer cinI() throws Exception { return Integer.parseInt(br.readLine()); } } ","import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; public class Solution {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Main solver = new Main();         boolean multipleTC = true;         int testCount = multipleTC ? Integer.parseInt(in.next()) : 1;         for (int i = 1; i <= testCount; i++)             solver.solve(in, out, i);         out.close();     }     static class Main {         PrintWriter out;         InputReader in;         public void solve(InputReader in, PrintWriter out, int test) {             this.out = out;             this.in = in;             int n = ni();             String[] arr = new String[n];             int[][] freq = new int[n][5];             int[][] rem = new int[n][5];             for(int i = 0; i < n; i++){                 arr[i] = n();                 for(int j = 0; j < arr[i].length(); j++)                     freq[i][arr[i].charAt(j) - 'a']++;                 for(int j = 0; j < 5; j++)                     rem[i][j] = arr[i].length() - freq[i][j];             }             int ans = 0;             for(int i = 0; i < 5; i++){                 int[] vals = new int[n];                 for(int j = 0; j < n; j++)                     vals[j] = freq[j][i] - rem[j][i];                 Arrays.sort(vals);                 int sum = 0, x = 0;                 for(int j = n - 1; j >= 0; j--){                     if(sum + vals[j] > 0){                         x++;                         sum += vals[j];                     } else {                         break;                     }                 }                 if(x > ans) {                     ans = x;                 }             }             System.out.println(ans);         }                  String n(){             return in.next();         }         int ni() {             return in.nextInt();         }                       }      } ",0
562,"import java.io.BufferedReader; import java.io.*; import java.util.*; public class josph { static BufferedReader br; public static void main(String[] args) throws Exception { br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pr = new PrintWriter(System.out); int tc = 1; tc= cinI(); while(tc-->0){ int n =cinI(); String[] a= new String[n]; int[][] f =new int[10][n]; for(int i=0;i<n;i++){ a[i]=cin(); char[] x = a[i].toCharArray(); for(char c:x){ int index = c-'a'; f[index][i]+=1; } for(int j=0;j<10;j++){ int rem =x.length-f[j][i]; f[j][i]-=rem; } } int max=0; for(int j=0;j<10;j++){ Arrays.sort(f[j]); int cnt=0; int sum=0; for(int i=n-1;i>=0;i--){ sum+=f[j][i]; if(sum>0){ cnt+=1; } else{ break; } } max=Math.max(max,cnt); } System.out.println(max); } } public static String cin() throws Exception { return br.readLine(); } public static Integer cinI() throws Exception { return Integer.parseInt(br.readLine()); } } ","import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; public class Practice {     static HashMap<String, Integer> map = new HashMap<>();     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             int[][] occurances = new int[5][n];             for(int i=0;i<n;i++){                 String s = sc.next();                 int[] count = new int[5];                 int len = s.length();                 for(int j=0;j<s.length();j++){                     count[s.charAt(j)-'a']++;                 }                 for(int j=0;j<5;j++){                     occurances[j][i] = count[j] - (len-count[j]);                 }             }             int ans = 0;             for(int i=0;i<5;i++){                 Arrays.sort(occurances[i]);                 int tmpAns = 0; int tmpSum=0;                 for(int j=n-1;j>=0;j--){                     tmpSum+=occurances[i][j];                     if(tmpSum>0) tmpAns++;                     else break;                 }                 ans = Math.max(ans, tmpAns);             }             System.out.println(ans);         }     } } ",1
563,"import java.io.BufferedReader; import java.io.*; import java.util.*; public class josph { static BufferedReader br; public static void main(String[] args) throws Exception { br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pr = new PrintWriter(System.out); int tc = 1; tc= cinI(); while(tc-->0){ int n =cinI(); String[] a= new String[n]; int[][] f =new int[10][n]; for(int i=0;i<n;i++){ a[i]=cin(); char[] x = a[i].toCharArray(); for(char c:x){ int index = c-'a'; f[index][i]+=1; } for(int j=0;j<10;j++){ int rem =x.length-f[j][i]; f[j][i]-=rem; } } int max=0; for(int j=0;j<10;j++){ Arrays.sort(f[j]); int cnt=0; int sum=0; for(int i=n-1;i>=0;i--){ sum+=f[j][i]; if(sum>0){ cnt+=1; } else{ break; } } max=Math.max(max,cnt); } System.out.println(max); } } public static String cin() throws Exception { return br.readLine(); } public static Integer cinI() throws Exception { return Integer.parseInt(br.readLine()); } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ",0
564,"import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.Collections; import java.util.Comparator; import java.util.Arrays; import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; import java.util.Queue; import java.util.PriorityQueue; import java.util.List; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Map; import java.util.HashMap; import java.util.Scanner; import java.util.Set; import java.util.StringTokenizer; import java.util.Vector; public class Dobby { public static void main(String[] args) { try { FastReader fr = new FastReader(); PrintWriter pt = new PrintWriter(System.out); int t = fr.nextInt(); while (t > 0) { int n = fr.nextInt(), m = fr.nextInt(), x = fr.nextInt(); ArrayList<Pair> pp = new ArrayList<>(); int A[] = new int[n]; for (int i = 0; i < n; i++) { A[i] = fr.nextInt(); Pair pr = new Pair(A[i], i); pp.add(pr); } Collections.sort(pp); Collections.reverse(pp); int ps[] = new int[n]; int pk[] = new int[n]; Arrays.fill(ps, 0); Arrays.fill(pk, 0); int index = 0; for (int i = 0; i < n; i++) { if (pk[index] < x) { pk[index] += pp.get(i).a; } ps[pp.get(i).b] = index + 1; index++; index = index == m ? 0 : index; } pt.println(""YES""); for (int i = 0; i < n; i++) { pt.print(ps[i] + "" ""); } pt.println(); t--; } pt.close(); } catch ( Exception e) { return; } } static void merge(long arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; long L[] = new long[n1]; long R[] = new long[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } static void sort(long arr[], int l, int r) { if (l < r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } static class Pair implements Comparable<Pair> { int a, b; Pair(int a, int b) { this.a = a; this.b = b; } } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; public class test { public static void main(String[] args) throws NumberFormatException, IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); StringBuilder sb = new StringBuilder(); while (t-- > 0) { String[] st = br.readLine().split("" ""); int n = Integer.parseInt(st[0]); int m = Integer.parseInt(st[1]); int x = Integer.parseInt(st[2]); int[] arr = new int[n]; st = br.readLine().split("" ""); Pair[] temp = new Pair[n]; for (int i = 0; i < n; i++) { arr[i] = Integer.parseInt(st[i]); temp[i] = new Pair(arr[i], i); } int bcount = n / m; int extra = n % m; int[] ans = new int[n]; sort(temp); int id = 0; int minmax = 0; boolean flag = false; for (int i = 0; i < bcount; i++) { minmax -= temp[id].val; for (int j = 0; j < m; j++) { ans[temp[id].idx] = j + 1; if (j == m) { minmax += temp[id].val; } id++; } if (minmax > x) { sb.append(""NO\n""); flag = true; break; } } for (int i = 0; i < extra; i++) { ans[temp[id].idx] = i + 1; id++; } if (flag == false) { sb.append(""YES\n""); for (int i = 0; i < n; i++) { sb.append(ans[i] + "" ""); } sb.append(""\n""); } } System.out.println(sb); } public static class Pair implements Comparable<Pair> { int val; int idx; public Pair(int val, int idx) { this.val = val; this.idx = idx; } } public static void sort(Pair[] arr) { ArrayList<Pair> list = new ArrayList<>(); for (int i = 0; i < arr.length; i++) { list.add(new Pair(arr[i].val, arr[i].idx)); } Collections.sort(list); for (int i = 0; i < arr.length; i++) { arr[i] = list.get(i); } } } ",0
565,"import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.Collections; import java.util.Comparator; import java.util.Arrays; import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; import java.util.Queue; import java.util.PriorityQueue; import java.util.List; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Map; import java.util.HashMap; import java.util.Scanner; import java.util.Set; import java.util.StringTokenizer; import java.util.Vector; public class Dobby { public static void main(String[] args) { try { FastReader fr = new FastReader(); PrintWriter pt = new PrintWriter(System.out); int t = fr.nextInt(); while (t > 0) { int n = fr.nextInt(), m = fr.nextInt(), x = fr.nextInt(); ArrayList<Pair> pp = new ArrayList<>(); int A[] = new int[n]; for (int i = 0; i < n; i++) { A[i] = fr.nextInt(); Pair pr = new Pair(A[i], i); pp.add(pr); } Collections.sort(pp); Collections.reverse(pp); int ps[] = new int[n]; int pk[] = new int[n]; Arrays.fill(ps, 0); Arrays.fill(pk, 0); int index = 0; for (int i = 0; i < n; i++) { if (pk[index] < x) { pk[index] += pp.get(i).a; } ps[pp.get(i).b] = index + 1; index++; index = index == m ? 0 : index; } pt.println(""YES""); for (int i = 0; i < n; i++) { pt.print(ps[i] + "" ""); } pt.println(); t--; } pt.close(); } catch ( Exception e) { return; } } static void merge(long arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; long L[] = new long[n1]; long R[] = new long[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } static void sort(long arr[], int l, int r) { if (l < r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } static class Pair implements Comparable<Pair> { int a, b; Pair(int a, int b) { this.a = a; this.b = b; } } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.util.Objects; import java.util.Collections; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CPhoenixAndTowers solver = new CPhoenixAndTowers();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CPhoenixAndTowers {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();             ArrayList<Pair<Integer, Integer>> a = new ArrayList<>();             for (int i = 0; i < n; ++i) {                 a.add(new Pair<>(in.nextInt(), i));             }             Collections.sort(a);             int[] ans = new int[n];             int[] sum = new int[m];             int j = 1;             for (int i = 0; i < n; ++i) {                 ans[a.get(i).y] = j;                 sum[j - 1] += a.get(i).x;                 j++;                 if (j == m + 1) j = 1;             }             for (int i = 1; i < m; ++i) {                 if (Math.abs(sum[i - 1] - sum[i]) > k) {                     out.println(""NO"");                 }             }             out.println(""YES"");             for (int e : ans) {                 out.print(e + "" "");             }             out.println();         }     }     static class Pair<U, V> implements Comparable<Pair<U, V>> {         public U x;         public V y;         public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                }      } ",0
566,"import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.Collections; import java.util.Comparator; import java.util.Arrays; import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; import java.util.Queue; import java.util.PriorityQueue; import java.util.List; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Map; import java.util.HashMap; import java.util.Scanner; import java.util.Set; import java.util.StringTokenizer; import java.util.Vector; public class Dobby { public static void main(String[] args) { try { FastReader fr = new FastReader(); PrintWriter pt = new PrintWriter(System.out); int t = fr.nextInt(); while (t > 0) { int n = fr.nextInt(), m = fr.nextInt(), x = fr.nextInt(); ArrayList<Pair> pp = new ArrayList<>(); int A[] = new int[n]; for (int i = 0; i < n; i++) { A[i] = fr.nextInt(); Pair pr = new Pair(A[i], i); pp.add(pr); } Collections.sort(pp); Collections.reverse(pp); int ps[] = new int[n]; int pk[] = new int[n]; Arrays.fill(ps, 0); Arrays.fill(pk, 0); int index = 0; for (int i = 0; i < n; i++) { if (pk[index] < x) { pk[index] += pp.get(i).a; } ps[pp.get(i).b] = index + 1; index++; index = index == m ? 0 : index; } pt.println(""YES""); for (int i = 0; i < n; i++) { pt.print(ps[i] + "" ""); } pt.println(); t--; } pt.close(); } catch ( Exception e) { return; } } static void merge(long arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; long L[] = new long[n1]; long R[] = new long[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } static void sort(long arr[], int l, int r) { if (l < r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } static class Pair implements Comparable<Pair> { int a, b; Pair(int a, int b) { this.a = a; this.b = b; } } } ","import java.util.*; import java.lang.*; import java.io.*; public class Template { static class Pair implements Comparable<Pair> { int h; int ind; Pair(int h, int ind) { this.h = h; this.ind = ind; } } public static void main(String[] args) { FastReader fs=new FastReader(); int T=fs.nextInt(); for (int tt=0; tt<T; tt++) { int n = fs.nextInt(); int m = fs.nextInt(); int x = fs.nextInt(); if(n < m) { System.out.println(""NO""); continue; } Pair a[] = new Pair[n]; PriorityQueue<Pair> heap = new PriorityQueue<>(); for(int i=0;i<n;i++) { a[i] = new Pair(fs.nextInt(), i); } Arrays.sort(a); for(int i=1;i<=m;i++) { heap.add(new Pair(0, i)); } int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; int ans[] = new int[n]; int idx = 0; while(!heap.isEmpty() && idx < n) { Pair curr = heap.poll(); curr.h += a[idx].h; ans[a[idx].ind] = curr.ind; heap.add(new Pair(curr.h,  curr.ind)); idx++; } System.out.println(""YES""); for(int i:ans) System.out.print(i+"" ""); System.out.println(); } } } ",0
567,"import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.util.Collections; import java.util.Comparator; import java.util.PriorityQueue; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.StringTokenizer; public class B{ static FastScanner sc = new FastScanner(); static BufferedWriter output = new BufferedWriter( new OutputStreamWriter(System.out)); public static long util(int arr[]) { Arrays.sort(arr); int i = 0; int j = arr.length - 1; while(i <= j) { int tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; i++; j--; } int n = arr.length; PriorityQueue<Integer> pq = new PriorityQueue<>(); long ans = 0; long sum = 0; long cnt = 0; for(int ii: arr) { if( ii == 0) cnt++; } for(i =0;i<n;i++) { sum += arr[i]; ans++; if(arr[i] < 0) { pq.add(arr[i]); } if( sum <= 0 ) { while( sum <= 0 ) { if(pq.isEmpty()) break; sum -= pq.peek(); ans--; pq.remove(); } } } if(sum > 0)  return ans; return ans - cnt; } public static void solve() { int n = sc.nextInt(); String a[] = new String[n]; for(int i =0;i<n;i++) { a[i] = sc.next(); } long ans =  -1; for(int i =0;i<5;i++) { char mx = (char)(i + 'a'); int c1 = 0, c2 = 0; int arr[] = new int[n]; for(int j =0;j<n;j++) { c1 = 0; c2 = 0; for(int k = 0;k<a[j].length();k++) { if(a[j].charAt(k) == mx) c1++; else c2++; } arr[j]= c1 - c2; } ans = Math.max(ans, util(arr)); } System.out.println(ans); } public static void main(String[] args) { int t = 1; t = sc.nextInt(); outer: for (int tt = 0; tt < t; tt++) { solve(); } } } ","import java.util.*; import java.io.*; public class ProbC { public static void main(String[] args) throws IOException { BufferedReader bf = new BufferedReader(new InputStreamReader(System.in)); StringTokenizer st; StringBuilder sb = new StringBuilder(); int cases = Integer.parseInt(bf.readLine()); for(int caseNum=0; caseNum<cases; caseNum++) { int n = Integer.parseInt(bf.readLine()); String[] words = new String[n]; for(int i=0; i<n; i++) words[i] = bf.readLine(); int[] count = new int[26]; for(int i=0; i<n; i++) for(int j=0; j<words[i].length(); j++) count[words[i].charAt(j)-97]++; int maxWords = 0; for(int x=0; x<26; x++) { if(count[x] > 0) { char curChar = (char)(x+97); int[] diff = new int[n]; for(int i=0; i<n; i++) { for(int j=0; j<words[i].length(); j++) { if(words[i].charAt(j) == curChar) diff[i]++; else diff[i]--; } } Arrays.sort(diff); int sum = 0; int i = diff.length-1; for(; i>=0; i--) { sum+=diff[i]; if(sum <= 0) break; } maxWords = Math.max(maxWords, n-(i+1)); } } sb.append(maxWords+""\n""); } System.out.println(sb); bf.close(); } } ",0
568,"import java.io.BufferedReader; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.math.BigInteger; import java.util.ArrayList; import java.util.Arrays; import java.util.BitSet; import java.util.Calendar; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.SortedSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class C_Edu_Round_120 {     public static long MOD = 998244353;     static int[] dp;     public static void main(String[] args) throws FileNotFoundException {                           PrintWriter out = new PrintWriter(System.out);         Scanner in = new Scanner();         int T = in.nextInt();                  for (int z = 0; z < T; z++) {             int n = in.nextInt();             long k = in.nextLong();             long[] data = new long[n];             long total = 0;             PriorityQueue<Integer> q = new PriorityQueue<>();             for (int i = 0; i < n; i++) {                 q.add(in.nextInt());             }             for (int i = 0; i < n; i++) {                 data[i] = q.poll();                 total += data[i];             }             Arrays.sort(data);             long result = Long.max(0, total - k);             long cur = 0;             int num = 0;             for (int i = n - 1; i > 0 && total > k + cur; i--) {                 num++;                 cur += data[i] - data[0];                 long left = Long.max(0, total - cur - k);                 left /= (num + 1);                 if (total - cur - (left * (num + 1)) > k) {                     left++;                 }                                  result = Long.min(result, left + num);             }             out.println(result);         }         out.close();     }                                                                  } ","import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.util.*; import java.util.concurrent.ThreadLocalRandom;   public class a729 {   public static void main(String[] args) throws IOException {     BufferedWriter out = new BufferedWriter(             new OutputStreamWriter(System.out)); BufferedReader br = new BufferedReader(         new InputStreamReader(System.in)); PrintWriter pt = new PrintWriter(System.out); FastReader sc = new FastReader(); int t = sc.nextInt(); for(int o = 0 ; o<t;o++){ int n = sc.nextInt(); long k = sc.nextLong(); long[] arr = new long[n]; for(int i = 0 ; i<n;i++) { arr[i] = sc.nextLong(); } shuffleArray(arr); Arrays.sort(arr); long[] psum = new long[n+1]; for(int i = 1; i<=n;i++){ psum[i] = psum[i-1] + arr[i-1]; } if(n==1) { long val = arr[0]-k; val = Math.max(0, val); System.out.println(val); continue; } if(k>=psum[n]) { System.out.println(0); continue; } long ans = Integer.MAX_VALUE; long x = 0; long a1 = arr[0]; for(int y = 0 ; y<n;y++) { long val = psum[n-y] + y*a1 - k; x = val/(y+1); if(val%(y+1)!=0 && val>0) { x++; } ans = Math.min(ans, Math.max(x, 0) + y); } ans = Math.max(ans, 0); System.out.println(ans); }      }                               static void shuffleArray(long[] ar)   {          Random rnd = ThreadLocalRandom.current();     for (int i = ar.length - 1; i > 0; i--)     {       int index = rnd.nextInt(i + 1);              long a = ar[index];       ar[index] = ar[i];       ar[i] = a;     }   }   }       ",0
569,"import java.io.BufferedReader; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.math.BigInteger; import java.util.ArrayList; import java.util.Arrays; import java.util.BitSet; import java.util.Calendar; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.SortedSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class D_Round_753_Div3 {     public static int MOD = 1000000007;     static int[][] dp;     public static void main(String[] args) throws FileNotFoundException {                           PrintWriter out = new PrintWriter(System.out);         Scanner in = new Scanner();         int T = in.nextInt();         for (int z = 0; z < T; z++) {             int n = in.nextInt();             int[] data = new int[n];             for (int i = 0; i < n; i++) {                 data[i] = in.nextInt();             }             String line = in.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < n; i++) {                 if (line.charAt(i) == 'B') {                     blue.add(data[i]);                 } else {                     red.add(data[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             int st = 1;             boolean ok = true;             for (int i : blue) {                 if (i < st) {                     ok = false;                     break;                 }                 st++;             }             if (ok) {                 for (int i : red) {                     if (i > st) {                         ok = false;                         break;                     }                     st++;                 }             }             out.println(ok ? ""Yes"" : ""No"");         }         out.close();     }                                                        } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.text.DecimalFormat; import java.util.*; import java.util.concurrent.ThreadLocalRandom; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.stream.LongStream; public class TaskB {     static long mod = 1000000007;     static FastScanner scanner;     static final StringBuilder result = new StringBuilder();     public static void main(String[] args) {                  scanner = new FastScanner();         int T = scanner.nextInt();         for (int t = 0; t < T; t++) {             solve(t + 1);             result.append(""\n"");         }         System.out.println(result);     }     static void solve(int t) {         int n = scanner.nextInt();         int[] a = scanner.nextIntArray(n);         String s = scanner.nextToken();         List<Integer> blue = new ArrayList<>();         List<Integer> red = new ArrayList<>();         for (int i = 0; i < n; i++) {             if (s.charAt(i) == 'B') {                 blue.add(a[i]);             } else {                 red.add(a[i]);             }         }         Collections.sort(blue);         Collections.sort(red);         for (int i = 0; i < blue.size(); i++) {             if (blue.get(i) < i + 1) {                 result.append(""NO"");                 return;             }         }         for (int i = 0; i < red.size(); i++) {             if (red.get(i) > i + 1 + blue.size()) {                 result.append(""NO"");                 return;             }         }         result.append(""YES"");     }                          } ",0
570,"import java.io.BufferedReader; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.math.BigInteger; import java.util.ArrayList; import java.util.Arrays; import java.util.BitSet; import java.util.Calendar; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.SortedSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class D_Round_753_Div3 {     public static int MOD = 1000000007;     static int[][] dp;     public static void main(String[] args) throws FileNotFoundException {                           PrintWriter out = new PrintWriter(System.out);         Scanner in = new Scanner();         int T = in.nextInt();         for (int z = 0; z < T; z++) {             int n = in.nextInt();             int[] data = new int[n];             for (int i = 0; i < n; i++) {                 data[i] = in.nextInt();             }             String line = in.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < n; i++) {                 if (line.charAt(i) == 'B') {                     blue.add(data[i]);                 } else {                     red.add(data[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             int st = 1;             boolean ok = true;             for (int i : blue) {                 if (i < st) {                     ok = false;                     break;                 }                 st++;             }             if (ok) {                 for (int i : red) {                     if (i > st) {                         ok = false;                         break;                     }                     st++;                 }             }             out.println(ok ? ""Yes"" : ""No"");         }         out.close();     }                                                        } ","import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ",0
571,"import java.io.BufferedReader; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.math.BigInteger; import java.util.ArrayList; import java.util.Arrays; import java.util.BitSet; import java.util.Calendar; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.SortedSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class D_Round_753_Div3 {     public static int MOD = 1000000007;     static int[][] dp;     public static void main(String[] args) throws FileNotFoundException {                           PrintWriter out = new PrintWriter(System.out);         Scanner in = new Scanner();         int T = in.nextInt();         for (int z = 0; z < T; z++) {             int n = in.nextInt();             int[] data = new int[n];             for (int i = 0; i < n; i++) {                 data[i] = in.nextInt();             }             String line = in.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < n; i++) {                 if (line.charAt(i) == 'B') {                     blue.add(data[i]);                 } else {                     red.add(data[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             int st = 1;             boolean ok = true;             for (int i : blue) {                 if (i < st) {                     ok = false;                     break;                 }                 st++;             }             if (ok) {                 for (int i : red) {                     if (i > st) {                         ok = false;                         break;                     }                     st++;                 }             }             out.println(ok ? ""Yes"" : ""No"");         }         out.close();     }                                                        } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",1
572,"import java.io.BufferedReader; import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.Stack; import java.util.StringTokenizer; public class D {    private static final String INPUT_FILE_PATH = """";    void solve() {       int n = in.nextInt();       int[] h = new int[n];       for (int i = 0; i < n; i++) h[i] = in.nextInt();       Stack<Integer> increasing = new Stack();       Stack<Integer> increasingIndices = new Stack();       Stack<Integer> decreasing = new Stack();       Stack<Integer> decreasingIndices = new Stack();       increasing.push(h[0]);       increasingIndices.push(0);       decreasing.push(h[0]);       decreasingIndices.push(0);       int[] dp = new int[n];       dp[0] = 0;       for (int i = 1; i < n; i++) {          dp[i] = dp[i - 1] + 1;          while (!increasing.isEmpty() && increasing.peek() > h[i]) {             dp[i] = Math.min(dp[i], 1 + dp[increasingIndices.peek()]);             increasing.pop();             increasingIndices.pop();          }          while (!decreasing.isEmpty() && decreasing.peek() < h[i]) {             dp[i] = Math.min(dp[i], 1 + dp[decreasingIndices.peek()]);             decreasing.pop();             decreasingIndices.pop();          }          if (!increasing.isEmpty()) {             dp[i] = Math.min(dp[i], 1 + dp[increasingIndices.peek()]);          }          if (!decreasing.isEmpty()) {             dp[i] = Math.min(dp[i], 1 + dp[decreasingIndices.peek()]);          }          if (!increasing.isEmpty() && increasing.peek() == h[i]) {             increasing.pop();             increasingIndices.pop();          }          if (!decreasing.isEmpty() && decreasing.peek() == h[i]) {             decreasing.pop();             decreasingIndices.pop();          }          increasing.push(h[i]);          increasingIndices.push(i);          decreasing.push(h[i]);          decreasingIndices.push(i);       }       out.println(dp[n - 1]);    }    private final InputReader in;    private final PrintWriter out;    private D(InputReader in, PrintWriter out) {       this.in = in;       this.out = out;    }        public static void main(String[] args) throws Exception {       InputStream inputStream = INPUT_FILE_PATH.isEmpty()          ? System.in          : new FileInputStream(new File(INPUT_FILE_PATH));       OutputStream outputStream = System.out;       InputReader inputReader = new InputReader(inputStream);       PrintWriter printWriter = new PrintWriter(outputStream);       new D(inputReader, printWriter).solve();       printWriter.close();    } } ","import java.util.ArrayList; import java.util.Scanner; import java.util.Stack; public class D {     static Scanner sc = new Scanner(System.in);     static int[] height;     static int[] dp;     public static void main(String[] args) {         int n = sc.nextInt();         height = new int[n];         dp = new int[n];         dp[0] = 0;         for (int i = 0; i < n; i++) {             height[i] = sc.nextInt();         }         Stack<Integer> rise = new Stack<Integer>();         Stack<Integer> fail = new Stack<Integer>();         rise.push(0);         fail.push(0);         for (int i = 1; i < n; i++) {             dp[i] = dp[i-1]+1;             if (rise.isEmpty()) {                 rise.push(i);             } else if (height[rise.peek()] < height[i]) {                 rise.push(i);             } else {                 while (!rise.isEmpty() && height[rise.peek()] > height[i]) {                     rise.pop();                     if (!rise.isEmpty()) {                         dp[i] = Math.min(dp[i], dp[rise.peek()] + 1);                     }                 }                 while (!rise.isEmpty() && height[rise.peek()] == height[i]) {                     rise.pop();                 }                 rise.push(i);             }             if (fail.isEmpty()) {                 fail.push(i);             } else if (height[fail.peek()] > height[i]) {                 fail.push(i);             } else {                 while (!fail.isEmpty() && height[fail.peek()] < height[i]) {                     fail.pop();                     if (!fail.isEmpty()){                         dp[i] = Math.min(dp[i], dp[fail.peek()] + 1);                     }                 }                 while (!fail.isEmpty() && height[fail.peek()] == height[i]) {                     fail.pop();                 }                 fail.push(i);             }         }         System.out.println(dp[n - 1]);     } } ",0
573,"import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.Collections; import java.util.PriorityQueue; import java.util.Scanner; import java.util.StringJoiner; import java.util.StringTokenizer; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.ArrayList; import java.util.List; import java.util.HashMap; import java.util.Map; import java.util.Set; import java.util.HashSet; import static java.lang.System.out; import static java.util.stream.Collectors.joining; public class C {   static FastScanner sc = new FastScanner(System.in);   public static void main(String[] args) {     try (PrintWriter out = new PrintWriter(System.out)) {       int T = sc.nextInt();       for (int tt = 1; tt <= T; tt++) {         int n = sc.nextInt();         String[] strings = new String[n];         PriorityQueue<Pair>[] frequencies = new PriorityQueue[5];         for (int i = 0; i < 5; i++)           frequencies[i] = new PriorityQueue<>();         for (int i = 0; i < n; i++) {           strings[i] = sc.next();           int[] freq = new int[5];           for (char c : strings[i].toCharArray())             freq[c - 'a']++;           for (int j = 0; j < 5; j++) {             frequencies[j].add(new Pair(freq[j], strings[i].length()));           }         }         int ans = 0;         for (PriorityQueue<Pair> pq : frequencies) {           long curlen = 0;           long curfreq = 0;           int cnt = 0;           while (!pq.isEmpty()) {             Pair pair = pq.remove();             curfreq += pair.freq;             curlen += pair.len;             if (curfreq >= curlen / 2 + 1) {               cnt++;             } else {               break;             }           }           ans = Math.max(ans, cnt);         }         System.out.println(ans);       }     }   }   static class Pair implements Comparable<Pair> {     int freq, len;     public Pair(int freq, int len) {       this.freq = freq;       this.len = len;     }             }       } ","import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.Collections; import java.util.PriorityQueue; import java.util.Scanner; import java.util.StringJoiner; import java.util.StringTokenizer; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.ArrayList; import java.util.List; import java.util.HashMap; import java.util.Map; import java.util.Set; import java.util.HashSet; import static java.lang.System.out; import static java.util.stream.Collectors.joining; public class C {   static FastScanner sc = new FastScanner(System.in);   public static void main(String[] args) {     try (PrintWriter out = new PrintWriter(System.out)) {       int T = sc.nextInt();       for (int tt = 1; tt <= T; tt++) {         int n = sc.nextInt();         String[] strings = new String[n];         PriorityQueue<Pair>[] frequencies = new PriorityQueue[5];         for (int i = 0; i < 5; i++)           frequencies[i] = new PriorityQueue<>();         for (int i = 0; i < n; i++) {           strings[i] = sc.next();           int[] freq = new int[5];           for (char c : strings[i].toCharArray())             freq[c - 'a']++;           for (int j = 0; j < 5; j++) {                          frequencies[j].add(new Pair(freq[j], strings[i].length()));           }         }                int ans = 0;         for (PriorityQueue<Pair> pq : frequencies) {           long curlen = 0;           long curfreq = 0;           int cnt = 0;           while (!pq.isEmpty()) {             Pair pair = pq.remove();             curfreq += pair.freq;             curlen += pair.len;             if (curfreq >= curlen / 2 + 1) {               cnt++;             } else {               break;             }           }           ans = Math.max(ans, cnt);         }         System.out.println(ans);       }     }   }   static class Pair implements Comparable<Pair> {     int freq, len;     public Pair(int freq, int len) {       this.freq = freq;       this.len = len;     }             }       } ",1
574,"import java.io.BufferedReader; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.StringTokenizer; public class Air {     public static void main(String[] args) {         FastScanner sc = new FastScanner();         int T = sc.nextInt();         for(int tt=0; tt<T;tt++){         int n = sc.nextInt(), k=sc.nextInt();         int [] positions=new int[k], temp=new int[k];         for (int i=0;i<k;i++) positions[i]=sc.nextInt();         for (int i=0;i<k;i++) temp[i]=sc.nextInt();         int[] forced=new int[n];         Arrays.fill(forced, Integer.MAX_VALUE/2);         for (int i=0;i<k;i++) forced[positions[i]-1]=temp[i];         for (int i=1;i<n;i++) forced[i]=Math.min(forced[i], forced[i-1]+1);         for (int i=n-2;i>=0;i--) forced[i]=Math.min(forced[i], forced[i+1]+1);         for (int i=0;i<n;i++) System.out.print(forced[i]+"" ""); System.out.println(); }     }      } ","import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.util.InputMismatchException; public class AirConditioners {     static InputReader inputReader=new InputReader(System.in);     static void solve()     {         int n=inputReader.nextInt();         int k=inputReader.nextInt();         int pos[]=inputReader.nextIntArray(k);         int power[]=inputReader.nextIntArray(k);         int answer[]=new int[n];         Arrays.fill(answer,(int)(2e9));         for (int i=0;i<k;i++)         {             answer[pos[i]-1]=power[i];         }         for (int i=1;i<n;i++)         {             answer[i]=Math.min(answer[i],answer[i-1]+1);         }         for (int i=n-2;i>=0;i--)         {             answer[i]=Math.min(answer[i],answer[i+1]+1);         }         for (int i=0;i<n;i++)         {             out.print(answer[i]+"" "");         }     }     static PrintWriter out=new PrintWriter((System.out));     public static void main(String args[])throws IOException     {         int t=inputReader.nextInt();         while(t-->0)         {             solve();             out.println();         }         out.close();     }      } ",1
575,"import java.io.BufferedReader; import java.io.IOException; import java.io.*; import java.util.*; import javax.management.Query; public class Test{     public static void main(String[] args) throws IOException, InterruptedException{       Scanner sc = new Scanner(System.in);      int t = sc.nextInt();           while(t-->0){       int n = sc.nextInt();       String [] words = new String[n];       int [] occ = new int[5];       int [] occWord = new int [5];       boolean []  found ;       for(int i =0;i<n;i++){         words[i] = sc.nextLine();         found = new boolean[5];         for(int j=0 ; j<words[i].length();j++){           occ[words[i].charAt(j)-'a']++;           if(!found[words[i].charAt(j)-'a']){             found[words[i].charAt(j)-'a']=true;             occWord[words[i].charAt(j)-'a'] ++;           }         }       }       int maxRes =0;       for(int i =0;i<5;i++){       int maxChar = 'a' +i;              PriorityQueue<Pair> pq = new PriorityQueue<>();       for (String word : words){           pq.add(new Pair(word,occOfMaxChar(word, maxChar)-occOfOtherChar(word, maxChar)));       }       int res = 0;       int curr = 0;       int maxCharCount = 0;       int otherCharCount =0;       while(!pq.isEmpty()){         String word = pq.poll().x;         maxCharCount +=occOfMaxChar(word, maxChar);          otherCharCount += occOfOtherChar(word, maxChar);          curr ++;          if(maxCharCount >otherCharCount){            res = curr;          }                  }       maxRes = Math.max(maxRes, res);     }     System.out.println(maxRes);}       }   public static int occOfMaxChar (String s, int maxChar){      int occ = 0;      for(int i =0 ;i<s.length();i++){        if(s.charAt(i)==maxChar){          occ++;        }       }       return occ;   }   public static int occOfOtherChar (String s, int maxChar){     int occ = 0;     for(int i =0 ;i<s.length();i++){       if(s.charAt(i)!=maxChar){         occ++;       }      }      return occ;  }     static int w;     static int n;     static long [][] memo;     static int [] depth ;     static long[] values;     static ArrayList<Pair> gold ;          static class Pair implements Comparable {       String x;       int y;       public Pair (String x, int y) {         this.x = x;         this.y = y;       }            }           } ","import java.io.BufferedReader; import java.io.IOException; import java.io.*; import java.util.*; import javax.management.Query; public class Test{     public static void main(String[] args) throws IOException, InterruptedException{       Scanner sc = new Scanner(System.in);      int t = sc.nextInt();           while(t-->0){       int n = sc.nextInt();       String [] words = new String[n];             for(int i =0;i<n;i++){         words[i] = sc.nextLine();               }       int maxRes =0;       for(int i =0;i<5;i++){       int maxChar = 'a' +i;              PriorityQueue<Pair> pq = new PriorityQueue<>();       for (String word : words){           pq.add(new Pair(word,occOfMaxChar(word, maxChar)-occOfOtherChar(word, maxChar)));       }       int res = 0;       int curr = 0;       int maxCharCount = 0;       int otherCharCount =0;       while(!pq.isEmpty()){         String word = pq.poll().x;         maxCharCount +=occOfMaxChar(word, maxChar);          otherCharCount += occOfOtherChar(word, maxChar);          curr ++;          if(maxCharCount >otherCharCount){            res = curr;          }                  }       maxRes = Math.max(maxRes, res);     }     System.out.println(maxRes);}       }   public static int occOfMaxChar (String s, int maxChar){      int occ = 0;      for(int i =0 ;i<s.length();i++){        if(s.charAt(i)==maxChar){          occ++;        }       }       return occ;   }   public static int occOfOtherChar (String s, int maxChar){     int occ = 0;     for(int i =0 ;i<s.length();i++){       if(s.charAt(i)!=maxChar){         occ++;       }      }      return occ;  }     static int w;     static int n;     static long [][] memo;     static int [] depth ;     static long[] values;     static ArrayList<Pair> gold ;          static class Pair implements Comparable {       String x;       int y;       public Pair (String x, int y) {         this.x = x;         this.y = y;       }            }           } ",1
576,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Comparator; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.Map; import java.util.HashMap; public class cf1515 { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); PrintWriter out = new PrintWriter(outputStream); Task solver = new Task(); solver.solve(in, out); out.close(); } static class Task { public void solve(InputReader in, PrintWriter out) { int t = in.nextInt(); while (t-- != 0) { int n = in.nextInt(); int m = in.nextInt(); int x = in.nextInt(); TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>(); for (int i = 0; i < n; i++) { int j = in.nextInt(); if (!map.containsKey(j)) { map.put(j, new ArrayList<Integer>()); } map.get(j).add(i); } out.println(""YES""); int[] ans = new int[n]; int sta = 0; for (int s : map.keySet()) { for (int i = 0; i < map.get(s).size(); i++) { ans[map.get(s).get(i)] = (sta++) % m + 1; } } for(int i=0;i<n;i++) { out.print(ans[i]+"" ""); } out.println(); } } } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.text.SimpleDateFormat; import java.time.Instant; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.*; public class Main {            static Set<Long> set=new HashSet<>();                      public static void main(String[] args) throws IOException {       FastReader sc=new FastReader();       int t=sc.nextInt();       while(t-->0) {       int n=sc.nextInt();       int m=sc.nextInt();       int x=sc.nextInt();       int a[]=new int[n];       int b[]=new int[n];       int freq[]=new int[100002];       Arrays.fill(freq, 0);       for(int i=0;i<n;i++) {       a[i]=b[i]=sc.nextInt();       }       Arrays.sort(b);       int temp=1;           Map<Integer,List<Integer>> map=new HashMap<>();       for(int i=0;i<n;i++) {       if(map.get(b[i])==null) {       List<Integer> lis=new ArrayList<Integer>();       lis.add(temp);       map.put(b[i], lis);       }       else {       List<Integer> lis=map.get(b[i]);       lis.add(temp);       map.put(b[i], lis);       }       temp++;       if(temp==m+1) {       temp=1;       }       }       StringBuilder sb=new StringBuilder();        List<Integer> res=new ArrayList<Integer>();       for(int i=0;i<n;i++) {       List<Integer> lis=map.get(a[i]);       res.add(lis.get(freq[a[i]]));                 freq[a[i]]++;       }       boolean flag=true;       int arr[]=new int[m+1];       for(int i=0;i<n;i++) {       arr[res.get(i)] += a[i];       }       for(int i=1;i<=m-1;i++) {           long cal= Math.abs(arr[i+1]-arr[i]);      if(cal >x) {      flag=false;      break;            }      if(!flag) break;       }       if(!flag) {       System.out.println(""NO"");       }       else {       System.out.println(""YES"");       for(int i=0;i<res.size();i++) {       System.out.print(res.get(i)+"" "");       }       System.out.println();       }              } } } ",0
577,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Comparator; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.Map; import java.util.HashMap; public class cf1515 { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); PrintWriter out = new PrintWriter(outputStream); Task solver = new Task(); solver.solve(in, out); out.close(); } static class Task { public void solve(InputReader in, PrintWriter out) { int t = in.nextInt(); while (t-- != 0) { int n = in.nextInt(); int m = in.nextInt(); int x = in.nextInt(); TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>(); for (int i = 0; i < n; i++) { int j = in.nextInt(); if (!map.containsKey(j)) { map.put(j, new ArrayList<Integer>()); } map.get(j).add(i); } out.println(""YES""); int[] ans = new int[n]; int sta = 0; for (int s : map.keySet()) { for (int i = 0; i < map.get(s).size(); i++) { ans[map.get(s).get(i)] = (sta++) % m + 1; } } for(int i=0;i<n;i++) { out.print(ans[i]+"" ""); } out.println(); } } } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.util.Objects; import java.util.Collections; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CPhoenixAndTowers solver = new CPhoenixAndTowers();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CPhoenixAndTowers {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();             ArrayList<Pair<Integer, Integer>> a = new ArrayList<>();             for (int i = 0; i < n; ++i) {                 a.add(new Pair<>(in.nextInt(), i));             }             Collections.sort(a);             int[] ans = new int[n];             int[] sum = new int[m];             int j = 1;             for (int i = 0; i < n; ++i) {                 ans[a.get(i).y] = j;                 sum[j - 1] += a.get(i).x;                 j++;                 if (j == m + 1) j = 1;             }             for (int i = 1; i < m; ++i) {                 if (Math.abs(sum[i - 1] - sum[i]) > k) {                     out.println(""NO"");                 }             }             out.println(""YES"");             for (int e : ans) {                 out.print(e + "" "");             }             out.println();         }     }     static class Pair<U, V> implements Comparable<Pair<U, V>> {         public U x;         public V y;         public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                }      } ",0
578,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Comparator; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.Map; import java.util.HashMap; public class cf1515 { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); PrintWriter out = new PrintWriter(outputStream); Task solver = new Task(); solver.solve(in, out); out.close(); } static class Task { public void solve(InputReader in, PrintWriter out) { int t = in.nextInt(); while (t-- != 0) { int n = in.nextInt(); int m = in.nextInt(); int x = in.nextInt(); TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>(); for (int i = 0; i < n; i++) { int j = in.nextInt(); if (!map.containsKey(j)) { map.put(j, new ArrayList<Integer>()); } map.get(j).add(i); } out.println(""YES""); int[] ans = new int[n]; int sta = 0; for (int s : map.keySet()) { for (int i = 0; i < map.get(s).size(); i++) { ans[map.get(s).get(i)] = (sta++) % m + 1; } } for(int i=0;i<n;i++) { out.print(ans[i]+"" ""); } out.println(); } } } } ","import java.util.*; import java.io.*; import java.lang.*; import java.util.StringTokenizer; import java.util.concurrent.TimeUnit; public class C101 {     static HritikScanner sc = new HritikScanner();     static PrintWriter pw = new PrintWriter(System.out, true);     public static void main(String[] args) {         int t = ni();         while (t-- > 0) {             solve();         }     }      static void solve() {          int n = ni();          int m = ni(), x = ni();          Map<Integer, ArrayList<Integer>> map = new TreeMap<>();          System.out.println(""YES"");          for(int i = 0; i < n; i++)          {              int num = ni();              if(!map.containsKey(num))              {                  map.put(num, new ArrayList<Integer>());              }              map.get(num).add(i);          }          int[] ans = new int[n];          int q = 0;          for(int block : map.keySet())          {              for(int i = 0; i < map.get(block).size(); i++)              {                  ans[map.get(block).get(i)] = (q++)%m+1;              }          }          for(int ele : ans)          {              System.out.print(ele + "" "");          }      }                                        static int ni() {         return sc.nextInt();     }                                                                                                                                                                                } ",1
579,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Comparator; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.Map; import java.util.HashMap; public class cf1515 { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); PrintWriter out = new PrintWriter(outputStream); Task solver = new Task(); solver.solve(in, out); out.close(); } static class Task { public void solve(InputReader in, PrintWriter out) { int t = in.nextInt(); while (t-- != 0) { int n = in.nextInt(); int m = in.nextInt(); int x = in.nextInt(); TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>(); for (int i = 0; i < n; i++) { int j = in.nextInt(); if (!map.containsKey(j)) { map.put(j, new ArrayList<Integer>()); } map.get(j).add(i); } out.println(""YES""); int[] ans = new int[n]; int sta = 0; for (int s : map.keySet()) { for (int i = 0; i < map.get(s).size(); i++) { ans[map.get(s).get(i)] = (sta++) % m + 1; } } for(int i=0;i<n;i++) { out.print(ans[i]+"" ""); } out.println(); } } } } ","import java.util.*; import java.lang.*; public class Codeforces {     static Scanner sr=new Scanner(System.in);     public static void main(String[] args) throws java.lang.Exception {         StringBuilder ans = new StringBuilder("""");         int T = sr.nextInt();         while (T-- > 0) {             int n=sr.nextInt();             int m=sr.nextInt();             int x=sr.nextInt();             TreeMap<Integer,ArrayList<Integer>>h=new TreeMap<>();             for(int i=0;i<n;i++)             {                 int a=sr.nextInt();                 if(!h.containsKey(a))                     h.put(a,new ArrayList<>());                 h.get(a).add(i);             }             ans.append(""YES"");             ans.append('\n');             int an[]=new int[n];             int q=0;             for(int z:h.keySet())             {                 for(int i=0;i<h.get(z).size();i++)                 {                     an[h.get(z).get(i)]=(q++)%m+1;                 }             }             for(int i=0;i<n;i++)                 ans.append(an[i]+"" "");             ans.append('\n');         }         System.out.println(ans);     } } ",1
580,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.StringTokenizer; public class Main1582D {     public static void main(String[] args) {         final FastScanner in = new FastScanner(System.in);         final PrintWriter out = new PrintWriter(System.out);         int t = in.nextInt();         for (int i = 0; i < t; i++) {             int n = in.nextInt();             int[] a = new int[n];             for (int j = 0; j < n; j++) {                 a[j] = in.nextInt();             }             int[] b = solution(a, n);             for (int j = 0; j < n; j++) {                 out.print(b[j]);                 out.print("" "");             }             out.println();         }         out.flush();         out.close();         in.close();     }     private static int[] solution(int[] a, int n) {         int[] b = new int[n];         int start = 0;         if (n % 2 == 1) {             if (a[0] + a[1] != 0) {                 b[0] = -a[2];                 b[1] = -a[2];                 b[2] = a[0] + a[1];             } else if (a[0] + a[2] != 0) {                 b[0] = -a[1];                 b[1] = a[0] + a[2];                 b[2] = -a[1];             } else {                 b[0] = a[1] + a[2];                 b[1] = -a[0];                 b[2] = -a[0];             }             start = 3;         } else {             b[0] = -a[1];             b[1] = a[0];             int gcd = gcd(b[0], b[1]);             b[0] /= gcd;             b[1] /= gcd;             start = 2;         }         for (int i = start; i < n; i += 2) {             b[i] = -a[i + 1];             b[i + 1] = a[i];         }         return b;     }     private static int gcd(int a, int b) {         if (b == 0) return a;         return gcd(b, a % b);     }      } ","import java.io.*; import java.util.*;   public class cf {       public static void main(String[] args){           FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){    int n=sc.nextInt();             int arr[]=new int[n];             for(int i=0;i<n;i++){                 arr[i]=sc.nextInt();             }             int ans[]=new int[n];             if(n%2==0){                 for(int i=0;i<n;i=i+2){                     ans[i]=-arr[i+1];                     ans[i+1]=arr[i];                 }             }             else{                 if(arr[0]+arr[1]!=0){                     ans[0]=-arr[2];                     ans[1]=-arr[2];                     ans[2]=arr[0]+arr[1];                 }                 else{                     if(arr[1]+arr[2]!=0){                         ans[1]=-arr[0];                         ans[2]=-arr[0];                         ans[0]=arr[1]+arr[2];                     }                     else{                         ans[0]=-arr[1];                         ans[2]=-arr[1];                         ans[1]=arr[0]+arr[2];                     }                 }                 for(int i=3;i<n;i=i+2){                     ans[i]=-arr[i+1];                     ans[i+1]=arr[i];                 }             }             for(int j=0;j<n;j++){                 System.out.print(ans[j]+"" "");             }             System.out.println();                                                                                        }                        }                    } ",0
581,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.StringTokenizer; public class Main1582D {     public static void main(String[] args) {         final FastScanner in = new FastScanner(System.in);         final PrintWriter out = new PrintWriter(System.out);         int t = in.nextInt();         for (int i = 0; i < t; i++) {             int n = in.nextInt();             int[] a = new int[n];             for (int j = 0; j < n; j++) {                 a[j] = in.nextInt();             }             int[] b = solution(a, n);             for (int j = 0; j < n; j++) {                 out.print(b[j]);                 out.print("" "");             }             out.println();         }         out.flush();         out.close();         in.close();     }     private static int[] solution(int[] a, int n) {         int[] b = new int[n];         int start = 0;         if (n % 2 == 1) {             if (a[0] + a[1] != 0) {                 b[0] = -a[2];                 b[1] = -a[2];                 b[2] = a[0] + a[1];             } else if (a[0] + a[2] != 0) {                 b[0] = -a[1];                 b[1] = a[0] + a[2];                 b[2] = -a[1];             } else {                 b[0] = a[1] + a[2];                 b[1] = -a[0];                 b[2] = -a[0];             }             start = 3;         } else {             b[0] = -a[1];             b[1] = a[0];             int gcd = gcd(b[0], b[1]);             b[0] /= gcd;             b[1] /= gcd;             start = 2;         }         for (int i = start; i < n; i += 2) {             b[i] = -a[i + 1];             b[i + 1] = a[i];         }         return b;     }     private static int gcd(int a, int b) {         if (b == 0) return a;         return gcd(b, a % b);     }      } ","import java.io.*; import java.util.*; public class Pupsen { public static void main(String[] args) throws Exception { FastIO in = new FastIO(); int t = in.nextInt(); for (int tc=0; tc<t; tc++) { int n = in.nextInt(); int[] a = new int[n]; for (int i=0; i<n; i++) { a[i] = in.nextInt(); } int[] b = new int[n]; if (n%2==0) { for (int i=0; i<n-1; i+=2) { b[i] = -a[i+1]; b[i+1] = a[i]; } for (int i=0; i<n; i++) System.out.print(b[i]+"" ""); } else { if (a[0]+a[1]!=0) { b[0] = -a[2]; b[1] = -a[2]; b[2] = a[0]+a[1]; } else if (a[0]+a[2]!=0) { b[0] = -a[1]; b[2] = -a[1]; b[1] = a[0]+a[2]; } else { b[1] = -a[0]; b[2] = -a[0]; b[0] = a[1]+a[2]; } for (int i=3; i<n-1; i+=2) { b[i] = -a[i+1]; b[i+1] = a[i]; } for (int i=0; i<n; i++) System.out.print(b[i]+"" ""); } System.out.println(); } } } ",0
582,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.StringTokenizer; public class Main1582D {     public static void main(String[] args) {         final FastScanner in = new FastScanner(System.in);         final PrintWriter out = new PrintWriter(System.out);         int t = in.nextInt();         for (int i = 0; i < t; i++) {             int n = in.nextInt();             int[] a = new int[n];             for (int j = 0; j < n; j++) {                 a[j] = in.nextInt();             }             int[] b = solution(a, n);             for (int j = 0; j < n; j++) {                 out.print(b[j]);                 out.print("" "");             }             out.println();         }         out.flush();         out.close();         in.close();     }     private static int[] solution(int[] a, int n) {         int[] b = new int[n];         int start = 0;         if (n % 2 == 1) {             if (a[0] + a[1] != 0) {                 b[0] = -a[2];                 b[1] = -a[2];                 b[2] = a[0] + a[1];             } else if (a[0] + a[2] != 0) {                 b[0] = -a[1];                 b[1] = a[0] + a[2];                 b[2] = -a[1];             } else {                 b[0] = a[1] + a[2];                 b[1] = -a[0];                 b[2] = -a[0];             }             start = 3;         } else {             b[0] = -a[1];             b[1] = a[0];             int gcd = gcd(b[0], b[1]);             b[0] /= gcd;             b[1] /= gcd;             start = 2;         }         for (int i = start; i < n; i += 2) {             b[i] = -a[i + 1];             b[i + 1] = a[i];         }         return b;     }     private static int gcd(int a, int b) {         if (b == 0) return a;         return gcd(b, a % b);     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.*;   public class Codeforces { static int mod=1000000007 ; static List<Integer>[] adj; static boolean vst[]; static int dp[]; public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out); FastScanner fs=new FastScanner(); int t=fs.nextInt(); while(t-->0) { int n=fs.nextInt(); int arr[]=fs.readArray(n); int ans[]=new int[n]; if(n%2==0) { for(int i=0;i<n;i+=2) { ans[i]=-arr[i+1]; ans[i+1]=arr[i]; } } else { for(int i=3;i<n;i+=2) { ans[i]=-arr[i+1]; ans[i+1]=arr[i]; } int a=0, b=0, c=0; outer:for(int i=0;i<3;i++) { for(int j=i+1;j<3;j++) { if(arr[i]+arr[j]!=0) { b=i; c=j; a= 3-c-b; break outer; } } } ans[a]=arr[b]+arr[c]; ans[b]=-arr[a]; ans[c]=-arr[a]; } for(int i=0;i<n;i++) { out.print(ans[i]+"" ""); } out.println(); } out.close(); }   } ",0
583,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.InputMismatchException; import java.util.*; import java.io.*; import java.lang.*; public class Main{                      public static void sortbyColumn(int arr[][], int col)      {                   Arrays.sort(arr, new Comparator<int[]>() {                                   });       }           public static class Pair<U extends Comparable<U>, V extends Comparable<V>> implements Comparable<Pair<U, V>> {         public U x;         public V y;              public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                                                  }                                                                                               static long dist[],dp[][],left[],right[];     static int visited[],isit[];     static ArrayList<Pair<Integer,Pair<Long,Long>>> adj[],li;          static int MOD=1000000007;     static char ch[];     static int[] sieve,is_sieve;     static TreeSet<Integer> tr;     static long mat[][];               static void dfs(int node,int par, Pair<Long,Long> p[]){         for(Pair<Integer,Pair<Long,Long>> pp:adj[node]){             if(pp.x!=par){                                  dfs(pp.x,node,p);                                  long x=Math.abs(p[node].x-p[pp.x].x);                 long y=Math.abs(p[node].x-p[pp.x].y);                 long z=Math.abs(p[node].y-p[pp.x].x);                 long w=Math.abs(p[node].y-p[pp.x].y);                                  left[node]+=Math.max(x+left[pp.x],y+right[pp.x]);                 right[node]+=Math.max(z+left[pp.x],w+right[pp.x]);                              }         }     }          public static void main(String args[]){         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter w = new PrintWriter(outputStream);         int t,i,j,tno=0,tte;                  t=in.nextInt();                                    while(t-->0){                          int n=in.nextInt();             adj=new ArrayList[n+1];             left=new long[n+1];             right=new long[n+1];             visited=new int[n+1];             for(i=0;i<n+1;i++){                 adj[i]=new ArrayList<>();             }             Pair<Long,Long> p[]=new Pair[n+1];             for(i=1;i<=n;i++){                 p[i]=new Pair<>(in.nextLong(),in.nextLong());             }              for(i=0;i<n-1;i++){                 int u,v;                 u=in.nextInt();                 v=in.nextInt();                 adj[u].add(new Pair<>(v,p[v]));                 adj[v].add(new Pair<>(u,p[u]));             }                          dfs(1,-1,p);                                                                 w.println((long)Math.max(left[1],right[1]));         }         w.close();     } } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger;  public final class B {      static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); static ArrayList<Integer> g[]; static long L[],R[],dp[][]; public static void main(String args[])throws IOException {   int T=i(); outer:while(T-->0) { int N=i(); setGraph(N); for(int i=1; i<=N; i++) { L[i]=l(); R[i]=l(); } for(int i=1; i<N; i++) { int a=i(),b=i(); g[a].add(b); g[b].add(a); } f(1,-1); out.println(Math.max(dp[0][1], dp[1][1])); } out.close(); } static void f(int n,int p) { for(int c:g[n]) { if(c!=p) { f(c,n); long a=dp[0][c]+Math.abs(L[c]-L[n]); long b=dp[1][c]+Math.abs(R[c]-L[n]); dp[0][n]+=Math.max(a, b); a=dp[0][c]+Math.abs(L[c]-R[n]); b=dp[1][c]+Math.abs(R[c]-R[n]); dp[1][n]+=Math.max(a, b); } } } static void setGraph(int N) { g=new ArrayList[N+1]; dp=new long[2][N+1]; L=new long[N+1]; R=new long[N+1]; for(int i=0; i<=N; i++) { g[i]=new ArrayList<Integer>(); } } static int i() { return in.nextInt(); } static long l() { return in.nextLong(); } } ",0
584,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.InputMismatchException; import java.util.*; import java.io.*; import java.lang.*; public class Main{                      public static void sortbyColumn(int arr[][], int col)      {                   Arrays.sort(arr, new Comparator<int[]>() {                                   });       }           public static class Pair<U extends Comparable<U>, V extends Comparable<V>> implements Comparable<Pair<U, V>> {         public U x;         public V y;              public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                                                  }                                                                                               static long dist[],dp[][],left[],right[];     static int visited[],isit[];     static ArrayList<Pair<Integer,Pair<Long,Long>>> adj[],li;          static int MOD=1000000007;     static char ch[];     static int[] sieve,is_sieve;     static TreeSet<Integer> tr;     static long mat[][];               static void dfs(int node,int par, Pair<Long,Long> p[]){         for(Pair<Integer,Pair<Long,Long>> pp:adj[node]){             if(pp.x!=par){                                  dfs(pp.x,node,p);                                  long x=Math.abs(p[node].x-p[pp.x].x);                 long y=Math.abs(p[node].x-p[pp.x].y);                 long z=Math.abs(p[node].y-p[pp.x].x);                 long w=Math.abs(p[node].y-p[pp.x].y);                                  left[node]+=Math.max(x+left[pp.x],y+right[pp.x]);                 right[node]+=Math.max(z+left[pp.x],w+right[pp.x]);                              }         }     }          public static void main(String args[]){         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter w = new PrintWriter(outputStream);         int t,i,j,tno=0,tte;                  t=in.nextInt();                                    while(t-->0){                          int n=in.nextInt();             adj=new ArrayList[n+1];             left=new long[n+1];             right=new long[n+1];             visited=new int[n+1];             for(i=0;i<n+1;i++){                 adj[i]=new ArrayList<>();             }             Pair<Long,Long> p[]=new Pair[n+1];             for(i=1;i<=n;i++){                 p[i]=new Pair<>(in.nextLong(),in.nextLong());             }              for(i=0;i<n-1;i++){                 int u,v;                 u=in.nextInt();                 v=in.nextInt();                 adj[u].add(new Pair<>(v,p[v]));                 adj[v].add(new Pair<>(u,p[u]));             }                          dfs(1,-1,p);                                                                 w.println((long)Math.max(left[1],right[1]));         }         w.close();     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.InputMismatchException; import java.util.*; import java.io.*; import java.lang.*; public class Main{                      public static void sortbyColumn(int arr[][], int col)      {                   Arrays.sort(arr, new Comparator<int[]>() {                                   });       }           public static class Pair<U extends Comparable<U>, V extends Comparable<V>> implements Comparable<Pair<U, V>> {         public U x;         public V y;              public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                                                  }                                                                                               static long dist[],dp[][],left[],right[];     static int visited[],isit[];     static ArrayList<Pair<Integer,Pair<Long,Long>>> adj[],li;          static int MOD=1000000007;     static char ch[];     static int[] sieve,is_sieve;     static TreeSet<Integer> tr;     static long mat[][];                                                                                                                                                                                                                                                                                                                                                                                                               static void dfs(int node,int par, Pair<Long,Long> p[]){         for(Pair<Integer,Pair<Long,Long>> pp:adj[node]){             if(pp.x!=par){                                  dfs(pp.x,node,p);                                  long x=Math.abs(p[node].x-p[pp.x].x);                 long y=Math.abs(p[node].x-p[pp.x].y);                 long z=Math.abs(p[node].y-p[pp.x].x);                 long w=Math.abs(p[node].y-p[pp.x].y);                                  left[node]+=Math.max(x+left[pp.x],y+right[pp.x]);                 right[node]+=Math.max(z+left[pp.x],w+right[pp.x]);                              }         }     }          public static void main(String args[]){         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter w = new PrintWriter(outputStream);         int t,i,j,tno=0,tte;                  t=in.nextInt();                                    while(t-->0){                          int n=in.nextInt();             adj=new ArrayList[n+1];             left=new long[n+1];             right=new long[n+1];             visited=new int[n+1];             for(i=0;i<n+1;i++){                 adj[i]=new ArrayList<>();             }             Pair<Long,Long> p[]=new Pair[n+1];             for(i=1;i<=n;i++){                 p[i]=new Pair<>(in.nextLong(),in.nextLong());             }              for(i=0;i<n-1;i++){                 int u,v;                 u=in.nextInt();                 v=in.nextInt();                 adj[u].add(new Pair<>(v,p[v]));                 adj[v].add(new Pair<>(u,p[u]));             }                          dfs(1,-1,p);                                                                 w.println((long)Math.max(left[1],right[1]));         }         w.close();     } } ",1
585,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.math.BigInteger; import java.time.LocalDate; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Map.Entry; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class h { public static int r1=0;   static long[][] f=new long[501][501]; public static void main(String[] args)  { OutputStream outputStream =System.out;     PrintWriter out =new PrintWriter(outputStream); FastReader s=new FastReader();    int t=s.nextInt();  while(t>0) { int n=s.nextInt(); for(int i=1;i<=n;i++) { vis[i]=0; deg[i]=0; ans[i]=0; f1[i]=new ArrayList<>(); } for(int i=1;i<=n-1;i++) { int x=s.nextInt(); int y=s.nextInt(); f1[x].add(new pair1(y,i)); f1[y].add(new pair1(x,i)); deg[x]++; deg[y]++; } int node=-1; boolean p=false; for(int i=1;i<=n;i++) { if(deg[i]>2) { p=true; } if(deg[i]==1) { node=i; } } if(p) { out.println(-1); }else { dfs(node,2); for(int i=1;i<=n-1;i++) { out.print(ans[i]+"" ""); } out.println(); }  t--;    } out.close(); } static int[] ans=new int[100001]; static int[] deg=new int[100001]; static void dfs(int node,int v) { vis[node]=1; for(int i=0;i<f1[node].size();i++) { if(vis[f1[node].get(i).a]==0) { int g=2; if(v==2) { g=5; } ans[f1[node].get(i).b]=v; dfs(f1[node].get(i).a,g); } } } static int[] vis=new int[100001]; static class pair1 { private int a; private int b; pair1(int a,int b){ this.a=a; this.b=b; } } public static int[] is_prime=new int[100001]; public static ArrayList<Long> primes=new ArrayList<>(); static ArrayList<pair1>[] f1=new ArrayList[100001]; } ","import java.util.*; import java.io.*; public class C1627 {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[][] edges = new int[n - 1][2];             int[] deg = new int[n];             boolean valid = true;             ArrayList<Integer>[] adjList = new ArrayList[n];             for (int i = 0; i < n; i++) {                 adjList[i] = new ArrayList<>();             }             for (int i = 0; i < n - 1; i++) {                 int u = sc.nextInt() - 1;                 int v = sc.nextInt() - 1;                 edges[i] = new int[]{u, v};                 deg[u]++;                 deg[v]++;                 valid &= deg[u] <= 2 && deg[v] <= 2;                 adjList[u].add(i);                 adjList[v].add(i);             }             if (!valid) {                 pw.println(-1);                 continue;             }             int root = -1;             for (int i = 0; i < n; i++) {                 if (adjList[i].size() == 1)                     root = i;             }             int[] ans = new int[n - 1];             int curColor = 2;             int par = -1;             while (true) {                 int nxt = -1;                 for (int e : adjList[root]) {                     int other = edges[e][0] ^ edges[e][1] ^ root;                     if (other != par) {                         ans[e] = curColor;                         curColor = 5 - curColor;                         nxt = other;                         break;                     }                 }                 if (nxt == -1)                     break;                 par = root;                 root = nxt;             }             for (int x : ans) {                 pw.print(x + "" "");             }             pw.println();         }         pw.close();     }      } ",0
586,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintStream; import java.io.PrintWriter; import java.io.File; import java.io.FileInputStream; import java.util.*; public class Main {                                                  private static final PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) {         FastReader sc = new FastReader();         int test = 1;         test = sc.nextInt();         while (test-- > 0) {             int n = sc.nextInt();             long k = sc.nextLong();             long[] a = new long[n];             for (int i = 0; i < n; i++) {                 a[i] = sc.nextLong();             }             sortL(a);             long[] pref = new long[n + 1];             for (int i = 0; i < n; i++) {                 pref[i + 1] = pref[i] + a[i];             }             long ans = (long) 9e18;             for (int t = 0; t <= n - 1; t++) {                 long sum = pref[n - t] + a[0] * t;                 long cur = t;                 if (sum > k) {                     long diff = sum - k;                     cur += (diff + t) / (t + 1);                 }                 ans = Math.min(ans, cur);             }             out.println(ans);         }         out.close();     }                                                                                               static void sortL(long[] arr) {         int n = arr.length;         Random rnd = new Random();         for (int i = 0; i < n; ++i) {             long tmp = arr[i];             int randomPos = i + rnd.nextInt(n - i);             arr[i] = arr[randomPos];             arr[randomPos] = tmp;         }         Arrays.sort(arr);     }                     } ","import java.util.*; import java.io.*; import java.math.*;   public class Test{      final static Random random = new Random();  final static FastReader in = new FastReader();  final static PrintWriter out = new PrintWriter(System.out);           public static long helperFunction(long x, long y) {         if(x>=0)   return x/y;         return (x-y+1)/y;  }     public static void ruffleLong(long a[]) {    int i,j,n=a.length; long temp;  for (i=0; i<n; i++) { j = random.nextInt(n); temp = a[i]; a[i] = a[j];  a[j] = temp; } Arrays.sort(a);  }             public static void main(String ... args) throws IOException {    int tt = in.nextInt(); while(tt-->0){ int n = in.nextInt(); long k = in.nextLong(); int i,y; long a[] = new long[n]; long pref[] = new long[n]; long x,res=Long.MAX_VALUE; for(i=0;i<n;++i) a[i] = in.nextLong(); ruffleLong(a); pref[0] = a[0]; for(i=1;i<n;++i) pref[i] = pref[i-1]+a[i]; for(y=0;y<n;++y){ x = Math.max(0,a[0] - (helperFunction((k-pref[n-1-y]+pref[0]),y+1))); res = Math.min(res,y+x); } out.println(res); } out.close(); }      } ",0
587,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintStream; import java.util.*; public class Main {     public static long[] ans(List<List<Integer>> edges, long[][] range, int root, boolean[] visited, PrintStream out) {         if (visited[root]) {             return new long[2];         }         visited[root] = true;         long[] ans = new long[2];         for (int x : edges.get(root)) {             if (!visited[x]) {                 long[] temp = ans(edges, range, x, visited, out);                 ans[0] += Math.max(Math.abs(range[root][0] - range[x][0]) + temp[0], Math.abs(range[root][0] - range[x][1]) + temp[1]);                 ans[1] += Math.max(Math.abs(range[root][1] - range[x][0]) + temp[0], Math.abs(range[root][1] - range[x][1]) + temp[1]);             }         }         return ans;     }     public static void main(String[] args) throws IOException {         BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));         PrintStream out = new PrintStream(System.out);         int t = Integer.parseInt(reader.readLine());         while (t-->0) {             int n = Integer.parseInt(reader.readLine());             long[][] range = new long[n][2];             for (int i = 0; i < n; i++) {                 String[] input = reader.readLine().split("" "");                 range[i][0] = Integer.parseInt(input[0]);                 range[i][1] = Integer.parseInt(input[1]);             }             List<List<Integer>> edges = new ArrayList<>();             for (int i = 0; i < n; i++) {                 edges.add(new ArrayList<>());             }             for (int i = 0; i < n - 1; i++) {                 String[] input = reader.readLine().split("" "");                 int u = Integer.parseInt(input[0]) - 1, v = Integer.parseInt(input[1]) - 1;                 edges.get(u).add(v);                 edges.get(v).add(u);             }             int root = 0;             for (int i = 0; i < n; i++) {                 if (edges.get(i).size() > 1) {                     root = i;                     break;                 }                 if (edges.get(i).size() == 1) {                     root = i;                 }             }             long[] ans = ans(edges, range, root, new boolean[n], out);             out.println(Math.max(ans[0], ans[1]));         }         out.close();     } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; public class ParsasHumongousTree {     public static void main(String args[]) throws IOException {         Reader scan = new Reader();         StringBuilder sb = new StringBuilder();         int t = scan.nextInt();         while (t-- > 0) {             int n = scan.nextInt();             int[] l = new int[n + 1];             int[] r = new int[n + 1];             for (int i = 1; i <= n; i++) {                 l[i] = scan.nextInt();                 r[i] = scan.nextInt();             }             Graph g = new Graph(n);             for (int i = 0; i < n - 1; i++) {                 g.addEdge(scan.nextInt(), scan.nextInt());             }             sb.append(g.dfs(l, r) + ""\n"");         }         System.out.println(sb);     } } class Graph {     ArrayList<Integer>[] node;     int n;     int c = 0;     boolean[] vis;     Graph(int s) {         n = s + 1;         vis = new boolean[n + 1];         node = new ArrayList[n + 1];         for (int i = 0; i < n + 1; i++) {             node[i] = new ArrayList<>();         }     }     void addEdge(int u, int v) {         node[u].add(v);         node[v].add(u);         if (node[u].size() == 1) {             c = u;         }         if (node[v].size() == 1) {             c = v;         }     }     void cleanVisArray() {         for (int i = 0; i < n + 1; i++) {             vis[i] = false;         }     }     long dfs(int[] l, int[] r) {         cleanVisArray();         long[][] dp = new long[n][2];         dfsMain(1, dp, l, r);         return Math.max(dp[1][0], dp[1][1]);     }     void dfsMain(int v, long[][] dp, int[] l, int[] r) {         vis[v] = true;         for (int i : node[v]) {             if (!vis[i]) {                 dfsMain(i, dp, l, r);                 dp[v][0] += Math.max(Math.abs(l[v] - l[i]) + dp[i][0], Math.abs(l[v] - r[i]) + dp[i][1]);                 dp[v][1] += Math.max(Math.abs(r[v] - l[i]) + dp[i][0], Math.abs(r[v] - r[i]) + dp[i][1]);             }         }     } } ",0
588,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class ReverseString {     static class pair implements Comparable<pair>{         String s;         int contribution;         pair(String s , int contribution){             this.s = s;             this.contribution = contribution;         }                                }     static int factorOfLetter(String s , char c){         int sum = 0;         for (int i = 0; i < s.length(); i++) {             if(s.charAt(i)==c)sum++;         }         int rem = Math.abs(sum-s.length());         return sum-rem;     }     public static void main(String[] args)  throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         PrintWriter pw = new PrintWriter(System.out);         int t = Integer.parseInt(br.readLine());         while (t-->0){             int n = Integer.parseInt(br.readLine());             int max = Integer.MIN_VALUE;             String [] arr = new String[n];             for (int i = 0; i < n; i++) {                 arr[i] = br.readLine();             }             for (int i = 0; i < 5; i++) {                 int word = 0;                 ArrayList<pair> tmp = new ArrayList<>();                 for (int j = 0; j < arr.length; j++) {                     tmp.add(new pair(arr[j] , factorOfLetter(arr[j] , (char)(i+97))));                 }                 Collections.sort(tmp);                                  int acc = 0;                 for (int j = tmp.size()-1; j >=0 ; j--) {                     acc += tmp.get(j).contribution;                     if (acc<=0)break;                     else word++;                 }                 max = Math.max(max , word);             }             System.out.println(max);         }     } } ","import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main{      static int dest1; static int dest2; public static void main(String args[]){        FastScanner in = new FastScanner(); int test=in.nextInt();                 while(test-->0){                     int n=in.nextInt();                     int count[][]=new int[n][5];                     int total[]=new int[n];                     String words[]=new String[n];                     for(int i=0;i<n;i++){                         words[i]=in.next();                         for(int j=0;j<words[i].length();j++)                             count[i][words[i].charAt(j)-'a']++;                                                  total[i]=words[i].length();                     }                     int max=Integer.MIN_VALUE;                    for(int i=0;i<5;i++){                                               Integer ans[]=new Integer[n];                       for(int j=0;j<n;j++){                           ans[j]=count[j][i]-(total[j]-count[j][i]);                       }                       Arrays.sort(ans,Collections.reverseOrder());                       int j=0;                       int r=0;                       while(j<n && r+ans[j]>0){                           r+=ans[j];                           j++;                       }                       max=Math.max(j,max);                                           }                    System.out.println(max);                                                          } }         } ",0
589,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.*;   public class Codeforces { static int mod= 998244353; public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out); FastScanner fs=new FastScanner(); int t=fs.nextInt(); outer:while(t-->0) { int n=fs.nextInt(); int arr[]=fs.readArray(n); int l=0, r=1000000000; while(l<r) { int mid=(l+r+1)/2; if(check(arr,mid)) { l=mid; } else r=mid-1; } out.println(l); } out.close(); } static boolean check(int arr[],int min) { int n=arr.length; int brr[]=new int[n]; for(int i=n-1;i>1;i--) { if(brr[i]+arr[i]<min) return false; int cur= Math.min(arr[i], arr[i]+brr[i]-min); int d=cur/3; brr[i-1]+=d; brr[i-2]+=2*d; } return (arr[0]+brr[0]>=min)&&(arr[1]+brr[1]>=min); }   } ","import java.io.*; import java.util.*; public class Main { public static void main(String[] args) { FastScanner fs=new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); while(t-->0) { int n = fs.nextInt(); int[] h = fs.readArray(n); int l=1, r=(int)1e9; int ans = -1; while(l<=r) { int mid = (l+r)/2; if(isPossible(mid, h, n)) { ans = mid; l = mid+1; }else { r= mid-1; } } out.println(ans); } out.close(); } static boolean isPossible(int min, int[] h, int n) { int[] c = new int[n]; for(int i=n-1; i>=2; i--) { if(h[i]+c[i]-min<0)return false; int x  = Math.min(h[i], h[i]+c[i]-min) / 3; c[i-1] += x; c[i-2] += 2*x; } return (h[0]+c[0]>=min&&h[1]+c[1]>=min); }      } ",1
590,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.time.LocalDateTime; import java.util.*; public class B { static int tree[]; static int up[]; static int n; static int mod =1000000007;  public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out);     FastScanner fs=new FastScanner();     int t=fs.nextInt();    outer: while(t-->0) {     n=fs.nextInt();     int k=fs.nextInt();    int ac[]=fs.readArray(k);    int temp[]=fs.readArray(k);    int arr[]=new int[n];    Arrays.fill(arr, Integer.MAX_VALUE/2);    for(int i=0;i<k;i++) {    int ind = ac[i]-1;    arr[ind]=temp[i];    }    int ans[]=new int[n];    int left[]=new int[n];    Arrays.fill(left, Integer.MAX_VALUE/2);    left[0]=arr[0];        for(int i=1;i<n;i++) {    left[i]=Math.min(arr[i], left[i-1]+1);    }    ans[n-1]=Math.min(left[n-1],arr[n-1]);    for(int i=n-2;i>=0;i--) {    ans[i]=Math.min(Math.min(arr[i],left[i]),ans[i+1]+1);    }    for(int i=0;i<n;i++) out.print(ans[i]+"" "");    out.println();    }     out.close(); }   } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class E { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ",0
591,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*;     public class Codeforces { static int mod =1000000007;  static Set<Integer> set; public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out);     FastScanner fs=new FastScanner();     int t=fs.nextInt();     while(t-->0) {     int n=fs.nextInt();     int arr[]=new int[n];     for(int i=0;i<n;i++) {     arr[i]=Math.abs(fs.nextInt());     }     boolean f=false;     for(int i=0;i<n;i++) {     boolean cur=recur(0,i,arr,0);     if(cur) {     f=true;     break;     }     }     if(f) System.out.println(""YES"");     else System.out.println(""NO"");     }     out.close(); } static boolean recur(int pos,int ind,int arr[],int sum) { if(pos==ind) return recur(pos+1,ind,arr,sum); if(sum==arr[ind]) return true; if(pos==arr.length) { return false; } if(recur(pos+1,ind,arr,sum+arr[pos])) return true; if(recur(pos+1,ind,arr,sum)) return true; if(recur(pos+1,ind,arr,sum-arr[pos])) return true; return false; }   } ","import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) {         MyScanner scan = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));         int t = scan.nextInt();         for (int i = 0; i < t; i++) {             int num = scan.nextInt();             int[] sequence = new int[num];             for (int j = 0; j < num; j++) {                 sequence[j] = scan.nextInt();             }             int[] setSum = new int[(int) Math.pow(3, num)];             for (int k = 0; k < num; k++) {                 int pot =(int)Math.pow(3, k);                                  for (int j = 1; j < setSum.length; j++) {                     if(j % (pot*3) >= pot ){                         if(j % (pot*3) >= pot){                             if(j % (pot*3) >= pot*2){                                 setSum[j] += sequence[k];                             }else{                                 setSum[j] -= sequence[k];                             }                         }                     }                 }             }             String output = ""NO"";             for (int j = 1; j < setSum.length; j++) {                 if(setSum[j] == 0){                     output = ""YES"";                     break;                 }             }             out.println(output);         }         out.close();     }     public static PrintWriter out;      } ",0
592,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*;     public class Codeforces { static int mod =1000000007;  static Set<Integer> set; public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out);     FastScanner fs=new FastScanner();     int t=fs.nextInt();     while(t-->0) {     int n=fs.nextInt();     int arr[]=new int[n];     for(int i=0;i<n;i++) {     arr[i]=Math.abs(fs.nextInt());     }     boolean f=false;     for(int i=0;i<n;i++) {     boolean cur=recur(0,i,arr,0);     if(cur) {     f=true;     break;     }     }     if(f) System.out.println(""YES"");     else System.out.println(""NO"");     }     out.close(); } static boolean recur(int pos,int ind,int arr[],int sum) { if(pos==ind) return recur(pos+1,ind,arr,sum); if(sum==arr[ind]) return true; if(pos==arr.length) { return false; } if(recur(pos+1,ind,arr,sum+arr[pos])) return true; if(recur(pos+1,ind,arr,sum)) return true; if(recur(pos+1,ind,arr,sum-arr[pos])) return true; return false; }   } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; public class Main {     public static boolean find(int[] a) {         int n = a.length;         for (int i = 1; i < Math.pow(3, n); i++) {             int sum = 0;             int x = i;             for (int j = 0; j < n; j++) {                 int r = x % 3;                 if (r == 1) sum += a[j];                 else if (r ==2) sum -= a[j];                 x /= 3;             }             if (sum == 0) return true;         }         return false;     }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         PrintWriter pw = new PrintWriter(System.out);         int t = Integer.parseInt(br.readLine());         for (int i = 0; i < t; i++) {             int n = Integer.parseInt(br.readLine());             int[] a = new int[n];             String[] s = br.readLine().trim().split(""\\s+"");             for (int j = 0; j < n; j++) {                 a[j] = Integer.parseInt(s[j]);             }             boolean res = find(a);             if (res) pw.println(""YES"");             else pw.println(""NO"");         }         pw.flush();     } } ",0
593,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; public class A {     static List<Integer> [] adj;     static ArrayList<Integer> temp;     static int mod = (int) 1e9+7;     static boolean[] vis = new boolean[(int)1e5];     static List<Integer> l = new ArrayList<>();     static final Reader s = new Reader();     public static void main(String[] args) throws IOException {         int t = s.nextInt();        while(t-->0) {            int n = s.nextInt();            int m = s.nextInt();            int d = s.nextInt();            System.out.println(""YES"");            PriorityQueue<Pair> pq = new PriorityQueue<>();             for(int i=1;i<=m;i++){                pq.add(new Pair(i));             }             for(int i=0;i<n;i++){                 int v = s.nextInt();                 Pair p = pq.poll();                 p.sum+=v;                 pq.add(p);                 System.out.print(p.id+"" "");             }            System.out.println();        }     }     static class Pair implements Comparable<Pair> {         int id;         long sum=0;         public Pair(int id) {             this.id=id;         }              }                                                   } ","import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.Collections; import java.util.Comparator; import java.util.Arrays; import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; import java.util.Queue; import java.util.PriorityQueue; import java.util.List; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Map; import java.util.HashMap; import java.util.Scanner; import java.util.Set; import java.util.StringTokenizer; import java.util.Vector; public class Dobby { public static void main(String[] args) { try { FastReader fr = new FastReader(); PrintWriter pt = new PrintWriter(System.out); int t = fr.nextInt(); while (t > 0) { int n = fr.nextInt(), m = fr.nextInt(), x = fr.nextInt(); ArrayList<Pair> pp = new ArrayList<>(); int A[] = new int[n]; for (int i = 0; i < n; i++) { A[i] = fr.nextInt(); Pair pr = new Pair(A[i], i); pp.add(pr); } Collections.sort(pp); Collections.reverse(pp); int ps[] = new int[n]; int pk[] = new int[n]; Arrays.fill(ps, 0); Arrays.fill(pk, 0); int index = 0; for (int i = 0; i < n; i++) { if (pk[index] < x) { pk[index] += pp.get(i).a; } ps[pp.get(i).b] = index + 1; index++; index = index == m ? 0 : index; } pt.println(""YES""); for (int i = 0; i < n; i++) { pt.print(ps[i] + "" ""); } pt.println(); t--; } pt.close(); } catch ( Exception e) { return; } } static void merge(long arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; long L[] = new long[n1]; long R[] = new long[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } static void sort(long arr[], int l, int r) { if (l < r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } static class Pair implements Comparable<Pair> { int a, b; Pair(int a, int b) { this.a = a; this.b = b; } } } ",0
594,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; public class A {     static List<Integer> [] adj;     static ArrayList<Integer> temp;     static int mod = (int) 1e9+7;     static boolean[] vis = new boolean[(int)1e5];     static List<Integer> l = new ArrayList<>();     static final Reader s = new Reader();     public static void main(String[] args) throws IOException {         int t = s.nextInt();        while(t-->0) {            int n = s.nextInt();            int m = s.nextInt();            int d = s.nextInt();            System.out.println(""YES"");            PriorityQueue<Pair> pq = new PriorityQueue<>();             for(int i=1;i<=m;i++){                pq.add(new Pair(i));             }             for(int i=0;i<n;i++){                 int v = s.nextInt();                 Pair p = pq.poll();                 p.sum+=v;                 pq.add(p);                 System.out.print(p.id+"" "");             }            System.out.println();        }     }     static class Pair implements Comparable<Pair> {         int id;         long sum=0;         public Pair(int id) {             this.id=id;         }              }                                                   } ","import java.io.BufferedReader; import java.io.DataInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     static int modulo=998244353;     public static void main(String[] args) {                 FastScanner in = new FastScanner();         int test=in.nextInt();         while(test-->0){             int n=in.nextInt();             int m=in.nextInt();             int x=in.nextInt();              PriorityQueue<pair> pq=new PriorityQueue<>();             int arr[]=new int[n];             for(int i=1;i<=m;i++){                 pq.add(new pair(i,0));             }             System.out.println(""YES"");             for(int i=0;i<n;i++){                 pair p=pq.poll();                 int a=in.nextInt();                 p.y+=a;                 pq.add(p);                 System.out.print(p.x+"" "");             }                                                    System.out.println();         }                                                 }                                                                  } class pair implements Comparable<pair>     {         int x;         int y;           pair(int x, int y) {             this.x = x;             this.y = y;         }          } ",1
595,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; public class Main {     static int i, j, k, n, m, t, y, x, sum = 0;     static long mod = 1000000007;     static FastScanner fs = new FastScanner();     static PrintWriter out = new PrintWriter(System.out);     static String str;     static long ans;     static List<Integer> zeros = new ArrayList<>();     static List<Integer> ones = new ArrayList<>();     static int oneCount = 0;     static int[][] dp = new int[5005][5005];     public static void main(String[] args) {         t = 1;         while (t-- > 0) {             n = fs.nextInt();             for(int i = 0;i<n;i++){                 x = fs.nextInt();                 if(x==1){                     ones.add(i);                     oneCount++;                 }                 else                     zeros.add(i);             }             for(int i=0;i<n;i++){                 for(int j = 0; j<n;j++){                     dp[i][j]=-1;                 }             }             out.println(minCost(0,0));         }         out.close();     }     static int minCost(int zIndex, int oIndex){         if(oIndex == ones.size())             return 0;         if(zIndex == zeros.size())             return 1000000007;         if(dp[zIndex][oIndex]==-1)             dp[zIndex][oIndex]= Math.min(Math.abs(zeros.get(zIndex) - ones.get(oIndex))+minCost(zIndex+1, oIndex+1) , minCost(zIndex+1, oIndex));         return dp[zIndex][oIndex];     }                          } ","import java.util.*; import javax.print.attribute.HashAttributeSet; import java.io.*; import java.math.BigInteger; import java.sql.Array; public class CP {     static int mod  = 1000000007;                  static FR sc = new FR();  static StringBuilder sb = new StringBuilder();  public static void main(String args[]) {  TEST_CASE(); System.out.println(sb);  } static void TEST_CASE() { int n = sc.nextInt(); int[] arr = new int[n]; for(int i = 0 ; i< n ;i++) { arr[i] = sc.nextInt(); } ArrayList<Integer> ao = new ArrayList<Integer>(); ArrayList<Integer> az = new ArrayList<Integer>(); for(int i = 0 ; i< n ;i++) { if(arr[i] == 1) ao.add(i); else az.add(i); } long[][] dp = new long[n+1][n+1]; for(int i = 0 ; i<n ; i++) Arrays.fill(dp[i], -1); sb.append(fnc(dp, ao, az, 0, 0)); } static long fnc(long[][] dp ,ArrayList<Integer> ao , ArrayList<Integer> az ,int i , int j) { if(i == ao.size()) return 0; if(j == az.size()) return Long.parseLong(""1000000000000""); if(dp[i][j] != -1) return dp[i][j]; long a = Math.abs(ao.get(i) - az.get(j)) + fnc(dp, ao, az, i+1, j+1); long b = fnc(dp, ao, az, i, j+1); dp[i][j] = Math.min(a, b); return dp[i][j]; } } ",0
596,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*; public class Main {     static int i, j, k, n, m, t, y, x, sum = 0;     static long mod = 1000000007;     static FastScanner fs = new FastScanner();     static PrintWriter out = new PrintWriter(System.out);     static String str;     static long ans;     static List<Integer> zeros = new ArrayList<>();     static List<Integer> ones = new ArrayList<>();     static int oneCount = 0;     static int[][] dp = new int[5005][5005];     public static void main(String[] args) {         t = 1;         while (t-- > 0) {             n = fs.nextInt();             for(int i = 0;i<n;i++){                 x = fs.nextInt();                 if(x==1){                     ones.add(i);                     oneCount++;                 }                 else                     zeros.add(i);             }             for(int i=0;i<n;i++){                 for(int j = 0; j<n;j++){                     dp[i][j]=-1;                 }             }             out.println(minCost(0,0));         }         out.close();     }     static int minCost(int zIndex, int oIndex){         if(oIndex == ones.size())             return 0;         if(zIndex == zeros.size())             return 1000000007;         if(dp[zIndex][oIndex]==-1)             dp[zIndex][oIndex]= Math.min(Math.abs(zeros.get(zIndex) - ones.get(oIndex))+minCost(zIndex+1, oIndex+1) , minCost(zIndex+1, oIndex));         return dp[zIndex][oIndex];     }                          } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; public class Armchair {     public static void main(String args[]){         Scanner in=new Scanner(System.in);         int n=in.nextInt();         int arr[]=new int[n];         ArrayList<Integer> list1=new ArrayList<Integer>();          ArrayList<Integer> list2=new ArrayList<Integer>();         for(int i=0;i<n;i++)         {             int a=in.nextInt();             if(a==0)                 list2.add(i);             else                 list1.add(i);         }         long dp[][]=new long[list1.size()+1][list2.size()+1];                  solve(list1,list2,dp);         System.out.println(dp[list1.size()][list2.size()]);     } public static void solve( ArrayList<Integer> list1,ArrayList<Integer> list2,long dp[][]){        for(int i=1;i<=list1.size();i++) dp[i][0]=Integer.MAX_VALUE; for(int i=1;i<=list1.size();i++){ for(int j=1;j<=list2.size();j++){ dp[i][j]=Math.min(Math.abs(list1.get(i-1)-list2.get(j-1))+dp[i-1][j-1],dp[i][j-1]); } } } } ",0
597,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.List; import java.util.StringTokenizer; public class C_CF {     public static void main(String[] args) {         FastScanner57 fs = new FastScanner57();         PrintWriter pw = new PrintWriter(System.out);         int t = fs.ni();                  for (int tc = 0; tc < t; tc++) {             int n = fs.ni();             long[][] lr = new long[n][2];             for (int i = 0; i < n; i++) {                 lr[i][0] = fs.nl();                 lr[i][1] = fs.nl();             }             List<List<Integer>> list = new ArrayList();             for (int i = 0; i < n;i ++) {                 List<Integer> temp = new ArrayList();                 list.add(temp);             }             for (int i = 0; i < n-1; i++) {                 int a = fs.ni()-1, b = fs.ni()-1;                 list.get(a).add(b);                 list.get(b).add(a);             }             Long[][] dp = new Long[n][2];             pw.println(recur(0,0,-1,new long[] {0,0},dp,lr,list));         }         pw.close();     }               public static long recur(int ind, int p,int prev, long[] v, Long[][] dp, long[][] lr,List<List<Integer>> list) {         long last = v[0];         long ls = 0L;         long rs = 0L;         if (p==1) {             last = v[1];         }         if (ind!=0) ls += (long)Math.abs(last-lr[ind][0]);         if (ind!=0) rs += (long)Math.abs(last-lr[ind][1]);         if (dp[ind][p]!=null) return dp[ind][p];         long[] cur = lr[ind];                  List<Integer> temp = list.get(ind);         for (int val : temp) {             if (prev==val) continue;             ls += recur(val,0,ind,cur,dp,lr,list);             rs += recur(val,1,ind,cur,dp,lr,list);         }         return dp[ind][p] = Math.max(ls,rs);     }           } ","import java.io.*; import java.util.*; public class P1529C {   public static final int MAX = 100000;   private static final List<Integer>[] adjacency = new List[MAX];   private static final int[][] pair = new int[MAX][2];   public static void main(String[] args) {     SpeedScanner in = new SpeedScanner();     for(int i = 0; i < MAX; ++i)       adjacency[i] = new ArrayList<>();     int t = in.nextInt();     while(t-- != 0) {       int nv = in.nextInt();       for(int i = 0; i < nv; ++i) {         pair[i][0] = in.nextInt();         pair[i][1] = in.nextInt();       }       for(int i = 1; i < nv; ++i) {         int x = in.nextInt() - 1, y = in.nextInt() - 1;         adjacency[x].add(y);         adjacency[y].add(x);       }       long[] alts = dfsTraverse(0, -1);       System.out.println(alts[0] >= alts[1] ? alts[0] : alts[1]);       for(int i = 0; i < nv; ++i)         adjacency[i].clear();     }   }   private static long[] dfsTraverse(int vertex, int parent) {     long sumDiffL = 0, sumDiffR = 0;     for(int child: adjacency[vertex]) {       if(child == parent)         continue;       long[] temp = dfsTraverse(child, vertex);       sumDiffL += Math.max(Math.abs(pair[vertex][0] - pair[child][0]) + temp[0],           Math.abs(pair[vertex][0] - pair[child][1]) + temp[1]);       sumDiffR += Math.max(Math.abs(pair[vertex][1] - pair[child][0]) + temp[0],           Math.abs(pair[vertex][1] - pair[child][1]) + temp[1]);     }     return new long[]{sumDiffL, sumDiffR};   } } ",0
598,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.List; import java.util.StringTokenizer; public class C_CF {     public static void main(String[] args) {         FastScanner57 fs = new FastScanner57();         PrintWriter pw = new PrintWriter(System.out);         int t = fs.ni();                  for (int tc = 0; tc < t; tc++) {             int n = fs.ni();             long[][] lr = new long[n][2];             for (int i = 0; i < n; i++) {                 lr[i][0] = fs.nl();                 lr[i][1] = fs.nl();             }             List<List<Integer>> list = new ArrayList();             for (int i = 0; i < n;i ++) {                 List<Integer> temp = new ArrayList();                 list.add(temp);             }             for (int i = 0; i < n-1; i++) {                 int a = fs.ni()-1, b = fs.ni()-1;                 list.get(a).add(b);                 list.get(b).add(a);             }             Long[][] dp = new Long[n][2];             pw.println(recur(0,0,-1,new long[] {0,0},dp,lr,list));         }         pw.close();     }               public static long recur(int ind, int p,int prev, long[] v, Long[][] dp, long[][] lr,List<List<Integer>> list) {         long last = v[0];         long ls = 0L;         long rs = 0L;         if (p==1) {             last = v[1];         }         if (ind!=0) ls += (long)Math.abs(last-lr[ind][0]);         if (ind!=0) rs += (long)Math.abs(last-lr[ind][1]);         if (dp[ind][p]!=null) return dp[ind][p];         long[] cur = lr[ind];                  List<Integer> temp = list.get(ind);         for (int val : temp) {             if (prev==val) continue;             ls += recur(val,0,ind,cur,dp,lr,list);             rs += recur(val,1,ind,cur,dp,lr,list);         }         return dp[ind][p] = Math.max(ls,rs);     }           } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CParsasHumongousTree solver = new CParsasHumongousTree();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CParsasHumongousTree {         int n;         long[][] dp;         int[] l;         int[] r;         ArrayList<Integer>[] a;         public void solve(int testNumber, FastReader in, PrintWriter out) {             n = in.nextInt();             l = new int[n];             r = new int[n];             dp = new long[n][2];             a = new ArrayList[n];             for (int i = 0; i < n; ++i) {                 a[i] = new ArrayList<>();             }             for (int i = 0; i < n; ++i) {                 l[i] = in.nextInt();                 r[i] = in.nextInt();             }             for (int i = 0; i < n - 1; ++i) {                 int u = in.nextInt() - 1, v = in.nextInt() - 1;                 a[u].add(v);                 a[v].add(u);             }             dfs(0, -1);             out.println(Math.max(dp[0][0], dp[0][1]));         }         void dfs(int u, int p) {             dp[u][0] = dp[u][1] = 0;             for (int v : a[u]) {                 if (v != p) {                     dfs(v, u);                     dp[u][0] += Math.max(dp[v][0] + Math.abs(l[u] - l[v]), dp[v][1] + Math.abs(l[u] - r[v]));                     dp[u][1] += Math.max(dp[v][0] + Math.abs(r[u] - l[v]), dp[v][1] + Math.abs(r[u] - r[v]));                 }             }         }     }      } ",0
599,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class E { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.io.BufferedReader; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.StringTokenizer; public class Air {     public static void main(String[] args) {         FastScanner sc = new FastScanner();         int T = sc.nextInt();         for(int tt=0; tt<T;tt++){         int n = sc.nextInt(), k=sc.nextInt();         int [] positions=new int[k], temp=new int[k];         for (int i=0;i<k;i++) positions[i]=sc.nextInt();         for (int i=0;i<k;i++) temp[i]=sc.nextInt();         int[] forced=new int[n];         Arrays.fill(forced, Integer.MAX_VALUE/2);         for (int i=0;i<k;i++) forced[positions[i]-1]=temp[i];         for (int i=1;i<n;i++) forced[i]=Math.min(forced[i], forced[i-1]+1);         for (int i=n-2;i>=0;i--) forced[i]=Math.min(forced[i], forced[i+1]+1);         for (int i=0;i<n;i++) System.out.print(forced[i]+"" ""); System.out.println(); }     }      } ",1
600,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class E { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class a{      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(),k=s.nextInt(); int pos[]=s.readArray(k); int temp[]=s.readArray(k); long ans[]=new long[n]; Arrays.fill(ans,Integer.MAX_VALUE); for(int i=0;i<k;i++){ ans[pos[i]-1]=temp[i]; } for(int i=1;i<n;i++){ ans[i]=Math.min(ans[i-1]+1,ans[i]); } for(int i=n-2;i>=0;i--){ ans[i]=Math.min(ans[i],ans[i+1]+1); } for(int i=0;i<n;i++){ out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ",1
601,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class E { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class solution {      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(), k=s.nextInt(); int[] a=s.readArray(k), temp=s.readArray(k); long[] ans=new long[n]; Arrays.fill(ans, Integer.MAX_VALUE); for (int i=0; i<k; i++) { ans[a[i]-1]=temp[i]; } for (int i=1; i<n; i++) { ans[i]=Math.min(ans[i],ans[i-1]+1); } for (int i=n-2; i>=0; i--) { ans[i]=Math.min(ans[i],ans[i+1]+1); } for (int i=0; i<n; i++) { out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ",1
602,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class E { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ",1
603,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class D {     public static void main(String[] args) {         FastScanner fs = new FastScanner();         int cases = fs.nextInt();         while(cases-->0){             int n = fs.nextInt(), k = fs.nextInt();             int[] positions = fs.readArray(k), temps = fs.readArray(k);             int[] forced = new int[n];             Arrays.fill(forced, Integer.MAX_VALUE/2);             for(int i=0; i<k; i++)                 forced[positions[i]-1] = temps[i];             for(int i=1; i<n; i++)                 forced[i] = Math.min(forced[i],forced[i-1]+1);             for(int i=n-2; i>=0; i--)                 forced[i] = Math.min(forced[i], forced[i+1]+1);             for(int i=0; i<n; i++)                 System.out.print(forced[i] + "" "");             System.out.println();         }     }                } ",1
604,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Arrays; public class Main{       public static void main (String[] args){         FastReader s = new FastReader();         int t=1;t=s.ni();         for(int test=1;test<=t;test++){         int n=s.ni(),k=s.ni();         int position[]=s.readArray(k),temp[]=s.readArray(k);         int ans[]=new int[n];         Arrays.fill(ans,Integer.MAX_VALUE/2);         for(int i=0;i<k;i++){             ans[position[i]-1]=temp[i];         }         for(int i=1;i<n;i++){             ans[i]=Math.min(ans[i-1]+1,ans[i]);         }         for(int i=n-2;i>=0;i--){             ans[i]=Math.min(ans[i],ans[i+1]+1);         }         for(int i=0;i<n;i++)         System.out.print(ans[i]+"" "");         System.out.println();         }     }                } ",1
605,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class a{      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(),k=s.nextInt(); int pos[]=s.readArray(k); int temp[]=s.readArray(k); long ans[]=new long[n]; Arrays.fill(ans,Integer.MAX_VALUE); for(int i=0;i<k;i++){ ans[pos[i]-1]=temp[i]; } for(int i=1;i<n;i++){ ans[i]=Math.min(ans[i-1]+1,ans[i]); } for(int i=n-2;i>=0;i--){ ans[i]=Math.min(ans[i],ans[i+1]+1); } for(int i=0;i<n;i++){ out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ",1
606,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class solution {      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(), k=s.nextInt(); int[] a=s.readArray(k), temp=s.readArray(k); long[] ans=new long[n]; Arrays.fill(ans, Integer.MAX_VALUE); for (int i=0; i<k; i++) { ans[a[i]-1]=temp[i]; } for (int i=1; i<n; i++) { ans[i]=Math.min(ans[i],ans[i-1]+1); } for (int i=n-2; i>=0; i--) { ans[i]=Math.min(ans[i],ans[i+1]+1); } for (int i=0; i<n; i++) { out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ",1
607,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.util.*; public class contestA {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         int inf = 1000300300;         while (t-->0){             int n = scanner.nextInt();             int k = scanner.nextInt();             int[] c = new int[n];             Arrays.fill(c,inf);             int[] a = new int[k];             int[] b = new int[k];             for(int i=0;i<k;++i) a[i] = scanner.nextInt() - 1;             for(int i=0;i<k;++i) b[i] = scanner.nextInt();             for(int i=0;i<k;++i) c[a[i]] = b[i];             for(int i=1;i<n;++i){                 c[i] = Math.min(c[i],c[i-1]+1);             }             for(int i=n-2;i>=0;--i){                 c[i] = Math.min(c[i],c[i+1]+1);             }             for(int i=0;i<n;++i) System.out.print(c[i]+"" "");             System.out.println();         }     } } ",1
608,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ","import java.util.Arrays; import java.util.Scanner; public class E {     public static void main(String[] args) {         Scanner scn = new Scanner(System.in);         int test = scn.nextInt();         while (test-- > 0) {             int nrLands = scn.nextInt();             int[] toRightLands = new int[nrLands];             Arrays.fill(toRightLands, (int) (1e9 + 1e8));             int[] toLeftLands = new int[nrLands];             Arrays.fill(toLeftLands, (int) (1e9 + 1e8));             int nrAcs = scn.nextInt();             AC[] acs = new AC[nrAcs];             for (int i = 0; i < nrAcs; i++) {                 acs[i] = new AC();                 acs[i].myPos = scn.nextInt() - 1;             }             for (int i = 0; i < nrAcs; i++) {                 acs[i].myTemp = scn.nextInt();             }             Arrays.sort(acs);             int nextAc = 1;             AC lastChosen = acs[0];             for (int i = lastChosen.myPos; i < nrLands; i++) {                 if (nextAc < acs.length && i == acs[nextAc].myPos) {                     if (acs[nextAc].myTemp < lastChosen.myTemp + i - lastChosen.myPos) {                         lastChosen = acs[nextAc];                     }                     nextAc++;                 }                 toRightLands[i] = lastChosen.myTemp + i - lastChosen.myPos;             }             int nextAc1 = acs.length - 2;             AC lastChosen1 = acs[acs.length - 1];             for (int i = lastChosen1.myPos; i >= 0; i--) {                 if (nextAc1 >= 0 && i == acs[nextAc1].myPos) {                     if (acs[nextAc1].myTemp < lastChosen1.myTemp - i + lastChosen1.myPos) {                         lastChosen1 = acs[nextAc1];                     }                     nextAc1--;                 }                 toLeftLands[i] = lastChosen1.myTemp - i + lastChosen1.myPos;             }             for (int i = 0; i < nrLands; i++) {                 System.out.print(Integer.min(toLeftLands[i], toRightLands[i]) + "" "");             }             System.out.println();         }     }     static class AC implements Comparable<AC> {         int myPos, myTemp;              } } ",0
609,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.StringTokenizer; public class PC3C { static PrintWriter out = new PrintWriter(System.out); static MyFastReaderPC3C in = new MyFastReaderPC3C(); static long mod = (long) (1e9 + 7); public static void main(String[] args) throws Exception { int test = i(); while (test-- > 0) {                int n=i();              int[] arr=arrI(n);              String s=string();                            ArrayList<Integer> lR=new ArrayList<>();              ArrayList<Integer> lB=new ArrayList<>();              for(int i=0;i<n;i++) {                          if(s.charAt(i)=='R') lR.add(arr[i]);             else lB.add(arr[i]);                            }                                          Collections.sort(lB);              Collections.sort(lR,Collections.reverseOrder());                                          int k=1;              boolean st=true;              for(int i=0;i<lB.size();i++) {                            if(lB.get(i)>=k) {             k+=1;               }              else {             st=false;             break;              }                            }              boolean st2=true;                k=n;                for(int i=0;i<lR.size();i++) {                            if(lR.get(i)>k) {                st2=false;                break;              }              else {             k-=1;               }                            }                                if(st && st2) out.print(""YES"");                else out.print(""NO"");                             out.print(""\n""); out.flush(); } out.close(); } static void sort(long[] a)  { ArrayList<Long> l = new ArrayList<>(); for (long i : a) l.add(i); Collections.sort(l); for (int i = 0; i < a.length; i++) a[i] = l.get(i); } static void sort(int[] a) { ArrayList<Integer> l = new ArrayList<>(); for (int i : a) l.add(i); Collections.sort(l); for (int i = 0; i < a.length; i++) a[i] = l.get(i); } static void print(char A[]) { for (char c : A) System.out.print(c + "" ""); System.out.println(); } static void print(boolean A[]) { for (boolean c : A) System.out.print(c + "" ""); System.out.println(); } static void print(int A[]) { for (int a : A) System.out.print(a + "" ""); System.out.println(); } static void print(long A[]) { for (long i : A) System.out.print(i + "" ""); System.out.println(); } static void print(ArrayList<Integer> A) { for (int a : A) System.out.print(a + "" ""); System.out.println(); } public static Map<Character, Integer> mapSortByValue(Map<Character, Integer> hm) { List<Map.Entry<Character, Integer>> list = new LinkedList<Map.Entry<Character, Integer>>(hm.entrySet()); Collections.sort(list, new Comparator<Map.Entry<Character, Integer>>() { }); Map<Character, Integer> temp = new LinkedHashMap<Character, Integer>(); for (Map.Entry<Character, Integer> aa : list) { temp.put(aa.getKey(), aa.getValue()); } return temp; } static String string() { return in.nextLine(); } static int i() { return in.nextInt(); } static long l() { return in.nextLong(); } static int[] arrI(int N) { int A[] = new int[N]; for (int i = 0; i < N; i++) { A[i] = in.nextInt(); } return A; } } ","import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import java.io.*;   public class Div2 {  public static String solution(int [] arr, int n, String st)   {         ArrayList<Integer> red = new ArrayList<>();         ArrayList<Integer> blue = new ArrayList<>();                  for(int i = 0; i<n; i++)         {         if(st.charAt(i)=='R')         red.add(arr[i]);         else         blue.add(arr[i]);         }              Collections.sort(red);         Collections.sort(blue);         int cb = 1;                  for(int j = 0; j<blue.size(); j++)         {             if(blue.get(j)<cb)             return ""NO"";             cb++;         }                  int cr = n;         for(int j = red.size()-1; j>=0; j--)         {             if(red.get(j)>cr)             return ""NO"";             cr--;         }                  return ""YES"";  }          private static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { MyScanner s =  new MyScanner();        int t = s.nextInt();          for(int j = 0; j<t ; j++)     {     int n = s.nextInt();     int[] arr = new int[n];     for(int i =0; i<n; i++)     arr[i] = s.nextInt();          String st = s.next();         out.println(solution(arr,n, st));     }                out.flush();     out.close();      } } ",0
610,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.StringTokenizer; import java.util.TreeSet; public class PhoenixAndTowers {      public static class ListComparator implements Comparator<List<Integer>> {              }          public static void main(String[] args) throws IOException {                           BufferedReader f = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int T = Integer.parseInt(f.readLine());         for (int i = 0; i < T; i++) {             StringTokenizer st = new StringTokenizer(f.readLine());             int n = Integer.parseInt(st.nextToken());             int m = Integer.parseInt(st.nextToken());             int x = Integer.parseInt(st.nextToken());             st = new StringTokenizer(f.readLine());             List<Integer> list = new ArrayList<>();             for (int j = 0; j < n; j++) {                 int a = Integer.parseInt(st.nextToken());                 list.add(a);             }             ArrayList<Integer> copy = new ArrayList<>(list);             Collections.sort(list);             TreeSet<List<Integer>> set = new TreeSet<>(new ListComparator());             for (int j = 1; j <= m; j++) {                 List<Integer> temp = new ArrayList<>();                 temp.add(0);                 temp.add(j);                 set.add(temp);                              }                          Map<Integer, LinkedList<Integer>> map = new HashMap<>();             for (int j = n - 1; j >= 0; j--) {                 if (map.containsKey(list.get(j))) {                     map.get(list.get(j)).addLast(set.first().get(1));                 } else {                     map.put(list.get(j), new LinkedList<>());                     map.get(list.get(j)).addLast(set.first().get(1));                 }                 List<Integer> temp = new ArrayList<>();                 temp.add(set.first().get(0) + list.get(j));                 temp.add(set.pollFirst().get(1));                 set.add(temp);             }                          if (set.last().get(0) - set.first().get(0) > x) {                 out.println(""NO"");             } else {                 out.println(""YES"");                 for (int j = 0; j < n; j++) {                     out.print(map.get(copy.get(j)).pollFirst() + "" "");                 }                 out.println();             }         }         out.close();     } } ","import java.io.*; import java.util.*; public class C {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = in.nextInt();         for (int t1 = 0; t1 < t; t1++) {             int n = in.nextInt(), m = in.nextInt(), x = in.nextInt();             ArrayList<Pair> list = new ArrayList<>();             for (int i = 1; i <= n; i++) list.add(new Pair(in.nextInt(), i));             pw.println(solve(list, n, m, x));         }         pw.close();     }     static StringBuilder solve(ArrayList<Pair> arr, int n, int m, int x) {         Stack<Pair> stack = new Stack<>();         HashMap<Integer, Integer> map = new HashMap<>();         PriorityQueue<Pair> pq = new PriorityQueue<>();         Collections.sort(arr);         for (int i = m; i < n; i++) stack.push(arr.get(i));         for (int i = 0, j = 1; i < m; i++, j++) {             Pair p = arr.get(i);             pq.add(new Pair(p.f, j));             map.put(p.s, j);         }         while (!stack.isEmpty()) {             Pair val = stack.pop();             Pair p = pq.remove();             map.put(val.s, p.s);             pq.add(new Pair(p.f + val.f, p.s));         }                int min = pq.remove().f;         while (!pq.isEmpty()) {             int val = pq.remove().f;             if ((val - min) > x) return new StringBuilder().append(""NO"");         }         StringBuilder sb = new StringBuilder();         sb.append(""YES\n"");         for (int i = 1; i <= n; i++) {             sb.append(map.get(i) + "" "");         }         return sb;     }     static class Pair implements Comparable<Pair> {         int f, s;         Pair(int f, int s) {             this.f = f;             this.s = s;         }                       }      } ",0
611,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.StringTokenizer; import java.util.TreeSet; public class PhoenixAndTowers {      public static class ListComparator implements Comparator<List<Integer>> {              }          public static void main(String[] args) throws IOException {                           BufferedReader f = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int T = Integer.parseInt(f.readLine());         for (int i = 0; i < T; i++) {             StringTokenizer st = new StringTokenizer(f.readLine());             int n = Integer.parseInt(st.nextToken());             int m = Integer.parseInt(st.nextToken());             int x = Integer.parseInt(st.nextToken());             st = new StringTokenizer(f.readLine());             List<Integer> list = new ArrayList<>();             for (int j = 0; j < n; j++) {                 int a = Integer.parseInt(st.nextToken());                 list.add(a);             }             ArrayList<Integer> copy = new ArrayList<>(list);             Collections.sort(list);             TreeSet<List<Integer>> set = new TreeSet<>(new ListComparator());             for (int j = 1; j <= m; j++) {                 List<Integer> temp = new ArrayList<>();                 temp.add(0);                 temp.add(j);                 set.add(temp);                              }                          Map<Integer, LinkedList<Integer>> map = new HashMap<>();             for (int j = n - 1; j >= 0; j--) {                 if (map.containsKey(list.get(j))) {                     map.get(list.get(j)).addLast(set.first().get(1));                 } else {                     map.put(list.get(j), new LinkedList<>());                     map.get(list.get(j)).addLast(set.first().get(1));                 }                 List<Integer> temp = new ArrayList<>();                 temp.add(set.first().get(0) + list.get(j));                 temp.add(set.pollFirst().get(1));                 set.add(temp);             }                          if (set.last().get(0) - set.first().get(0) > x) {                 out.println(""NO"");             } else {                 out.println(""YES"");                 for (int j = 0; j < n; j++) {                     out.print(map.get(copy.get(j)).pollFirst() + "" "");                 }                 out.println();             }         }         out.close();     } } ","import static java.lang.Integer.parseInt; import static java.lang.Long.parseLong; import static java.lang.System.exit; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.PriorityQueue; import java.util.StringTokenizer; public class C { static class Token implements Comparable<Token> { final int i, h; Token(int i, int h) { this.i = i; this.h = h; } } static void solve() throws Exception { int tests = scanInt(); for (int test = 0; test < tests; test++) { int n = scanInt(), m = scanInt(); scanInt(); PriorityQueue<Token> pq = new PriorityQueue<>(); int h[] = new int[m]; int ans[] = new int[n]; for (int i = 0; i < m; i++) { pq.add(new Token(i, 0)); } for (int i = 0; i < n; i++) { Token cur = pq.remove(); pq.add(new Token(cur.i, h[cur.i] += scanInt())); ans[i] = cur.i; } out.println(""YES""); for (int i = 0; i < n; i++) { out.print((ans[i] + 1) + "" ""); } out.println(); } } static int scanInt() throws IOException { return parseInt(scanString()); } static String scanString() throws IOException { while (tok == null || !tok.hasMoreTokens()) { tok = new StringTokenizer(in.readLine()); } return tok.nextToken(); } static BufferedReader in; static PrintWriter out; static StringTokenizer tok; public static void main(String[] args) { try { in = new BufferedReader(new InputStreamReader(System.in)); out = new PrintWriter(System.out); solve(); in.close(); out.close(); } catch (Throwable e) { e.printStackTrace(); exit(1); } } } ",0
612,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.PriorityQueue; import java.util.StringTokenizer; public class Solve { static int mod = 1000000000 + 7; static long fact[] = new long[2 * 100000 + 3]; public static void main(String[] args) throws Exception { Scanner sc = new Scanner(); PrintWriter pw = new PrintWriter(System.out); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt();  int m = sc.nextInt();  int x = sc.nextInt();  int heights[] = new int[n]; int sum = 0; PriorityQueue<Pair> pq = new PriorityQueue<Pair>(); for (int i = 0; i < n; i++) { heights[i] = sc.nextInt(); } for (int i = 0; i < m; i++) { pq.add(new Pair(i + 1, 0)); } pw.println(""YES""); for (int i = 0; i < n; i++) { Pair p = pq.poll(); p.value += heights[i]; pq.add(p); pw.print(p.tower + "" ""); } pw.println(); } pw.flush(); } } class Pair implements Comparable<Pair> { int tower; int value = 0; Pair(int x, int y) { tower = x; value = y; } } ","import java.util.*; import java.io.*; public class Main{     public static class Element implements Comparable<Element>{         public int key;         public int value;         Element(int k, int v)         {             key=k;             value=v;         }              }     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         while(t-->0)         {             int n=sc.nextInt();             int m=sc.nextInt();             int x=sc.nextInt();             int[] arr=new int[n];             for(int i=0;i<n;++i)                 arr[i]=sc.nextInt();             PriorityQueue<Element> pq=new PriorityQueue<>();             for(int i=1;i<=m;++i)             {                 pq.add(new Element(i,0));             }             System.out.println(""YES"");             for(int j=0;j<n;j++)             {                 Element cur = pq.poll();                 System.out.print(cur.key+"" "");                 cur.value+= arr[j];                 pq.add(cur);             }             System.out.println();         }     } } ",1
613,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.Arrays; import java.util.HashMap; import java.util.Map; import java.util.StringTokenizer; public class Season2 {     static InputReader in = new InputReader();     static PrintWriter out = new PrintWriter(System.out);     public static void main(String args[]) {         int t = in.nextInt();         while (t-- > 0) {             int n = in.nextInt();             int air = in.nextInt();             Map<Integer, Integer> tempByIndex = new HashMap<>();             int inx[] = new int[air];             for (int i = 0; i < air; i++) {                 int x = in.nextInt() - 1;                 tempByIndex.put(x, 0);                 inx[i] = x;             }             for (int i = 0; i < air; i++) {                 tempByIndex.put(inx[i], in.nextInt());             }             long leftMax[] = new long[n];             long rightMax[] = new long[n];             leftMax[0] = tempByIndex.getOrDefault(0, Integer.MAX_VALUE);             rightMax[n - 1] = tempByIndex.getOrDefault(n - 1, Integer.MAX_VALUE);             for (int i = 1; i < n; i++) {                 leftMax[i] = Math.min(leftMax[i - 1] + 1, tempByIndex.getOrDefault(i, Integer.MAX_VALUE));                 rightMax[n - 1 - i] = Math.min(rightMax[n - i] + 1, tempByIndex.getOrDefault(n - 1 - i, Integer.MAX_VALUE));             }             for (int i = 0; i < n; i++) {                 long ans = Math.min(leftMax[i], rightMax[i]);                 out.print(ans + "" "");             }             out.println();         }         out.flush();     }           } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {       public static void main(String[] args)     {       FastScanner input = new FastScanner();         int tc = input.nextInt();         while (tc-- > 0) {          int n = input.nextInt();       int k = input.nextInt();       int a[] = new int[n+1];       int b[] = new int[k+1];         for (int i = 1; i <=k; i++) {             b[i] = input.nextInt();                      }         Arrays.fill(a, Integer.MAX_VALUE);         for (int i = 1; i <=k; i++) {            int value = input.nextInt();            a[b[i]] = value;                      }         long L[] = new long[n+1];         long R[] = new long[n+1];         Arrays.fill(L, Integer.MAX_VALUE);         Arrays.fill(R, Integer.MAX_VALUE);         long p = Integer.MAX_VALUE;         for (int i = 1; i <=n; i++) {              p = Math.min(p+1, a[i]);              L[i] = p;         }         p = Integer.MAX_VALUE;         for (int i = n; i >=1; i--) {             p = Math.min(p+1,a[i] );             R[i] = p;         }         long ans[] = new long[n+1];         for (int i = 1; i <=n; i++) {             ans[i] = Math.min(L[i], R[i]);         }         StringBuilder result = new StringBuilder();         for (int i = 1; i <=n; i++) {          result.append(ans[i]+"" "");         }         System.out.println(result);            }            }           } ",0
614,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.Scanner; import java.util.StringTokenizer; import java.util.TreeSet; public class A {     public static void main(String args[]) throws Exception {         FastScanner sc = new FastScanner();         int T = 1;         T = sc.nextInt();         PrintWriter pw = new PrintWriter(System.out);         while (T-- > 0) {             solve(sc, pw);         }         pw.close();     }     public static void solve(FastScanner sc, PrintWriter pw) throws Exception {         int n = sc.nextInt();         int[] arr = new int[n];         for(int i=0;i<n;i++){             arr[i]=sc.nextInt();         }         if(check(arr)) pw.println(""YES"");         else pw.println(""NO"");     }     public static boolean check(int[] arr){         int n=arr.length;         TreeSet<Integer> S = new TreeSet<>();         S.add(arr[0]);         for(int i=1;i<n;i++) {             S.add(arr[i]);             if (arr[i] == arr[i - 1]) continue;             Integer lb = S.lower(arr[i]);             if (lb != null && lb == arr[i - 1]) continue;             Integer ub = S.higher(arr[i]);             if (ub != null && ub == arr[i - 1]) continue;             return false;         }         return true;     }      } ","import java.io.*; import java.util.*; public class Main { public static void main(String[] args) { FastScanner sc = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t=sc.nextInt(); while(t-- >0) { int n = sc.nextInt(); int b[] = sc.readArray(n); TreeSet<Integer> set = new TreeSet<>(); boolean f = true; set.add(b[0]); for(int i=1 ; i<n ; i++) { set.add(b[i]); if(b[i-1]==b[i]) { continue; } Integer find = set.lower(b[i]); if(find!=null && find==b[i-1]) { continue; } find = set.higher(b[i]); if(find!=null && find==b[i-1]) { continue; } f = false; break; } if(f == false) { out.println(""NO""); } else out.println(""YES""); } out.flush(); out.close(); } } ",1
615,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.StringTokenizer; public class D {     static PrintWriter out = new PrintWriter(System.out);          public static void main(String[] args) {         FastScanner sc = new FastScanner();         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             Node head = null;             boolean notPossible = false;             for (int i = 0; i < n; i++) {                 int x = sc.nextInt();                 if (head == null) {                     head = new Node(x);                 } else {                     if ((head.next != null && x > head.next.value) || (head.prev != null && x < head.prev.value)) {                         notPossible = true;                     } else if ((head.next == null || x <= head.next.value) && x > head.value) {                         if (head.next != null && x == head.next.value) {                             head = head.next;                             continue;                         }                         Node temp = head.next;                         Node next = new Node(x);                         head.next = next;                         next.prev = head;                         next.next = temp;                         if (temp != null) {                             temp.prev = next;                         }                         head = next;                     } else if ((head.prev == null || x >= head.prev.value) && x < head.value) {                         if (head.prev != null && x == head.prev.value) {                             head = head.prev;                             continue;                         }                         Node temp = head.prev;                         Node prev = new Node(x);                         head.prev = prev;                         prev.next = head;                         prev.prev = temp;                         if (temp != null) {                             temp.next = prev;                         }                         head = prev;                     }                 }             }             if (notPossible) {                 out.println(""NO"");             } else {                 out.println(""YES"");             }        }         out.close();     }     static class Node {         int value;         Node prev;         Node next;         Node(int value) {             this.value = value;             this.prev = null;             this.next = null;         }     } } ","import java.util.Scanner; public class D_724 { @SuppressWarnings(""resource"") public static void main(String[] args) { Scanner input = new Scanner(System.in); int t = input.nextInt(); for(int test = 0; test < t; test++){ int n = input.nextInt(); ListNode on = new ListNode(input.nextInt(), null, null); boolean good = true; for(int i = 1; i < n; i++){ int num = input.nextInt(); if(good){ int at = on.data; if(num > at){ if(on.next == null || num < on.next.data){ on.next = new ListNode(num, on, on.next); on = on.next; if(on.next != null){ on.next.prev = on; } }else if(num == on.next.data){ on = on.next; }else{ good = false; } }else if(num < at){ if(on.prev == null || num > on.prev.data){ on.prev = new ListNode(num, on.prev, on); on = on.prev; if(on.prev != null){ on.prev.next = on; } }else if(num == on.prev.data){ on = on.prev; }else{ good = false; } } } } if(good){ System.out.println(""YES""); }else{ System.out.println(""NO""); } } } static class ListNode{ int data; ListNode prev; ListNode next; ListNode(int data, ListNode prev, ListNode next){ this.data = data; this.prev = prev; this.next = next; } } } ",0
616,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.StringTokenizer; public class c { public static void main(String[] args) { FastScanner scan=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=scan.nextInt(); for(int tt=0;tt<t;tt++) { int n=scan.nextInt(); char[] a=scan.next().toCharArray(), b=scan.next().toCharArray(); int o=0, e=0; int onea=0, oneb=0, zeroa=0, zerob=0; int evenon=0, oddon=0; for(int i=0;i<n;i++) { if(a[i]==b[i]) { e++; if(a[i]=='1') { evenon++; } } else { o++; if(a[i]=='1') oddon++; } if(a[i]=='1') onea++; else zeroa++; if(b[i]=='1') oneb++; else zerob++; } boolean good=false; int otheronea=onea==0?0:n-onea+1; if(oneb>=otheronea&&oneb<=onea) good=true; if(oneb>=onea&&oneb<=otheronea) good=true; if(!good) { out.println(-1); continue; } if(e==n) out.println(0); else if(e%2==1&&o%2==0&&evenon==(e+1)/2&&oddon==o/2) { out.println(Math.min(o,e)); } else if(e%2==1&&evenon==(e+1)/2) { out.println(e); } else if(o%2==0&&oddon==o/2) { out.println(o); } else { out.println(-1); } } out.close(); } } ","import java.util.*; import java.io.*; import java.math.*; public class Coder {   static int n;   static char a[];   static char b[];   static StringBuffer str=new StringBuffer();   static void solve(){     boolean flag=true;     for(int i=0;i<n;i++) if(a[i]!=b[i]) flag=false;     if(flag){str.append(""0\n""); return;}     int tot=0;     int tot1=0;     for(int i=0;i<n;i++) if(a[i]=='1') tot++;     for(int i=0;i<n;i++) if(b[i]=='1') tot1++;     if(tot==0){       if(tot1!=0) str.append(""-1\n"");       else str.append(""0\n"");     }else{       int x=tot-1;       int ul=n-tot;       if(tot!=tot1 && (ul+1)!=tot1) str.append(""-1\n"");       else{         int same=0, nsame=0;         int zs, os;         int zd, od;         zs=os=zd=od=0;         for(int i=0;i<n;i++){           if(a[i]==b[i]){             same++;             if(a[i]=='0') zs++;             else os++;           }           else{             nsame++;             if(a[i]=='0') zd++;             else od++;           }         }                                                      if(same==1 && nsame==n-1 && os==1) str.append(""1\n"");         else if(zd==od && od>0 && os>0 && os-zs==1) str.append(Math.min(nsame, same)).append(""\n"");         else if(zd==od && od>0) str.append(nsame).append(""\n"");         else if(os>0 && os-zs==1) str.append(same).append(""\n"");         else str.append(""-1\n"");       }     }    }   public static void main(String[] args) throws java.lang.Exception {     BufferedReader bf;     PrintWriter pw;     boolean lenv=false;     if(lenv){       bf = new BufferedReader(                           new FileReader(""input.txt""));       pw=new PrintWriter(new             BufferedWriter(new FileWriter(""output.txt"")));     }else{       bf = new BufferedReader(new InputStreamReader(System.in));       pw = new PrintWriter(new OutputStreamWriter(System.out));     }          int t = Integer.parseInt(bf.readLine().trim());     while (t-- > 0) {       String st[]=bf.readLine().trim().split(""\\s+"");       n=Integer.parseInt(st[0]);       a=bf.readLine().trim().toCharArray();       b=bf.readLine().trim().toCharArray();       solve();     }     pw.println(str);     pw.flush();        } } ",0
617,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.lang.reflect.Array; import java.util.Arrays; import java.util.StringTokenizer; public class Main {          public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(                 new InputStreamReader(System.in));         int q = Integer.parseInt(br.readLine());         for (int i = 0; i < q; i++) {             br.readLine();             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             int k = Integer.parseInt(st.nextToken());                          st = new StringTokenizer(br.readLine());             int[] a = new int[k];             for (int j = 0; j < k; j++) {                 a[j] = Integer.parseInt(st.nextToken());             }                          st = new StringTokenizer(br.readLine());             int[] t = new int[k];             for (int j = 0; j < k; j++) {                 t[j] = Integer.parseInt(st.nextToken());             }                          int[] c = new int[n];             Arrays.fill(c, Integer.MAX_VALUE);             for (int j = 0; j < k; j++) {                 c[a[j] - 1] = t[j];             }                          long[] left = new long[n];             Arrays.fill(left, Integer.MAX_VALUE);             long p = Integer.MAX_VALUE;             for (int j = 0; j < n; j++) {                 p = Math.min(p + 1, c[j]);                 left[j] = p;             }                          long[] right = new long[n];             Arrays.fill(right, Integer.MAX_VALUE);             p = Integer.MAX_VALUE;             for (int j = n - 1; j >= 0; j--) {                 p = Math.min(p + 1, c[j]);                 right[j] = p;             }             for (int j = 0; j < n; j++) {                 System.out.print(Math.min(left[j], right[j]) + "" "");             }             System.out.println();         }     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codeforces {     public static void main(String[] args) throws java.lang.Exception {                  BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));        int t = Integer.parseInt(buf.readLine());         StringBuilder sb = new StringBuilder();        for (int i = 0; i < t; i++) {            String st=buf.readLine();           String st1[]=(buf.readLine()).split("" "");           int n=Integer.parseInt(st1[0]);           int k=Integer.parseInt(st1[1]);           int a[]=new int[k];           int temp[]=new int[k];           long arr[]=new long[n];           String st2[]=(buf.readLine()).split("" "");            String st3[]=(buf.readLine()).split("" "");            for(int j=0;j<k;j++)            {                a[j]=Integer.parseInt(st2[j]);                temp[j]=Integer.parseInt(st3[j]);            }           for(int j=0;j<k;j++)           {               arr[a[j]-1]=temp[j];           }           long min=Integer.MAX_VALUE;           long left[]=new long[n];           long right[]=new long[n];           if(arr[0]==0)               left[0]=min;           else               left[0]=arr[0];           for(int j=1;j<n;j++)           {               if(arr[j]==0)               {                   left[j]=left[j-1]+1;               }               else               {                   left[j]=Math.min(left[j-1]+1,arr[j]);               }           }           if(arr[n-1]==0)               right[n-1]=min;           else               right[n-1]=arr[n-1];           for(int j=n-2;j>=0;j--)           {               if(arr[j]==0)               {                   right[j]=right[j+1]+1;               }               else               {                   right[j]=Math.min(right[j+1]+1,arr[j]);               }           }           for(int j=0;j<n;j++)           {               arr[j]=Math.min(left[j],right[j]);               sb.append(arr[j]+"" "");           }           sb.append(""\n"");         }         System.out.println(sb);     } } ",0
618,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.text.DecimalFormat; import java.util.*; import java.util.concurrent.ThreadLocalRandom; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.stream.LongStream; public class TaskB {     static long mod = 1000000007;     static FastScanner scanner;     static final StringBuilder result = new StringBuilder();     public static void main(String[] args) {                  scanner = new FastScanner();         int T = scanner.nextInt();         for (int t = 0; t < T; t++) {             solve(t + 1);             result.append(""\n"");         }         System.out.println(result);     }     static void solve(int t) {         int n = scanner.nextInt();         int[] a = scanner.nextIntArray(n);         String s = scanner.nextToken();         List<Integer> blue = new ArrayList<>();         List<Integer> red = new ArrayList<>();         for (int i = 0; i < n; i++) {             if (s.charAt(i) == 'B') {                 blue.add(a[i]);             } else {                 red.add(a[i]);             }         }         Collections.sort(blue);         Collections.sort(red);         for (int i = 0; i < blue.size(); i++) {             if (blue.get(i) < i + 1) {                 result.append(""NO"");                 return;             }         }         for (int i = 0; i < red.size(); i++) {             if (red.get(i) > i + 1 + blue.size()) {                 result.append(""NO"");                 return;             }         }         result.append(""YES"");     }                          } ","import java.io.*; import java.util.*; public class Main {          public static void main(String[] args) {         FastReader obj = new FastReader();         PrintWriter out = new PrintWriter(System.out);         int l = obj.nextInt();         while (l-- != 0) {             int n = obj.nextInt();             int[] num = new int[n];             for (int i = 0; i < n; i++) num[i] = obj.nextInt();             Vector<Integer> red = new Vector<>();             Vector<Integer> blue = new Vector<>();             String s = obj.next();             for (int i = 0; i < s.length(); i++) {                 if (s.charAt(i) == 'R') red.add(num[i]);                 else blue.add(num[i]);             }             Collections.sort(blue);             Collections.sort(red);             int c = 1, f = 0;             for (int i = 0; i < blue.size(); i++) {                 if (blue.get(i) < c) {                     f = 1;                     break;                 }                 c++;             }             for (int i = 0; i < red.size(); i++) {                 if (red.get(i) > c) {                     f = 1;                     break;                 }                 c++;             }             if (f == 0) out.println(""YES"");             else out.println(""NO"");         }         out.flush();     } } ",1
619,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.text.DecimalFormat; import java.util.*; import java.util.concurrent.ThreadLocalRandom; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.stream.LongStream; public class TaskB {     static long mod = 1000000007;     static FastScanner scanner;     static final StringBuilder result = new StringBuilder();     public static void main(String[] args) {                  scanner = new FastScanner();         int T = scanner.nextInt();         for (int t = 0; t < T; t++) {             solve(t + 1);             result.append(""\n"");         }         System.out.println(result);     }     static void solve(int t) {         int n = scanner.nextInt();         int[] a = scanner.nextIntArray(n);         String s = scanner.nextToken();         List<Integer> blue = new ArrayList<>();         List<Integer> red = new ArrayList<>();         for (int i = 0; i < n; i++) {             if (s.charAt(i) == 'B') {                 blue.add(a[i]);             } else {                 red.add(a[i]);             }         }         Collections.sort(blue);         Collections.sort(red);         for (int i = 0; i < blue.size(); i++) {             if (blue.get(i) < i + 1) {                 result.append(""NO"");                 return;             }         }         for (int i = 0; i < red.size(); i++) {             if (red.get(i) > i + 1 + blue.size()) {                 result.append(""NO"");                 return;             }         }         result.append(""YES"");     }                          } ","import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ",0
620,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.text.DecimalFormat; import java.util.*; import java.util.concurrent.ThreadLocalRandom; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.stream.LongStream; public class TaskB {     static long mod = 1000000007;     static FastScanner scanner;     static final StringBuilder result = new StringBuilder();     public static void main(String[] args) {                  scanner = new FastScanner();         int T = scanner.nextInt();         for (int t = 0; t < T; t++) {             solve(t + 1);             result.append(""\n"");         }         System.out.println(result);     }     static void solve(int t) {         int n = scanner.nextInt();         int[] a = scanner.nextIntArray(n);         String s = scanner.nextToken();         List<Integer> blue = new ArrayList<>();         List<Integer> red = new ArrayList<>();         for (int i = 0; i < n; i++) {             if (s.charAt(i) == 'B') {                 blue.add(a[i]);             } else {                 red.add(a[i]);             }         }         Collections.sort(blue);         Collections.sort(red);         for (int i = 0; i < blue.size(); i++) {             if (blue.get(i) < i + 1) {                 result.append(""NO"");                 return;             }         }         for (int i = 0; i < red.size(); i++) {             if (red.get(i) > i + 1 + blue.size()) {                 result.append(""NO"");                 return;             }         }         result.append(""YES"");     }                          } ","import java.util.*; public class mentor1 {     public static boolean solve(int n, String color, int[] arr){         List<Integer> Barr = new ArrayList<Integer>();         List<Integer> Rarr = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if(color.charAt(i) == 'B')Barr.add(arr[i]);             else Rarr.add(arr[i]);         }         Barr.sort(Comparator.naturalOrder());         Rarr.sort(Comparator.reverseOrder());         for (int i = 0; i < Barr.size(); i++) {             if(Barr.get(i)< i + 1)return false;         }         for (int i = 0; i < Rarr.size(); i++) {             int expect = n-i;             if(Rarr.get(i) > expect)return false;         }         return true;     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         int n = input.nextInt();         for (int i = 0; i < n; i++) {             int m = input.nextInt();             int[] arr = new int[m];             for(int j = 0;j<m; j++)arr[j] = input.nextInt();             String color = input.next();             if(solve(m,color,arr)) System.out.println(""YES"");             else System.out.println(""NO"");         }     } } ",0
621,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.text.DecimalFormat; import java.util.*; import java.util.concurrent.ThreadLocalRandom; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.stream.LongStream; public class TaskB {     static long mod = 1000000007;     static FastScanner scanner;     static final StringBuilder result = new StringBuilder();     public static void main(String[] args) {                  scanner = new FastScanner();         int T = scanner.nextInt();         for (int t = 0; t < T; t++) {             solve(t + 1);             result.append(""\n"");         }         System.out.println(result);     }     static void solve(int t) {         int n = scanner.nextInt();         int[] a = scanner.nextIntArray(n);         String s = scanner.nextToken();         List<Integer> blue = new ArrayList<>();         List<Integer> red = new ArrayList<>();         for (int i = 0; i < n; i++) {             if (s.charAt(i) == 'B') {                 blue.add(a[i]);             } else {                 red.add(a[i]);             }         }         Collections.sort(blue);         Collections.sort(red);         for (int i = 0; i < blue.size(); i++) {             if (blue.get(i) < i + 1) {                 result.append(""NO"");                 return;             }         }         for (int i = 0; i < red.size(); i++) {             if (red.get(i) > i + 1 + blue.size()) {                 result.append(""NO"");                 return;             }         }         result.append(""YES"");     }                          } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",0
622,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.util.*; public class C {     public static void main(String[] args) {         FastScanner scanner = new FastScanner();         int t = scanner.nextInt();         for (int i=0; i < t;i++) {             int n = scanner.nextInt();             String start = scanner.nextLine().trim();             String finish = scanner.nextLine().trim();             int ans = solve(start, finish, n);             System.out.println(ans);         }     }     public static int solve(String start, String finish, int n) {         int nOnesInA = 0;         for (char c : start.toCharArray()) {             if (c == '1') {                 nOnesInA++;             }         }         int nOnesInB = 0;         for (char c : finish.toCharArray()) {             if (c == '1') {                 nOnesInB++;             }         }         int ans = Integer.MAX_VALUE;         if (nOnesInA == nOnesInB) {             ans = simpleSolve(start, finish, n);         }         if ((n - nOnesInA) + 1 == nOnesInB) {             int newAns = simpleSolve(flip(start, n), finish, n) + 1;             if (newAns < ans) {                 ans = newAns;             }         }         if (ans == Integer.MAX_VALUE) {             return -1;         }         return ans;     }     public static int simpleSolve(String start, String finish, int n) {         int ans = 0;         for (int i=0; i < n; i++) {             if ((start.charAt(i) == '1') && (finish.charAt(i) == '0')) {                 ans+=2;             }         }         return ans;     }     public static String flip(String start, int n) {         char[] flipped = new char[n];         for(int i=0; i<n; i++) {             if (start.charAt(i) == '1') {                 flipped[i] = '0';             } else {                 flipped[i] = '1';             }         }         return String.valueOf(flipped);     }      } ","import java.io.*; import java.util.*; public class B { public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); PrintWriter output = new PrintWriter(System.out); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); char initial[] = scan.next().toCharArray(); char desired[] = scan.next().toCharArray(); int lit1 = 0, lit2 = 0; int ans = Integer.MAX_VALUE; for(int i = 0;i<n;i++) { if(initial[i]=='1') lit1++; if(desired[i]=='1') lit2++; } if(lit1==lit2) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]!=desired[i]) count++; ans = Math.min(ans, count); } if(lit2==(n-lit1+1)) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]==desired[i]) count++; ans = Math.min(ans, count); } if(ans == Integer.MAX_VALUE) ans = -1; output.println(ans); } output.flush(); } } ",0
623,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.util.StringTokenizer;   public class Solution {     public static void main(String[] args) { FastReader sc = new FastReader();                 int t=sc.nextInt();        while(t-->0) {        int n=sc.nextInt();        int r[]=new int[n];        int l[]=new int[n];        for(int i=0;i<n;i++) {        r[i]=sc.nextInt();        }        for(int i=0;i<n;i++) l[i]=r[i]-sc.nextInt()+1;        long ans=0,min=l[n-1],max=r[n-1];                for(int i=n-2;i>=0;i--) {        if(r[i]>=min) min=Math.min(min,l[i]);        else {        ans+=(max-min+1)*(max-min+2)/2;        max=r[i];        min=l[i];        }                }        ans+=(max-min+1)*(max-min+2)/2;        System.out.println(ans);                        } } } ","import java.io.IOException; import java.io.InputStream; import java.util.Arrays; import java.util.InputMismatchException; public class Main {    static InputReader sc=new InputReader(System.in);    public static void main(String[] args) {              int t=sc.nextInt();       while(t-->0){          solve();       }    }    private static void solve() {       int n=sc.nextInt();       Node left[]=new Node[n];       int index=0;       Node ini[]=new Node[n];       int tmp[]=new int[n];       for(int i=0;i<n;i++){          tmp[i]=sc.nextInt();       }       for(int i=0;i<n;i++){          ini[i]=new Node(tmp[i],tmp[i]-sc.nextInt()+1);       }       Arrays.sort(ini);       left[0]=ini[0];       for(int i=1;i<n;i++){                    if(ini[i].s<=left[index].k&&ini[i].k>left[index].k){             left[index].k=ini[i].k;          }else if(ini[i].s>left[index].k){             index++;             left[index]=ini[i];          }       }       long ans=0;       for(int i=0;i<=index;i++){                    ans+=(long)(left[i].k-left[i].s+2)*(left[i].k-left[i].s+1)/2;       }       System.out.println(ans);    } } class Node implements Comparable<Node>{    int k,s;    Node(int k,int s){       this.s=s;       this.k=k;    }     } ",0
624,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.util.StringTokenizer; public class Main {          static long dfs(int cur,int parent,int taken,HashMap<Integer,ArrayList<node>> hm,ArrayList<node> al,long[][] dp){         long ans=0;         if(dp[cur-1][taken]!=-1) return dp[cur-1][taken];         int v=taken==0?al.get(cur-1).l:al.get(cur-1).r;         for(node x:hm.get(cur)){             int xl=x.l,xr=x.r,idx=x.idx;             if(idx!=parent){                 ans+=Math.max(Math.abs(v-xl)+dfs(idx,cur,0,hm,al,dp),Math.abs(v-xr)+dfs(idx,cur,1,hm,al,dp));             }         }         return dp[cur-1][taken]=ans;     }     public static void main(String[] args) {         FastReader obj = new FastReader();         int t = obj.nextInt();         while(t-->0) {             int n = obj.nextInt(),a,b;             ArrayList<node> al=new ArrayList<>();             for(int i=0;i<n;i++){                 a = obj.nextInt();                 b = obj.nextInt();                 al.add(new node(a,b,i+1));             }             HashMap<Integer,ArrayList<node>> hm=new HashMap<>();             for(int i=0;i<n-1;i++){                 a = obj.nextInt();                 b = obj.nextInt();                 if(!hm.containsKey(a)){                     hm.put(a,new ArrayList<node>());                 }                 if(!hm.containsKey(b)){                     hm.put(b,new ArrayList<node>());                 }                 hm.get(a).add(al.get(b-1));                 hm.get(b).add(al.get(a-1));             }             long[][] dp=new long[n+2][2];             for(long[] x:dp) Arrays.fill(x,-1);             long ans1,ans2;             ans1=dfs(1,0,0,hm,al,dp);             ans2=dfs(1,0,1,hm,al,dp);             System.out.println(Math.max(ans1,ans2));         }     } } class node{     int l,r,idx;     node(int l1,int r1,int i){         l=l1;         r=r1;         idx=i;     } } ","import java.io.*; import java.util.*; public class Template { static int mod = 1000000007; public static void main(String[] args) { FastScanner sc = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int yo = sc.nextInt(); while (yo-- > 0) { int n = sc.nextInt(); Map<Integer,Pair> map = new HashMap<>(); for(int i = 0; i < n; i++) { map.put(i, new Pair(sc.nextLong(),sc.nextLong())); } List<List<Integer>> list = new ArrayList<>(); for(int i = 0; i < n; i++) { list.add(new ArrayList<>()); } for(int i = 0; i < n-1; i++) { int x = sc.nextInt()-1; int y = sc.nextInt()-1; list.get(x).add(y); list.get(y).add(x); } for(int i = 0; i < 1e5+3; i++) { for(int j = 0; j < 2; j++) { dp[i][j] = -1; } } long a1 = dfs(map,list,0,0,-1); long a2 = dfs(map,list,1,0,-1); long ans = Math.max(a1, a2); out.println(ans); } out.close(); } static long[][] dp = new long[(int)1e5+10][2]; private static long dfs(Map<Integer, Pair> map, List<List<Integer>> list,  int x, int node, int parent) { if(dp[node][x] != -1) { return dp[node][x]; } List<Integer> neighbours = list.get(node); long ans1 = 0; if(x == 0) { ans1 = map.get(node).x; } else { ans1 = map.get(node).y; } long uAns = 0; for(int e : neighbours) { if(e == parent) continue; long ua1 = dfs(map,list,0,e,node); long ua2 = dfs(map,list,1,e,node); long a1 = ua1 + Math.abs(map.get(e).x-ans1); long a2 = ua2 + Math.abs(map.get(e).y-ans1); uAns += Math.max(a1, a2); } return dp[node][x] = uAns; } static class Pair { long x; long y; public Pair(long x, long y) { this.x = x; this.y = y; } } } ",0
625,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class C1 {     private static void solve(List<Integer>[] g, int[][] a) {         long[] dfs = dfs(g, a, 0, -1);         System.out.println(Math.max(dfs[0], dfs[1]));     }     private static long[] dfs(List<Integer>[] g, int[][] a, int v, int p) {         long lans = 0;         long rans = 0;         for (Integer i : g[v]) {             if (i != p) {                 long[] dfs = dfs(g, a, i, v);                 lans += Math.max(Math.abs(a[v][0] - a[i][1]) + dfs[1], Math.abs(a[v][0] - a[i][0]) + dfs[0]);                 rans += Math.max(Math.abs(a[v][1] - a[i][1]) + dfs[1], Math.abs(a[v][1] - a[i][0]) + dfs[0]);             }         }         return new long[]{lans, rans};     }     public static void main(String[] args) {         FastScanner sc = new FastScanner();         int t = sc.nextInt();         for (int i = 0; i < t; i++) {             int n = sc.nextInt();             int[][] a = new int[n][2];             for (int j = 0; j < n; j++) {                 a[j] = new int[]{sc.nextInt(), sc.nextInt()};             }             List<Integer>[] g = new ArrayList[n];             for (int j = 0; j < n; j++) {                 g[j] = new ArrayList<>();             }             for (int j = 0; j < n - 1; j++) {                 int u = sc.nextInt() - 1;                 int v = sc.nextInt() - 1;                 g[u].add(v);                 g[v].add(u);             }             solve(g, a);         }     }      } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CParsasHumongousTree solver = new CParsasHumongousTree();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CParsasHumongousTree {         int n;         long[][] dp;         int[] l;         int[] r;         ArrayList<Integer>[] a;         public void solve(int testNumber, FastReader in, PrintWriter out) {             n = in.nextInt();             l = new int[n];             r = new int[n];             dp = new long[n][2];             a = new ArrayList[n];             for (int i = 0; i < n; ++i) {                 a[i] = new ArrayList<>();             }             for (int i = 0; i < n; ++i) {                 l[i] = in.nextInt();                 r[i] = in.nextInt();             }             for (int i = 0; i < n - 1; ++i) {                 int u = in.nextInt() - 1, v = in.nextInt() - 1;                 a[u].add(v);                 a[v].add(u);             }             dfs(0, -1);             out.println(Math.max(dp[0][0], dp[0][1]));         }         void dfs(int u, int p) {             dp[u][0] = dp[u][1] = 0;             for (int v : a[u]) {                 if (v != p) {                     dfs(v, u);                     dp[u][0] += Math.max(dp[v][0] + Math.abs(l[u] - l[v]), dp[v][1] + Math.abs(l[u] - r[v]));                     dp[u][1] += Math.max(dp[v][0] + Math.abs(r[u] - l[v]), dp[v][1] + Math.abs(r[u] - r[v]));                 }             }         }     }      } ",0
626,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Codeforces {     public static void main(String[] args) {         FastReader fastReader = new FastReader();         int t = fastReader.nextInt();         while (t-- > 0) {             int n = fastReader.nextInt();             int a[] = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = fastReader.nextInt();             }             ArrayList<Integer> b = new ArrayList<>();             ArrayList<Integer> r = new ArrayList<>();             char c[] = fastReader.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (c[i] == 'B') {                     b.add(a[i]);                 } else {                     r.add(a[i]);                 }             }             Collections.sort(b);             Collections.sort(r);             int sizeb = b.size();             boolean isValid = true;             for (int i = 1 , j = 0; i <=sizeb; i++ , j++){                 if (b.get(j) <  i){                     isValid =false;                 }             }             for (int i = sizeb+1 , j = 0; i <=n && j < r.size(); i++ , j++){                 if (r.get(j) >  i){                     isValid =false;                 }             }             if (isValid){                 System.out.println(""YES"");             }else{                 System.out.println(""NO"");             }         }     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class D {          public static void main(String[] args)     {         FastScanner sc=new FastScanner();         int t=sc.nextInt();         PrintWriter pw=new PrintWriter(System.out);         while(t-->0) {             int n=sc.nextInt();             int[] a=sc.readArray(n);             char[] s=sc.next().toCharArray();             boolean ok=true;             ArrayList<Integer> blues=new ArrayList<>();             ArrayList<Integer> reds=new ArrayList<>();             for(int i=0;i<n;i++){                 if(s[i]=='B'){                     blues.add(a[i]);                 } else {                     reds.add(a[i]);                 }             }             Collections.sort(blues);             Collections.sort(reds);             for(int i=0;i<blues.size();i++){                 if(blues.get(i)<(i+1)){                     ok=false;                     break;                 }             }             int start=blues.size()+1;             for(int i=0;i<reds.size();i++){                 if(reds.get(i)>(start++)){                     ok=false;                     break;                 }             }             if(ok){                pw.println(""YES"");             } else {                 pw.println(""NO"");             }         }         pw.flush();     }      } ",0
627,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Codeforces {     public static void main(String[] args) {         FastReader fastReader = new FastReader();         int t = fastReader.nextInt();         while (t-- > 0) {             int n = fastReader.nextInt();             int a[] = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = fastReader.nextInt();             }             ArrayList<Integer> b = new ArrayList<>();             ArrayList<Integer> r = new ArrayList<>();             char c[] = fastReader.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (c[i] == 'B') {                     b.add(a[i]);                 } else {                     r.add(a[i]);                 }             }             Collections.sort(b);             Collections.sort(r);             int sizeb = b.size();             boolean isValid = true;             for (int i = 1 , j = 0; i <=sizeb; i++ , j++){                 if (b.get(j) <  i){                     isValid =false;                 }             }             for (int i = sizeb+1 , j = 0; i <=n && j < r.size(); i++ , j++){                 if (r.get(j) >  i){                     isValid =false;                 }             }             if (isValid){                 System.out.println(""YES"");             }else{                 System.out.println(""NO"");             }         }     }      } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",0
628,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Codeforces {     public static void main(String[] args) {         FastReader fastReader = new FastReader();         int t = fastReader.nextInt();         while (t-- > 0) {             int n = fastReader.nextInt();             int a[] = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = fastReader.nextInt();             }             ArrayList<Integer> b = new ArrayList<>();             ArrayList<Integer> r = new ArrayList<>();             char c[] = fastReader.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (c[i] == 'B') {                     b.add(a[i]);                 } else {                     r.add(a[i]);                 }             }             Collections.sort(b);             Collections.sort(r);             int sizeb = b.size();             boolean isValid = true;             for (int i = 1 , j = 0; i <=sizeb; i++ , j++){                 if (b.get(j) <  i){                     isValid =false;                 }             }             for (int i = sizeb+1 , j = 0; i <=n && j < r.size(); i++ , j++){                 if (r.get(j) >  i){                     isValid =false;                 }             }             if (isValid){                 System.out.println(""YES"");             }else{                 System.out.println(""NO"");             }         }     }      } ","import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import java.io.*;   public class Div2 {  public static String solution(int [] arr, int n, String st)   {         ArrayList<Integer> red = new ArrayList<>();         ArrayList<Integer> blue = new ArrayList<>();                  for(int i = 0; i<n; i++)         {         if(st.charAt(i)=='R')         red.add(arr[i]);         else         blue.add(arr[i]);         }              Collections.sort(red);         Collections.sort(blue);         int cb = 1;                  for(int j = 0; j<blue.size(); j++)         {             if(blue.get(j)<cb)             return ""NO"";             cb++;         }                  int cr = n;         for(int j = red.size()-1; j>=0; j--)         {             if(red.get(j)>cr)             return ""NO"";             cr--;         }                  return ""YES"";  }          private static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { MyScanner s =  new MyScanner();        int t = s.nextInt();          for(int j = 0; j<t ; j++)     {     int n = s.nextInt();     int[] arr = new int[n];     for(int i =0; i<n; i++)     arr[i] = s.nextInt();          String st = s.next();         out.println(solution(arr,n, st));     }                out.flush();     out.close();      } } ",0
629,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class D {     public static void main(String[] args) {         FastScanner fs = new FastScanner();         int cases = fs.nextInt();         while(cases-->0){             int n = fs.nextInt(), k = fs.nextInt();             int[] positions = fs.readArray(k), temps = fs.readArray(k);             int[] forced = new int[n];             Arrays.fill(forced, Integer.MAX_VALUE/2);             for(int i=0; i<k; i++)                 forced[positions[i]-1] = temps[i];             for(int i=1; i<n; i++)                 forced[i] = Math.min(forced[i],forced[i-1]+1);             for(int i=n-2; i>=0; i--)                 forced[i] = Math.min(forced[i], forced[i+1]+1);             for(int i=0; i<n; i++)                 System.out.print(forced[i] + "" "");             System.out.println();         }     }                } ","import java.io.*; import java.util.*; public class E { public static void main(String[] args) throws Exception { Reader sc=new Reader(); PrintWriter pw=new PrintWriter(System.out); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k=sc.nextInt(); int[] idxes=new int[k]; int[] temps=new int[k]; for(int i=0;i<k;i++) { idxes[i]=sc.nextInt()-1; } for(int i=0;i<k;i++) { temps[i]=sc.nextInt(); } int[] ans=new int[n]; Arrays.fill(ans, Integer.MAX_VALUE/2); for(int i=0;i<k;i++) { ans[idxes[i]]=temps[i]; } for(int i=1;i<n;i++) { ans[i]=Math.min(ans[i], ans[i-1]+1); } for(int i=n-2;i>=0;i--) { ans[i]=Math.min(ans[i], ans[i+1]+1); } for(int i=0;i<n;i++) { pw.print(ans[i]+"" ""); } pw.println(); } pw.flush(); sc.close(); } } ",1
630,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class D {     public static void main(String[] args) {         FastScanner fs = new FastScanner();         int cases = fs.nextInt();         while(cases-->0){             int n = fs.nextInt(), k = fs.nextInt();             int[] positions = fs.readArray(k), temps = fs.readArray(k);             int[] forced = new int[n];             Arrays.fill(forced, Integer.MAX_VALUE/2);             for(int i=0; i<k; i++)                 forced[positions[i]-1] = temps[i];             for(int i=1; i<n; i++)                 forced[i] = Math.min(forced[i],forced[i-1]+1);             for(int i=n-2; i>=0; i--)                 forced[i] = Math.min(forced[i], forced[i+1]+1);             for(int i=0; i<n; i++)                 System.out.print(forced[i] + "" "");             System.out.println();         }     }                } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Arrays; public class Main{       public static void main (String[] args){         FastReader s = new FastReader();         int t=1;t=s.ni();         for(int test=1;test<=t;test++){         int n=s.ni(),k=s.ni();         int position[]=s.readArray(k),temp[]=s.readArray(k);         int ans[]=new int[n];         Arrays.fill(ans,Integer.MAX_VALUE/2);         for(int i=0;i<k;i++){             ans[position[i]-1]=temp[i];         }         for(int i=1;i<n;i++){             ans[i]=Math.min(ans[i-1]+1,ans[i]);         }         for(int i=n-2;i>=0;i--){             ans[i]=Math.min(ans[i],ans[i+1]+1);         }         for(int i=0;i<n;i++)         System.out.print(ans[i]+"" "");         System.out.println();         }     }                } ",1
631,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class D {     public static void main(String[] args) {         FastScanner fs = new FastScanner();         int cases = fs.nextInt();         while(cases-->0){             int n = fs.nextInt(), k = fs.nextInt();             int[] positions = fs.readArray(k), temps = fs.readArray(k);             int[] forced = new int[n];             Arrays.fill(forced, Integer.MAX_VALUE/2);             for(int i=0; i<k; i++)                 forced[positions[i]-1] = temps[i];             for(int i=1; i<n; i++)                 forced[i] = Math.min(forced[i],forced[i-1]+1);             for(int i=n-2; i>=0; i--)                 forced[i] = Math.min(forced[i], forced[i+1]+1);             for(int i=0; i<n; i++)                 System.out.print(forced[i] + "" "");             System.out.println();         }     }                } ","import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.util.InputMismatchException; public class AirConditioners {     static InputReader inputReader=new InputReader(System.in);     static void solve()     {         int n=inputReader.nextInt();         int k=inputReader.nextInt();         int pos[]=inputReader.nextIntArray(k);         int power[]=inputReader.nextIntArray(k);         int answer[]=new int[n];         Arrays.fill(answer,(int)(2e9));         for (int i=0;i<k;i++)         {             answer[pos[i]-1]=power[i];         }         for (int i=1;i<n;i++)         {             answer[i]=Math.min(answer[i],answer[i-1]+1);         }         for (int i=n-2;i>=0;i--)         {             answer[i]=Math.min(answer[i],answer[i+1]+1);         }         for (int i=0;i<n;i++)         {             out.print(answer[i]+"" "");         }     }     static PrintWriter out=new PrintWriter((System.out));     public static void main(String args[])throws IOException     {         int t=inputReader.nextInt();         while(t-->0)         {             solve();             out.println();         }         out.close();     }      } ",1
632,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     static String f1(String s, int index) {         StringBuffer sb = new StringBuffer();         for(int i =0;i<s.length();i++){             if( i == index) sb.append(s.charAt(i));             else if (s.charAt(i) == '0') sb.append('1');             else sb.append('0');         }         return sb.toString();     }     static long solve(String s1, String s2) {         if(s1.equals(s2)) return 0;         int o1 = 0, o2 = 0, diff = 0;         for (int i = 0; i < s1.length(); i++) {             if (s1.charAt(i) == '1') o1++;             if (s2.charAt(i) == '1') o2++;             if (s1.charAt(i) != s2.charAt(i)) diff++;         }         return o1 == o2? diff : Integer.MAX_VALUE;     }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-- > 0) {             int n = Integer.parseInt(br.readLine());             String s1 = br.readLine();             String s2 = br.readLine();             long res = solve(s1, s2);             for(int i=0;i<s1.length();i++) {                 if(s1.charAt(i) == '1' && s2.charAt(i) == '1') {                     res = Math.min(res, 1 + solve(f1(s1, i), s2));                     break;                 }             }             for(int i=0;i<s1.length();i++) {                 if(s1.charAt(i) == '1' && s2.charAt(i) == '0') {                     res = Math.min(res,1 + solve(f1(s1, i), s2));                     break;                 }             }             if(res == Integer.MAX_VALUE) System.out.println(""-1"");             else System.out.println(res);         }     } } ","import java.io.*; import java.util.*; public class Menorah { public static void main(String[] args) throws Exception { FastIO in = new FastIO(); int t = in.nextInt(); for (int tc=0; tc<t; tc++) { int n = in.nextInt(); String original = in.next(); String target = in.next(); int numDiff = 0; int original1 = 0; int target1 = 0; for (int i=0; i<n; i++) { if (original.charAt(i)!=target.charAt(i)) { numDiff++; } if (original.charAt(i)=='1') original1++; if (target.charAt(i)=='1') target1++; } int evenAns = Integer.MAX_VALUE; int oddAns = Integer.MAX_VALUE; if (original1==target1) { evenAns = numDiff; } for (int i=0; i<n; i++) { if (original.charAt(i)=='1' && target.charAt(i)=='1') { int ones = (n-original1)+1; if (ones==target1) { oddAns = n-numDiff; } break; } } for (int i=0; i<n; i++) { if (original.charAt(i)=='1' && target.charAt(i)=='0') { int ones = (n-original1)+1; if (ones==target1) { oddAns = Math.min(n-numDiff+1, oddAns); } break; } } int ans = Math.min(evenAns, oddAns); if (ans==Integer.MAX_VALUE) System.out.println(-1); else System.out.println(ans); } } } ",0
633,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     static String f1(String s, int index) {         StringBuffer sb = new StringBuffer();         for(int i =0;i<s.length();i++){             if( i == index) sb.append(s.charAt(i));             else if (s.charAt(i) == '0') sb.append('1');             else sb.append('0');         }         return sb.toString();     }     static long solve(String s1, String s2) {         if(s1.equals(s2)) return 0;         int o1 = 0, o2 = 0, diff = 0;         for (int i = 0; i < s1.length(); i++) {             if (s1.charAt(i) == '1') o1++;             if (s2.charAt(i) == '1') o2++;             if (s1.charAt(i) != s2.charAt(i)) diff++;         }         return o1 == o2? diff : Integer.MAX_VALUE;     }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-- > 0) {             int n = Integer.parseInt(br.readLine());             String s1 = br.readLine();             String s2 = br.readLine();             long res = solve(s1, s2);             for(int i=0;i<s1.length();i++) {                 if(s1.charAt(i) == '1' && s2.charAt(i) == '1') {                     res = Math.min(res, 1 + solve(f1(s1, i), s2));                     break;                 }             }             for(int i=0;i<s1.length();i++) {                 if(s1.charAt(i) == '1' && s2.charAt(i) == '0') {                     res = Math.min(res,1 + solve(f1(s1, i), s2));                     break;                 }             }             if(res == Integer.MAX_VALUE) System.out.println(""-1"");             else System.out.println(res);         }     } } ","import java.io.*; import java.util.*; public class Solution {     public static void main(String[] args) throws Exception {         int tc = io.nextInt();         for (int i = 0; i < tc; i++) {             solve();         }         io.close();     }     private static void solve() throws Exception {         int n = io.nextInt();         String a = io.next();         String b = io.next();         int zz = 0;         int zo = 0;         int oo = 0;         int oz = 0;         for (int i = 0; i < a.length(); i++) {             if (a.charAt(i) == '1' && b.charAt(i) == '0') {                 oz++;             }             if (a.charAt(i) == '0' && b.charAt(i) == '0') {                 zz++;             }             if (a.charAt(i) == '1' && b.charAt(i) == '1') {                 oo++;             }             if (a.charAt(i) == '0' && b.charAt(i) == '1') {                 zo++;             }         }         int ans = Integer.MAX_VALUE;         if (oz == zo) {             ans = Math.min(ans, oz + zo);         }         if (oo - 1 == zz) {             ans = Math.min(ans, oo + zz);         }         if (ans == Integer.MAX_VALUE) {             ans = -1;         }         io.println(ans);     }               public static FastIO io = new FastIO();                } ",0
634,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     static final long M = 1000000007;          public static void main(String args[]) {         FastReader io = new FastReader();         new Solver().solve(io);     } } class Solver {     static final int M = 998244353;     void solve(FastReader io) {        int t = io.nextInt();        while(t-- > 0){            int n = io.nextInt();            String s[] = new String[n];            for(int i = 0;i < n;i++)s[i] = io.nextLine();            int ans = 0;            for(int i = 0;i < 5;i++){                int count[] = new int[n];                for(int j = 0;j < n;j++){                    int freq = 0;                    for(int k = 0;k < s[j].length();k++){                        if((s[j].charAt(k) - 'a') == i){                            freq++;                        }                    }                    count[j] = 2*freq - s[j].length();                }                Arrays.sort(count);                int curr = 0;                int j = n - 1;                for(;j >= 0 && (curr + count[j] > 0);j--){                    curr += count[j];                }                ans = Math.max(ans, n - j - 1);            }            System.out.println(ans);        }     }                                                        } ","import java.util.*;  public class Solution {     static Scanner sc=new Scanner(System.in);     public static void main(String args[]) {       int t=sc.nextInt();       outer:while(t-->0){         int n=sc.nextInt();         int[][] ct=new int[n][5];         int[] len=new int[n];         for (int i=0;i<n;i++) {             String s=sc.next();             len[i]=s.length();             for(char c:s.toCharArray()){                 ct[i][c-'a']++;             }         }         int mx=0;         for (int i=0;i<5;i++) {             int[] diff=new int[n];             for (int j=0;j<n;j++) {                 diff[j]=ct[j][i]-(len[j]-ct[j][i]);             }             Arrays.sort(diff);             int sum=0,inc=0;             for(int j=n-1;j>=0;j--){                 sum+=diff[j];                 if (sum>0) {                     inc++;                 }else {                     break;                 }             }             mx=Math.max(mx,inc);         }         System.out.println(mx);         }                }     } ",0
635,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     static final long M = 1000000007;          public static void main(String args[]) {         FastReader io = new FastReader();         new Solver().solve(io);     } } class Solver {     static final int M = 998244353;     void solve(FastReader io) {        int t = io.nextInt();        while(t-- > 0){            int n = io.nextInt();            String s[] = new String[n];            for(int i = 0;i < n;i++)s[i] = io.nextLine();            int ans = 0;            for(int i = 0;i < 5;i++){                int count[] = new int[n];                for(int j = 0;j < n;j++){                    int freq = 0;                    for(int k = 0;k < s[j].length();k++){                        if((s[j].charAt(k) - 'a') == i){                            freq++;                        }                    }                    count[j] = 2*freq - s[j].length();                }                Arrays.sort(count);                int curr = 0;                int j = n - 1;                for(;j >= 0 && (curr + count[j] > 0);j--){                    curr += count[j];                }                ans = Math.max(ans, n - j - 1);            }            System.out.println(ans);        }     }                                                        } ","import java.util.*; import java.io.*; public class Solution {                                static long dp[][];                                                       public static void main(String []args) throws IOException     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                 while(t-- > 0)         {             int n = sc.nextInt();             sc.nextLine();                          int arr[][] = new int[26][n];             for(int i = 0 ; i < n ; i++)             {                 String s = sc.nextLine();                                  for(int j = 0 ; j < 26 ; j++)                 {                     int cnt = 0;                     for(int k = 0 ; k < s.length() ; k++)                     {                         if(s.charAt(k)-'a' == j)                         cnt++;                     }                     arr[j][i] = 2*cnt-s.length();                 }             }                          int ans = 0;             for(int i = 0 ; i < 26 ; i++)             {              Arrays.sort(arr[i]);                 int tot = 0;              for(int j = n-1 ; j >= 0 ;j--)              {                  tot += arr[i][j];                  if(tot <= 0)                  break;                                    ans = Math.max(ans,n-j);              }             }             System.out.println(ans);         }     } } ",0
636,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     static final long M = 1000000007;          public static void main(String args[]) {         FastReader io = new FastReader();         new Solver().solve(io);     } } class Solver {     static final int M = 998244353;     void solve(FastReader io) {        int t = io.nextInt();        while(t-- > 0){            int n = io.nextInt();            String s[] = new String[n];            for(int i = 0;i < n;i++)s[i] = io.nextLine();            int ans = 0;            for(int i = 0;i < 5;i++){                int count[] = new int[n];                for(int j = 0;j < n;j++){                    int freq = 0;                    for(int k = 0;k < s[j].length();k++){                        if((s[j].charAt(k) - 'a') == i){                            freq++;                        }                    }                    count[j] = 2*freq - s[j].length();                }                Arrays.sort(count);                int curr = 0;                int j = n - 1;                for(;j >= 0 && (curr + count[j] > 0);j--){                    curr += count[j];                }                ans = Math.max(ans, n - j - 1);            }            System.out.println(ans);        }     }                                                        } ","import java.util.*; import java.util.Map.Entry; import java.lang.*; import java.io.*; import java.math.BigInteger; public class CF { private static FS sc = new FS(); static int mod = 998244353; static int max = (int) 1e6, sq = 316; static LinkedList<Integer>[] temp; static class pair implements Comparator<pair>{ int val1; int val2; int idx; pair(int x, int y, int z) { val1 = x; val2 = y; idx = z; } pair() {} } public static void main(String[] args) { int t = sc.nextInt(); StringBuilder ret = new StringBuilder(); while(t-- > 0) { int n = sc.nextInt(); String[] s = new String[n]; int[][] pre = new int[n][5]; for(int i = 0; i < n; i++) { s[i] = sc.next(); for(int j = 0; j < s[i].length(); j++) { pre[i][s[i].charAt(j)-'a']++; } } int max = 0; for(int i = 0; i < 5; i++) { int[] vis = new int[n]; int co = 0, toC = 0, oth = 0; for(int j = 0; j < n; j++) { int tot = 0; for(int aa:pre[j]) tot += aa; int rem = tot-pre[j][i]; if(pre[j][i] > rem) { co++; toC += pre[j][i]; vis[j] = 1; oth += rem; } } PriorityQueue<pair> q = new PriorityQueue<>(new pair()); for(int j = 0; j < n; j++) { if(vis[j] == 1) continue; int tot = 0; for(int aa:pre[j]) tot += aa; int rem = tot - pre[j][i]; q.add(new pair(pre[j][i], rem, j)); } while(!q.isEmpty()) { pair cur = q.poll(); if(cur.val1 + toC > cur.val2+oth) { toC += cur.val1; oth += cur.val2; co++; } } max = Math.max(max, co); } ret.append(max + ""\n"");    } System.out.println(ret); } } ",0
637,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main3 {     public static void main(String[] args) {         FastReader in = new FastReader();         int t = in.nextInt();         while(t-- > 0) {             int n = in.nextInt();             int m = in.nextInt();             int x = in.nextInt();             List<Block> arr = new ArrayList<>();             for(int i = 0; i < n; i++) {                 arr.add(new Block(in.nextInt(), i));             }             if(m == 1) {                 System.out.println(""YES"");                 for(int i = 0; i < n; i++) {                     System.out.print(1 + "" "");                 }                 System.out.println();                 continue;             }             arr.sort(Comparator.reverseOrder());             long[] towers = new long[m];             int ind = 0;             boolean right = true;             int[] ans = new int[n];             for(int i = 0; i < n; i++) {                 int nextInd;                 if(right) {                     if(ind == m - 1) {                         right = false;                         nextInd = ind - 1;                     } else {                         nextInd = ind + 1;                     }                 } else {                     if(ind == 0) {                         right = true;                         nextInd = ind + 1;                     } else {                         nextInd = ind - 1;                     }                 }                 if(towers[ind] <= towers[nextInd]) {                     towers[ind] += arr.get(i).weight;                     ans[arr.get(i).index] = ind + 1;                 } else {                     towers[nextInd] += arr.get(i).weight;                     ans[arr.get(i).index] = nextInd + 1;                     ind = nextInd;                 }             }             boolean success = true;             for(int i = 0; i < m - 1; i++) {                 if(Math.abs(towers[i] - towers[i + 1]) > x) {                     success = false;                     break;                 }             }             if(success) {                 System.out.println(""YES"");                 for(int i = 0; i < n; i++) {                     System.out.print(ans[i] + "" "");                 }                 System.out.println();             } else {                 System.out.println(""NO"");             }         }     }     static class Block implements Comparable<Block> {         int weight;         int index;         public Block(int weight, int index) {             this.weight = weight;             this.index = index;         }              }      } ","import java.util.*; import java.io.*; public class C { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); StringBuilder sb = new StringBuilder(); while(T-->0) { int n = sc.nextInt(); int m = sc.nextInt(); long x = sc.nextLong(); long[] arr = new long[n]; for(int i = 0; i < n; i++) { arr[i] = sc.nextLong(); } int[] res = new int[n]; PriorityQueue<Pair> q = new PriorityQueue<>(); for(int i = 0; i < m; i++) { q.add(new Pair(i+1, 0)); } for(int i = 0; i < n; i++) { Pair p = q.poll(); res[i] = p.i; q.add(new Pair(p.i, p.w + arr[i])); } sb.append(""YES\n""); for(int i = 0; i < n; i++) { sb.append(res[i]+"" ""); } sb.replace(sb.length()-1, sb.length(), ""\n""); } PrintWriter pw = new PrintWriter(System.out); pw.println(sb.toString().trim()); pw.flush(); } static class Pair implements Comparable<Pair>{ int i; long w; public Pair(int i, long w) { this.i = i; this.w = w; } public String toString() { return i+"" ""+w; } } } ",0
638,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Practice {     static int[][] vals;     static ArrayList<ArrayList<Integer>> adjList;     static long[][] ans;     public static void main(String[] args) throws IOException {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(bu.readLine());         while (t-- > 0) {             Integer n = Integer.parseInt(bu.readLine());             vals = new int[2][n];             adjList = new ArrayList<>();             for(int i=0;i<n;i++){                 String st[]=bu.readLine().split("" "");                 vals[0][i] = Integer.parseInt(st[0]);                 vals[1][i] = Integer.parseInt(st[1]);                 adjList.add(new ArrayList<>());             }             for(int i=0;i<n-1;i++){                 String st[]=bu.readLine().split("" "");                 int source = Integer.parseInt(st[0]);; int dest = Integer.parseInt(st[1]);;                 adjList.get(source-1).add(dest-1);                 adjList.get(dest-1).add(source-1);             }             ans = new long[2][n];             DFS(0, adjList, -1, ans, vals);             System.out.println(Math.max(ans[0][0], ans[1][0]));         }     }     private static void DFS(Integer current, ArrayList<ArrayList<Integer>> adjList, Integer prev, long[][] ans, int[][] vals) {         ans[0][current] = 0L; ans[1][current] = 0L;         for(Integer node: adjList.get(current)){             if(node.equals(prev)) continue;             DFS(node, adjList, current, ans, vals);             ans[0][current] += Math.max(ans[0][node] + Math.abs(vals[0][current] - vals[0][node]), ans[1][node] + Math.abs(vals[0][current] - vals[1][node]));             ans[1][current] += Math.max(ans[0][node] + Math.abs(vals[1][current] - vals[0][node]) , ans[1][node] + Math.abs(vals[1][current] - vals[1][node]));         }     } } ","import java.util.*; import java.io.*; import java.lang.*; public class CodeChef { static long dp[][]; public static void main (String[] args) throws java.lang.Exception { BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); int t=Integer.parseInt(br.readLine()); while(t-->0) { int n=Integer.parseInt(br.readLine()); int arr[][]=new int[n+1][2]; for(int i=1;i<=n;i++) { String str[]=br.readLine().split("" ""); int l=Integer.parseInt(str[0]);int r=Integer.parseInt(str[1]); arr[i][0]=l;arr[i][1]=r; } dp=new long[n+1][2]; Set<Integer>adj[]=new HashSet[n+1]; for(int i=0;i<=n;i++)adj[i]=new HashSet(); for(int i=0;i<n-1;i++) { String str[]=br.readLine().split("" ""); int src=Integer.parseInt(str[0]);  int dest=Integer.parseInt(str[1]); adj[src].add(dest); adj[dest].add(src); } fun(1,adj,arr);System.out.println(Math.max(dp[1][0], dp[1][1])); } } static void fun(int root,Set<Integer>[] adj,int arr[][]) { dp[root][0]=dp[root][1]=0; Iterator<Integer>iter=adj[root].iterator(); while(iter.hasNext()) { int i=iter.next(); adj[i].remove(root); fun(i,adj,arr); dp[root][0]+=Math.max(Math.abs(arr[root][0]-arr[i][0])+dp[i][0], Math.abs(arr[root][0]-arr[i][1])+dp[i][1]); dp[root][1]+=Math.max(Math.abs(arr[root][1]-arr[i][0])+dp[i][0], Math.abs(arr[root][1]-arr[i][1])+dp[i][1]); } } } ",1
639,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Practice {     static int[][] vals;     static ArrayList<ArrayList<Integer>> adjList;     static long[][] ans;     public static void main(String[] args) throws IOException {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(bu.readLine());         while (t-- > 0) {             Integer n = Integer.parseInt(bu.readLine());             vals = new int[2][n];             adjList = new ArrayList<>();             for(int i=0;i<n;i++){                 String st[]=bu.readLine().split("" "");                 vals[0][i] = Integer.parseInt(st[0]);                 vals[1][i] = Integer.parseInt(st[1]);                 adjList.add(new ArrayList<>());             }             for(int i=0;i<n-1;i++){                 String st[]=bu.readLine().split("" "");                 int source = Integer.parseInt(st[0]);; int dest = Integer.parseInt(st[1]);;                 adjList.get(source-1).add(dest-1);                 adjList.get(dest-1).add(source-1);             }             ans = new long[2][n];             DFS(0, adjList, -1, ans, vals);             System.out.println(Math.max(ans[0][0], ans[1][0]));         }     }     private static void DFS(Integer current, ArrayList<ArrayList<Integer>> adjList, Integer prev, long[][] ans, int[][] vals) {         ans[0][current] = 0L; ans[1][current] = 0L;         for(Integer node: adjList.get(current)){             if(node.equals(prev)) continue;             DFS(node, adjList, current, ans, vals);             ans[0][current] += Math.max(ans[0][node] + Math.abs(vals[0][current] - vals[0][node]), ans[1][node] + Math.abs(vals[0][current] - vals[1][node]));             ans[1][current] += Math.max(ans[0][node] + Math.abs(vals[1][current] - vals[0][node]) , ans[1][node] + Math.abs(vals[1][current] - vals[1][node]));         }     } } ","import java.util.*; import static java.lang.Math.*; import java.io.*; public class S {               public static void main(String args[])throws IOException{               BufferedReader br = new  BufferedReader(new InputStreamReader(System.in));               int test = Integer.parseInt(br.readLine());               while(test > 0){                     test--;                         int n = Integer.parseInt(br.readLine());                         int a[][] = new int[n][2];                         for(int i = 0; i < n; i++){                               StringTokenizer st = new StringTokenizer(br.readLine());                               a[i][0] = Integer.parseInt(st.nextToken());                               a[i][1] = Integer.parseInt(st.nextToken());                         }                         Map<Integer, List<Integer>> g = new HashMap<Integer, List<Integer>>();                         for(int i = 0; i < n-1; i++){                               StringTokenizer st = new StringTokenizer(br.readLine());                               int u = Integer.parseInt(st.nextToken());                               int v = Integer.parseInt(st.nextToken());                               u--;                               v--;                               if(!g.containsKey(u))g.put(u, new ArrayList<Integer>());                               g.get(u).add(v);                               if(!g.containsKey(v))g.put(v, new ArrayList<Integer>());                               g.get(v).add(u);                         }                         solve(n, a, g);                                                                                                                                                                                                         }       }              public static void solve(int n, int a[][], Map<Integer, List<Integer>> g){             Map<Integer, long[]> dp = new HashMap<Integer, long[]>();             boolean visited[] =  new boolean[n];             long ans = 0;             visited[0] = true;             long part[] = dfs(a, g, 0, visited, dp);             ans = Math.max(part[0], part[1]);             System.out.println(ans);       }              public static long[] dfs(int a[][], Map<Integer, List<Integer>> g, int node, boolean visited[], Map<Integer, long[]> dp){             if(dp.containsKey(node)){                   return dp.get(node);             }             List<Integer> children = g.get(node);             if(children == null)return new long[]{0, 0};             long ansL = 0;             long ansR = 0;             for(int child : children){                   if(!visited[child]){                         visited[child] = true;                         long sol[] = dfs(a, g, child, visited, dp);                         ansL += Math.max(sol[0] + Math.abs(a[node][0] - a[child][0]), sol[1] + Math.abs(a[node][0] - a[child][1]));                         ansR += Math.max(sol[0] + Math.abs(a[node][1] - a[child][0]), sol[1] + Math.abs(a[node][1] - a[child][1]));                   }             }             long ans[] = new long[]{ansL, ansR};             dp.put(node, ans);             return ans;                    }               } ",0
640,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Solution {                         public static void main(String[] args) {         MyScanner sc = new MyScanner();         int t = sc.nextInt();         while (t-- != 0) {             int n = sc.nextInt();             long a[] = new long[n];             for(int i=0;i<n;i++){                 a[i] = sc.nextLong();             }             long mineA = a[0];             long mineB = a[1];             long accA =0 ;             long accB = 0;             long remA = n;             long remB = n;             long ans = (mineA * n) + (mineB *n);             boolean check = true;             for(int i =2;i<n;i++){                 if(check){                     check = false;                     long x = Math.min(a[i],mineA);                     long y = Math.max(a[i],mineA);                     mineA = x;                     accA += y;                     remA --;                     long sug = (accA +  remA * mineA) + (accB + remB * mineB);                     ans = Math.min(sug , ans);                 }else{                     check = true;                     long x = Math.min(a[i],mineB);                     long y = Math.max(a[i],mineB);                     mineB = x;                     accB += y;                     remB --;                     long sug = (accA +  remA * mineA) + (accB + remB * mineB);                     ans = Math.min(sug,ans);                 }             }             System.out.println(ans);         }     } } ","import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.nio.file.Paths; import java.util.ArrayList; import java.util.Arrays; import java.util.InputMismatchException; import java.util.List; import java.util.Map.Entry; import java.util.TreeMap; public class Main { public Main() throws FileNotFoundException { long t = System.currentTimeMillis(); InputReader reader = new InputReader(); int ttt = reader.nextInt(); for (int tt = 0; tt < ttt; tt++) { int n=reader.nextInt(); long[] s=new long[n]; for(int i=0;i<n;i++) { s[i]=reader.nextLong(); } long smallest1=s[0]; long smallest2=s[1]; long val=n*s[0]+n*s[1]; int left1=n-1; int left2=n-1; long base=s[0]+s[1]; for(int i=2;i<n;i++) { if(i%2==0) { val=Math.min(val, base+left2*smallest2+left1*s[i]); base+=s[i]; smallest1=Math.min(smallest1, s[i]); left1--; }else { val=Math.min(val, base+left1*smallest1+left2*s[i]); base+=s[i]; smallest2=Math.min(smallest2, s[i]); left2--; } } System.out.println(val); } } public static void main(String[] args) throws FileNotFoundException { new Main(); } } ",0
641,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class a {    static int depth[];    static ArrayList<Integer> tree[];    static int diameter=0;     public static void main(String[] args) {         FastReader input=new FastReader();         int t=input.nextInt();         while (t-->0){             diameter=0;             int n=input.nextInt();             int a=input.nextInt();             int b=input.nextInt();             int da=input.nextInt();             int db=input.nextInt();             depth=new int[n+1];             tree=new ArrayList[n+1];             for (int i = 0; i <=n ; i++) {                 tree[i]=new ArrayList<>();             }             for (int i = 0; i <n-1 ; i++) {                 int x=input.nextInt();                 int y=input.nextInt();                 tree[x].add(y);                 tree[y].add(x);             }             dfs(a,0);             if (2 * da >= Math.min(diameter, db) ||depth[b]<=da){                 System.out.println(""Alice"");             }else {                 System.out.println(""Bob"");             }        }     }     private static int dfs(int root, int p) {         int len=0;         for(int child:tree[root]){             if (child!=p){                 depth[child]=depth[root]+1;                 int curr=1+dfs(child,root);                 diameter=Math.max(diameter,curr+len);                 len=Math.max(len,curr);             }         }         return len;     }      } ","import java.io.*; import java.util.*; import static java.lang.Math.*; public class Codeforces {     public static void main(String[] args) throws IOException {                           InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();         solver.solve(in.nextInt(), in, out);         out.close();     }     static class TaskA {         long mod = (long)(1000000007);         long fact[];         int depth[];         int parentTable[][];         int degree[];         ArrayList<Integer> leaves;         int max = Integer.MIN_VALUE;         int min = Integer.MAX_VALUE;         int diam = 0;         public void solve(int testNumber, InputReader in, PrintWriter out) throws IOException {             while(testNumber-->0){                 int n = in.nextInt();                 int a = in.nextInt();                 int b = in.nextInt();                 int na = in.nextInt();                 int nb = in.nextInt();                 ArrayList<ArrayList<Integer>> g = new ArrayList<>();                 for(int i=0;i<=n;i++)                     g.add(new ArrayList<>());                 for(int i=1;i<n;i++){                     int u = in.nextInt();                     int v = in.nextInt();                     g.get(u).add(v);                     g.get(v).add(u);                 }                 if(2*na>=nb){                     out.println(""Alice"");                     continue;                 }                                  depth = new int[n+1];                 diam = 0;                 dfs(g , a , 0);                 int distance = depth[b];                                  if(distance <= na){                     out.println(""Alice"");                     continue;                 }                 if(2*na >= min(nb , diam))                     out.println(""Alice"");                 else                     out.println(""Bob"");                                                                                                                                                                                                                                                                                             }         }           int dfs(ArrayList<ArrayList<Integer>> a , int x, int p) {             int len = 0;             for(int y : a.get(x)) {                 if(y != p) {                     depth[y] = depth[x] + 1;                     int cur = 1 + dfs(a , y, x);                     diam = max(diam, cur + len);                     len = max(len, cur);                 }             }             return len;         }                                                                                                                                                                                                                                                                                                                                                                                                                                   }      } ",1
642,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class a {    static int depth[];    static ArrayList<Integer> tree[];    static int diameter=0;     public static void main(String[] args) {         FastReader input=new FastReader();         int t=input.nextInt();         while (t-->0){             diameter=0;             int n=input.nextInt();             int a=input.nextInt();             int b=input.nextInt();             int da=input.nextInt();             int db=input.nextInt();             depth=new int[n+1];             tree=new ArrayList[n+1];             for (int i = 0; i <=n ; i++) {                 tree[i]=new ArrayList<>();             }             for (int i = 0; i <n-1 ; i++) {                 int x=input.nextInt();                 int y=input.nextInt();                 tree[x].add(y);                 tree[y].add(x);             }             dfs(a,0);             if (2 * da >= Math.min(diameter, db) ||depth[b]<=da){                 System.out.println(""Alice"");             }else {                 System.out.println(""Bob"");             }        }     }     private static int dfs(int root, int p) {         int len=0;         for(int child:tree[root]){             if (child!=p){                 depth[child]=depth[root]+1;                 int curr=1+dfs(child,root);                 diameter=Math.max(diameter,curr+len);                 len=Math.max(len,curr);             }         }         return len;     }      } ","import java.util.*; import java.io.*; public class D {     static ArrayList<Integer> adj[] = new ArrayList[(int)1e5+7];     static int diameter = 0;     static int[] depth = new int[(int)1e5 + 7];     public static void main(String[] args) {         FastReader in = new FastReader();         int t = in.nextInt();         while(t-- > 0){             int n = in.nextInt();             int a = in.nextInt(), b = in.nextInt(), da = in.nextInt(), db = in.nextInt();             for(int i = 1; i <= n; i++){                 adj[i] = new ArrayList<>();             }             for(int i = 1; i <=n; i++){                 adj[i].clear();             }             for(int i = 0; i < n- 1; i++){                 int u = in.nextInt();                 int v = in.nextInt();                 adj[u].add(v);                 adj[v].add(u);             }             diameter = 0;             depth[a] = 0;             dfs(a, -1);             System.out.println(2 * da >= Math.min(diameter, db) || depth[b] <= da ? ""Alice"" : ""Bob"");         }     }     static int dfs(int node, int parent){         int len = 0;         for(int x : adj[node]){             if(x != parent){                 depth[x] = depth[node] + 1;                 int cur = 1 + dfs(x, node);                 diameter = Math.max(diameter, cur + len);                 len = Math.max(len, cur);             }         }         return len;     }           } ",1
643,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Arrays; import java.util.HashSet; import java.util.StringTokenizer; public class A {     static int[][] A;     static long[][] B;     static ArrayList<ArrayList<Integer>> ar;     public static void main(String[] args)     {         CP sc =new CP();         int tt = sc.nextInt();         while (tt-- > 0) {             int n = sc.nextInt();             ar = new ArrayList<>();             for(int i=0;i<n+1;i++)                 ar.add(new ArrayList<>());             A = new int[n+1][2];             B = new long[n+1][2];             for(int i=1;i<n+1;i++) {                 A[i][0] = sc.nextInt();                 A[i][1] = sc.nextInt();             }             for(int i=0;i<n-1;i++){                 int u=  sc.nextInt();                 int v = sc.nextInt();                 ar.get(u).add(v);                 ar.get(v).add(u);             }                                       DFS(1, -1);             System.out.println(Math.max(B[1][0], B[1][1]));         }     }     static long max = Long.MIN_VALUE;     static void DFS(int curr, int parent){         B[curr][0] =0; B[curr][1] = 0;         for(int i : ar.get(curr)){             if(parent!=i) {                 DFS(i, curr);                 B[curr][0] += Math.max(B[i][0] + Math.abs(A[curr][0] - A[i][0]), B[i][1] + Math.abs(A[curr][0] - A[i][1]));                 B[curr][1] += Math.max(B[i][0] + Math.abs(A[curr][1] - A[i][0]), B[i][1] + Math.abs(A[curr][1] - A[i][1]));             }         }              }                } ","import java.util.*; import java.io.*; public class Main {     static long[][]dp;     static ArrayList<Integer>[]adj;     static int[][]arr;          public static void main(String[] args) {         FastScanner sc=new FastScanner();         int t=sc.nextInt();         while(t-->0){             int n=sc.nextInt();             arr=new int[n][2];             adj=new ArrayList[n];             for(int i=0;i<n;i++){                 arr[i][0]=sc.nextInt();                 arr[i][1]=sc.nextInt();                 adj[i]=new ArrayList<>();             }             for(int i=0;i<n-1;i++){                 int a=sc.nextInt()-1;                 int b=sc.nextInt()-1;                    adj[a].add(b);                 adj[b].add(a);             }             dp=new long[n][2];             dfs(0,-1);             System.out.println(Math.max(dp[0][0],dp[0][1]));         }     }     public static void dfs(int v,int parent){         for(int u:adj[v]){             if(u!=parent){                 dfs(u,v);             }         }         long ans1=0;         long ans2=0;         for(int u:adj[v]){             if(u!=parent){                 long a=Math.abs(arr[v][0]-arr[u][0])+dp[u][0];                 long b=Math.abs(arr[v][0]-arr[u][1])+dp[u][1];                 long a1=Math.abs(arr[v][1]-arr[u][0])+dp[u][0];                 long b1=Math.abs(arr[v][1]-arr[u][1])+dp[u][1];                 ans1+=Math.max(a,b);                 ans2+=Math.max(a1,b1);             }         }         dp[v][0]=ans1;         dp[v][1]=ans2;     } } ",0
644,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Arrays; import java.util.StringTokenizer; public class C { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); for (int tt=1; tt<=T; tt++) { int n=fs.nextInt(); int m=fs.nextInt(); int x=fs.nextInt(); int arr[]=fs.readArray(n); if(m>n) { System.out.println(""NO""); continue; } int copy[]=new int [n]; for(int i=0;i<n;i++) { copy[i]=arr[i]; } Arrays.sort(copy); ArrayList<Integer> container[]= new ArrayList[x+1]; for(int i=1;i<=x;i++) { container[i]=new ArrayList<Integer>(); } for(int i=0;i<m;i++) { for(int j=i;j<n;j+=m) { container[copy[j]].add(i+1); } } int counter[]=new int [n]; for(int i=0;i<n;i++) { counter[i]=container[arr[i]].get(0); container[arr[i]].remove(0); } System.out.println(""YES""); for(int i=0;i<n;i++) { System.out.print(counter[i]+"" ""); } System.out.println(); } } } ","import java.util.*; import java.io.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; public class Test{     static class Pair implements Comparable<Pair>{     int wt;     int idx;     Pair(int x,int y){         this.wt=x;         this.idx=y;     }           }        public static void main (String[] args) throws java.lang.Exception{         FastReader scan=new FastReader();         int t=scan.nextInt();         while(t-->0){             int n=scan.nextInt();             int m=scan.nextInt();             int x=scan.nextInt();             int[]arr=new int[n];             for(int i=0;i<n;i++){                 arr[i]=scan.nextInt();             }             Queue<Pair>q=new PriorityQueue<>();             for(int i=1;i<=m;i++){                 q.add(new Pair(0,i));             }             System.out.println(""YES"");             for(int i=0;i<n;i++){                 Pair temp=q.poll();                 int wt=temp.wt;                 int idx=temp.idx;                 System.out.print(idx+"" "");                                  q.add(new Pair(wt+arr[i],idx));             }             System.out.println();         }     }          } ",0
645,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.StringTokenizer; public class Interesting_Story {     public static void main(String[] args) {         FastScanner sc = new FastScanner();         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             List<String> l = new ArrayList<>();             for (int i = 0; i < n; i++) {                 l.add(sc.next());             }             int res = 0;             for (int i = 0; i <= 5; i++) {                 List<Integer> myL = new ArrayList<>();                 for (String s : l) {                     int count1 = 0, count2 = 0;                     for (char ch : s.toCharArray()) {                         if (ch == (char) (i + 97)) {                             count1++;                         } else {                             count2++;                         }                     }                     myL.add(count2 - count1);                 }                                  Collections.sort(myL);                 int sum = 0;                 for (int m = 0; m < myL.size(); m++) {                     sum += myL.get(m);                     if (sum < 0) {                         res = Math.max(res, m + 1);                     }                 }             }             System.out.println(res);         }     } } ","import java.util.Arrays; import java.util.Comparator; import java.util.Scanner; public class One {     static class Word {         int a = 0;         int b = 0;         int c = 0;         int d = 0;         int e = 0;         int total = 0;         String s = """";              }     static class CompA implements Comparator<Word> {              }     static class CompB implements Comparator<Word> {              }     static class CompC implements Comparator<Word> {              }     static class CompD implements Comparator<Word> {              }     static class CompE implements Comparator<Word> {              }     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         while (t != 0) {             t--;             int n = scan.nextInt();             Word[] words = new Word[n];             for (int i = 0 ; i < n ; i++) {                 String s = scan.next();                 Word word = new Word();                 word.s = s;                 for (int j = 0 ; j < s.length() ; j++) {                     if (s.charAt(j) == 'a') {                         word.a++;                     } else if (s.charAt(j) == 'b') {                         word.b++;                     } else if (s.charAt(j) == 'c') {                         word.c++;                     } else if (s.charAt(j) == 'd') {                         word.d++;                     } else if (s.charAt(j) == 'e') {                         word.e++;                     }                     word.total++;                 }                 words[i] = word;             }             int answer = 0;             int main = 0;             int other = 0;             int count = 0;             Arrays.sort(words, new CompA());             for (int i = 0 ; i < n ; i++) {                 main += words[i].a;                 other += words[i].total - words[i].a;                 if (main > other) {                     count++;                 } else {                     break;                 }             }             answer = Math.max(answer, count);             main = 0;             other = 0;             count = 0;             Arrays.sort(words, new CompB());             for (int i = 0 ; i < n ; i++) {                 main += words[i].b;                 other += words[i].total - words[i].b;                 if (main > other) {                     count++;                 } else {                     break;                 }             }             answer = Math.max(answer, count);             main = 0;             other = 0;             count = 0;             Arrays.sort(words, new CompC());             for (int i = 0 ; i < n ; i++) {                 main += words[i].c;                 other += words[i].total - words[i].c;                 if (main > other) {                     count++;                 } else {                     break;                 }             }             answer = Math.max(answer, count);             main = 0;             other = 0;             count = 0;             Arrays.sort(words, new CompD());             for (int i = 0 ; i < n ; i++) {                 main += words[i].d;                 other += words[i].total - words[i].d;                 if (main > other) {                     count++;                 } else {                     break;                 }             }             answer = Math.max(answer, count);             main = 0;             other = 0;             count = 0;             Arrays.sort(words, new CompE());             for (int i = 0 ; i < n ; i++) {                 main += words[i].e;                 other += words[i].total - words[i].e;                 if (main > other) {                     count++;                 } else {                     break;                 }             }             answer = Math.max(answer, count);             System.out.println(answer);         }         scan.close();     } } ",0
646,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class SetOrDecrease {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while(t>0){             String []nk=br.readLine().split("" "");             int n=Integer.parseInt(nk[0]);             long k=Long.parseLong(nk[1]);             String []str=br.readLine().split("" "");             List<Integer> list=new ArrayList<>();             for(int i=0;i<n;i++)                 list.add(Integer.parseInt(str[i]));             Collections.sort(list);             long sum=0;             for(int i=0;i<n;i++)                 sum+=list.get(i);             if(sum<=k)                 System.out.println(0);             else {                 long minSteps = sum - k;                 long drop=0;                 long targetDrop = sum-k;                 for (int i = n - 1; i > 0; i--) {                                          drop += list.get(i) - list.get(0);                     if (drop >= targetDrop) {                         if (minSteps > n - i)                             minSteps = n - i;                     } else {                         long diff = targetDrop - drop;                         long div = diff / (n - i + 1);                         long rem = diff % (n - i + 1);                         long steps = rem > 0 ? (div + 1) + n - i : div + n - i;                         if (minSteps > steps)                             minSteps = steps;                     }                 }                 System.out.println(minSteps);             }             t--;         }     } } ","import java.awt.image.AreaAveragingScaleFilter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class CF1 {     public static void main(String[] args) {         FastScanner sc=new FastScanner();         int T=sc.nextInt();         for (int tt=0; tt<T; tt++){             int n = sc.nextInt();             long k = sc.nextLong();             int arr[]= sc.readArray(n);             sort(arr);             long sum=0L;             long ans=Integer.MAX_VALUE;             long min= (long)arr[0];             for (int i=0; i<n; i++){                 sum+=arr[i];             }             if (sum<=k) System.out.println(0);             else {                 long temp=sum;                 long x=0L;                 long y=0L;                 for (int i=n-1; i>=1; i--){                     temp=sum;                                          y++;                     x+=arr[i];                     temp-=x-y*min;                     if (temp<=k) {                         ans=Math.min(ans,y);                         break;                     }                     else {                         long b=(temp-k);                         if (b%(y+1)==0){                             b/=(y+1);                         }                         else {                             b/=(y+1);                             b++;                         }                         ans=Math.min(ans, y+b);                     }                 }                 if (n==1){                     ans=arr[0]-k;                 }                 ans= Math.min(ans, sum-k);                 System.out.println(ans);             }         }     }     static long mod =998244353L;               static void sort(int[] a) {         ArrayList<Integer> l=new ArrayList<>();         for (int i:a) l.add(i);         Collections.sort(l);         for (int i=0; i<a.length; i++) a[i]=l.get(i);     }                     } ",0
647,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class P4 { static int dp[][]=new int[5000+1][5000+1]; public static void main(String[] args) { FastReader sc=new FastReader(); int t=1; StringBuilder s=new StringBuilder(); while(t--!=0) { int n=sc.nextInt(); int a[]=new int[n]; for(int i=0;i<=n;i++) { for(int j=0;j<=n;j++) { P4.dp[i][j]=-1; } } ArrayList<Integer> one=new ArrayList<>(); ArrayList<Integer> zero=new ArrayList<>(); for(int i=0;i<n;i++) { a[i]=sc.nextInt(); if(a[i]==0) { zero.add(i); }else { one.add(i); } } Collections.sort(zero); Collections.sort(one); long ans=sol(0,0,zero.size(),one.size(),a,zero,one); System.out.println(ans); } } private static long sol(int i, int j, int n, int m,int a[], ArrayList<Integer> zero, ArrayList<Integer> one) { if(j==m) { return 0; } int av=n-i; int rem=m-j; if(av<rem) { return Integer.MAX_VALUE-1; } if(dp[i][j]!=-1) { return dp[i][j]; } long ans1=sol(i+1,j,n,m,a, zero, one); long ans2=Math.abs(zero.get(i)-one.get(j))+sol(i+1,j+1,n,m,a, zero, one); dp[i][j]=(int) Math.min(ans1, ans2); return dp[i][j]; }   } ","import java.io.*; import java.util.*; public class D {  static ArrayList<Integer> taken,vacant; static long dp[][];     public static void main(String[] args)  {  FastReader sc=new FastReader();  StringBuffer ans=new StringBuffer(); int test=1; while(test-->0) { int n=sc.nextInt(); taken=new ArrayList<>();; vacant=new ArrayList<>(); dp=new long[n+1][n+1]; for(int i=0;i<=n;i++) { Arrays.fill(dp[i], -1); } for(int i=0;i<n;i++) { if(sc.nextInt() == 1) taken.add(i); else vacant.add(i); } long res =solve(0,0,taken.size(),vacant.size()); ans.append(res+""\n""); }     System.out.print(ans); }        static long solve(int t1,int v1,int nt1,int nv1) {               if(t1 == nt1) return 0;               if(v1 == nv1) return Integer.MAX_VALUE;               if(nt1-t1 > nv1-v1) return Integer.MAX_VALUE;                    if(dp[t1][v1] != -1) return dp[t1][v1];          long op1 = solve(t1+1,v1+1,nt1,nv1) + Math.abs(vacant.get(v1)-taken.get(t1));     long op2 = solve(t1,v1+1,nt1,nv1);          return dp[t1][v1]=Math.min(op1, op2);     }                    static final Random random=new Random();        } ",0
648,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; public class ProblemC {     public static void main(String[] args)throws IOException {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         StringBuilder print=new StringBuilder();         int test=Integer.parseInt(br.readLine());         while(test--!=0){             int n=Integer.parseInt(br.readLine());             ArrayList<Story> stories[]=new ArrayList[5];             for(int i=0;i<5;i++){                 stories[i]=new ArrayList<>();             }             for(int i=1;i<=n;i++){                 char c[]=br.readLine().toCharArray();                 int freq[]=new int[5];                 for(int j=0;j<c.length;j++){                     freq[c[j]-97]++;                 }                 for(int j=0;j<5;j++){                     stories[j].add(new Story(freq[j],c.length-freq[j]));                 }             }             for(int i=0;i<5;i++){                 Collections.sort(stories[i]);             }             int max=0;             for(int i=0;i<5;i++){                 int def=0;                 int count=0;                 for(Story story:stories[i]){                     int diff=story.diff;                     if(def+diff<=0){                         break;                     }                     else{                         def+=diff;                         count++;                     }                 }                 max=Math.max(max,count);             }             print.append(max+""\n"");         }         System.out.print(print);     } } class Story implements Comparable<Story>{     int x,y,diff;     public Story(int x,int y){         this.x=x;         this.y=y;         this.diff=this.x-this.y;     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayDeque; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Random; import java.util.StringTokenizer; public class P4 { static int N = 1000001; static long[] factorialNumInverse = new long[N + 1]; static long[] naturalNumInverse = new long[N + 1]; static long[] fact = new long[N + 1]; public static void main(String[] args) { FastReader sc = new FastReader(); int t; t = sc.nextInt(); StringBuilder st = new StringBuilder(); while (t-- != 0) { int n=sc.nextInt(); String s[]=new String[n]; for(int i=0;i<n;i++) { s[i]=sc.nextLine(); } int max=0; ArrayList<Integer> freq=new ArrayList<>(); for(int i=0;i<5;i++) { int f1=0; freq=new ArrayList<>(); for(int j=0;j<n;j++) { f1=0; for(int k=0;k<s[j].length();k++) { if(s[j].charAt(k)==i+'a') { f1++; }else { f1--; } } freq.add(f1); } Collections.sort(freq); int x=0; int total=0; for(int j=n-1;j>=0;j--) { total=total+freq.get(j); if(total>0) { x++; }else { break; } } max=Math.max(max, x); } st.append(max+""\n""); } System.out.println(st); } static FastReader sc = new FastReader(); static void sort(int[] A) { int n = A.length; Random rnd = new Random(); for (int i = 0; i < n; ++i) { int tmp = A[i]; int randomPos = i + rnd.nextInt(n - i); A[i] = A[randomPos]; A[randomPos] = tmp; } Arrays.sort(A); } static void sort(long[] A) { int n = A.length; Random rnd = new Random(); for (int i = 0; i < n; ++i) { long tmp = A[i]; int randomPos = i + rnd.nextInt(n - i); A[i] = A[randomPos]; A[randomPos] = tmp; } Arrays.sort(A); } static String sort(String s) { Character ch[] = new Character[s.length()]; for (int i = 0; i < s.length(); i++) { ch[i] = s.charAt(i); } Arrays.sort(ch); StringBuffer st = new StringBuffer(""""); for (int i = 0; i < s.length(); i++) { st.append(ch[i]); } return st.toString(); } } ",0
649,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.StringTokenizer; public class C { @SuppressWarnings(""unchecked"") public static void main(String[] args) throws NumberFormatException, IOException { BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); int inputs = Integer.parseInt(in.readLine()); StringBuilder ans = new StringBuilder(); while(inputs-->0) { int n = Integer.parseInt(in.readLine()); int[] degree = new int[n]; boolean bad = false; ArrayList<int[]>[] con = new ArrayList[n]; for(int i = 0; i < n; i++) { con[i] = new ArrayList<>(); } for(int i = 0; i < n-1; i++) { StringTokenizer st = new StringTokenizer(in.readLine()); int a = Integer.parseInt(st.nextToken())-1; int b = Integer.parseInt(st.nextToken())-1; degree[a]++; degree[b]++; if(degree[a] > 2 || degree[b] > 2)  bad = true; con[a].add(new int[] {b, i}); con[b].add(new int[] {a, i}); } if(bad) ans.append(""-1\n""); else { int[] assign = new int[n-1]; for(int i = 0; i < degree.length; i++) { if(degree[i] == 1) { dfs(i, -1, 11, con, assign); break; } } for(int i = 0; i < n-2; i++) ans.append(assign[i] + "" ""); ans.append(assign[n-2] + ""\n""); } } System.out.print(ans); } public static void dfs(int curr, int prev, int num, ArrayList<int[]>[] con, int[] a) { for(int[] next : con[curr]) { if(next[0] != prev) { a[next[1]] = 13-num; dfs(next[0], curr, 13-num, con, a); } } } } ","import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class Cr766A {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader sc = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Solver solver = new Solver();         int t = sc.nextInt();         while (t-- != 0) {             solver.solve(sc, out);         }         out.close();     }     static class Solver {         ArrayList<int[]>[] gp;         int[] ans;         public void solve(InputReader sc, PrintWriter out) {             int n = sc.nextInt();             gp = new ArrayList[n];             ans = new int[n-1];             for (int i = 0; i < n; i++) {                 gp[i] = new ArrayList<>();             }             for (int i = 0; i < n - 1; i++) {                 int u = sc.nextInt()-1;                 int v = sc.nextInt()-1;                 gp[u].add(new int[] {v,i});                 gp[v].add(new int[] {u,i});             }             for(int i = 0; i < n; i++) {                 if(gp[i].size()>2) {                     out.println(-1);                     return;                 }             }             int oneDegree = -1;             for(int i = 0; i < n; i++) {                 if(gp[i].size()==1) {                     oneDegree = i;                 }             }             if(oneDegree==-1) {                 throw new RuntimeException();             }             dfs(oneDegree,-1,3);             for(int i = 0; i < n-1; i++) {                 if(i>0) out.print("" "");                 out.print(ans[i]);             }             out.println();         }         private void dfs(int src, int p, int prevPrime) {             int ocr = 0;             for(int[] vs : gp[src]) {                 int v = vs[0];                 int idx = vs[1];                 if(v==p) continue;                 ocr++;                 ans[idx] = 5-prevPrime;                 dfs(v,src,ans[idx]);             }             if(ocr>1) {                 throw new RuntimeException();             }         }              }                          } ",0
650,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; public class _109D {     static BufferedReader br;     public static void main(String[] args) throws IOException {         br = new BufferedReader(new InputStreamReader(System.in));         int n = readInt();         int arr[] = readIntarray();         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i = 0; i < n; i++){             if(arr[i] == 1){                 a.add(i);             }else{                 b.add(i);             }         }         if(a.size() == 0){             System.out.println(""0"");             return;         }         int [][] dp = new int[a.size()][b.size()];         for(int i = 0; i < a.size(); i++){             for(int j = i; j < b.size(); j++) {                 if (j == 0) {                     dp[i][j] = Math.abs(a.get(i) - b.get(j));                 } else if (i == 0) {                     dp[i][j] = Math.min(dp[i][j - 1], Math.abs(a.get(i) - b.get(j)));                 } else if (i == j) {                     dp[i][j] = dp[i - 1][j - 1] + Math.abs(a.get(i) - b.get(j));                 } else {                     dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(a.get(i) - b.get(j)));                 }             }         }         System.out.println(dp[a.size() - 1][b.size() - 1]);     }     static int readInt() throws IOException {         return Integer.parseInt(br.readLine());     }          static int[] readIntarray() throws IOException {         String[] _a = br.readLine().split("" "");         int[] _res = new int[_a.length];         for (int i = 0; i < _a.length; i++) {             _res[i] = Integer.parseInt(_a[i]);         }         return _res;     }      } ","import java.io.*; import java.util.*; import java.text.*; import java.math.*; public class Main {     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int n = Integer.parseInt(br.readLine());         StringTokenizer st = new StringTokenizer(br.readLine());         int ar[] = new int[n];         for(int i = 0; i < n; i++){             ar[i] = Integer.parseInt(st.nextToken());         }         ArrayList<Integer> ones = new ArrayList<Integer>();         ArrayList<Integer> zeroes = new ArrayList<Integer>();         for(int i = 0; i < n; i++){             if(ar[i] == 1)                 ones.add(i);             else                 zeroes.add(i);         }         int r = ones.size();         int c = zeroes.size();         int time[][] = new int[r][c];         System.out.println(calculateTime(time, r, c, 0, 0, ones, zeroes));     }     public static int calculateTime(int time[][], int r, int c, int currR, int currC, ArrayList<Integer> ones, ArrayList<Integer> zeroes){                  if(currR == r)             return 0;         if(currC == c)             return (int)1e9;         if(time[currR][currC] != 0)             return time[currR][currC];         return time[currR][currC] = Math.min((calculateTime(time, r, c, currR + 1, currC + 1, ones, zeroes) + Math.abs(ones.get(currR) - zeroes.get(currC))), calculateTime(time, r, c, currR, currC + 1, ones, zeroes));     } } ",0
651,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.HashMap; import java.util.Scanner; import java.util.StringTokenizer; public class Main { public static void main(String[] args) {    FastReader in = new FastReader();    int t=in.nextInt();    while(t-->0)    {        int n=in.nextInt();        int k=in.nextInt();                int a[]=new int[k];        int ans[]=new int[n];        int tem[]=new int[k];                for(int i=0;i<k;i++)            a[i]=in.nextInt();        for(int  i=0;i<k;i++)            tem[i]=in.nextInt();               long c[]=new long[n];       long l[]=new long[n];       long r[]=new long[n];       Arrays.fill(c,Integer.MAX_VALUE);       Arrays.fill(l, Integer.MAX_VALUE);       Arrays.fill(r,Integer.MAX_VALUE);              long p=Integer.MAX_VALUE;       for(int i=0;i<k;i++)           c[a[i]-1]=tem[i];              for(int i=0;i<n;i++)       {          p=Math.min(p+1,c[i]);          l[i]=p;       }       p=Integer.MAX_VALUE;       for(int i=n-1;i>=0;i--)       {          p=Math.min(p+1,c[i]);          r[i]=p;       }                    for(int i=0;i<n;i++)           System.out.print(Math.min(l[i],r[i])+"" "");       System.out.println();    } } } ","import java.io.*; import java.util.*; public class GFG { public static void main (String[] args) {     Scanner sc = new Scanner(System.in);     int t = sc.nextInt();     while(t-- > 0){         int n = sc.nextInt();         int k = sc.nextInt();         int[] a = new int[k];         int[] temp = new int[k];         for(int i=0;i<k;i++){             a[i] = sc.nextInt();         }         for(int i=0;i<k;i++){             temp[i] = sc.nextInt();         }         long[] c = new long[n];         Arrays.fill(c,Integer.MAX_VALUE);         for(int i=0;i<k;i++){             c[a[i]-1] = temp[i];         }         long p = Integer.MAX_VALUE;         long[] left = new long[n];         for(int i=0;i<n;i++){             p = (p+1<c[i])?p+1:c[i];             left[i] = p;         }         p = Integer.MAX_VALUE;         long[] right = new long[n];         for(int i=n-1;i>=0;i--){             p = (p+1<c[i])?p+1:c[i];             right[i] = p;         }         for(int i=0;i<n;i++){             long kl = (left[i]>right[i])?right[i]:left[i];             System.out.print(kl+"" "");         }         System.out.println();     } } } ",1
652,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.HashMap; import java.util.Scanner; import java.util.StringTokenizer; public class Main { public static void main(String[] args) {    FastReader in = new FastReader();    int t=in.nextInt();    while(t-->0)    {        int n=in.nextInt();        int k=in.nextInt();                int a[]=new int[k];        int ans[]=new int[n];        int tem[]=new int[k];                for(int i=0;i<k;i++)            a[i]=in.nextInt();        for(int  i=0;i<k;i++)            tem[i]=in.nextInt();               long c[]=new long[n];       long l[]=new long[n];       long r[]=new long[n];       Arrays.fill(c,Integer.MAX_VALUE);       Arrays.fill(l, Integer.MAX_VALUE);       Arrays.fill(r,Integer.MAX_VALUE);              long p=Integer.MAX_VALUE;       for(int i=0;i<k;i++)           c[a[i]-1]=tem[i];              for(int i=0;i<n;i++)       {          p=Math.min(p+1,c[i]);          l[i]=p;       }       p=Integer.MAX_VALUE;       for(int i=n-1;i>=0;i--)       {          p=Math.min(p+1,c[i]);          r[i]=p;       }                    for(int i=0;i<n;i++)           System.out.print(Math.min(l[i],r[i])+"" "");       System.out.println();    } } } ","import java.util.*; import java.io.*; public class Solution {     private static ArrayList<Integer> prime = new ArrayList<>();     public static void main(String[] args) throws IOException {         Scanner in=new Scanner(System.in);         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         StringBuffer out = new StringBuffer();         int T = in.nextInt();         OUTER:         while(T-->0) {             int n=in.nextInt(), k=in.nextInt();             int a[]=new int[k];             for(int i=0; i<k; i++) {                 a[i]=in.nextInt()-1;             }             int t[]=new int[k];             long ans[]=new long[n];             for(int i=0; i<k; i++) {                 t[i]=in.nextInt();                 ans[a[i]]=t[i];             }             long temp=Integer.MAX_VALUE;             long left[]=new long[n];             for(int i=0; i<n; i++) {                 if(ans[i]!=0) {                     temp=Math.min(temp, ans[i]);                 }                 left[i]=temp;                 temp+=1;             }             temp=Integer.MAX_VALUE;             long right[]=new long[n];             for(int i=n-1; i>=0; i--) {                 if(ans[i]!=0) {                     temp=Math.min(temp, ans[i]);                 }                 right[i]=temp;                 temp+=1;             }             for(int i=0; i<n; i++) {                 ans[i]=Math.min(left[i], right[i]);                 out.append(ans[i]+"" "");             }             out.append(""\n"");         }         System.out.print(out);     }                     } ",0
653,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.LinkedList; import java.util.Queue; import java.util.StringTokenizer; public class Learning {     static LinkedList<Integer>[] adj;     public static void main(String[] args) throws Exception {         FastInput in = new FastInput();         StringBuilder sb = new StringBuilder();         int t = in.nextInt();         while (t-- > 0) {             int n = in.nextInt();             int a = in.nextInt() - 1;             int b = in.nextInt() - 1;             int da = in.nextInt();             int db = in.nextInt();             adj = new LinkedList[n];             for (int i = 0; i < n; i++) {                 adj[i] = new LinkedList<>();             }             for (int i = 0; i < n - 1; i++) {                 int u = in.nextInt() - 1;                 int v = in.nextInt() - 1;                 adj[u].add(v);                 adj[v].add(u);             }             boolean f = solve(n, a, b, da, db);             if (f) {                 sb.append(""Bob"");             } else {                 sb.append(""Alice"");             }             sb.append(""\n"");         }         System.out.println(sb.toString());     }     private static boolean solve(int n, int a, int b, int da, int db) {         if (db <= da * 2) {             return false;         }         Queue<Integer> que = new LinkedList<>();         que.add(a);         int[] dist = new int[n];         Arrays.fill(dist, -1);         dist[a] = 0;         while (!que.isEmpty()) {             int t = que.poll();             for (int i : adj[t]) {                 if (dist[i] == -1) {                     que.add(i);                     dist[i] = dist[t] + 1;                 }             }         }         if (dist[b] <= da) {             return false;         }         int maxPath = 0;         for (int i = 0; i < n; i++) {             maxPath = Math.max(maxPath, dfs(i, new boolean[n]));         }         if (2 * da >= maxPath-1) {             return false;         }         return true;     }     private static int dfs(int i, boolean[] vis) {         vis[i] = true;         int max = 0;         for (int v : adj[i]) {             if (!vis[v]) {                 max = Math.max(dfs(v, vis), max);             }         }         return max + 1;     }      } ","import java.io.*; import java.util.*; public class Main {     private static final boolean N_CASE = true;     private List<List<Integer>> g;     private int a;     private int b;     private int da;     private int db;     private int max;     private int ab;     private int dfs(int u, int fa, int depth) {         if (u == a) {             ab = depth;         }         int m1 = 0, m2 = 0;         for (int v : g.get(u)) {             if (v != fa) {                 int m = dfs(v, u, depth + 1) + 1;                 if (m > m1) { m2 = m1; m1 = m; }                 else if (m > m2) { m2 = m; }             }         }         max = Math.max(max, m1 + m2);         int cmax = Math.max(m1, m2);         max = Math.max(max, cmax + depth);         return cmax;     }     private void solve() {         int n = sc.nextInt();         a = sc.nextInt() - 1; b = sc.nextInt() - 1;         da = sc.nextInt(); db = sc.nextInt();         g = createGraph(n);         for (int i = 0; i < n - 1; ++i) {             int u = sc.nextInt() - 1, v = sc.nextInt() - 1;             g.get(u).add(v);             g.get(v).add(u);         }         max = 0;         dfs(b, -1, 0);         db = Math.min(max, db);         boolean win = true;         if (ab > da) {             if (db > da * 2) {                 win = false;             }         }         out.println(win ? ""Alice"" : ""Bob"");     }     private void run() {         int T = N_CASE ? sc.nextInt() : 1;         for (int t = 0; t < T; ++t) {             solve();         }     }     private static MyWriter out;     private static MyScanner sc;          private static class MyWriter extends PrintWriter {         private MyWriter(OutputStream outputStream) {             super(outputStream);         }                           void println(int[] a) {             for (int v : a) {                 println(v);             }         }                  void println(List<Integer> list) {             list.forEach(this::println);         }     }     private <T> List<List<T>> createGraph(int n) {         List<List<T>> g = new ArrayList<>();         for (int i = 0; i < n; ++i) {             g.add(new ArrayList<>());         }         return g;     }               public static void main(String[] args) {         out = new MyWriter(new BufferedOutputStream(System.out));         sc = new MyScanner();         new Main().run();         out.close();     } } ",0
654,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; public class D { static final int mod=998244353; static long[] facts, factInvs; public static void main(String[] args) { precomp(); FastScanner fs=new FastScanner(); int n=fs.nextInt(), k=fs.nextInt(); Seg[] segs=new Seg[n]; for (int i=0; i<n; i++) segs[i]=new Seg(fs.nextInt(), fs.nextInt()); Event[] events=new Event[n*2]; for (int i=0; i<n; i++) { events[2*i]=new Event(segs[i], true); events[2*i+1]=new Event(segs[i], false); } long ans=0; Arrays.sort(events); int counter=0; for (Event e:events) { if (e.start) { counter++; } else { counter--; if (counter+1<k) continue; else ans=add(ans, nCk(counter, k-1)); } } System.out.println(ans); } static final Random random=new Random(); static long add(long a, long b) { return (a+b)%mod; } static long mul(long a, long b) { return a*b%mod; } static long exp(long base, long e) { if (e==0) return 1; long half=exp(base, e/2); if (e%2==0) return mul(half, half); return mul(half, mul(half, base)); } static long modInv(long x) { return exp(x, mod-2); } static void precomp() { facts=new long[1_000_000]; factInvs=new long[1_000_000]; factInvs[0]=facts[0]=1; for (int i=1; i<facts.length; i++) facts[i]=mul(facts[i-1], i); factInvs[facts.length-1]=modInv(facts[facts.length-1]); for (int i=facts.length-2; i>=0; i--) factInvs[i]=mul(factInvs[i+1], i+1); } static long nCk(int n, int k) { return mul(facts[n], mul(factInvs[k], factInvs[n-k])); } static class Seg { int l, r; public Seg(int l, int r) { this.l=l; this.r=r; } } static class Event implements Comparable<Event> { boolean start; Seg s; public Event(Seg s, boolean start) { this.s=s; this.start=start; } } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; public class D { static final int mod=998244353; static long[] facts, factInvs; public static void main(String[] args) { precomp(); FastScanner fs=new FastScanner(); int n=fs.nextInt(), k=fs.nextInt(); Seg[] segs=new Seg[n]; for (int i=0; i<n; i++) segs[i]=new Seg(fs.nextInt(), fs.nextInt()); Event[] events=new Event[n*2]; for (int i=0; i<n; i++) { events[2*i]=new Event(segs[i], true); events[2*i+1]=new Event(segs[i], false); } long ans=0; Arrays.sort(events); int counter=0; for (Event e:events) { if (e.start) { counter++; } else { counter--; if (counter+1<k) continue; else ans=add(ans, nCk(counter, k-1)); } } System.out.println(ans); } static final Random random=new Random(); static long add(long a, long b) { return (a+b)%mod; } static long mul(long a, long b) { return a*b%mod; } static long exp(long base, long e) { if (e==0) return 1; long half=exp(base, e/2); if (e%2==0) return mul(half, half); return mul(half, mul(half, base)); } static long modInv(long x) { return exp(x, mod-2); } static void precomp() { facts=new long[1_000_000]; factInvs=new long[1_000_000]; factInvs[0]=facts[0]=1; for (int i=1; i<facts.length; i++) facts[i]=mul(facts[i-1], i); factInvs[facts.length-1]=modInv(facts[facts.length-1]); for (int i=facts.length-2; i>=0; i--) factInvs[i]=mul(factInvs[i+1], i+1); } static long nCk(int n, int k) { return mul(facts[n], mul(factInvs[k], factInvs[n-k])); } static class Seg { int l, r; public Seg(int l, int r) { this.l=l; this.r=r; } } static class Event implements Comparable<Event> { boolean start; Seg s; public Event(Seg s, boolean start) { this.s=s; this.start=start; } } } ",1
655,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Stack; import java.util.StringTokenizer; public class D { public static void main(String[] args) throws NumberFormatException, IOException { BufferedReader file = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(file.readLine()); int[] heights = new int[n]; StringTokenizer st = new StringTokenizer(file.readLine()); for(int i = 0; i < n; i++) { heights[i] = Integer.parseInt(st.nextToken()); } int[] dp = new int[n]; dp[0] = 0; Stack<Integer> high = new Stack<>(); Stack<Integer> low = new Stack<>(); high.push(0); low.push(0); for(int i = 1; i < n; i++) { dp[i] = dp[i-1]+1; while(!high.isEmpty() && heights[high.peek()] < heights[i]) { dp[i] = Math.min(dp[i], dp[high.peek()]+1); high.pop(); } if(!high.isEmpty()) { dp[i] = Math.min(dp[i], dp[high.peek()]+1); if(heights[high.peek()] == heights[i]) high.pop(); } while(!low.isEmpty() && heights[low.peek()] > heights[i]) { dp[i] = Math.min(dp[i], dp[low.peek()]+1); low.pop(); } if(!low.isEmpty()) { dp[i] = Math.min(dp[i], dp[low.peek()]+1); if(heights[low.peek()] == heights[i]) low.pop(); } high.push(i); low.push(i); } System.out.println(dp[n-1]); } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int n = Integer.parseInt(br.readLine());         StringTokenizer st = new StringTokenizer(br.readLine());         int[] h = new int[n];         int[] dp = new int[n];         for(int i = 0; i<n; i++){             h[i] = Integer.parseInt(st.nextToken());         }         Stack<Integer> hi = new Stack<>();         Stack<Integer> lo = new Stack<>();         hi.push(0);         lo.push(0);         for(int i = 1; i<n; i++){             dp[i] = dp[i-1]+1;             while(!hi.isEmpty() && h[hi.peek()]<h[i]){                 dp[i] = Math.min(dp[i], dp[hi.peek()]+1);                 hi.pop();             }             if(!hi.isEmpty()){                 dp[i] = Math.min(dp[i], dp[hi.peek()]+1);                 if(h[i] == h[hi.peek()]) hi.pop();             }             while(!lo.isEmpty() && h[lo.peek()]>h[i]){                 dp[i] = Math.min(dp[i], dp[lo.peek()]+1);                 lo.pop();             }             if(!lo.isEmpty()){                 dp[i] = Math.min(dp[i], dp[lo.peek()]+1);                 if(h[i] == h[lo.peek()]) lo.pop();             }             hi.push(i);             lo.push(i);         }         System.out.println(dp[n-1]);     } } ",1
656,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Stack; import java.util.StringTokenizer; public class D { public static void main(String[] args) throws NumberFormatException, IOException { BufferedReader file = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(file.readLine()); int[] heights = new int[n]; StringTokenizer st = new StringTokenizer(file.readLine()); for(int i = 0; i < n; i++) { heights[i] = Integer.parseInt(st.nextToken()); } int[] dp = new int[n]; dp[0] = 0; Stack<Integer> high = new Stack<>(); Stack<Integer> low = new Stack<>(); high.push(0); low.push(0); for(int i = 1; i < n; i++) { dp[i] = dp[i-1]+1; while(!high.isEmpty() && heights[high.peek()] < heights[i]) { dp[i] = Math.min(dp[i], dp[high.peek()]+1); high.pop(); } if(!high.isEmpty()) { dp[i] = Math.min(dp[i], dp[high.peek()]+1); if(heights[high.peek()] == heights[i]) high.pop(); } while(!low.isEmpty() && heights[low.peek()] > heights[i]) { dp[i] = Math.min(dp[i], dp[low.peek()]+1); low.pop(); } if(!low.isEmpty()) { dp[i] = Math.min(dp[i], dp[low.peek()]+1); if(heights[low.peek()] == heights[i]) low.pop(); } high.push(i); low.push(i); } System.out.println(dp[n-1]); } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Vector; import java.util.InputMismatchException; import java.io.IOException; import java.util.Stack; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DDiscreteCentrifugalJumps solver = new DDiscreteCentrifugalJumps();         solver.solve(1, in, out);         out.close();     }     static class DDiscreteCentrifugalJumps {         public void solve(int testNumber, InputReader s, PrintWriter w) {             int n = s.nextInt();             int[] a = new int[n];             for (int i = 0; i < n; i++)                 a[i] = s.nextInt();             int[] dp = new int[n];             for (int i = 0; i < n; i++)                 dp[i] = i;             Stack<Integer> dec = new Stack<>();             dec.push(0);             Stack<Integer> inc = new Stack<>();             inc.push(0);             for (int i = 1; i < n; i++) {                 while (!dec.isEmpty() && a[dec.peek()] < a[i]) {                     dp[i] = Math.min(dp[i], dp[dec.peek()] + 1);                     dec.pop();                 }                 if (!dec.isEmpty()) {                     dp[i] = Math.min(dp[i], dp[dec.peek()] + 1);                     if (a[dec.peek()] == a[i])                         dec.pop();                 }                 dec.push(i);                 while (!inc.isEmpty() && a[inc.peek()] > a[i]) {                     dp[i] = Math.min(dp[i], dp[inc.peek()] + 1);                     inc.pop();                 }                 if (!inc.isEmpty()) {                     dp[i] = Math.min(dp[i], dp[inc.peek()] + 1);                     if (a[inc.peek()] == a[i])                         inc.pop();                 }                 inc.push(i);             }             w.println(dp[n - 1]);         }     }      } ",1
657,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Stack; import java.util.StringTokenizer; public class D { public static void main(String[] args) throws NumberFormatException, IOException { BufferedReader file = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(file.readLine()); int[] heights = new int[n]; StringTokenizer st = new StringTokenizer(file.readLine()); for(int i = 0; i < n; i++) { heights[i] = Integer.parseInt(st.nextToken()); } int[] dp = new int[n]; dp[0] = 0; Stack<Integer> high = new Stack<>(); Stack<Integer> low = new Stack<>(); high.push(0); low.push(0); for(int i = 1; i < n; i++) { dp[i] = dp[i-1]+1; while(!high.isEmpty() && heights[high.peek()] < heights[i]) { dp[i] = Math.min(dp[i], dp[high.peek()]+1); high.pop(); } if(!high.isEmpty()) { dp[i] = Math.min(dp[i], dp[high.peek()]+1); if(heights[high.peek()] == heights[i]) high.pop(); } while(!low.isEmpty() && heights[low.peek()] > heights[i]) { dp[i] = Math.min(dp[i], dp[low.peek()]+1); low.pop(); } if(!low.isEmpty()) { dp[i] = Math.min(dp[i], dp[low.peek()]+1); if(heights[low.peek()] == heights[i]) low.pop(); } high.push(i); low.push(i); } System.out.println(dp[n-1]); } } ","import java.util.*;     import java.io.*;     public class D{                                     static int mod = (int)(1e9+7);                  public static void main(String[] args) {             InputReader in = new InputReader(System.in);             OutputWriter out = new OutputWriter(System.out);             int n = in.nextInt();             int[] arr = in.nextIntArray(n);             Stack<Integer> min = new Stack<>();             Stack<Integer> max = new Stack<>();             int[] dp = new int[n];                          dp[0] = 0;             min.push(0);             max.push(0);             for(int i=1;i<n;i++)             {                 int h=dp[i-1]+1;                 while(!max.isEmpty() && arr[i]>arr[max.peek()])                 {                     int x = arr[max.peek()];                     h = Math.min(h,1+dp[max.pop()]);                     while(!max.isEmpty() && arr[max.peek()]==x)                     {                         max.pop();                     }                 }                 if(!max.isEmpty())                 {                     h = Math.min(h,1+dp[max.peek()]);                 }                 while(!min.isEmpty() && arr[i]<arr[min.peek()])                 {                     int x = arr[min.peek()];                     h = Math.min(h,1+dp[min.pop()]);                     while(!min.isEmpty() && arr[min.peek()]==x)                     {                         min.pop();                     }                 }                 if(!min.isEmpty())                 {                     h = Math.min(h,1+dp[min.peek()]);                 }                 dp[i] = h;                 min.push(i);                 max.push(i);             }             out.printLine(dp[n-1]);             out.flush();             out.close();         }     } ",0
658,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Stack; import java.util.StringTokenizer; public class D { public static void main(String[] args) throws NumberFormatException, IOException { BufferedReader file = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(file.readLine()); int[] heights = new int[n]; StringTokenizer st = new StringTokenizer(file.readLine()); for(int i = 0; i < n; i++) { heights[i] = Integer.parseInt(st.nextToken()); } int[] dp = new int[n]; dp[0] = 0; Stack<Integer> high = new Stack<>(); Stack<Integer> low = new Stack<>(); high.push(0); low.push(0); for(int i = 1; i < n; i++) { dp[i] = dp[i-1]+1; while(!high.isEmpty() && heights[high.peek()] < heights[i]) { dp[i] = Math.min(dp[i], dp[high.peek()]+1); high.pop(); } if(!high.isEmpty()) { dp[i] = Math.min(dp[i], dp[high.peek()]+1); if(heights[high.peek()] == heights[i]) high.pop(); } while(!low.isEmpty() && heights[low.peek()] > heights[i]) { dp[i] = Math.min(dp[i], dp[low.peek()]+1); low.pop(); } if(!low.isEmpty()) { dp[i] = Math.min(dp[i], dp[low.peek()]+1); if(heights[low.peek()] == heights[i]) low.pop(); } high.push(i); low.push(i); } System.out.println(dp[n-1]); } } ","import java.util.*; import java.io.*; public class Main{        public static void main(String[] args) throws IOException{ BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); int n = pint(in); Stack<Integer> min = new Stack<Integer>(); Stack<Integer> max = new Stack<Integer>(); int[] a = new int[n]; int[] dp = new int[n]; StringTokenizer st = new StringTokenizer(in.readLine()); a[0] = pint(st); min.add(0); max.add(0); for(int i = 1; i < n; i++) { a[i] = pint(st); int h = dp[i - 1] + 1; while(!max.isEmpty() && a[i] > a[max.peek()]) { int k = a[max.peek()]; h = Math.min(h, dp[max.pop()] + 1); while(!max.isEmpty() && a[max.peek()] == k) {max.pop();} } if(!max.isEmpty()) { h = Math.min(h, dp[max.peek()] + 1); } while(!min.isEmpty() && a[i] < a[min.peek()]) { int k = a[min.peek()]; h = Math.min(h, dp[min.pop()] + 1); while(!min.isEmpty() && a[min.peek()] == k) {min.pop();} } if(!min.isEmpty()) { h = Math.min(h, dp[min.peek()] + 1); } dp[i] = h; min.add(i); max.add(i); } System.out.println(dp[n - 1]); }     static int pint(BufferedReader in) throws IOException {return Integer.parseInt(in.readLine());}     static int pint(StringTokenizer st) {return Integer.parseInt(st.nextToken());} } ",0
659,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.io.*; import java.util.*;   public class A {     public static void main(String args[]) { if (System.getProperty(""ONLINE_JUDGE"") == null) {      try { System.setIn(new FileInputStream(""input.txt"")); System.setOut(new PrintStream(new FileOutputStream(""output.txt""))); } catch (Exception e) { System.err.println(""Error""); } } else {    } FastReader sc = new FastReader(); StringBuilder sb = new StringBuilder(); int t = sc.nextInt(); while(t>0) { int n = sc.nextInt();  long[] arr = new long[n]; long[] pow = new long[n]; for(int i = 0; i<n; i++)arr[i] = sc.nextLong(); for(int i = 0; i<n ;i++)pow[i] = sc.nextLong(); Pair[] p= new Pair[n]; for(int i = 0; i<n; i++){ Pair pp = new Pair(arr[i]-pow[i], arr[i]); p[i] = pp; } long ans = 0; Arrays.sort(p); long prevEnd = -1; long prevN = 0; for(int i = 0; i<n; i++){ if(p[i].x >= prevEnd){ long nn = p[i].y-p[i].x; ans+= ((nn)*(nn+1))/2; prevEnd = p[i].y; prevN = nn; }else{ if(prevEnd < p[i].y){ long a = prevN+1; long nn = p[i].y-prevEnd; long sum = ((nn)*(2*a+(nn-1)))/2; ans +=sum; prevN = a+(nn-1); prevEnd = p[i].y; } } } sb.append(ans+""\n""); t--; } System.out.println(sb);       } } class Pair implements Comparable<Pair>{   long x;   long y;   Pair(long x, long y){   this.x = x;   this.y = y;   }                                                                        } ","import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.StringTokenizer; public class MonstersAndSpells {          public static void main(String[] args) throws IOException {         FastReader input = new FastReader();         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));         int t = input.nextInt();         while (t-- > 0) {             int n = input.nextInt();             long k[] = new long[n];             long h[] = new long[n];             long ans = 0;             for (int i = 0; i < n; i++) {                 k[i] = input.nextInt();             }             for (int i = 0; i < n; i++) {                 h[i] = input.nextInt();             }             for (int i = n-1; i >0; i--) {                 long d = k[i]-k[i-1];                 if(h[i-1]+d<h[i]){                     h[i-1]+=(h[i]-(h[i-1]+d));                 }             }             ans += (h[0]) * (h[0] + 1) / 2;             long last = h[0];             for (int i = 1; i < n; i++) {                 if (k[i] - k[i - 1] >= h[i]) {                     ans += (h[i]) * (h[i] + 1) / 2;                     last = h[i];                 } else {                     long x = (k[i] - k[i - 1]);                     long y = last + x;                     long sum1 = (last) * (last + 1) / 2;                     long sum2 = (y) * (y + 1) / 2;                     ans += (sum2 - sum1);                     last = y;                 }             }             log.write(ans + ""\n"");         }         log.flush();     } } ",0
660,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.*; public class ArmChairs {     static final Random random = new Random();                    public static void main(String[] args) {         FastReader fs = new FastReader();         int t = 1;         for (int z = 0; z < t; z++) {             int n = fs.nextInt();             List<Integer> empty = new ArrayList<>();             List<Integer> chairs = new ArrayList<>();             for(int i = 0; i < n; i++) {                 int status = fs.nextInt();                 if(status == 1) chairs.add(i+1);                 else empty.add(i+1);             }             int[][] dp = new int[empty.size() + 1][chairs.size() + 1];             dp[0][0] = 0;             for(int i = 1; i <= chairs.size(); i++) dp[0][i] = (int)3e+8;             for(int i = 1; i <= empty.size(); i++) {                 for(int j = 1; j <= chairs.size(); j++) {                                          dp[i][j] = dp[i-1][j-1] + Math.abs(empty.get(i-1) - chairs.get(j-1));                     dp[i][j] = Math.min(dp[i][j], dp[i-1][j]);                 }                              }                          System.out.println(dp[empty.size()][chairs.size()]);         }     } } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger;  public final class B {     static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); static ArrayList<ArrayList<Integer>> g; static long mod=(long)(1e9+7); static int D1[],D2[],par[]; static boolean set[]; static int value[]; static long INF=Long.MAX_VALUE; static int dp[][]; static int N,M; static int A[][],B[][]; static int s=1; public static void main(String args[])throws IOException {   int N=i(); int A[]=input(N); ArrayList<Integer> one=new ArrayList<Integer>(); ArrayList<Integer> zero=new ArrayList<Integer>(); for(int i=1; i<=N; i++) { if(A[i-1]==1)one.add(i); else zero.add(i); } int sum[][]=new int[N+5][N+5]; for(int i=1; i<=one.size(); i++) { for(int j=1; j<=zero.size(); j++) { sum[i][j]=Math.abs(one.get(i-1)-zero.get(j-1)); } } dp=new int[N+5][N+5]; Arrays.fill(dp[0], 0); for(int i=1; i<=one.size(); i++) { for(int j=i; j<=zero.size(); j++) { if(i==j) { dp[i][j]=dp[i-1][j-1]+sum[i][j]; } else { dp[i][j]=Math.min(dp[i][j-1], dp[i-1][j-1]+sum[i][j]); } } } System.out.println(dp[one.size()][zero.size()]); } static long min(long a,long b,long c) { return Math.min(a, Math.min(c, b)); } static int i() { return in.nextInt(); } static int[] input(int N){ int A[]=new int[N]; for(int i=0; i<N; i++) { A[i]=in.nextInt(); } return A; } } ",0
661,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.*; public class ArmChairs {     static final Random random = new Random();                    public static void main(String[] args) {         FastReader fs = new FastReader();         int t = 1;         for (int z = 0; z < t; z++) {             int n = fs.nextInt();             List<Integer> empty = new ArrayList<>();             List<Integer> chairs = new ArrayList<>();             for(int i = 0; i < n; i++) {                 int status = fs.nextInt();                 if(status == 1) chairs.add(i+1);                 else empty.add(i+1);             }             int[][] dp = new int[empty.size() + 1][chairs.size() + 1];             dp[0][0] = 0;             for(int i = 1; i <= chairs.size(); i++) dp[0][i] = (int)3e+8;             for(int i = 1; i <= empty.size(); i++) {                 for(int j = 1; j <= chairs.size(); j++) {                                          dp[i][j] = dp[i-1][j-1] + Math.abs(empty.get(i-1) - chairs.get(j-1));                     dp[i][j] = Math.min(dp[i][j], dp[i-1][j]);                 }                              }                          System.out.println(dp[empty.size()][chairs.size()]);         }     } } ","import java.util.*; public class Solution { public static int minMoves(int[] input) { List<Integer> people = new ArrayList<Integer>(); List<Integer> chairs = new ArrayList<Integer>(); for (int i = 0; i < input.length; i++) { if (input[i] == 1) { people.add(i); } else { chairs.add(i); } } int[] memo = new int[chairs.size() + 1]; for (int p = 1; ((!people.isEmpty()) && (p <= people.size())); p++) { int prev = memo[p]; memo[p] = memo[p - 1] + Math.abs(people.get(p - 1) - chairs.get(p - 1)); for (int c = p + 1; c <= chairs.size(); c++) { int tmp = memo[c]; memo[c] = Math.min(memo[c - 1], prev + Math.abs(people.get(p - 1) - chairs.get(c - 1))); prev = tmp; } } return memo[memo.length - 1]; } public static void main(String[] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); int[] input = new int[n]; for (int i = 0; i < n; i++) { input[i] = sc.nextInt(); } System.out.println(Solution.minMoves(input)); } } ",0
662,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Arrays; import java.util.ArrayList; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.TreeSet; import java.util.TreeMap; import java.util.PriorityQueue; import java.util.Collections; import java.util.Stack; import java.math.BigInteger; import java.util.LinkedList; import java.util.Iterator; public class First {     public static void main(String[] args) {         FastScanner fs = new FastScanner();         int T = fs.nextInt();         for (int tt = 0; tt < T; tt++) {             solve(fs);         }              }     static void solve(FastScanner fs)     {         int n=fs.nextInt();         long[] times=takeLong(n, fs);         long[] damage=takeLong(n, fs);         long reqTime=times[n-1]-damage[n-1]+1;         long ans=0;         for(int i=n-1;i>=0;)         {             reqTime=times[i]-damage[i]+1;             long time=times[i];             i--;                 while(i>=0 && times[i]>=reqTime)             {                 long thisReqTime=times[i]-damage[i]+1;                 reqTime=Math.min(reqTime, thisReqTime);                 i--;             }             long x=time-reqTime+1;                          ans+=(x*(x+1)/2);         }         pn(ans);     }     static long MOD=(long)(1e9+7);               static void pn(Object o) { System.out.println(o); }                                    static long[] takeLong(int n, FastScanner fs)     {         long[] arr=new long[n];         for(int i=0;i<n;++i)             arr[i]=fs.nextLong();         return arr;     }                                             } ","import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static int dp[];  static boolean v[];  static int mod=1000000007;  static int max;  static int bit[];    static HashMap<Integer,Integer> map;        static PrintWriter out=new PrintWriter(System.out);   public static void main(String[] args)   {     int ttt=1;        ttt =i();                outer :while (ttt-- > 0)          {         int n=i();         long A[]=inputL(n);         long B[]=inputL(n);         long C[]=new long[n];         for(int i=0;i<n;i++) {         C[i]=A[i]-B[i]+1;         }         long min=C[n-1];         long ans=0;         long last=A[n-1];         for(int i=n-1;i>=0;i--) {         if(C[i]>min) {         continue;         }         if(A[i]<min) {         long y=last-min+1;         ans+=y*(y+1)/2;         last=A[i];         min=C[i];         continue;         }                  min=C[i];                  }         long y=last-min+1;     ans+=y*(y+1)/2;         System.out.println(ans);         }               out.close();                                                              }              static long[] inputL(int n) { long A[]=new long[n];    for(int i=0;i<n;i++) {    A[i]=sc.nextLong();    }    return A;    }      static int i() {      return sc.nextInt();      }                                                                                           } ",0
663,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Arrays; public class Main{       public static void main (String[] args){         FastReader s = new FastReader();         int t=1;t=s.ni();         for(int test=1;test<=t;test++){         int n=s.ni(),k=s.ni();         int position[]=s.readArray(k),temp[]=s.readArray(k);         int ans[]=new int[n];         Arrays.fill(ans,Integer.MAX_VALUE/2);         for(int i=0;i<k;i++){             ans[position[i]-1]=temp[i];         }         for(int i=1;i<n;i++){             ans[i]=Math.min(ans[i-1]+1,ans[i]);         }         for(int i=n-2;i>=0;i--){             ans[i]=Math.min(ans[i],ans[i+1]+1);         }         for(int i=0;i<n;i++)         System.out.print(ans[i]+"" "");         System.out.println();         }     }                } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class E { public static void main(String[] args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for (int tt=0; tt<T; tt++) { int n=fs.nextInt(), k=fs.nextInt(); int[] positions=fs.readArray(k), temps=fs.readArray(k); int[] forced=new int[n]; Arrays.fill(forced, Integer.MAX_VALUE/2); for (int i=0; i<k; i++) forced[positions[i]-1]=temps[i]; for (int i=1; i<n; i++) forced[i]=Math.min(forced[i], forced[i-1]+1); for (int i=n-2; i>=0; i--) forced[i]=Math.min(forced[i], forced[i+1]+1); for (int i=0; i<n; i++) out.print(forced[i]+"" ""); out.println(); } out.close(); } } ",1
664,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Arrays; public class Main{       public static void main (String[] args){         FastReader s = new FastReader();         int t=1;t=s.ni();         for(int test=1;test<=t;test++){         int n=s.ni(),k=s.ni();         int position[]=s.readArray(k),temp[]=s.readArray(k);         int ans[]=new int[n];         Arrays.fill(ans,Integer.MAX_VALUE/2);         for(int i=0;i<k;i++){             ans[position[i]-1]=temp[i];         }         for(int i=1;i<n;i++){             ans[i]=Math.min(ans[i-1]+1,ans[i]);         }         for(int i=n-2;i>=0;i--){             ans[i]=Math.min(ans[i],ans[i+1]+1);         }         for(int i=0;i<n;i++)         System.out.print(ans[i]+"" "");         System.out.println();         }     }                } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; public class AirConditioner { public static void main(String args[]) { FastScanner fs=new FastScanner(); int t=fs.nextInt(); for(int t1=0;t1<t;t1++) { int n=fs.nextInt(); int k=fs.nextInt(); int []arr1=new int[k]; int []arr2=new int[k]; arr1=fs.readArray(k); arr2=fs.readArray(k); int []dp=new int[n]; Arrays.fill(dp,Integer.MAX_VALUE/2); for(int i=0;i<k;i++) { dp[arr1[i]-1]=arr2[i]; } for(int i=1;i<n;i++) { dp[i]=Math.min(dp[i],dp[i-1]+1); } for(int i=n-2;i>=0;i--) { dp[i]=Math.min(dp[i], dp[i+1]+1); } for(int val:dp) { System.out.print(val+"" ""); } System.out.println(); } } static final Random random=new Random(); } ",1
665,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.TreeSet; public class D {     public static void main(String[] args)     {         CP sc =new CP();         int tt = sc.nextInt();         while (tt-- > 0) {             int n = sc.nextInt();             TreeSet<Long> set = new TreeSet<>();             long prev = -1;             boolean flag = true;             for (int i = 0; i < n; i++) {                 long x = sc.nextInt();                 if (i == 0) {                     set.add(x);                     prev = x;                     continue;                 }                 if (x > prev) {                     Long high = set.higher(prev);                     if (high == null) set.add(x);                     else if (high >= x) set.add(x);                     else flag = false;                 } else if (x < prev) {                     Long low = set.lower(prev);                     if (low == null) set.add(x);                     else if (low <= x) set.add(x);                     else flag = false;                 }                 prev = x;             }             System.out.println(flag ? ""YES"" : ""NO"");         }     }                } ","import java.util.*; import java.io.*; public class _724 {     public static void main(String[] args) {         MyScanner sc = new MyScanner();         PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             TreeSet<Long> set = new TreeSet<>();             long prev = -1;             boolean ok = true;             for (int i = 0; i < n; i++) {                 long x = sc.nextInt();                 if (i == 0) {                     set.add(x);                     prev = x;                     continue;                 }                 if (x > prev) {                     Long high = set.higher(prev);                     if (high == null) set.add(x);                     else if (high >= x) set.add(x);                     else {                         ok = false;                     }                 } else if (x < prev) {                     Long low = set.lower(prev);                     if (low == null) set.add(x);                     else if (low <= x) set.add(x);                     else {                         ok = false;                     }                 }                 prev = x;             }             out.println(ok ? ""YES"" : ""NO"");         }         out.close();     }                     } ",1
666,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; public class D_1552 {       public static void main(String args[])     {      FastReader fs = new FastReader();         int tc = fs.nextInt();                  while(tc-- > 0)         {   boolean flag=false;         int n=fs.nextInt();             int[] ar=new int[n];             for(int i=0;i<n;i++)             {ar[i]=fs.nextInt();}         for(int i=1;i<Math.pow(3, n);i++)         {         int copy=i;         int sum=0;         for(int j=0;j<n;j++)         {         int rem=copy%3;         sum+=rem==0?0:rem==1?ar[j]:-ar[j];         copy=copy/3;         }         if(sum==0)         {System.out.println(""yes"");         flag=true;         break;}         }                if(flag==false)         System.out.println(""no"");         }                  }                    } ","import java.io.*; import java.util.*; public class Main { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); PrintWriter out = new PrintWriter(outputStream); Task solver = new Task(); int tcCnt = in.nextInt(); for (int tc = 1; tc <= tcCnt; tc++) solver.solve(tc, in, out); out.close(); } static class Task { public void solve(int testNumber, InputReader in, PrintWriter out) { int n = in.nextInt(); int[] a = new int[n]; for (int i = 0; i < n; i++) { a[i] = in.nextInt(); } for (int mask = 1; mask < (int)(Math.pow(3, n)); mask++) { int copy = mask; int sum = 0; for (int idx = 0; idx < n; idx++) { int digit = copy % 3; sum += digit == 0 ? 0 : digit == 1 ? a[idx] : -a[idx]; copy = copy / 3; } if (sum == 0) { out.println(""YES""); return; } } out.println(""NO""); } } } ",1
667,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; public class Menorah { public static void solve(int n, String a, String b) { int bothOne = 0; int bothZero = 0; int oneZero = 0; int zeroOne = 0; for (int i=0; i<n; i++) { if (a.charAt(i) == '0') { if (b.charAt(i) == '0') { bothZero++; } else { zeroOne++; } } else { if (b.charAt(i) == '0') { oneZero++; } else { bothOne++; } } } int ans = Integer.MAX_VALUE; if (bothOne - bothZero == 1) { ans = (bothZero*2) + 1; } if (oneZero == zeroOne) { ans = Math.min(ans, oneZero*2); } if (ans == Integer.MAX_VALUE) { ans = -1; } System.out.println(ans); } public static void main(String[] args) { FastReader in = new FastReader(); int t = in.nextInt(); while (t-- > 0) { solve(in.nextInt(), in.next(), in.next()); } } } ","import java.util.Scanner; public class Menorah {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             char initial[] = sc.next().toCharArray();             char desired[] = sc.next().toCharArray();             int lit1 = 0, lit2 = 0;             int ans = Integer.MAX_VALUE;             for (int i = 0; i < n; i++) {                 if (initial[i] == '1') {                     ++lit1;                 }                 if (desired[i] == '1') {                     ++lit2;                 }             }             if (lit1 == lit2) {                 int count = 0;                 for (int i = 0; i < n; i++) {                     if (initial[i] != desired[i]) {                         ++count;                     }                 }                 ans = Math.min(count, ans);             }             if (lit2 == (n - lit1 + 1)) {                 int count = 0;                 for (int i = 0; i < n; i++) {                     if (initial[i] == desired[i]) {                         ++count;                     }                 }                 ans = Math.min(ans, count);             }             if (ans == Integer.MAX_VALUE) {                 System.out.println(-1);             } else {                 System.out.println(ans);             }         }     } } ",0
668,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; public class Div2 {   public static void main(String[] args) throws IOException {     BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));     String[] s = reader.readLine().split("" "");     StringBuilder sb = new StringBuilder();     Div2 div2 = new Div2();     int t = Integer.parseInt(s[0]);     while (t-- > 0) {       s = reader.readLine().split("" "");       int n = Integer.parseInt(s[0]);       s = reader.readLine().split("" "");       long[] cs = new long[n];       for (int i = 0; i < n; i++) {         cs[i] = Long.parseLong(s[i]);       }       long min1 = cs[0];       long min2 = cs[1];       long cost = n * min1 + n * min2;       long sum = min1 + min2;       for (int i = 2; i < n; i++) {         sum += cs[i];         int count = i / 2;         if (i % 2 == 0) {           min1 = Math.min(min1, cs[i]);           cost = Math.min(cost, sum + (n - count - 1) * min1 + (n - count) * min2);         } else {           count++;           min2 = Math.min(min2, cs[i]);           cost = Math.min(cost, sum + (n - count) * min1 + (n - count) * min2);         }       }       sb.append(cost).append(""\n"");     }     System.out.println(sb.toString());   } } ","import java.util.*; import java.lang.*; import java.io.*; public class C { public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); StringBuilder sb = new StringBuilder(); while (t-- > 0) { String[] scn = (br.readLine()).trim().split("" ""); int n = Integer.parseInt(scn[0]); long[] arr = new long[n]; scn = (br.readLine()).trim().split("" ""); for (int i = 0; i < n; i++) { arr[i] = Long.parseLong(scn[i]); } long min; long hor = arr[0], ver = arr[1]; long min1 = 0, min2 = 0; min = (hor + ver) * n; long x = 0, y = 0; for (int i = 2; i < n; i++) { if (i % 2 == 0) { x += 1; if (arr[i] >= hor) { min1 += arr[i]; } else { min1 += hor; hor = arr[i]; } } else { y += 1; if (arr[i] >= ver) { min2 += arr[i]; } else { min2 += ver; ver = arr[i]; } } long pro =  (n - x) * hor + (n - y) * ver; min = Math.min(min, min1 + min2 +pro); } sb.append(min); sb.append(""\n""); } System.out.println(sb); return; } } ",0
669,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; public class Menorah {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t > 0) {             int n = Integer.parseInt(br.readLine());             String source = br.readLine();             String destination = br.readLine();             int sameStatusOnes = 0;             int sameStatusZeros = 0;             int diffStatusOnes = 0;             int diffStatusZeros = 0;             for (int i = 0; i < n; i++) {                 char c1 = source.charAt(i);                 char c2 = destination.charAt(i);                 if (c1 == c2) {                     if (c1 == '0') {                         sameStatusZeros += 1;                     } else {                         sameStatusOnes += 1;                     }                 } else {                     if (c1 == '0') {                         diffStatusZeros += 1;                     } else {                         diffStatusOnes += 1;                     }                 }             }             int sameStatus = sameStatusOnes + sameStatusZeros;             int diffStatus = diffStatusOnes + diffStatusZeros;                          if (sameStatus == n) {                 System.out.println(0);             } else if (diffStatus == n) {                                  if (diffStatus % 2 == 0 && diffStatusOnes == (n + 1) / 2)                     System.out.println(n);                 else                     System.out.println(-1);             } else {                 int op1 = -1;                 int op2 = -1;                 if (sameStatus % 2 != 0 && sameStatusOnes == (sameStatus + 1) / 2)                     op1 = sameStatus;                 if (diffStatus % 2 == 0 && diffStatusOnes == (diffStatus + 1) / 2)                     op2 = diffStatus;                 if (op1 != -1 && op2 != -1)                     System.out.println(Integer.min(op1, op2));                 else if (op1 != -1)                     System.out.println(op1);                 else if (op2 != -1)                     System.out.println(op2);                 else                     System.out.println(-1);             }             t--;         }     } } ","import java.util.*; import java.io.*; public class C {     static PrintWriter pw;     void solve(int n, char[] a, char[] b) {         int same = 0, diff = 0;         int[] sameCnt = {0, 0}, diffCnt = {0, 0};         for (int i = 0; i < n; i++) {             if (a[i] == b[i]) {                 same++;                 sameCnt[a[i] - '0']++;             } else {                 diff++;                 diffCnt[a[i] - '0']++;             }         }                  int res = Integer.MAX_VALUE;         if (same % 2 != 0 && sameCnt[1] - sameCnt[0] == 1) res = Math.min(res, same);         if (diff % 2 == 0 && diffCnt[1] == diffCnt[0]) res = Math.min(res, diff);         pr(res == Integer.MAX_VALUE ? -1 : res);     }     private void run() {                  FastScanner fs = new FastScanner();         int t = fs.nextInt();         while (t-- > 0) {             int n = fs.nextInt();             char[] a = fs.next().toCharArray(), b = fs.next().toCharArray();             solve(n, a, b);         }     }     private final String INPUT = ""input.txt"";     private final String OUTPUT = ""output.txt"";          public static void main(String[] args) {         pw = new PrintWriter(System.out);         new C().run();         pw.close();     }     void pr(int num) {         pw.println(num);     }     void pr(long num) {         pw.println(num);     }     void pr(double num) {         pw.println(num);     }     void pr(String s) {         pw.println(s);     }     void pr(char c) {         pw.println(c);     }           } ",0
670,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; public class Menorah {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t > 0) {             int n = Integer.parseInt(br.readLine());             String source = br.readLine();             String destination = br.readLine();             int sameStatusOnes = 0;             int sameStatusZeros = 0;             int diffStatusOnes = 0;             int diffStatusZeros = 0;             for (int i = 0; i < n; i++) {                 char c1 = source.charAt(i);                 char c2 = destination.charAt(i);                 if (c1 == c2) {                     if (c1 == '0') {                         sameStatusZeros += 1;                     } else {                         sameStatusOnes += 1;                     }                 } else {                     if (c1 == '0') {                         diffStatusZeros += 1;                     } else {                         diffStatusOnes += 1;                     }                 }             }             int sameStatus = sameStatusOnes + sameStatusZeros;             int diffStatus = diffStatusOnes + diffStatusZeros;                          if (sameStatus == n) {                 System.out.println(0);             } else if (diffStatus == n) {                                  if (diffStatus % 2 == 0 && diffStatusOnes == (n + 1) / 2)                     System.out.println(n);                 else                     System.out.println(-1);             } else {                 int op1 = -1;                 int op2 = -1;                 if (sameStatus % 2 != 0 && sameStatusOnes == (sameStatus + 1) / 2)                     op1 = sameStatus;                 if (diffStatus % 2 == 0 && diffStatusOnes == (diffStatus + 1) / 2)                     op2 = diffStatus;                 if (op1 != -1 && op2 != -1)                     System.out.println(Integer.min(op1, op2));                 else if (op1 != -1)                     System.out.println(op1);                 else if (op2 != -1)                     System.out.println(op2);                 else                     System.out.println(-1);             }             t--;         }     } } ","import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class Template {      static int mod = 1000000007; public static void main(String[] args){         FastScanner sc = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int yo = sc.nextInt();         while (yo-- > 0) {             int n = sc.nextInt();             String s = sc.next();             String t = sc.next();             int op1 = cal(s,t,n);             int op2 = helper(s,t,n,'0');             int op3 = helper(s,t,n,'1');             int ans = min(min(op1,op2),op3);             if(ans == Integer.MAX_VALUE){                 out.println(""-1"");             }             else {                 out.println(ans);             }         }         out.close(); }          static int helper(String str1, String str2, int n, int ch){         char[] s = str1.toCharArray();         char[] t = str2.toCharArray();         int idx = -1;         for(int i = 0; i < n; i++){             if(s[i] == '1' && t[i] == ch){                 idx = i;                 break;             }         }         if(idx == -1){             return Integer.MAX_VALUE;         }         for(int i = 0; i < n; i++){             if(i == idx) continue;             if(s[i] == '1') s[i] = '0';             else s[i] = '1';         }         int ans = cal(String.valueOf(s),String.valueOf(t),n);         if(ans == Integer.MAX_VALUE) return ans;         return 1 + ans;     }     static int cal(String s, String t, int n){         int op01 = 0;         int op10 = 0;         for(int i = 0; i < n; i++){             if(s.charAt(i) != t.charAt(i)){                 if(s.charAt(i) == '1') op10++;                 else op01++;             }         }         if(op10 != op01){             return Integer.MAX_VALUE;         }         return op01 + op10;     }                               } ",0
671,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; public class _1615C16 {   public static void main(String[] args) throws IOException {     BufferedReader in = new BufferedReader(new InputStreamReader(System.in));     int t = Integer.parseInt(in.readLine());     int n;     int s1, e1;     char[] start, end;     for (int s = 0; s < t; s++) {       n = Integer.parseInt(in.readLine());       start = in.readLine().toCharArray();       end = in.readLine().toCharArray();       s1 = 0;       e1 = 0;       for (int i = 0; i < n; i++) if (start[i] == '1') s1++;       for (int i = 0; i < n; i++) if (end[i] == '1') e1++;       if (e1 == n - s1 + 1) {         for (int i = 0; i < n; i++) {           if (start[i] == '1') start[i] = '0';           else start[i] = '1';         }         int ct = 0;         for (int i = 0; i < n; i++) if (start[i] != end[i]) ct++;         int ct2 = Integer.MAX_VALUE;         if (s1 == e1) {           for (int i = 0; i < n; i++) {             if (start[i] == '1') start[i] = '0';             else start[i] = '1';           }           ct2 = 0;           for (int i = 0; i < n; i++) if (start[i] != end[i]) ct2++;         }         System.out.println(Math.min(ct, ct2));       } else if (s1 == e1) {         int ct = 0;         for (int i = 0; i < n; i++) if (start[i] != end[i]) ct++;         int ct2 = Integer.MAX_VALUE;         if (e1 == n - s1 + 1) {           ct2 = 0;           for (int i = 0; i < n; i++) if (start[i] != end[i]) ct2++;         }         System.out.println(Math.min(ct, ct2));       } else {         System.out.println(-1);       }     }   } } ","import java.io.*; import java.util.*; public class B { public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); PrintWriter output = new PrintWriter(System.out); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); char initial[] = scan.next().toCharArray(); char desired[] = scan.next().toCharArray(); int lit1 = 0, lit2 = 0; int ans = Integer.MAX_VALUE; for(int i = 0;i<n;i++) { if(initial[i]=='1') lit1++; if(desired[i]=='1') lit2++; } if(lit1==lit2) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]!=desired[i]) count++; ans = Math.min(ans, count); } if(lit2==(n-lit1+1)) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]==desired[i]) count++; ans = Math.min(ans, count); } if(ans == Integer.MAX_VALUE) ans = -1; output.println(ans); } output.flush(); } } ",0
672,"import java.io.BufferedReader; import java.io.IOException; import java.lang.*; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.out; import java.util.*; import java.io.File; import java.io.PrintStream; import java.io.PrintWriter; import java.math.BigInteger; public class Main {   static final int mod = 1000000007; static final long temp = 998244353; static final long MOD = 1000000007; static final long M = (long)1e9+7;                                                                                                                 public static void main(String[] args) throws Exception  { Reader sc = new Reader(); PrintWriter fout = new PrintWriter(System.out);  int tt = sc.nextInt(); while(tt-- > 0) {        int n = sc.nextInt();        char[] a = sc.next().toCharArray(), b = sc.next().toCharArray();                int c00 = 0, c01 = 0, c10 = 0, c11 = 0;        for(int i = 0;i<n;i++)        {        if(a[i] == '0' && b[i] == '0')        {        c00++;        }        else if(a[i] == '0' && b[i] == '1')        {        c01++;        }        else if(a[i] == '1' && b[i] == '0')        {        c10++;        }        else if(a[i] == '1' && b[i] == '1')        {        c11++;        }        }                int ans = mod;        if(c01 == c10) ans = min(ans, c01 + c10);        if(c11 == c00 + 1) ans = min(ans, c11 + c00);                fout.println((ans == mod) ? -1 : ans); } fout.close(); } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();         int t;         t = in.nextInt();                  while (t > 0) {             solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n, _00 = 0, _01 = 0, _11 = 0, _10 = 0;             n = in.nextInt();             char[] s = in.next().toCharArray();             char[] s1 = in.next().toCharArray();             for (int i = 0; i < n; i++) {                 if(s[i]==s1[i]){                     if(s[i]=='0'){                         _00++;                     }                     else{                         _11++;                     }                 }                 else{                     if(s[i]=='0'){                         _01++;                     }                     else{                         _10++;                     }                 }             }             int ans = Integer.MAX_VALUE;             if(_10 ==_01){                 ans = 2*_01;             }             if(_11 == _00 + 1){                 ans = Math.min(ans, 2*_00 + 1);             }             if(ans == Integer.MAX_VALUE){                 out.println(-1);             }             else{                 out.println(ans);             }         }     }                                   static final Random random=new Random();           } ",0
673,"import java.io.BufferedReader; import java.io.IOException; import java.lang.*; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.out; import java.util.*; import java.io.File; import java.io.PrintStream; import java.io.PrintWriter; import java.math.BigInteger; public class Main {   static final int mod = 1000000007; static final long temp = 998244353; static final long MOD = 1000000007; static final long M = (long)1e9+7;                                                                                                                 public static void main(String[] args) throws Exception  { Reader sc = new Reader(); PrintWriter fout = new PrintWriter(System.out);  int tt = sc.nextInt(); while(tt-- > 0) {        int n = sc.nextInt();        char[] a = sc.next().toCharArray(), b = sc.next().toCharArray();                int c00 = 0, c01 = 0, c10 = 0, c11 = 0;        for(int i = 0;i<n;i++)        {        if(a[i] == '0' && b[i] == '0')        {        c00++;        }        else if(a[i] == '0' && b[i] == '1')        {        c01++;        }        else if(a[i] == '1' && b[i] == '0')        {        c10++;        }        else if(a[i] == '1' && b[i] == '1')        {        c11++;        }        }                int ans = mod;        if(c01 == c10) ans = min(ans, c01 + c10);        if(c11 == c00 + 1) ans = min(ans, c11 + c00);                fout.println((ans == mod) ? -1 : ans); } fout.close(); } } ","import java.util.*; import java.io.*; public class C { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(); char[] s = new char[n]; char[] t = new char[n]; s = sc.next().toCharArray(); t = sc.next().toCharArray(); int a = 0, b = 0, c = 0, d = 0; for(int i = 0; i < n; i++) { if(s[i] == '0' && t[i] == '0') a++; if(s[i] == '1' && t[i] == '0') b++; if(s[i] == '0' && t[i] == '1') c++; if(s[i] == '1' && t[i] == '1') d++; } int res = Integer.MAX_VALUE; if(b == c || b+1 == c) { if((b + c) % 2 == 0) { res = Math.min(res, b + c); } } if(a == d || a+1 == d) { if((a + d) % 2 == 1) { res = Math.min(res, a + d); } } if(res == Integer.MAX_VALUE) System.out.println(-1); else System.out.println(res); } } } ",0
674,"import java.io.BufferedReader; import java.io.IOException; import java.lang.*; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.out; import java.util.*; import java.io.File; import java.io.PrintStream; import java.io.PrintWriter; import java.math.BigInteger; public class Main {   static final int mod = 1000000007; static final long temp = 998244353; static final long MOD = 1000000007; static final long M = (long)1e9+7;                                                                                                                 public static void main(String[] args) throws Exception  { Reader sc = new Reader(); PrintWriter fout = new PrintWriter(System.out);  int tt = sc.nextInt(); while(tt-- > 0) {        int n = sc.nextInt();        char[] a = sc.next().toCharArray(), b = sc.next().toCharArray();                int c00 = 0, c01 = 0, c10 = 0, c11 = 0;        for(int i = 0;i<n;i++)        {        if(a[i] == '0' && b[i] == '0')        {        c00++;        }        else if(a[i] == '0' && b[i] == '1')        {        c01++;        }        else if(a[i] == '1' && b[i] == '0')        {        c10++;        }        else if(a[i] == '1' && b[i] == '1')        {        c11++;        }        }                int ans = mod;        if(c01 == c10) ans = min(ans, c01 + c10);        if(c11 == c00 + 1) ans = min(ans, c11 + c00);                fout.println((ans == mod) ? -1 : ans); } fout.close(); } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);                 public static void main(String [] args)     {                  int testcases = i();         while(testcases-->0)         {                          solve();         }         out.flush();         out.close();     }     static void solve()     {          int n = i();         char c[] = inputC();         char d[] = inputC();         int x01=0,x10=0,x00=0,x11=0;         for(int i=0;i<n;i++)         {             if(c[i]=='0'&&d[i]=='0')x00++;             if(c[i]=='0'&&d[i]=='1')x01++;             if(c[i]=='1'&&d[i]=='0')x10++;             if(c[i]=='1'&&d[i]=='1')x11++;         }         int ans = Integer.MAX_VALUE;         if(x01==0 && x10==0)         {             System.out.println(0);             return ;         }         if(x11==x00+1)         {             ans = Math.min(x11+x00,ans);         }       if(x01==x10)         {             ans = Math.min(x01+x10,ans);         }         if(ans == Integer.MAX_VALUE){             ans = -1;         }         System.out.println(ans);     }                     static int i() {         return sc.nextInt();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }                                                                                                                                                        } ",0
675,"import java.io.BufferedReader; import java.io.IOException; import java.lang.*; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.out; import java.util.*; import java.io.File; import java.io.PrintStream; import java.io.PrintWriter; import java.math.BigInteger; public class Main {   static final int mod = 1000000007; static final long temp = 998244353; static final long MOD = 1000000007; static final long M = (long)1e9+7;                                                                                                                 public static void main(String[] args) throws Exception  { Reader sc = new Reader(); PrintWriter fout = new PrintWriter(System.out);  int tt = sc.nextInt(); while(tt-- > 0) {        int n = sc.nextInt();        char[] a = sc.next().toCharArray(), b = sc.next().toCharArray();                int c00 = 0, c01 = 0, c10 = 0, c11 = 0;        for(int i = 0;i<n;i++)        {        if(a[i] == '0' && b[i] == '0')        {        c00++;        }        else if(a[i] == '0' && b[i] == '1')        {        c01++;        }        else if(a[i] == '1' && b[i] == '0')        {        c10++;        }        else if(a[i] == '1' && b[i] == '1')        {        c11++;        }        }                int ans = mod;        if(c01 == c10) ans = min(ans, c01 + c10);        if(c11 == c00 + 1) ans = min(ans, c11 + c00);                fout.println((ans == mod) ? -1 : ans); } fout.close(); } } ","import javax.swing.plaf.IconUIResource; import java.lang.reflect.Array; import java.text.CollationElementIterator; import java.util.*; import java.io.*;       public class Main {                           public static int mod = (int) (1e9 + 7);     static int ans = Integer.MAX_VALUE;       public static void main(String hi[]) throws Exception {         FastReader sc = new FastReader();         int t =sc.nextInt();         while(t-->0)         {             int n =sc.nextInt();             String a = sc.nextLine(),b=sc.nextLine();               int count1=0,count2=0,count3=0,count4=0;               for(int i=0;i<n;i++)             {                 if(a.charAt(i)=='0'&&b.charAt(i)=='0')                     count1++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='1')                     count2++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='0')                     count3++;                 else  if(a.charAt(i)=='0'&&b.charAt(i)=='1')                     count4++;             }             int ans=Integer.MAX_VALUE;               if(count3==count4)                 ans=Math.min(count3*2,ans);               if(count2==count1+1)                 ans=Math.min(ans,2*count1+1);                           if(ans==Integer.MAX_VALUE)                 System.out.println(-1);             else System.out.println(ans);           }       }                                                                 } ",0
676,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class C{     private static int maxWords = 0;     private static int[][] words;     private static int n;     private static int[] netwrtchar(int index){         ArrayList<Integer> list = new ArrayList<>();         for(int i=0; i<n; i++){             int sum = 0;             for(int j=0; j<words[i].length; j++){                 if(j==index) continue;                 sum += words[i][j];             }             list.add(words[i][index] - sum);                      }         Collections.sort(list, Collections.reverseOrder());         int[] f = new int[list.size()];         for(int i=0; i<list.size(); i++){             f[i] = list.get(i);         }         return f;     }     private static int maxWindow(int[] f){         int count = 0, sum = 0;         int index = 0;         while(index<f.length && sum+f[index]>0){             sum += f[index++];             count++;         }         return count;     }     public static void main(String[] args){         FS sc = new FS();         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-->0){             n = sc.nextInt();             words = new int[n][5];             maxWords = 0;             for(int i=0; i<n; i++){                 String s = sc.next();                 for(int j=0; j<s.length(); j++){                     words[i][s.charAt(j)-'a']++;                 }             }             int maxWindow = 0;             for(int i=0; i<5; i++){                 int[] f = netwrtchar(i);                 int current = maxWindow(f);                 maxWindow = Math.max(maxWindow, current);             }             System.out.println(maxWindow);         }         pw.flush();         pw.close();     }      } ","import java.io.*; import java.util.*; import static java.lang.Math.max; import static java.lang.Math.min; public class C {     Reader source;     BufferedReader br;     StringTokenizer in;     PrintWriter out;     public String nextToken() throws Exception {         while (in == null || !in.hasMoreTokens()) {             in = new StringTokenizer(br.readLine());         }         return in.nextToken();     }     public int nextInt() throws Exception {         return Integer.parseInt(nextToken());     }               public void run() throws Exception {         source = OJ ? new InputStreamReader(System.in) : new FileReader(""C.in"");         br = new BufferedReader(source);         out = new PrintWriter(System.out);         solve();         out.flush();     }     public static void main(String[] args) throws Exception {         new C().run();     }     private boolean OJ = System.getProperty(""ONLINE_JUDGE"") != null;     public void solve() throws Exception {         int t = nextInt();         while (t-- > 0) {             int n = nextInt();             int A[] = new int [n];             int B[] = new int [n];             int C[] = new int [n];             int D[] = new int [n];             int E[] = new int [n];             for (int i = 0; i < n; i++) {                 String s = nextToken();                 int sz = s.length();                 int a = 0, b = 0, c = 0, d = 0, e = 0;                 for (int j = 0; j < sz; j++) {                     if (s.charAt(j) == 'a') a++;                     if (s.charAt(j) == 'b') b++;                     if (s.charAt(j) == 'c') c++;                     if (s.charAt(j) == 'd') d++;                     if (s.charAt(j) == 'e') e++;                 }                 A[i] = a - b - c - d - e;                 B[i] = b - a - c - d - e;                 C[i] = c - a - b - d - e;                 D[i] = d - a - b - c - e;                 E[i] = e - a - b - c - d;             }             int ans = 0, sum;             sum = 0;             Collections.sort(A);             for (int j = 0; j < n; j++) {                 sum += A[j];                 if (sum <= 0) {                     ans = max(ans, j);                     break;                 }             }             if (sum > 0) ans = n;             sum = 0;             Collections.sort(B);             for (int j = 0; j < n; j++) {                 sum += B[j];                 if (sum <= 0) {                     ans = max(ans, j);                     break;                 }             }             if (sum > 0) ans = n;             sum = 0;             Collections.sort(C);             for (int j = 0; j < n; j++) {                 sum += C[j];                 if (sum <= 0) {                     ans = max(ans, j);                     break;                 }             }             if (sum > 0) ans = n;             sum = 0;             Collections.sort(D);             for (int j = 0; j < n; j++) {                 sum += D[j];                 if (sum <= 0) {                     ans = max(ans, j);                     break;                 }             }             if (sum > 0) ans = n;             sum = 0;             Collections.sort(E);             for (int j = 0; j < n; j++) {                 sum += E[j];                 if (sum <= 0) {                     ans = max(ans, j);                     break;                 }             }             if (sum > 0) ans = n;             System.out.println(ans);         }     } } ",0
677,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class C{     private static int maxWords = 0;     private static int[][] words;     private static int n;     private static int[] netwrtchar(int index){         ArrayList<Integer> list = new ArrayList<>();         for(int i=0; i<n; i++){             int sum = 0;             for(int j=0; j<words[i].length; j++){                 if(j==index) continue;                 sum += words[i][j];             }             list.add(words[i][index] - sum);                      }         Collections.sort(list, Collections.reverseOrder());         int[] f = new int[list.size()];         for(int i=0; i<list.size(); i++){             f[i] = list.get(i);         }         return f;     }     private static int maxWindow(int[] f){         int count = 0, sum = 0;         int index = 0;         while(index<f.length && sum+f[index]>0){             sum += f[index++];             count++;         }         return count;     }     public static void main(String[] args){         FS sc = new FS();         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-->0){             n = sc.nextInt();             words = new int[n][5];             maxWords = 0;             for(int i=0; i<n; i++){                 String s = sc.next();                 for(int j=0; j<s.length(); j++){                     words[i][s.charAt(j)-'a']++;                 }             }             int maxWindow = 0;             for(int i=0; i<5; i++){                 int[] f = netwrtchar(i);                 int current = maxWindow(f);                 maxWindow = Math.max(maxWindow, current);             }             System.out.println(maxWindow);         }         pw.flush();         pw.close();     }      } ","import java.io.*; import java.util.*; public class Main { public static void main(String[] args)throws Exception {     Main ob=new Main();     ob.fun(); } public void fun()throws Exception {     BufferedReader br=new BufferedReader(new InputStreamReader(System.in));     PrintWriter pw=new PrintWriter(System.out);     int t=Integer.parseInt(br.readLine());     while(t-->0)     {         int n=Integer.parseInt(br.readLine());         int ar[][]=new int [n][5];         int len[]=new int[n];         for(int i=0;i<n;i++)         {             String s=(br.readLine());             for(int j=0;j<s.length();j++)             {                 ar[i][s.charAt(j)-'a']++;                 len[i]=s.length();             }         }         int max=0;         for(int i=0;i<5;i++)         {             int num=fun2(ar,len,i);             max=Math.max(num,max);         }         pw.println(max);              }     pw.flush(); } public int fun2(int ar[][],int len[],int col) {     int ct=0;     int n=ar.length;     PriorityQueue<Integer> pq=new PriorityQueue<Integer>(Collections.reverseOrder());     for(int i=0;i<n;i++)     {         int dif=2*ar[i][col]-len[i];         pq.add(dif);     }     int sum=0;     while(pq.size()>0)     {         int num=(int)(pq.poll());         if((sum+num)>0)         {             ct++;             sum+=num;         }     }     return ct; } } ",0
678,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class C{     private static int maxWords = 0;     private static int[][] words;     private static int n;     private static int[] netwrtchar(int index){         ArrayList<Integer> list = new ArrayList<>();         for(int i=0; i<n; i++){             int sum = 0;             for(int j=0; j<words[i].length; j++){                 if(j==index) continue;                 sum += words[i][j];             }             list.add(words[i][index] - sum);                      }         Collections.sort(list, Collections.reverseOrder());         int[] f = new int[list.size()];         for(int i=0; i<list.size(); i++){             f[i] = list.get(i);         }         return f;     }     private static int maxWindow(int[] f){         int count = 0, sum = 0;         int index = 0;         while(index<f.length && sum+f[index]>0){             sum += f[index++];             count++;         }         return count;     }     public static void main(String[] args){         FS sc = new FS();         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-->0){             n = sc.nextInt();             words = new int[n][5];             maxWords = 0;             for(int i=0; i<n; i++){                 String s = sc.next();                 for(int j=0; j<s.length(); j++){                     words[i][s.charAt(j)-'a']++;                 }             }             int maxWindow = 0;             for(int i=0; i<5; i++){                 int[] f = netwrtchar(i);                 int current = maxWindow(f);                 maxWindow = Math.max(maxWindow, current);             }             System.out.println(maxWindow);         }         pw.flush();         pw.close();     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.List; import java.util.StringTokenizer; import java.util.TreeMap; public class C_CF {     public static void main(String[] args) {         FastScanner57 fs = new FastScanner57();         PrintWriter pw = new PrintWriter(System.out);         int t = fs.ni();                  for (int tc = 0; tc < t; tc++) {             int n = fs.ni();             String[] s = new String[n];             for (int i = 0; i < n; i++) {                 s[i] = fs.next();             }             int res = c(0,s);             for (int i = 1; i < 5; i++) {                 res = Math.max(res,c(i,s));             }             pw.println(res);         }                  pw.close();     }     public static int c(int l, String[] s) {         List<Integer> list = new ArrayList();         for (int i = 0; i < s.length; i++) {             String t = s[i];             int ct = 0;             for (int j = 0; j < t.length(); j++) {                 if (t.charAt(j)-'a'==l) {                     ct++;                 } else {                     ct--;                 }             }             list.add(ct);         }         Collections.sort(list);         Collections.reverse(list);         int sum = 0;         for (int i = 0; i < s.length; i++) {             sum += list.get(i);             if (sum<=0) return i;         }         return list.size();     }                         public static void sort(long[] a) {         List<Long> list = new ArrayList();         for (int i = 0; i < a.length; i++) {             list.add(a[i]);         }         Collections.sort(list);         for (int i = 0; i < a.length; i++) {             a[i] = list.get(i);         }     }      } ",0
679,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.StringTokenizer; public class C{     private static int maxWords = 0;     private static int[][] words;     private static int n;     private static int[] netwrtchar(int index){         ArrayList<Integer> list = new ArrayList<>();         for(int i=0; i<n; i++){             int sum = 0;             for(int j=0; j<words[i].length; j++){                 if(j==index) continue;                 sum += words[i][j];             }             list.add(words[i][index] - sum);                      }         Collections.sort(list, Collections.reverseOrder());         int[] f = new int[list.size()];         for(int i=0; i<list.size(); i++){             f[i] = list.get(i);         }         return f;     }     private static int maxWindow(int[] f){         int count = 0, sum = 0;         int index = 0;         while(index<f.length && sum+f[index]>0){             sum += f[index++];             count++;         }         return count;     }     public static void main(String[] args){         FS sc = new FS();         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-->0){             n = sc.nextInt();             words = new int[n][5];             maxWords = 0;             for(int i=0; i<n; i++){                 String s = sc.next();                 for(int j=0; j<s.length(); j++){                     words[i][s.charAt(j)-'a']++;                 }             }             int maxWindow = 0;             for(int i=0; i<5; i++){                 int[] f = netwrtchar(i);                 int current = maxWindow(f);                 maxWindow = Math.max(maxWindow, current);             }             System.out.println(maxWindow);         }         pw.flush();         pw.close();     }      } ","import java.util.*; import java.io.*; public class Main{     public static void main(String[] args) {         MyScanner sc = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));                                             int test = sc.nextInt();         while(test -- > 0){             int n = sc.nextInt();             List<Integer> a = new ArrayList<>();             List<Integer> b = new ArrayList<>();             List<Integer> c = new ArrayList<>();             List<Integer> d = new ArrayList<>();             List<Integer> e = new ArrayList<>();             while(n-->0){                 int[] arr = new int[5];                                  char[] ch = sc.nextLine().toCharArray();                 int len = ch.length;                 for(char chhh : ch){                     arr[chhh-'a']++;                 }                 for(int i = 0 ; i < 5 ; i++){                     arr[i] = 2*arr[i] - len;                 }                                  a.add(arr[0]);                 b.add(arr[1]);                 c.add(arr[2]);                 d.add(arr[3]);                 e.add(arr[4]);               }                                       Collections.sort(a);             Collections.sort(b);             Collections.sort(c);             Collections.sort(d);             Collections.sort(e);                                                                              int max = 0;             int currSum = 0;             int words = 0;             boolean flag = true;             for(int i = a.size()-1 ; i >= 0 ; i--){                 if(currSum + a.get(i) <= 0){                     max = Math.max(max , words);                     flag = false;                     break;                 }else{                     currSum += a.get(i);                 }                 words++;             }             if(flag)                 max = Math.max(a.size(), max);                                                    currSum = 0;             words = 0;             flag = true;             for(int i = b.size()-1 ; i >= 0 ; i--){                 if(currSum + b.get(i) <= 0){                     max = Math.max(max , words);                     flag = false;                     break;                 }else{                     currSum += b.get(i);                 }                 words++;             }             if(flag)                 max = Math.max(a.size(), max);                                       currSum = 0;             words = 0;             flag = true;             for(int i = c.size()-1 ; i >= 0 ; i--){                 if(currSum + c.get(i) <= 0){                     max = Math.max(max , words);                     flag = false;                     break;                 }else{                     currSum += c.get(i);                 }                 words++;             }                  if(flag)                 max = Math.max(a.size(), max);                          currSum = 0;             words = 0;             flag = true;             for(int i = d.size()-1 ; i >= 0 ; i--){                 if(currSum + d.get(i) <= 0){                     max = Math.max(max , words);                     flag = false;                     break;                 }else{                     currSum += d.get(i);                 }                 words++;             }             if(flag)                 max = Math.max(a.size(), max);                          currSum = 0;             words = 0;             flag = true;             for(int i = e.size()-1 ; i >= 0 ; i--){                 if(currSum + e.get(i) <= 0){                     max = Math.max(max , words);                     flag = false;                     break;                 }else{                     currSum += e.get(i);                 }                 words++;             }                          if(flag)                 max = Math.max(a.size(), max);             out.println(max);         }                                    out.close();     }                                                                                                                         public static PrintWriter out;                      } ",0
680,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.*; import java.io.IOException; public class C_Phoenix_and_Towers {          public static class Pair implements Comparable<Pair> {         int id, h;         public Pair(int id, int h) {             this.id = id;             this.h = h;         }              }     public static void main(String[] args) throws java.lang.Exception {         FastReader sc = new FastReader();         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int m = sc.nextInt();             int x = sc.nextInt();             int tow[] = new int[n];             int ans[] = new int[n];             PriorityQueue<Pair> pq = new PriorityQueue<>();             for (int i = 0; i < n; i++) {                 tow[i] = sc.nextInt();             }             for (int i = 0; i < m; i++) {                 ans[i] = i + 1;                 pq.add(new Pair(i + 1, tow[i]));             }             for (int i = m; i < n; i++) {                 Pair p = pq.poll();                 p.h = p.h + tow[i];                 ans[i] = p.id;                 pq.add(p);             }             System.out.println(""YES"");             for (int i = 0; i < n; i++) {                 System.out.print(ans[i] + "" "");             }             System.out.println();         }     } } ","import java.io.*; import java.util.*;   public class Codeforces { public static class Tower implements Comparable<Tower>{ int val; int index; public Tower(int ind, int v) { val = v; index = ind; } } public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int cases = Integer.parseInt(br.readLine()); while(cases-- > 0) { String[] str = br.readLine().split("" ""); int n = Integer.parseInt(str[0]); int m = Integer.parseInt(str[1]); int x = Integer.parseInt(str[2]); int[] h = new int[n]; str = br.readLine().split("" ""); for(int i=0; i<n; i++) { h[i] = Integer.parseInt(str[i]); } PriorityQueue<Tower> q = new PriorityQueue<>(m); int[] ans = new int[n]; for(int i=0; i<m; i++) { q.add(new Tower(i, h[i])); ans[i] = i; } for(int i=m; i<n; i++) { Tower lowest = q.poll(); lowest.val += h[i]; ans[i] = lowest.index; q.add(lowest); } System.out.println(""YES""); for(int i=0; i<n; i++) { System.out.print((ans[i]+1) + "" ""); } System.out.println(); } } } ",1
681,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.*; import java.io.IOException; public class C_Phoenix_and_Towers {          public static class Pair implements Comparable<Pair> {         int id, h;         public Pair(int id, int h) {             this.id = id;             this.h = h;         }              }     public static void main(String[] args) throws java.lang.Exception {         FastReader sc = new FastReader();         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int m = sc.nextInt();             int x = sc.nextInt();             int tow[] = new int[n];             int ans[] = new int[n];             PriorityQueue<Pair> pq = new PriorityQueue<>();             for (int i = 0; i < n; i++) {                 tow[i] = sc.nextInt();             }             for (int i = 0; i < m; i++) {                 ans[i] = i + 1;                 pq.add(new Pair(i + 1, tow[i]));             }             for (int i = m; i < n; i++) {                 Pair p = pq.poll();                 p.h = p.h + tow[i];                 ans[i] = p.id;                 pq.add(p);             }             System.out.println(""YES"");             for (int i = 0; i < n; i++) {                 System.out.print(ans[i] + "" "");             }             System.out.println();         }     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Template { static class Pair implements Comparable<Pair> { int h; int ind; Pair(int h, int ind) { this.h = h; this.ind = ind; } } public static void main(String[] args) { FastReader fs=new FastReader(); int T=fs.nextInt(); for (int tt=0; tt<T; tt++) { int n = fs.nextInt(); int m = fs.nextInt(); int x = fs.nextInt(); if(n < m) { System.out.println(""NO""); continue; } Pair a[] = new Pair[n]; PriorityQueue<Pair> heap = new PriorityQueue<>(); for(int i=0;i<n;i++) { a[i] = new Pair(fs.nextInt(), i); } Arrays.sort(a); for(int i=1;i<=m;i++) { heap.add(new Pair(0, i)); } int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; int ans[] = new int[n]; int idx = 0; while(!heap.isEmpty() && idx < n) { Pair curr = heap.poll(); curr.h += a[idx].h; ans[a[idx].ind] = curr.ind; heap.add(new Pair(curr.h,  curr.ind)); idx++; } System.out.println(""YES""); for(int i:ans) System.out.print(i+"" ""); System.out.println(); } } } ",0
682,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.*; import static java.lang.Math.*; import static java.util.Arrays.*; import static java.lang.System.out; import static java.lang.Long.MAX_VALUE; public final class Main{     FastReader in;     StringBuffer sb;     public static void main(String[] args) {         new Main().run();     }     void run(){         in= new FastReader();         start();     }     void start(){         sb= new StringBuffer();         for(int t=in.nextInt();t>0;t--)             solve();         out.print(sb);     }     long MOD= 1000000007;     void solve(){         int n= in.nextInt();         int k= in.nextInt();         long[] a=longArr(k);         long[] t=longArr(k);         long[] ans= new long[n];         for(int i=0;i<n;i++){             ans[i]= Integer.MAX_VALUE;         }         for(int i=0;i<k;i++){             ans[(int) (a[i]-1)]= t[i];         }         long[] left= new long[n];         left[0]= ans[0];         for(int i=1;i<n;i++) {             left[i]= min(left[i-1]+1,ans[i]);         }         long[] right= new long[n];         right[n-1]= ans[n-1];         for(int i=n-2;i>=0;i--) {             right[i]= min(right[i+1]+1,ans[i]);         }         for(int i=0;i<n;i++)             sb.append(min(left[i], right[i])).append("" "");         sb.append(""\n"");     }               long[] longArr(int n){         long[] res= new long[n];         for(int i=0;i<n;i++){             res[i]= in.nextLong();         }         return res;     }     long MAX= MAX_VALUE;     int[] precomp= new int[(int) (MAX+1)];                                              } ","import java.io.*; import java.util.*; import java.lang.*; public class codeforces {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         if (System.getProperty(""ONLINE_JUDGE"") == null) {             long startTime = System.currentTimeMillis();             try {                 sc = new InputReader(new FileInputStream(""input.txt""));                 out = new PrintWriter(new FileOutputStream(""output.txt""));                 pr = new PrintWriter(new FileOutputStream(""error.txt""));             } catch (Exception ignored) {             }             int t = 1;             int tt = t;             t = sc.nextInt();             while (t-- > 0) {                 solve();             }             long endTime = System.currentTimeMillis();             System.out.println(""Time: "" + (endTime - startTime) / tt + "" ms"");             out.flush();             pr.flush();         } else {             sc = new InputReader(inputStream);             out = new PrintWriter(outputStream);             pr = new PrintWriter(outputStream);             int t = 1;             t = sc.nextInt();             while (t-- > 0) {                 solve();             }             out.flush();         }     }     public static void solve() {         n = sc.nextInt();         for (int i = 0; i < n; i++) {             dp[i] = inf;                 ans[i] = inf;         }         m = sc.nextInt();         for (int i = 0; i < m; i++)             arr[i] = sc.nextInt() - 1;         for (int i = 0; i < m; i++) {             arr2[i] = sc.nextInt();             dp[(int)arr[i]] = arr2[i];         }         temp = inf;         for (int i = 0; i < n; i++) {             temp = Math.min(temp, dp[i]);             ans[i] = Math.min(ans[i], temp);             temp++;         }         temp = inf;         for (int i = (int)n - 1; i > -1; i--) {             temp = Math.min(temp, dp[i]);             ans[i] = Math.min(ans[i], temp);             temp++;         }         for (int i = 0; i < n; i++)             out.print(ans[i] + "" "");         out.println("""");     }                    public static long n, m, temp;     public static int template_array_size = (int) 1e6 + 16813;     public static long[] arr = new long[template_array_size];     public static long[] arr2 = new long[template_array_size];     public static long[] dp = new long[template_array_size];     public static long[] ans = new long[template_array_size];     public static int inf = Integer.MAX_VALUE;     public static int minf = Integer.MIN_VALUE;     public static int mod = 1000000007;     public static int ml = (int) 1e9;     public static String s = """";     public static InputReader sc;     public static PrintWriter out;     public static PrintWriter pr;                                                                                                                                                           public static boolean sysFlag = System.getProperty(""ONLINE_JUDGE"") == null;                                                                                                     } ",0
683,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.ArrayList; public class Main { static int N=(int)2e5+10; static long[][] dp=new long[2][N]; static int[][] A=new int[2][N]; static ArrayList<ArrayList<Integer>> adj=new ArrayList<>(N); static { for(int i=0;i<N;i++) adj.add(new ArrayList<>()); } public static void dfs(int v,int p) { dp[0][v]=dp[1][v]=0; for(Integer u:adj.get(v)) { if(u==p) continue; dfs(u, v); dp[0][v]+=Math.max(Math.abs(A[0][v]-A[1][u])+dp[1][u], dp[0][u]+Math.abs(A[0][v]-A[0][u])); dp[1][v]+=Math.max(Math.abs(A[1][v]-A[1][u])+dp[1][u], dp[0][u]+Math.abs(A[1][v]-A[0][u])); } } public static void main(String[] args) throws Exception { BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); int t=Integer.parseInt(br.readLine()); while(t-->0) { int n=Integer.parseInt(br.readLine()); for(int i=1;i<=n;i++) { String[] ss1=br.readLine().split("" ""); A[0][i]=Integer.parseInt(ss1[0]); A[1][i]=Integer.parseInt(ss1[1]); adj.set(i, new ArrayList<>()); } for(int i=1;i<n;i++) { String[] ss2=br.readLine().split("" ""); int u=Integer.parseInt(ss2[0]); int v=Integer.parseInt(ss2[1]); adj.get(u).add(v); adj.get(v).add(u); } dfs(1, -1); System.out.println(Math.max(dp[0][1], dp[1][1])); }     } } ","import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.ArrayList; public class Main  {     static int N=(int)2e5+10;     static int[][] A=new int[2][N];     static long[][] dp=new long[2][N];     static ArrayList<ArrayList<Integer>> links=new ArrayList<>(N);     static {         for (int i=0;i<N;i++)             links.add(new ArrayList<>());     }     static void dfs(int v,int p)      {         dp[0][v]=dp[1][v]=0;         for (Integer link :links.get(v))         {             if (link==p) continue;             dfs(link,v);             dp[0][v]+=Math.max(Math.abs(A[0][v]-A[0][link])+dp[0][link],Math.abs(A[0][v]-A[1][link])+dp[1][link]);             dp[1][v]+=Math.max(Math.abs(A[1][v]-A[0][link])+dp[0][link],Math.abs(A[1][v]-A[1][link])+dp[1][link]);         }     } public static void main (String[] args) throws Exception { BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); int t=Integer.parseInt(br.readLine()),n,i; while (t-->0) {     n=Integer.parseInt(br.readLine());     for (i=1;i<=n;i++)     {         String[] in=br.readLine().split("" "");         A[0][i]=Integer.parseInt(in[0]);         A[1][i]=Integer.parseInt(in[1]);         links.set(i,new ArrayList<>());     }     for (i=1;i<n;i++)     {         String[] in=br.readLine().split("" "");         int a=Integer.parseInt(in[0]);         int b=Integer.parseInt(in[1]);         links.get(a).add(b);         links.get(b).add(a);     }     dfs(1,-1);     System.out.println(Math.max(dp[0][1],dp[1][1])); } } } ",1
684,"import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.*; import java.io.*; public class Main {     public static void main(String args[])throws Exception{         Input sc=new Input();         StringBuilder sb=new StringBuilder();         int t=sc.readInt();         for(int f=0;f<t;f++){             int n=sc.readInt();             String str[]=new String[n];             for(int i=0;i<n;i++){                 str[i]=sc.readString();             }             char ch[]={'a','b','c','d','e'};             int ans=0;             for(int i=0;i<5;i++){                 char c=ch[i];                 ArrayList<pair> lst=new ArrayList<>();                 int a[]=new int[n];                 for(int j=0;j<n;j++)                 {                     int count=0;                     for(int k=0;k<str[j].length();k++){                         if(str[j].charAt(k)==c)                             count++;                     }                     lst.add(new pair(count,(str[j].length()-count)));                 }                 Collections.sort(lst);                 int s1=0;int s2=0;                 int co=0;                 for(int j=0;j<lst.size();j++){                     int v1=lst.get(j).a;                     int v2=lst.get(j).b;                     if((s1+v1)>(s2+v2)){                         s1+=v1;                         s2+=v2;                         co++;                     }                                      }                 ans=Math.max(co,ans);             }                          sb.append(ans+""\n"");         }         System.out.print(sb);     } } class pair implements Comparable<pair>{     int a;     int b;     pair(int a,int b){         this.a=a;         this.b=b;     }      } ","import java.io.*; import java.util.*; public class C { static int n; public static void main (String[] args) throws IOException { FastReader io = new FastReader(); int t = io.nextInt(); for (int ii=0; ii<t; ii++) { n = io.nextInt(); String[] arr = new String[n]; for (int i=0; i<n; i++) { String str = io.next(); arr[i] = str; } char[] chars = new char[]{'a','b','c','d','e'}; int ans = -1; for (int i=0; i<5; i++) { ans = Math.max(ans, solve(arr, chars[i])); } System.out.println(ans); } } static int solve(String[] arr, char c) { Arrays.sort(arr, new Comp(c)); int good = 0; int total = 0; int ret = 0; for (int i=0; i<n; i++) { for (int j=0; j<arr[i].length(); j++) { if (arr[i].charAt(j) == c) good++; } total += arr[i].length(); if (2 * good > total) { ret++; } else { return ret; } } return ret; } static class Comp implements Comparator<String> { char c; public Comp (char c) { this.c = c; } } } ",0
685,"import java.io.BufferedReader; import java.io.InputStreamReader; public class AirConditioners { public static void main(String args[]) { try { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); while (t-- > 0) { br.readLine(); String[] str = br.readLine().split("" ""); int n = Integer.parseInt(str[0]); int k = Integer.parseInt(str[1]); String[] stra = br.readLine().split("" ""); String[] strk = br.readLine().split("" ""); int[] arr = new int[n]; for (int i = 0; i < n; i++) { arr[i] = Integer.MAX_VALUE; } int[][] ac = new int[k][2]; for (int i = 0; i < k; i++) { ac[i][1] = Integer.parseInt(stra[i]) - 1; ac[i][0] = Integer.parseInt(strk[i]); arr[ac[i][1]] = ac[i][0]; } sort(ac, 0, k-1); for (int i = 0; i < k; i++) { int j = ac[i][1]-1; while (j >= 0 && ac[i][0] + Math.abs(ac[i][1] - j) < arr[j]) { arr[j] = ac[i][0] + Math.abs(ac[i][1] - j); j--; } j = ac[i][1]+1; while (j < n && ac[i][0] + Math.abs(ac[i][1] - j) < arr[j]) { arr[j] = ac[i][0] + Math.abs(ac[i][1] - j); j++; } } for (int i = 0; i < n; i++) { System.out.print(arr[i] + "" ""); } System.out.println(); } } catch (Exception e) { return; } } static void merge(int arr[][], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; int L[][] = new int[n1][2]; int R[][] = new int[n2][2]; for (int i = 0; i < n1; ++i) { L[i][0] = arr[l + i][0]; L[i][1] = arr[l + i][1]; } for (int j = 0; j < n2; ++j) { R[j][0] = arr[m + 1 + j][0]; R[j][1] = arr[m + 1 + j][1]; } int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i][0] <= R[j][0]) { arr[k][0] = L[i][0]; arr[k][1] = L[i][1]; i++; } else { arr[k][0] = R[j][0]; arr[k][1] = R[j][1]; j++; } k++; } while (i < n1) { arr[k][0] = L[i][0]; arr[k][1] = L[i][1]; i++; k++; } while (j < n2) { arr[k][0] = R[j][0]; arr[k][1] = R[j][1]; j++; k++; } } static void sort(int arr[][], int l, int r) { if (l < r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } } ","import java.io.*; import java.util.*; public class E {   public static void main(String[] args) throws IOException {     FastReader fr = new FastReader();     PrintWriter pr = new PrintWriter(new OutputStreamWriter(System.out));     int t = fr.nextInt();     while (t-- > 0) {       int n = fr.nextInt(), k = fr.nextInt();       String[] arr = fr.nextLine().split("" "");       String[] temp = fr.nextLine().split("" "");       long[] L = new long[n];       long[] R = new long[n];       long[] c = new long[n];       Arrays.fill(c, Long.MAX_VALUE);       for (int i = 0; i < k; i++) {         c[toInt(arr[i]) - 1] = toInt(temp[i]);       }       long p = Integer.MAX_VALUE;       for (int i = 0; i < R.length; i++) {         p = Math.min(p + 1, c[i]);         L[i] = p;       }       p = Integer.MAX_VALUE;       for (int i = n - 1; i >= 0; i--) {         p = Math.min(p + 1, c[i]);         R[i] = p;       }       StringBuilder sb = new StringBuilder();       for (int i = 0; i < R.length; i++) {         sb.append(Math.min(R[i], L[i]) + "" "");       }       pr.println(sb.toString().trim());     }     pr.close();   }      static int toInt(String s) {     return Integer.parseInt(s);   }    } ",0
686,"import java.io.BufferedReader; import java.text.DecimalFormat; import java.text.ParseException; import java.text.SimpleDateFormat; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.util.*; import java.util.stream.Collectors; import java.util.stream.Stream; import java.io.*; public class abc { static PrintWriter pw; static long x = 1, y = 1; public static void main(String[] args) throws Exception { FastReader sc = new FastReader(); pw = new PrintWriter(System.out); int tst = sc.nextInt(); while(tst-->0) { int n=sc.nextInt(); int app[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) { app[i]=sc.nextInt(); } for(int i=0;i<n;i++) { h[i]=sc.nextInt(); } long man = 0; long last = app[n - 1] - h[n - 1] + 1; int end = n-1; for (int i = n-2; i >=0; i--) { if(app[i]>=last) { last = Math.min(last,app[i] - h[i] + 1); } else { long s = app[end]-last+1; man += (s*(s+1))/2; end = i; last = app[i] - h[i] + 1;; } } long s = app[end]-last+1; man += (s*(s+1))/2; pw.println(man); } pw.flush(); } } ","import java.util.*; import java.io.*; public class hmm { static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws Exception { int t =sc.nextInt(); while (t-- > 0) {              int n = sc.nextInt();              int []k = sc.nextIntArray(n);              int h[]=sc.nextIntArray(n);                    long mana = 0;              pair cur = new pair(k[n-1]-h[n-1]+1,k[n-1]);              for(int i=n-1;i>=0;i--) {              int s = k[i];              int start = s-h[i]+1;              if(s>=cur.x) {              cur.x = Math.min(start, cur.x);              }              else {              long x = cur.y - cur.x +1;              mana += x*(x+1)/2;              cur.x = start;              cur.y = s;              }              }                      long x = cur.y - cur.x +1;              mana += x*(x+1)/2;      pw.println(mana);                           } pw.close(); } static class pair { int x ; int y; public pair(int n,int c) { x= n; y = c; } } } ",1
687,"import java.io.BufferedReader; import java.text.DecimalFormat; import java.text.ParseException; import java.text.SimpleDateFormat; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.util.*; import java.util.stream.Collectors; import java.util.stream.Stream; import java.io.*; public class abc { static PrintWriter pw; static long x = 1, y = 1; public static void main(String[] args) throws Exception { FastReader sc = new FastReader(); pw = new PrintWriter(System.out); int tst = sc.nextInt(); while(tst-->0) { int n=sc.nextInt(); int app[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) { app[i]=sc.nextInt(); } for(int i=0;i<n;i++) { h[i]=sc.nextInt(); } long man = 0; long last = app[n - 1] - h[n - 1] + 1; int end = n-1; for (int i = n-2; i >=0; i--) { if(app[i]>=last) { last = Math.min(last,app[i] - h[i] + 1); } else { long s = app[end]-last+1; man += (s*(s+1))/2; end = i; last = app[i] - h[i] + 1;; } } long s = app[end]-last+1; man += (s*(s+1))/2; pw.println(man); } pw.flush(); } } ","import java.util.*; import java.io.*; public class q3{     static FastScanner fs = new FastScanner();     static PrintWriter pw = new PrintWriter(System.out);     static int[] sec;     static int[] health;     static int[] pp;     public static void main(String[] args){         int T = fs.nextInt();         for (int tt=0;tt<T;tt++){             int n = fs.nextInt();             sec = new int[n];             health = new int[n];             for (int i=0;i<n;i++) sec[i] = fs.nextInt();             for (int i=0;i<n;i++) health[i] = fs.nextInt();             pp = new int[]{sec[n-1]-health[n-1]+1, sec[n-1], health[n-1]};             long sum = 0;             for (int i=n-2;i>=0;i--){                 int left = sec[i] - health[i] + 1, right = sec[i], top = health[i];                 if (right < pp[0]){                     sum += ((long)pp[2] + 1) * (long)pp[2] / 2;                     pp = new int[]{left, right, top};                 }                 else if (left < pp[0]){                     pp[0] = left;                     pp[2] = top + (pp[1] - right);                 }             }             sum += ((long)pp[2] + 1) * (long)pp[2] / 2;             pw.println(sum);         }         pw.close();     }           } ",0
688,"import java.io.BufferedReader; import java.util.StringTokenizer; import java.io.InputStreamReader; import java.io.IOException; import java.io.PrintWriter; import java.util.ArrayList; public class C {     static int[][] lr = new int[2][(int)2e5+10];     static long[][] dp = new long[2][(int)2e5+10];     static ArrayList<ArrayList<Integer>> g;     public static void main(String[] args) {                  FastReader fr = new FastReader();         PrintWriter out = new PrintWriter(System.out, true);         int cases = fr.nextInt();         for(int c = 0; c < cases; c++) {             int nodes = fr.nextInt();             g = new ArrayList<ArrayList<Integer>>();                          for(int i = 1; i <= nodes; i++) {                 lr[0][i] = fr.nextInt();                 lr[1][i] = fr.nextInt();             }             for(int i = 0; i <= nodes; i++) {                 g.add(new ArrayList<Integer>());             }             for(int i = 0; i < nodes-1; i++) {                 int f = fr.nextInt();                 int t = fr.nextInt();                 g.get(f).add(t);                 g.get(t).add(f);             }             DFS(1, -1);             out.write(Math.max(dp[0][1], dp[1][1]) + ""\n"");         }         out.close();     }     static void DFS(int v, int p) {         dp[0][v] = dp[1][v] = 0;         for(Integer u : g.get(v)) {             if (u == p) continue;             DFS(u, v);             dp[0][v] += Math.max(Math.abs(lr[0][v] - lr[1][u]) + dp[1][u], dp[0][u] + Math.abs(lr[0][v] - lr[0][u]));             dp[1][v] += Math.max(Math.abs(lr[1][v] - lr[1][u]) + dp[1][u], dp[0][u] + Math.abs(lr[1][v] - lr[0][u]));         }     }      } ","import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.ArrayList; public class Main  {     static int N=(int)2e5+10;     static int[][] A=new int[2][N];     static long[][] dp=new long[2][N];     static ArrayList<ArrayList<Integer>> links=new ArrayList<>(N);     static {         for (int i=0;i<N;i++)             links.add(new ArrayList<>());     }     static void dfs(int v,int p)      {         dp[0][v]=dp[1][v]=0;         for (Integer link :links.get(v))         {             if (link==p) continue;             dfs(link,v);             dp[0][v]+=Math.max(Math.abs(A[0][v]-A[0][link])+dp[0][link],Math.abs(A[0][v]-A[1][link])+dp[1][link]);             dp[1][v]+=Math.max(Math.abs(A[1][v]-A[0][link])+dp[0][link],Math.abs(A[1][v]-A[1][link])+dp[1][link]);         }     } public static void main (String[] args) throws Exception { BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); int t=Integer.parseInt(br.readLine()),n,i; while (t-->0) {     n=Integer.parseInt(br.readLine());     for (i=1;i<=n;i++)     {         String[] in=br.readLine().split("" "");         A[0][i]=Integer.parseInt(in[0]);         A[1][i]=Integer.parseInt(in[1]);         links.set(i,new ArrayList<>());     }     for (i=1;i<n;i++)     {         String[] in=br.readLine().split("" "");         int a=Integer.parseInt(in[0]);         int b=Integer.parseInt(in[1]);         links.get(a).add(b);         links.get(b).add(a);     }     dfs(1,-1);     System.out.println(Math.max(dp[0][1],dp[1][1])); } } } ",1
689,"import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStream; import java.io.OutputStreamWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.PriorityQueue; import java.util.Map.Entry; import java.util.Random; import java.util.TreeSet; public final class CF_724_D2_D2 { static boolean verb=true; static void output(Object o){outputWln(""""+o+""\n"");} static void outputWln(Object o){try {out.write(""""+ o);} catch (Exception e) {}} static long mod=1000000007; static BufferedWriter out; static InputReader reader; static int PX=Integer.MAX_VALUE; static int NX=Integer.MIN_VALUE; static void process() throws Exception { out = new BufferedWriter(new OutputStreamWriter(System.out)); reader = new InputReader(System.in); int T=reader.readInt(); int CX=26; for (int t=0;t<T;t++) { int n=reader.readInt(); int[] b=new int[n]; for (int i=0;i<n;i++) { b[i]=reader.readInt(); } TreeSet<Integer> ts=new TreeSet<Integer>(); ts.add(b[0]); ts.add(NX); ts.add(PX); int core=b[0]; boolean ok=true; for (int i=1;i<n;i++) { int x=b[i]; if (x==core) { } else if (x<core) { int y=ts.lower(core); if (y>x) { ok=false; break; } core=x; ts.add(x); } else { int y=ts.higher(core); if (y<x) { ok=false; break; } core=x; ts.add(x); } } if (ok) output(""YES""); else output(""NO""); } try { out.close(); } catch (Exception Ex) { } } public static void main(String[] args) throws Exception { process(); } } ","import java.util.Scanner; import java.util.TreeSet; public class D {     public static void main(String[] args) {         Scanner scn = new Scanner(System.in);         int test = scn.nextInt();         for (int t = 0; t < test; t++) {             int n = scn.nextInt();             int[] b = new int[n];             TreeSet<Integer> ts = new TreeSet<>();             int lastAdded = -1;             boolean ans = true;             for (int i = 0; i < n; i++) {                 b[i] = scn.nextInt();             }             for (int val : b) {                 if (t == 4) {                     int x = 2;                 }                 if (val > lastAdded) {                     Integer between = ts.higher(lastAdded);                     if (between != null && between < val) {                         ans = false;                         break;                     }                 }                 if (val < lastAdded) {                     Integer between = ts.lower(lastAdded);                     if (between != null && between > val) {                         ans = false;                         break;                     }                 }                 ts.add(val);                 lastAdded = val;             }             if (ans) System.out.println(""YES"");             else System.out.println(""NO"");         }     }      } ",0
690,"import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStream; import java.io.OutputStreamWriter; import java.util.ArrayList; import java.util.InputMismatchException; import java.util.List; import java.util.StringJoiner; public class Solution {   private static List<Long> chairs;   private static List<Long> folks;   private static Long[] data;   private static Long[][] cache;   public static void main(String[] args) {     Print print = new Print();     Scan scan = new Scan();     int n = scan.scanInt();     data = scan.scan1dLongArray();     chairs = new ArrayList<>();     folks = new ArrayList<>();     cache = new Long[n][n];     for (int i = 0; i < n; i++) {       if (data[i] == 0) {         chairs.add((long) i);       } else {         folks.add((long) i);       }     }     print.printLine(Long.toString(solve(folks, chairs, 0, 0)));     print.close();   }   private static long solve(List<Long> folks, List<Long> chairs, int i, int j) {     if (i == folks.size()) {       return 0;     }     if (j == chairs.size()) {       return Integer.MAX_VALUE;     }     if (cache[i][j] != null) {       return cache[i][j];     }     return cache[i][j] = Math         .min(Math.abs(folks.get(i) - chairs.get(j)) + solve(folks, chairs, i + 1, j + 1),             solve(folks, chairs, i, j + 1));   }   static class Scan {     private byte[] buf = new byte[1024];     private int index;     private InputStream in;     private int total;     public Scan() {       in = System.in;     }     public int scan() {       if (total < 0) {         throw new InputMismatchException();       }       if (index >= total) {         index = 0;         try {           total = in.read(buf);         } catch (IOException ignored) {         }         if (total <= 0) {           return -1;         }       }       return buf[index++];     }     public int scanInt() {       int integer = 0;       int n = scan();       while (isWhiteSpace(n)) {         n = scan();       }       int neg = 1;       if (n == '-') {         neg = -1;         n = scan();       }       while (!isWhiteSpace(n)) {         if (n >= '0' && n <= '9') {           integer *= 10;           integer += n - '0';           n = scan();         } else {           throw new InputMismatchException();         }       }       return neg * integer;     }                                        public Long[] scan1dLongArray() {       String[] s = this.scanString().split("" "");       Long[] arr = new Long[s.length];       for (int i = 0; i < s.length; i++) {         arr[i] = Long.parseLong(s[i]);       }       return arr;     }          public String scanString() {       StringBuilder sb = new StringBuilder();       int n = scan();       while (isWhiteSpace(n)) {         n = scan();       }       while (!isWhiteSpace(n)) {         sb.append((char) n);         n = scan();       }       return sb.toString();     }     private boolean isWhiteSpace(int n) {       if (n == '\n' || n == '\r' || n == '\t' || n == -1) {         return true;       }       return false;     }   }    } ","import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStream; import java.io.OutputStreamWriter; import java.util.ArrayList; import java.util.InputMismatchException; import java.util.List; import java.util.StringJoiner; public class D {   private static List<Long> chairs;   private static List<Long> folks;   private static Long[] data;   private static Long[][] cache;   public static void main(String[] args) {     Print print = new Print();     Scan scan = new Scan();     int n = scan.scanInt();     data = scan.scan1dLongArray();     chairs = new ArrayList<>();     folks = new ArrayList<>();     cache = new Long[n][n];     for (int i = 0; i < n; i++) {       if (data[i] == 0) {         chairs.add((long) i);       } else {         folks.add((long) i);       }     }     print.printLine(Long.toString(solve(folks, chairs, 0, 0)));     print.close();   }   private static long solve(List<Long> folks, List<Long> chairs, int i, int j) {     if (i == folks.size()) {       return 0;     }     if (j == chairs.size()) {       return Integer.MAX_VALUE;     }     if (cache[i][j] != null) {       return cache[i][j];     }     return cache[i][j] = Math         .min(Math.abs(folks.get(i) - chairs.get(j)) + solve(folks, chairs, i + 1, j + 1),             solve(folks, chairs, i, j + 1));   }   static class Scan {     private byte[] buf = new byte[1024];     private int index;     private InputStream in;     private int total;     public Scan() {       in = System.in;     }     public int scan() {       if (total < 0) {         throw new InputMismatchException();       }       if (index >= total) {         index = 0;         try {           total = in.read(buf);         } catch (IOException ignored) {         }         if (total <= 0) {           return -1;         }       }       return buf[index++];     }     public int scanInt() {       int integer = 0;       int n = scan();       while (isWhiteSpace(n)) {         n = scan();       }       int neg = 1;       if (n == '-') {         neg = -1;         n = scan();       }       while (!isWhiteSpace(n)) {         if (n >= '0' && n <= '9') {           integer *= 10;           integer += n - '0';           n = scan();         } else {           throw new InputMismatchException();         }       }       return neg * integer;     }                                        public Long[] scan1dLongArray() {       String[] s = this.scanString().split("" "");       Long[] arr = new Long[s.length];       for (int i = 0; i < s.length; i++) {         arr[i] = Long.parseLong(s[i]);       }       return arr;     }          public String scanString() {       StringBuilder sb = new StringBuilder();       int n = scan();       while (isWhiteSpace(n)) {         n = scan();       }       while (!isWhiteSpace(n)) {         sb.append((char) n);         n = scan();       }       return sb.toString();     }     private boolean isWhiteSpace(int n) {       if (n == '\n' || n == '\r' || n == '\t' || n == -1) {         return true;       }       return false;     }   }    } ",1
691,"import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; import java.util.ArrayList; import java.util.Arrays; public class Armchairs {     static  ArrayList<Integer> f;     static ArrayList<Integer> u;     static int dp[][];     static int fun(int i, int j){         if(i == f.size()) return 0;         if(j == u.size()) return 99999999;         if(dp[i][j] != -1) return dp[i][j];         int ans1 = fun(i, j+1);         int ans2 = fun(i+1, j+1) + Math.abs(f.get(i)-u.get(j));         return dp[i][j] = Math.min(ans1, ans2);     }     private static int solve(int n, int a[]) {         for (int i = 0; i < n; i++) {             if (a[i]==0)                 u.add(i);             else                 f.add(i);         }         return fun(0,0);     }     public static void main(String[] args)             throws IOException {         Scanner s = new Scanner();         int t = 1;         StringBuilder ans = new StringBuilder();         int count = 0;         while (t-- > 0) {             int n = s.nextInt();             int a[] = new int[n];             dp=new int[n][n];             for (int i = 0; i < n; i++) {                 a[i]=s.nextInt();             }             f=new ArrayList<>();             u=new ArrayList<>();             for( int i=0; i<n; i++) Arrays.fill(dp[i],-1);             ans.append(solve(n, a)).append(""\n"");         }         System.out.println(ans.toString());     }                               } ","import java.io.*; import java.util.*; public class A { static Scanner sc = new Scanner(System.in); static StringBuilder out = new StringBuilder(); public static void main(String[] args) throws IOException { int t = 1; while (t-- > 0) { A run = new A(); run.run(); } System.out.println(out); } public void run() throws IOException { int n = sc.nextInt(); int a[] = new int[n]; TreeSet<Integer> ts = new TreeSet<>(); ArrayList<Integer> a1 = new ArrayList<>(); ArrayList<Integer> b = new ArrayList<>(); for (int i = 0; i < n; i++) { a[i] = sc.nextInt(); if (a[i] == 1) a1.add(i); else b.add(i); } int dp[] = new int[n]; int sum = 0; memo = new int[n][n]; for (int tem[] : memo) Arrays.fill(tem, -1); sum = solve(0, 0, a1, b); out.append(sum + ""\n""); } static int memo[][]; static int solve(int i, int j, ArrayList<Integer> a, ArrayList<Integer> b) { if(i==a.size())return 0; if(a.size()-i>b.size()-j)return (int)1e9; if(j==b.size())return (int)1e9; if(memo[i][j]!=-1)return memo[i][j]; int ans = (int) 1e9; ans = Math.min(solve(i + 1, j+1 , a, b) + Math.abs(a.get(i) - b.get(j)),solve(i,j+1,a,b)); return memo[i][j]=ans; } } ",0
692,"import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; import java.util.ArrayList; import java.util.Arrays; public class Armchairs {     static  ArrayList<Integer> f;     static ArrayList<Integer> u;     static int dp[][];     static int fun(int i, int j){         if(i == f.size()) return 0;         if(j == u.size()) return 99999999;         if(dp[i][j] != -1) return dp[i][j];         int ans1 = fun(i, j+1);         int ans2 = fun(i+1, j+1) + Math.abs(f.get(i)-u.get(j));         return dp[i][j] = Math.min(ans1, ans2);     }     private static int solve(int n, int a[]) {         for (int i = 0; i < n; i++) {             if (a[i]==0)                 u.add(i);             else                 f.add(i);         }         return fun(0,0);     }     public static void main(String[] args)             throws IOException {         Scanner s = new Scanner();         int t = 1;         StringBuilder ans = new StringBuilder();         int count = 0;         while (t-- > 0) {             int n = s.nextInt();             int a[] = new int[n];             dp=new int[n][n];             for (int i = 0; i < n; i++) {                 a[i]=s.nextInt();             }             f=new ArrayList<>();             u=new ArrayList<>();             for( int i=0; i<n; i++) Arrays.fill(dp[i],-1);             ans.append(solve(n, a)).append(""\n"");         }         System.out.println(ans.toString());     }                               } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Random; import java.util.StringTokenizer; import java.util.ArrayList; public class Armchairs { static ArrayList<Integer> one; static ArrayList<Integer> zero; public static void main(String args[]) { FastScanner fs=new FastScanner(); int n=fs.nextInt(); int []arr=new int[n]; one=new ArrayList<>(); zero=new ArrayList<>(); for(int i=0;i<arr.length;i++) { arr[i]=fs.nextInt(); if(arr[i]==1) one.add(i); else zero.add(i); } int [][]dp=new int[arr.length][arr.length]; for(int i=0;i<arr.length;i++) Arrays.fill(dp[i], -1); System.out.println(dfs(dp,0,0)); } public static int dfs(int [][]dp,int i,int j) { if(i>=one.size()) return 0; if(j>=zero.size()) return (int)(1e9); if(dp[i][j]!=-1) return dp[i][j]; dp[i][j]=Math.min(Math.abs(one.get(i)-zero.get(j))+dfs(dp,i+1,j+1), dfs(dp,i,j+1)); return dp[i][j]; } static final Random random=new Random(); } ",0
693,"import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Round659 { static int rec = 0; static int X[] = { -1, 0, 0, 1 }; static int Y[] = { 0, -1, 1, 0 }; static long mod = 1000000007; static int last=0; static int maxDepth=0; public static List<Integer>[] initAdjacency(int n, int e, Reader scan, boolean type) throws IOException { List<Integer> adj[] = new ArrayList[n + 1]; for (int i = 0; i < e; i++) { int u = scan.nextInt(); int v = scan.nextInt(); if (adj[u] == null) adj[u] = new ArrayList<>(); if (type && adj[v] == null) adj[v] = new ArrayList<>(); adj[u].add(v); if (type) adj[v].add(u); } return adj; } public static void main(String[] args) throws IOException { Reader scan = new Reader(); int t = scan.nextInt(); while (t-- > 0) { D(scan); } } public static void D(Reader scan) throws IOException { int n=scan.nextInt(); int a=scan.nextInt(); int b=scan.nextInt(); int da=scan.nextInt(); int db=scan.nextInt(); List<Integer> adj[]=initAdjacency(n, n-1, scan, true); int d= dist(a, 0, adj, b); if(d<=da) { System.out.println(""Alice""); return; } if(db<=2*da) { System.out.println(""Alice""); return; } MyPair far1= farthest(1, 0, adj); MyPair far2=farthest(far1.weight, 0, adj); int diameter= far2.value-1; if(diameter<=2*da) { System.out.println(""Alice""); }else { System.out.println(""Bob""); } } public static MyPair farthest(int i, int parent, List<Integer> adj[]) { int dist=0; int node= i; for(Integer x: adj[i]) { if(x==parent) continue; MyPair recAns= farthest(x, i, adj); if(recAns.value>dist) { dist= recAns.value; node= recAns.weight; } } return new MyPair(dist+1, node); } public static int dist(int i, int parent, List<Integer> adj[], int target) { if(i==target) return 0; for(Integer x: adj[i]) { if(x==parent) continue; int recAns= dist(x, i, adj, target); if(recAns!=-1) { last=x; return recAns+1; } } return -1; } } class MyPair { int value; int weight; public MyPair(int value, int w) { this.value = value; weight = w; } } ","import java.util.*; import java.io.*; import java.math.*; public class D { static int visited[]; static int distance[]; private static ArrayList<Integer>[] adj;   private static void BFS(int node) { visited[node] = 1; Queue<Integer> q = new LinkedList<Integer>(); q.offer(node); distance[node] = 0; while(!q.isEmpty()) { int curr = q.poll(); for(int child : adj[curr]) { if(visited[child] == 0) { q.offer(child); distance[child] = distance[curr] + 1; visited[child] = 1; } } } } public static void process() throws IOException { int n = sc.nextInt(),a = sc.nextInt(),b = sc.nextInt(), da = sc.nextInt(),db = sc.nextInt(); adj = new ArrayList[n+1]; distance = new int[n+1]; visited = new int[n+1]; for(int i = 0; i<=n; i++)adj[i] = new ArrayList<Integer>(); for(int i =1; i<n; i++) { int u = sc.nextInt(),v = sc.nextInt(); adj[u].add(v); adj[v].add(u); } BFS(a); if(distance[b] <= da || db-da<=da) { System.out.println(""Alice""); return; } ArrayList<Pair> lis = new ArrayList<D.Pair>(); for(int i = 1; i<=n; i++)lis.add(new Pair(distance[i], i)); Collections.sort(lis); Pair e = lis.get(n-1); distance = new int[n+1]; visited = new int[n+1]; BFS(e.y); int max = 0; for(int i = 1; i<=n; i++)max = Math.max(max,distance[i]); if(max-da<=da) { System.out.println(""Alice""); return; } System.out.println(""Bob""); } static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; t = sc.nextInt(); int TTT = 1; while (t-- > 0) { process(); } out.flush(); out.close(); } static class Pair implements Comparable<Pair> { int x, y; Pair(int x, int y) { this.x = x; this.y = y; } } } ",0
694,"import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Round659 { static int rec = 0; static int X[] = { -1, 0, 0, 1 }; static int Y[] = { 0, -1, 1, 0 }; static long mod = 1000000007; static int last=0; static int maxDepth=0; public static List<Integer>[] initAdjacency(int n, int e, Reader scan, boolean type) throws IOException { List<Integer> adj[] = new ArrayList[n + 1]; for (int i = 0; i < e; i++) { int u = scan.nextInt(); int v = scan.nextInt(); if (adj[u] == null) adj[u] = new ArrayList<>(); if (type && adj[v] == null) adj[v] = new ArrayList<>(); adj[u].add(v); if (type) adj[v].add(u); } return adj; } public static void main(String[] args) throws IOException { Reader scan = new Reader(); int t = scan.nextInt(); while (t-- > 0) { D(scan); } } public static void D(Reader scan) throws IOException { int n=scan.nextInt(); int a=scan.nextInt(); int b=scan.nextInt(); int da=scan.nextInt(); int db=scan.nextInt(); List<Integer> adj[]=initAdjacency(n, n-1, scan, true); int d= dist(a, 0, adj, b); if(d<=da) { System.out.println(""Alice""); return; } if(db<=2*da) { System.out.println(""Alice""); return; } MyPair far1= farthest(1, 0, adj); MyPair far2=farthest(far1.weight, 0, adj); int diameter= far2.value-1; if(diameter<=2*da) { System.out.println(""Alice""); }else { System.out.println(""Bob""); } } public static MyPair farthest(int i, int parent, List<Integer> adj[]) { int dist=0; int node= i; for(Integer x: adj[i]) { if(x==parent) continue; MyPair recAns= farthest(x, i, adj); if(recAns.value>dist) { dist= recAns.value; node= recAns.weight; } } return new MyPair(dist+1, node); } public static int dist(int i, int parent, List<Integer> adj[], int target) { if(i==target) return 0; for(Integer x: adj[i]) { if(x==parent) continue; int recAns= dist(x, i, adj, target); if(recAns!=-1) { last=x; return recAns+1; } } return -1; } } class MyPair { int value; int weight; public MyPair(int value, int w) { this.value = value; weight = w; } } ","import java.util.*; import java.io.*; public class MyClass {               static ArrayList<Integer> edge[];     public static void main(String args[])     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);         int tc=fs.nextInt();         while(tc-->0)         {             int n=fs.nextInt();             int a=fs.nextInt();             int b=fs.nextInt();             int da=fs.nextInt();             int db=fs.nextInt();             edge=new ArrayList[n+1];             for(int i=1;i<=n;i++)             edge[i]=new ArrayList<>();             for(int i=1;i<n;i++)             {                 int u=fs.nextInt();                 int v=fs.nextInt();                 edge[u].add(v);                 edge[v].add(u);             }             int dist[]=new int[n+1];             Arrays.fill(dist,-1);             dist[a]=0;             Queue<Integer> queue=new LinkedList<>();             queue.add(a);             while(!queue.isEmpty())             {                 int node=queue.poll();                 for(int v:edge[node])                 {                     if(dist[v]==-1)                     {                         dist[v]=dist[node]+1;                         queue.add(v);                     }                 }             }             if(dist[b]<=da)             {                 pw.println(""Alice"");                 continue;             }             int mx=0,mxvert=1;             for(int i=1;i<=n;i++)             {                 if(dist[i]>mx)                 {                     mx=dist[i];                     mxvert=i;                 }             }             Arrays.fill(dist,-1);             dist[mxvert]=0;             queue.add(mxvert);             while(!queue.isEmpty())             {                 int node=queue.poll();                 for(int v:edge[node])                 {                     if(dist[v]==-1)                     {                         dist[v]=dist[node]+1;                         queue.add(v);                     }                 }             }             for(int i=1;i<=n;i++)             mx=Math.max(mx,dist[i]);             db=Math.min(db,mx);             if(db>2*da)             pw.println(""Bob"");             else             pw.println(""Alice"");         }         pw.flush();         pw.close();     } } ",0
695,"import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; public class O4 {     private static String solve(int n, int[] a) {         if (n == 2) {             return a[1] + "" "" + (-a[0]);         }         int res[] = new int[n];         if (n % 2 == 0) {             diagonalAlignment(a, res, n);         } else {             diagonalAlignment(a, res, n - 3);             if ( a[n - 3] + a[n - 2] != 0)             {                 res[n - 1] = a[n - 3] + a[n - 2];                 res[n - 2] = -a[n - 1];                 res[n - 3] = -a[n - 1];             }             else if (a[n - 1] + a[n - 2] != 0){                 res[n - 3] = a[n - 1] + a[n - 2];                 res[n - 2] = -a[n - 3];                 res[n - 1] = -a[n - 3];             }             else {                 res[n - 2] = a[n - 1] + a[n - 3];                 res[n - 1] = -a[n - 2];                 res[n - 3] = -a[n - 2];             }         }         return formattedArray(res);     }     private static void diagonalAlignment(int[] a, int[] res, int n) {         for (int i = 0; i < n; i += 2) {             res[i + 1] = -a[i];             res[i] = a[i + 1];         }     }     public static void main(String[] args)             throws IOException {         Scanner s = new Scanner();         int t = 1;         t = s.nextInt();         StringBuilder ans = new StringBuilder();         int count = 0;         while (t-- > 0) {             int n = s.nextInt();             int a[] = new int[n];             getInputs(s, a, n);             ans.append(solve(n, a)).append(""\n"");         }         System.out.println(ans.toString());     }                                   public static String formattedArray(int a[]) {         StringBuilder res = new StringBuilder("""");         for (int e : a)             res.append(e).append("" "");         return res.toString().trim();     }     private static void getInputs(Scanner s, int[] a, int n) throws IOException {         for (int i = 0; i < n; i++) {             a[i] = s.nextInt();         }     } } ","import java.util.Scanner; public class D {     public static void main(String[] args) {         Scanner scn = new Scanner(System.in);         int t = scn.nextInt();         StringBuilder sb = new StringBuilder();         while (t-- > 0) {             int n = scn.nextInt();             int[] arr = new int[n];             int[] ans = new int[n];             for (int i = 0; i < n; i++) {                 arr[i] = scn.nextInt();             }             if (n % 2 != 0) {                 if (arr[n - 2] + arr[n - 3] == 0) {                     ans[n - 3] = -2 * arr[n - 1];                     ans[n - 2] = -arr[n - 1];                     ans[n - 1] = arr[n - 2] + arr[n - 3] * 2;                 } else {                     ans[n - 3] = -arr[n - 1];                     ans[n - 2] = -arr[n - 1];                     ans[n - 1] = arr[n - 2] + arr[n - 3];                 }                 n -= 3;             }             for (int i = 0; i < n; i += 2) {                 int div = 1;                 if (arr[i] % 2 == 0 && arr[i + 1] % 2 == 0)                     div = 2;                 ans[i] = arr[i + 1] / div;                 ans[i + 1] = -arr[i] / div;             }             for (int v : ans) {                 sb.append(v);                 sb.append("" "");             }             sb.append(""\n"");         }         System.out.println(sb);     } } ",0
696,"import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.util.ArrayList; public class Main {     private static Node[] nodes;     private static boolean[] visited;     private static void run() throws IOException {         int n = in.nextInt();         nodes = new Node[n];         for (int i = 0; i < n; i++) {             nodes[i] = new Node();         }         Edge[] edges = new Edge[n - 1];         for (int i = 0; i < n - 1; i++) {             edges[i] = new Edge();             edges[i].id = i;             edges[i].u = in.nextInt() - 1;             edges[i].v = in.nextInt() - 1;             nodes[edges[i].u].edge.add(edges[i]);             nodes[edges[i].v].edge.add(edges[i]);         }         for (int i = 0; i < n; i++) {             if (nodes[i].edge.size() >= 3) {                 out.println(-1);                 return;             }         }         int end_pos = 0;         visited = new boolean[n];         while (nodes[end_pos].edge.size() != 1) {             end_pos++;         }         visited = new boolean[n];         dfs(end_pos, 2);         for (int i = 0; i < n - 1; i++) {             out.print(edges[i].ans);             out.print(' ');         }         out.println();     }     private static void dfs(int now, int d) {         visited[now] = true;         for (Edge edge : nodes[now].edge) {             if (visited[edge.get_next(now)]) {                 continue;             }             edge.ans = d;             dfs(edge.get_next(now), d ^ 1);         }     }     private static class Node {         ArrayList<Edge> edge = new ArrayList<>();     }     private static class Edge {         int id, u, v, ans = -1;         int get_next(int now) {             return now != u ? u : v;         }     }     public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));         int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }         out.flush();         in.close();         out.close();     }          static final long mod = 1000000007;                    @SuppressWarnings(""FieldCanBeLocal"")     private static Reader in;     private static PrintWriter out;                          } ","import java.io.*; import java.util.*; public class c {     public static void main(String[] args){         FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             ArrayList<ArrayList<Edge>> graph = new ArrayList<>();             for(int i=0; i<n; i++){                 graph.add(new ArrayList<Edge>());             }             for(int i=0; i<n-1; i++){                 int u = sc.nextInt();                 int v = sc.nextInt();                 Edge e = new Edge(u-1, v-1, i+1);                 Edge e2 = new Edge(v-1, u-1, i+1);                 graph.get(u-1). add(e);                 graph.get(v-1).add(e2);             }             int edges[] = new int[n];             int indegree1count = 0;             int indegree2count = 0;             for(ArrayList<Edge> list : graph){                 if(list.size() == 1){                     indegree1count++;                 }                 else if(list.size() == 2){                     indegree2count++;                 }             }             if(indegree1count == 2 && indegree1count+indegree2count==n){                 for(int i=0; i<graph.size(); i++){                     ArrayList<Edge> list = graph.get(i);                     if(list.size() == 1){                         dfs(graph, edges, false, -1, i) ;                     }                 }                 for(int i=1; i<edges.length; i++){                     System.out.print(edges[i] + "" "");                 }                 System.out.println();             }             else{                 System.out.println(-1);             }         }     }     public static void dfs(ArrayList<ArrayList<Edge>> graph, int[] edges, boolean isprev2, int parent, int current){         for(Edge e : graph.get(current)){             if(e.v == parent){                 continue;             }             edges[e.id] = isprev2 ? 5 : 2;             dfs(graph, edges, !isprev2, current, e.v);         }     } } class Edge {     int u;     int v;     int id;     public Edge(int u, int v, int id) {         this.u = u;         this.v = v;         this.id = id;     } } ",0
697,"import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.util.LinkedList; public class C {     private static boolean[] visited;     private static Node[] nodes;     private static void run() throws IOException {         int n = in.nextInt();         nodes = new Node[n];         for (int i = 0; i < n; i++) {             nodes[i] = new Node();             nodes[i].index = i;             nodes[i].l = in.nextInt();             nodes[i].r = in.nextInt();         }         for (int i = 0; i < n - 1; i++) {             int x = in.nextInt() - 1;             int y = in.nextInt() - 1;             nodes[x].next.add(y);             nodes[y].next.add(x);         }         visited = new boolean[n];         dfs(0);         out.println(Math.max(nodes[0].ans_l, nodes[0].ans_r));     }     private static void dfs(int now) {         visited[now] = true;         for (int next : nodes[now].next) {             if (visited[next]) continue;             dfs(next);             nodes[now].ans_l += Math.max(nodes[next].ans_l + Math.abs(nodes[now].l - nodes[next].l), nodes[next].ans_r + Math.abs(nodes[now].l - nodes[next].r));             nodes[now].ans_r += Math.max(nodes[next].ans_l + Math.abs(nodes[now].r - nodes[next].l), nodes[next].ans_r + Math.abs(nodes[now].r - nodes[next].r));         }     }     static class Node {         int index;         long l, r;         long ans_l, ans_r;         LinkedList<Integer> next = new LinkedList<>();     }     public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));         int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }         out.flush();         in.close();         out.close();     }          static final long mod = 1000000007;               @SuppressWarnings(""FieldCanBeLocal"")     private static Reader in;     private static PrintWriter out;                          } ","import java.io.*; import java.util.*; public class C {     static InputReader in;     static PrintWriter out;     public static void main(String[] args) {                  initReaderPrinter(false);         solve(in.nextInt());              }     static int n;     static List<Integer>[] adj;     static long[] l, r;     static void solve(int testCnt) {         for (int testNumber = 0; testNumber < testCnt; testNumber++) {             n = in.nextInt();             adj = new List[n + 1];             for(int i = 0; i <= n; i++) {                 adj[i] = new ArrayList<>();             }             l = new long[n + 1];             r = new long[n + 1];             for(int i = 1; i <= n; i++) {                 l[i] = in.nextInt();                 r[i] = in.nextInt();             }             for(int i = 0; i < n - 1; i++) {                 int u = in.nextInt();                 int v = in.nextInt();                 adj[u].add(v);                 adj[v].add(u);             }             long[] ans = dfs(1, 0);             out.println(Math.max(ans[0], ans[1]));         }         out.close();     }     static long[] dfs(int curr, int par) {         long[] ans = new long[2];         for(int next : adj[curr]) {             if(next == par) continue;             long[] nextAns = dfs(next, curr);             ans[0] += Math.max(nextAns[0] + Math.abs(l[curr] - l[next]), nextAns[1] + Math.abs(l[curr] - r[next]));             ans[1] += Math.max(nextAns[0] + Math.abs(r[curr] - l[next]), nextAns[1] + Math.abs(r[curr] - r[next]));         }         return ans;     }     static void initReaderPrinter(boolean test) {         if (test) {             try {                 in = new InputReader(new FileInputStream(""src/input.in""));                 out = new PrintWriter(new FileOutputStream(""src/output.out""));             } catch (IOException e) {                 e.printStackTrace();             }         } else {             in = new InputReader(System.in);             out = new PrintWriter(System.out);         }     }      } ",0
698,"import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.util.TreeSet;   public class Main {       private static void run() throws IOException {         int n = in.nextInt();         long[] b = new long[n];         for (int i = 0; i < n; i++) {             b[i] = in.nextInt();         }           TreeSet<Long> set = new TreeSet<>();         set.add(b[0]);         long last = b[0];         long left = Long.MIN_VALUE;         long right = Long.MAX_VALUE;         boolean flag = true;         for (int i = 1; i < n; i++) {             if (b[i] > last) {                 set.add(right--);                 long pre_next = set.higher(last);                 if (pre_next < b[i]) {                     flag = false;                     break;                 } else if (pre_next == b[i]) {                     set.add(right--);                 } else {                     set.add(b[i]);                 }             } else if (b[i] < last) {                 set.add(left++);                 long pre_next = set.lower(last);                 if (pre_next > b[i]) {                     flag = false;                     break;                 } else if (pre_next == b[i]) {                     set.add(left++);                 } else {                     set.add(b[i]);                 }             } else {                 set.add(left++);                 set.add(right--);             }             last = b[i];         }           if (flag) {             out.println(""YES"");         } else {             out.println(""NO"");         }     }       public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));           int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }           out.flush();         in.close();         out.close();     }              static final long mod = 1000000007;                     @SuppressWarnings(""FieldCanBeLocal"")     private static Reader in;     private static PrintWriter out;                                    } ","import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.util.TreeSet; public class Main {     private static void run() throws IOException {         int n = in.nextInt();         long[] b = new long[n];         for (int i = 0; i < n; i++) {             b[i] = in.nextInt();         }         TreeSet<Long> set = new TreeSet<>();         set.add(b[0]);         long last = b[0];         long left = Long.MIN_VALUE;         long right = Long.MAX_VALUE;         boolean flag = true;         for (int i = 1; i < n; i++) {             if (b[i] > last) {                 set.add(right--);                 long pre_next = set.higher(last);                 if (pre_next < b[i]) {                     flag = false;                     break;                 } else if (pre_next == b[i]) {                     set.add(right--);                 } else {                     set.add(b[i]);                 }             } else if (b[i] < last) {                 set.add(left++);                 long pre_next = set.lower(last);                 if (pre_next > b[i]) {                     flag = false;                     break;                 } else if (pre_next == b[i]) {                     set.add(left++);                 } else {                     set.add(b[i]);                 }             } else {                 set.add(left++);                 set.add(right--);             }             last = b[i];         }         if (flag) {             out.println(""YES"");         } else {             out.println(""NO"");         }     }     public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));         int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }         out.flush();         in.close();         out.close();     }          static final long mod = 1000000007;               @SuppressWarnings(""FieldCanBeLocal"")     private static Reader in;     private static PrintWriter out;                          } ",1
699,"import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; public class Main {     private static void run() throws IOException {         int n = in.nextInt();         int[] a = new int[n];         int[] ans = new int[n];         int sum = 0;         a[0] = in.nextInt();         for (int i = 1; i < n; i++) {             a[i] = in.nextInt();             if (a[i] * sum <= 0) {                 ans[i] = 1;             } else {                 ans[i] = -1;             }             sum += ans[i] * a[i];         }         if (sum == 0) {             sum -= ans[1] * a[1];             ans[1] = -ans[1];             sum += ans[1] * a[1];         }         int d = gcd(Math.abs(sum), Math.abs(a[0]));         if (a[0] * sum < 0) {             ans[0] = Math.abs(sum) / d;         } else {             ans[0] = -Math.abs(sum) / d;         }         for (int i = 1; i < n; i++) {             ans[i] *= Math.abs(a[0]) / d;         }         print_array(ans);     }     public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));         int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }         out.flush();         in.close();         out.close();     }     private static int gcd(int a, int b) {         if (a == 0 || b == 0)             return 0;         while (b != 0) {             int tmp;             tmp = a % b;             a = b;             b = tmp;         }         return a;     }               private static Reader in;     private static PrintWriter out;               private static void print_array(int[] array) {         for (int now : array) {             out.print(now);             out.print(' ');         }         out.println();     }      } ","import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; public class Main {     private static void run() throws IOException {         int n = in.nextInt();         int[] a = new int[n];         int[] ans = new int[n];         int sum = 0;         a[0] = in.nextInt();         for (int i = 1; i < n; i++) {             a[i] = in.nextInt();                          if (a[i] * sum <= 0) {                 ans[i] = 1;             } else {                 ans[i] = -1;             }             sum += ans[i] * a[i];         }         if (sum == 0) {             sum -= ans[1] * a[1];             ans[1] = -ans[1];             sum += ans[1] * a[1];         }                  int d = gcd(Math.abs(sum), Math.abs(a[0]));                  if (a[0] * sum < 0) {             ans[0] = Math.abs(sum) / d;         } else {             ans[0] = -Math.abs(sum) / d;         }                  for (int i = 1; i < n; i++) {             ans[i] *= (double) Math.abs(a[0]) / d;         }         print_array(ans);     }     public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));         int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }         out.flush();         in.close();         out.close();     }          private static int gcd(int a, int b) {         if (a == 0 || b == 0)             return 0;         while (b != 0) {             int tmp;             tmp = a % b;             a = b;             b = tmp;         }         return a;     }     private static Reader in;     private static PrintWriter out;     private static void print_array(int[] array) {         for (int now : array) {             out.print(now);             out.print(' ');         }         out.println();     }      } ",1
700,"import java.io.DataInputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.PrintWriter; public class Main {     private static void run() throws IOException {         int n, k;         n = in.nextInt();         k = in.nextInt();         int[] a = new int[n];         long[] t = new long[k];         for (int i = 0; i < n; i++) {             a[i] = -1;         }         for (int i = 0; i < k; i++) {             a[in.nextInt() - 1] = i;         }         for (int i = 0; i < k; i++) {             t[i] = in.nextLong();         }         long[] dp = new long[n];         long now;         now = 2000000000;         for (int i = 0; i < n; i++) {             now++;             if (a[i] != -1) {                 now = Math.min(now, t[a[i]]);             }             dp[i] = now;         }         now = 2000000000;         for (int i = n - 1; i >= 0; i--) {             now++;             if (a[i] != -1) {                 now = Math.min(now, t[a[i]]);             }             dp[i] = Math.min(dp[i], now);         }         for (int i = 0; i < n; i++) {             out.printf(""%d "", dp[i]);         }         out.println();     }     public static void main(String[] args) throws IOException {         in = new Reader();         out = new PrintWriter(new OutputStreamWriter(System.out));         int t = in.nextInt();         for (int i = 0; i < t; i++) {             run();         }         out.flush();         in.close();         out.close();     }          static final long mod = 1000000007;               @SuppressWarnings(""FieldCanBeLocal"")     private static Reader in;     private static PrintWriter out;                          } ","import java.io.*; import java.util.*; public class AirConditioners { public static void main(String[] args) throws IOException { InputStream inputStream = System.in; InputReader in = new InputReader(inputStream); BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out)); int t = in.nextInt(); while (t-- != 0) { int n = in.nextInt(); int k = in.nextInt(); HashMap<Integer, Integer> hm = new HashMap<>(); int[] ac = in.readArray(k); for (int idx = 0; idx < ac.length; idx++) { hm.put(ac[idx], in.nextInt()); } Arrays.sort(ac); long[] lmin = new long[n]; long val = (long) Integer.MAX_VALUE; int acdx = 0; for (int idx = 0; idx < lmin.length; idx++) { if (acdx < ac.length && ac[acdx] - 1 == idx) { val = (long) Math.min(val, hm.get(ac[acdx])); acdx++; } lmin[idx] = val; val++; } acdx = ac.length - 1; val = Integer.MAX_VALUE; for (int idx = lmin.length-1; idx >= 0; idx--) { if (acdx >= 0 && ac[acdx] - 1 == idx) { val = (long) Math.min(val, hm.get(ac[acdx])); acdx--; } lmin[idx] = Math.min(lmin[idx], val); val++; } for (long x : lmin) { out.write(x + "" ""); } out.newLine(); } out.close(); } } ",0
701,"import java.io.IOException;     import java.io.InputStream;     import java.io.PrintWriter;     import java.util.*;       public class SetorDecrease {         static InputReader inputReader=new InputReader(System.in);         static void solve()         {             int n=inputReader.nextInt();             long k=inputReader.nextLong();             long sum=0;             long arr[]=new long[n];             for (int i=0;i<n;i++)             {                 arr[i]=inputReader.nextLong();             }             SortDec(arr);             for (int i=0;i<n-1;i++)             {                 sum+=arr[i];             }             long ans=Long.MAX_VALUE;             for (int i=0;i<n;i++)             {                long remval=k-sum;                long val=fdiv(remval,i+1);                ans=Math.min(ans,i+Math.max(arr[n-1]-val,0));                sum-=arr[i];             }             out.println(ans);         }         static void SortDec(long arr[])         {             List<Long>list=new ArrayList<>();             for(long ele:arr)             {                 list.add(ele);             }             Collections.sort(list,Collections.reverseOrder());             int n=arr.length;             for (int i=0;i<n;i++)             {                 arr[i]=list.get(i);               }           }        static long fdiv(long X, long Y) {             if (X >= 0) {                 return X / Y;             } else {                 return (X-Y+1) / Y;             }         }         static PrintWriter out=new PrintWriter((System.out));         public static void main(String args[])throws IOException         {             int t=inputReader.nextInt();             while (t-->0) {                 solve();             }                 out.close();         }              } ","import java.io.*; import java.util.*; public class Main {     static int i, j, k, n, m, t, y, x, sum = 0;     static long mod = 998244353;     static FastScanner fs = new FastScanner();     static PrintWriter out = new PrintWriter(System.out);     static String str;     public static void main(String[] args) throws IOException {         t = fs.nextInt();         while (t-- > 0) {             n = fs.nextInt();             long k = fs.nextLong();             long sum=0;             int[] arr = fs.readArray(n);             for(i=0;i<n;i++)                 sum+=arr[i];             Arrays.sort(arr);             long[] suffix = new long[n];             suffix[n-1] = arr[n-1]-arr[0];             for(i=n-2;i>=0;i--){                 suffix[i] = suffix[i+1]+arr[i]-arr[0];             }             long ans = sum-k;             if(ans<=0){                 out.println(0);                 continue;             }             for(i=n-1;i>0;i--){                 long temp = sum-k;                 long ansHere;                 if(suffix[i]>=temp){                     ansHere = n-i;                 }                 else{                     long y = temp - suffix[i];                     long x = n-i+1;                     long moves = y/x;                     if(y%x!=0)                         moves++;                     ansHere = moves+(n-i);                 }                 ans = Math.min(ans,ansHere);             }             out.println(ans);         }         out.close();     }                                   } ",0
702,"import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class DisJump {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader sc = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Solver solver = new Solver();         int t = 1;         while (t-- != 0) {             solver.solve(sc, out);         }         out.close();     }          static class Solver {         public void solve(InputReader sc, PrintWriter out) {             int n = sc.nextInt();             int[] h = sc.nextIntArray(n);             ArrayList<Integer>[] g = new ArrayList[n];             for(int i = 0; i < n; i++) g[i] = new ArrayList<>();             for(int rot = 0; rot < 2; rot++) {                 int[] stk = new int[n];                 int at = -1;                 for(int i = 0; i < n; i++) {                     while (at!=-1 && h[stk[at]]<h[i]) g[stk[at--]].add(i);                     if(at!=-1) {                         g[stk[at]].add(i);                         if(h[stk[at]]==h[i]) at--;                     }                     stk[++at] = i;                 }                 for(int i = 0; i < n; i++) h[i] = -h[i];             }             int[] qu = new int[n];             int[] dist = new int[n];             Arrays.fill(dist,-1);             int qTop = 0;             int qEnd = 1;             qu[0] = 0;             dist[0] = 0;             while (qTop<qEnd) {                 int front = qu[qTop];                 for(int v : g[front]) {                     if(dist[v]==-1) {                         qu[qEnd] = v;                         dist[v] = dist[front]+1;                         qEnd++;                     }                 }                 qTop++;             }             out.println(dist[n-1]);         }     }                          } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.util.ArrayList; import java.util.Arrays; import java.util.Stack; import java.util.StringTokenizer; public class D { public static int[] rightGreaterEle(long[] a) { int n = a.length; int ans[] = new int[n]; ans[n - 1] = -1; Stack<Integer> st = new Stack<>(); st.add(n - 1); for (int i = n - 2; i >= 0; i--) { if (st.isEmpty() || a[st.peek()] >= a[i]) { ans[i] = st.peek(); st.push(i); } else { while (!st.isEmpty() && a[st.peek()] < a[i]) { st.pop(); } if (st.isEmpty()) ans[i] = -1; else ans[i] = st.peek(); st.push(i); } } return ans; } public static int[] rightSideSmaller(long[] a) { int n = a.length; int ans[] = new int[n]; ans[n - 1] = -1; Stack<Integer> st = new Stack<>(); st.add(n - 1); for (int i = n - 2; i >= 0; i--) { if (st.isEmpty() || a[st.peek()] <= a[i]) { ans[i] = st.peek(); st.push(i); } else { while (!st.isEmpty() && a[st.peek()] > a[i]) { st.pop(); } if (st.isEmpty()) ans[i] = -1; else ans[i] = st.peek(); st.push(i); } } return ans; } public static int[] leftSideGreater(long[] a) { int n = a.length; int ans[] = new int[n]; ans[0] = -1; Stack<Integer> st = new Stack<>(); st.push(0); for (int i = 1; i < n; i++) { if (st.isEmpty() || a[st.peek()] >= a[i]) { ans[i] = st.peek(); st.push(i); } else { while (!st.isEmpty() && a[st.peek()] < a[i]) { st.pop(); } if (st.isEmpty()) ans[i] = -1; else ans[i] = st.peek(); st.push(i); } } return ans; } public static int[] leftSideSmaller(long[] a) { int n = a.length; int ans[] = new int[n]; ans[0] = -1; Stack<Integer> st = new Stack<>(); st.push(0); for (int i = 1; i < n; i++) { if (st.isEmpty() || a[st.peek()] <= a[i]) { ans[i] = st.peek(); st.push(i); } else { while (!st.isEmpty() && a[st.peek()] > a[i]) { st.pop(); } if (st.isEmpty()) ans[i] = -1; else ans[i] = st.peek(); st.push(i); } } return ans; } public static void main(String[] args) { FastScanner sc = new FastScanner(); int n = sc.nextInt(); long a[] = new long[n]; for (int i = 0; i < n; i++) a[i] = sc.nextLong(); int rg[] = rightGreaterEle(a); int rs[] = rightSideSmaller(a); int lg[] = leftSideGreater(a); int ls[] = leftSideSmaller(a); int dp[] = new int[n]; Arrays.fill(dp, Integer.MAX_VALUE); dp[0] = 0; for(int i=1;i<n;i++) dp[i]=dp[i-1]+1; for (int i = 0; i < n; i++) { int l1 = ls[i], l2 = lg[i]; if (l1 != -1) dp[i] = Math.min(dp[i], dp[l1] + 1); if (l2 != -1) dp[i] = Math.min(dp[i], dp[l2] + 1); int r1 = rs[i], r2 = rg[i]; if (r1 != -1) dp[r1] = Math.min(dp[r1], dp[i] + 1); if (r2 != -1) dp[r2] = Math.min(dp[r2], dp[i] + 1); } System.out.println(dp[n-1]); } } ",0
703,"import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class InterestingStory {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader sc = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Solver solver = new Solver(); int t = sc.nextInt();         while (t-- != 0) {             solver.solve(sc, out);         }         out.close();     }     static class Solver {         public void solve(InputReader sc, PrintWriter out) {             int n = sc.nextInt();             char[][] words = new char[n][];             for(int i = 0; i < n; i++) words[i] = sc.next().toCharArray();             int[][] arr = new int[n][];             for(int i = 0; i < n; i++) {                 arr[i] = new int[words[i].length];                 for(int j = 0; j < arr[i].length; j++) arr[i][j] = words[i][j]-'a';             }             int max = 0;             for(int now = 0; now < 5; now++) {                 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());                 for(int i = 0; i < n; i++) {                     int nowcnt = 0;                     int othercnt = 0;                     for(int j = 0; j < arr[i].length; j++) {                         if(arr[i][j]==now) nowcnt++;                         else othercnt++;                     }                     pq.add(nowcnt-othercnt);                 }                 int canTake = 0;                 int sum = 0;                 while(!pq.isEmpty()) {                     int nowAdd = pq.poll();                     if(sum+nowAdd>0) {                         sum += nowAdd;                         canTake++;                     } else {                         break;                     }                 }                 max = Math.max(max,canTake);             }             out.println(max);         }     }                          } ","import java.io.*; import java.util.*;  public class Solution{     public static void main (String[] args) throws java.lang.Exception {         FastReader sc = new FastReader();         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));         int testCase = sc.nextInt();         while (testCase-->0){             int n = sc.nextInt();             String[] strArr = new String[n];             for(int i=0; i<n; i++) {                 strArr[i]=sc.nextLine();             }             int[] total = new int[5];             ArrayList<int[]> al = new ArrayList<>();             for(int i=0; i<n; i++){                 int[] arr= new int[5];                 for(int j=0; j<strArr[i].length(); j++){                     arr[strArr[i].charAt(j)-'a']++;                 }                 for(int j=0; j<5; j++){                     total[j]+=arr[j];                 }                 al.add(arr);             }             int ans=0;             for(int i=0; i<5; i++){                 ArrayList<Integer> all = new ArrayList<>();                 for(int j=0; j<n; j++){                     all.add(strArr[j].length()-2*al.get(j)[i]);                 }                 java.util.Collections.sort(all);                 int c=0, d=0;                 for(int j=0; j<n; j++){                     c+=all.get(j);                     if(c<0) d=j+1;                 }                 ans = Math.max(ans,d);             }             System.out.println(ans);         }     }           } ",0
704,"import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; public class Solution {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Main solver = new Main();         boolean multipleTC = true;         int testCount = multipleTC ? Integer.parseInt(in.next()) : 1;         for (int i = 1; i <= testCount; i++)             solver.solve(in, out, i);         out.close();     }     static class Main {         PrintWriter out;         InputReader in;         public void solve(InputReader in, PrintWriter out, int test) {             this.out = out;             this.in = in;             int n = ni();             String[] arr = new String[n];             int[][] freq = new int[n][5];             int[][] rem = new int[n][5];             for(int i = 0; i < n; i++){                 arr[i] = n();                 for(int j = 0; j < arr[i].length(); j++)                     freq[i][arr[i].charAt(j) - 'a']++;                 for(int j = 0; j < 5; j++)                     rem[i][j] = arr[i].length() - freq[i][j];             }             int ans = 0;             for(int i = 0; i < 5; i++){                 int[] vals = new int[n];                 for(int j = 0; j < n; j++)                     vals[j] = freq[j][i] - rem[j][i];                 Arrays.sort(vals);                 int sum = 0, x = 0;                 for(int j = n - 1; j >= 0; j--){                     if(sum + vals[j] > 0){                         x++;                         sum += vals[j];                     } else {                         break;                     }                 }                 if(x > ans) {                     ans = x;                 }             }             System.out.println(ans);         }                  String n(){             return in.next();         }         int ni() {             return in.nextInt();         }                       }      } ","import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ",0
705,"import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; public class Solution {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Main solver = new Main();         boolean multipleTC = true;         int testCount = multipleTC ? Integer.parseInt(in.next()) : 1;         for (int i = 1; i <= testCount; i++)             solver.solve(in, out, i);         out.close();     }     static class Main {         PrintWriter out;         InputReader in;         public void solve(InputReader in, PrintWriter out, int test) {             this.out = out;             this.in = in;             int n = ni();             String[] arr = new String[n];             int[][] freq = new int[n][5];             int[][] rem = new int[n][5];             for(int i = 0; i < n; i++){                 arr[i] = n();                 for(int j = 0; j < arr[i].length(); j++)                     freq[i][arr[i].charAt(j) - 'a']++;                 for(int j = 0; j < 5; j++)                     rem[i][j] = arr[i].length() - freq[i][j];             }             int ans = 0;             for(int i = 0; i < 5; i++){                 int[] vals = new int[n];                 for(int j = 0; j < n; j++)                     vals[j] = freq[j][i] - rem[j][i];                 Arrays.sort(vals);                 int sum = 0, x = 0;                 for(int j = n - 1; j >= 0; j--){                     if(sum + vals[j] > 0){                         x++;                         sum += vals[j];                     } else {                         break;                     }                 }                 if(x > ans) {                     ans = x;                 }             }             System.out.println(ans);         }                  String n(){             return in.next();         }         int ni() {             return in.nextInt();         }                       }      } ","import java.util.*; import java.io.*; public class Main { public static void main(String[] args) {   FastReader reader = new FastReader();   int Q = reader.nextInt();   outer: for (int q = 0; q < Q; q++) {     int N = reader.nextInt();     int[][] scores = new int[5][N];     for (int i = 0; i < N; i++) {       int[] occurs = new int[5];       String word = reader.next();       for (int j = 0; j < word.length(); j++) {         occurs[word.charAt(j) - 'a']++;       }       for (int j = 0; j < 5; j++) {         scores[j][i] = occurs[j] - (word.length() - occurs[j]) ;       }     }     int bestCount = 0;     for (int i = 0; i < 5; i++) {       int[] curr = scores[i];       Arrays.sort(curr);       int currentCount = 1;       int currentScore = curr[curr.length - 1];       for (int j = curr.length - 2; j >= 0 && currentScore > 0; j--) {         currentScore += curr[j];         currentCount++;       }       if (currentScore <= 0) currentCount--;       bestCount = Math.max(currentCount, bestCount);     }     System.out.println(bestCount);   } } } ",0
706,"import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; public class Solution {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Main solver = new Main();         boolean multipleTC = true;         int testCount = multipleTC ? Integer.parseInt(in.next()) : 1;         for (int i = 1; i <= testCount; i++)             solver.solve(in, out, i);         out.close();     }     static class Main {         PrintWriter out;         InputReader in;         public void solve(InputReader in, PrintWriter out, int test) {             this.out = out;             this.in = in;             int n = ni();             String[] arr = new String[n];             int[][] freq = new int[n][5];             int[][] rem = new int[n][5];             for(int i = 0; i < n; i++){                 arr[i] = n();                 for(int j = 0; j < arr[i].length(); j++)                     freq[i][arr[i].charAt(j) - 'a']++;                 for(int j = 0; j < 5; j++)                     rem[i][j] = arr[i].length() - freq[i][j];             }             int ans = 0;             for(int i = 0; i < 5; i++){                 int[] vals = new int[n];                 for(int j = 0; j < n; j++)                     vals[j] = freq[j][i] - rem[j][i];                 Arrays.sort(vals);                 int sum = 0, x = 0;                 for(int j = n - 1; j >= 0; j--){                     if(sum + vals[j] > 0){                         x++;                         sum += vals[j];                     } else {                         break;                     }                 }                 if(x > ans) {                     ans = x;                 }             }             System.out.println(ans);         }                  String n(){             return in.next();         }         int ni() {             return in.nextInt();         }                       }      } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ",1
707,"import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; public class Solution {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Main solver = new Main();         boolean multipleTC = true;         int testCount = multipleTC ? Integer.parseInt(in.next()) : 1;         for (int i = 1; i <= testCount; i++)             solver.solve(in, out, i);         out.close();     }     static class Main {         PrintWriter out;         InputReader in;         public void solve(InputReader in, PrintWriter out, int test) {             this.out = out;             this.in = in;             int n = ni();             String[] arr = new String[n];             int[][] freq = new int[n][5];             int[][] rem = new int[n][5];             for(int i = 0; i < n; i++){                 arr[i] = n();                 for(int j = 0; j < arr[i].length(); j++)                     freq[i][arr[i].charAt(j) - 'a']++;                 for(int j = 0; j < 5; j++)                     rem[i][j] = arr[i].length() - freq[i][j];             }             int ans = 0;             for(int i = 0; i < 5; i++){                 int[] vals = new int[n];                 for(int j = 0; j < n; j++)                     vals[j] = freq[j][i] - rem[j][i];                 Arrays.sort(vals);                 int sum = 0, x = 0;                 for(int j = n - 1; j >= 0; j--){                     if(sum + vals[j] > 0){                         x++;                         sum += vals[j];                     } else {                         break;                     }                 }                 if(x > ans) {                     ans = x;                 }             }             System.out.println(ans);         }                  String n(){             return in.next();         }         int ni() {             return in.nextInt();         }                       }      } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ",0
708,"import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.HashMap; import java.util.InputMismatchException; public class C { private static int n, m, k, x, y; private static int[][] a, b; private static long ans; private static int[][] id; private static long[][] dp; private static int idf; private static String s, t; private static HashMap<Integer, ArrayList<Integer>> g; private static final int MOD = (int) 1e9 + 7; private static final int[] dx = { -1, 1, 0, 0 }; private static final int[] dy = { 0, 0, -1, 1 }; private static final int MAX = Integer.MAX_VALUE; private static final int MIN = Integer.MIN_VALUE; private static final long MAXLONG = (long) 1e18; private static final long MINLONG = -(long) 1e18; public static void main(String[] args) { int testCases = in.nextInt(); id = new int[(int)1e5+10][2]; dp = new long[(int)1e5+10][2]; for (int z = 1; z <= testCases; z++) { initCase(z); n = ini(); a = ina2d(n, 2); g = intree(n); println(Math.max(dfs(0, -1, 0), dfs(0, -1, 1))); } out.flush(); out.close(); } private static long dfs(int u, int p, int f) { if (id[u][f]==idf) { return dp[u][f]; } long ans = 0; for(int v: g.get(u)) { if (v==p) continue; ans += Math.max(Math.abs(a[v][1]-a[u][f])+dfs(v, u, 1), Math.abs(a[v][0]-a[u][f])+dfs(v, u, 0)); } id[u][f] = idf; dp[u][f] = ans; return ans; } private static void initCase(int z) { idf = z; ans = 0; } private static int[] ina(int n) { int[] temp = new int[n]; for (int i = 0; i < n; i++) { temp[i] = in.nextInt(); } return temp; } private static int[][] ina2d(int n, int m) { int[][] temp = new int[n][m]; for (int i = 0; i < n; i++) { temp[i] = ina(m); } return temp; } private static int ini() { return in.nextInt(); } private static void println(Object... o) { for (Object x : o) { out.write(x + """"); } out.write(""\n""); } private static HashMap<Integer, ArrayList<Integer>> intree(int n) { HashMap<Integer, ArrayList<Integer>> g = new HashMap<>(); for (int i = 0; i < n; i++) { g.put(i, new ArrayList<>()); } for (int i = 0; i < n - 1; i++) { int u = ini() - 1; int v = ini() - 1; g.get(u).add(v); g.get(v).add(u); } return g; } private static InputReader in = new InputReader(System.in); private static PrintWriter out = new PrintWriter(System.out); } ","import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static long dp[][];   public static void main(String[] args) {    PrintWriter out=new PrintWriter(System.out);       int ttt=1;   ttt =i();         outer :while (ttt-- > 0)  {         int n=i();         int B[][]=new int[n][2];         for(int i=0;i<n;i++) {         B[i][0]=i();         B[i][1]=i();         }         ArrayList<Integer> A[]=new ArrayList[n+1];         for(int i=0;i<A.length;i++) {         A[i]=new ArrayList<Integer>();         }         int m=n-1;         dp=new long[n+1][2];         for(int i=0;i<=n;i++)         Arrays.fill(dp[i],-1);         for(int i=0;i<m;i++) {         int a=i();         int b=i();         A[a].add(b);         A[b].add(a);         }         System.out.println(Math.max(dfs(A, 1, -1, 0, B), dfs(A, 1, -1, 1, B)));                           }                           out.close();                                                                      }   private static long dfs(ArrayList<Integer> [] A, int i,int par,int pv,int B[][]) { long ans=0; long res=B[i-1][pv]; if(dp[i][pv]!=-1) return dp[i][pv]; for(int child : A[i]) { if(child!=par) { long op1=dfs(A, child, i, 0, B)+Math.abs(B[child-1][0]-res); long op2=dfs(A, child, i, 1, B)+Math.abs(B[child-1][1]-res); ans+=Math.max(op1, op2); } } return dp[i][pv]=ans; }        static int i() {      return sc.nextInt();      }                                                                                     } ",0
709,"import java.io.IOException; import java.io.InputStream; import java.lang.reflect.Array; import java.util.ArrayList; import java.util.InputMismatchException; public class Main {    static InputReader sc=new InputReader(System.in);    public static void main(String[] args) {              int t=sc.nextInt();       while(t-->0){          solve();       }    }    private static void solve() {       int n=sc.nextInt();       char[] a=sc.nextLine().toCharArray();       char[] b = sc.nextLine().toCharArray();       int sml=0,nsml=0;       boolean flag=false;       int sm1=0;       int nsm1=0;       for(int i=0;i<n;i++){          if(a[i]==b[i]){             sml++;             if(a[i]=='1')sm1++;          }else {             if (a[i] == '1') nsm1++;             nsml++;          }       }       int d1=sml-2*sm1;       int d2=nsml-2*nsm1;       int ans=-1;       if(sml%2==1&&nsml%2==1&&d1==-1){          ans=sml;       }else if(sml%2==0&&nsml%2==0&&d2==0){          ans=nsml;       }else if(sml%2==1&&nsml%2==0&&(d1==-1||d2==0)){          if(d1==-1&&d2!=0){             ans=sml;          }else if(d1!=-1&&d2==0){             ans=nsml;          }else if(d1==-1&&d2==0){             ans=Math.min(sml,nsml);          }       }       if(sml==n)ans=0;       System.out.println(ans);    } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class CF1 {     public static void main(String[] args) {         FastScanner sc=new FastScanner();         int T=sc.nextInt();         for (int tt=0; tt<T; tt++){            int n =sc.nextInt();            String a = sc.next();            String b= sc.next();            int candles1=0;            int candles2=0;            int inPlace=0;            for (int i=0; i<n; i++){                if (a.charAt(i)=='1'){                    candles1++;                }                if (b.charAt(i)=='1') candles2++;                if (b.charAt(i)=='1' && a.charAt(i)=='1') inPlace++;            }            if (candles1==candles2 || n+1-candles2==candles1){              int ans=Math.min(help(candles1-inPlace, inPlace,n+1,candles2,0,0), help(candles1-inPlace, inPlace,n+1,candles2,0,1));              if (ans==Integer.MAX_VALUE) System.out.println(-1);              else System.out.println(ans);            }            else System.out.println(-1);         }     }     static int help(int i, int j, int max, int cands, int moves, int flip){         if (j==cands && i==0) return moves;         else if (j==0 && flip==0 || flip==1 && i==0 ) return Integer.MAX_VALUE;             if (flip==0){                 int x=0;                 int y=cands-j+1;                 if (i+j==max-cands){                     x=cands-y;                 }                 else x=max-cands-y;                 return help(x,y,max,cands,moves+1,1);             }             else {                 int x=0;                 int y=cands-j;                 if (i+j==max-cands){                     x=cands-y;                 }                 else x=max-cands-y;                 return help(x,y,max,cands,moves+1,0);             }              }     static long mod =998244353L;                                    } ",0
710,"import java.io.IOException; import java.io.InputStream; import java.math.BigInteger; import java.util.*; public class Main {     public static void main(String[] args) {                  boolean readFromLocal = true;                  String filepath = ""src/input.txt"";                  InputReader inputReader = new InputReader(System.in);         Solve s = new Solve();         s.solve(inputReader);     } } class Solve {     public void solve(InputReader inputReader) {         int t,n;         t = inputReader.nextInt();         while (t>0) {             t--;             n = inputReader.nextInt();             Graph g = new Graph(n);             g.res = new int[n-1];             for(int i=1;i<n;i++){                 g.addEdge(inputReader.nextInt(), inputReader.nextInt(),i-1,true);             }             if (g.hasDegreeMoreThanTwo()){                 System.out.println(-1);             }else {                 int minDegree = 2,node = 1;                 for(int i=1;i<=n;i++){                     if (g.adj[i].size()<minDegree){                         node = i;                         minDegree = g.adj[i].size();                     }                 }                 g.dfs(node,-1,2);                 for(int i=0;i<n-1;i++){                     System.out.print(g.res[i] + "" "");                 }                 System.out.println();             }         }     } } class Graph {     public ArrayList<int[]>[] adj;     int size;     boolean[] vis;     public int [] res;     Graph(int n){         this.size = n;         this.adj = new ArrayList[n+1];         this.vis = new boolean[n+1];         for (int i = 0; i <=n; i++) {             adj[i] = new ArrayList<>();         }     }     public void addEdge(int a, int b, int edge,boolean biDirectional){         adj[a].add(new int[]{b, edge});         if (biDirectional) {             adj[b].add(new int[]{a, edge});         }     }     public void dfs(int node,int parent,int prime){         for (int[] nodePair: adj[node]) {             if (nodePair[0]!=parent){                 res[nodePair[1]] = prime;                 dfs(nodePair[0],node,prime^1);             }         }     }     boolean hasDegreeMoreThanTwo() {         for (int i = 0; i <= size; i++) {             if (adj[i].size()>2){                 return true;             }         }         return false;     } } ","import java.io.*; import java.util.*; public class c {     public static void main(String[] args){         FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             ArrayList<ArrayList<Edge>> graph = new ArrayList<>();             for(int i=0; i<n; i++){                 graph.add(new ArrayList<Edge>());             }             for(int i=0; i<n-1; i++){                 int u = sc.nextInt();                 int v = sc.nextInt();                 Edge e = new Edge(u-1, v-1, i+1);                 Edge e2 = new Edge(v-1, u-1, i+1);                 graph.get(u-1). add(e);                 graph.get(v-1).add(e2);             }             int edges[] = new int[n];             int indegree1count = 0;             int indegree2count = 0;             for(ArrayList<Edge> list : graph){                 if(list.size() == 1){                     indegree1count++;                 }                 else if(list.size() == 2){                     indegree2count++;                 }             }             if(indegree1count == 2 && indegree1count+indegree2count==n){                 for(int i=0; i<graph.size(); i++){                     ArrayList<Edge> list = graph.get(i);                     if(list.size() == 1){                         dfs(graph, edges, false, -1, i) ;                     }                 }                 for(int i=1; i<edges.length; i++){                     System.out.print(edges[i] + "" "");                 }                 System.out.println();             }             else{                 System.out.println(-1);             }         }     }     public static void dfs(ArrayList<ArrayList<Edge>> graph, int[] edges, boolean isprev2, int parent, int current){         for(Edge e : graph.get(current)){             if(e.v == parent){                 continue;             }             edges[e.id] = isprev2 ? 5 : 2;             dfs(graph, edges, !isprev2, current, e.v);         }     } } class Edge {     int u;     int v;     int id;     public Edge(int u, int v, int id) {         this.u = u;         this.v = v;         this.id = id;     } } ",0
711,"import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main{      static int dest1; static int dest2; public static void main(String args[]){        FastScanner in = new FastScanner(); int test=in.nextInt();                 while(test-->0){                     int n=in.nextInt();                     int count[][]=new int[n][5];                     int total[]=new int[n];                     String words[]=new String[n];                     for(int i=0;i<n;i++){                         words[i]=in.next();                         for(int j=0;j<words[i].length();j++)                             count[i][words[i].charAt(j)-'a']++;                                                  total[i]=words[i].length();                     }                     int max=Integer.MIN_VALUE;                    for(int i=0;i<5;i++){                                               Integer ans[]=new Integer[n];                       for(int j=0;j<n;j++){                           ans[j]=count[j][i]-(total[j]-count[j][i]);                       }                       Arrays.sort(ans,Collections.reverseOrder());                       int j=0;                       int r=0;                       while(j<n && r+ans[j]>0){                           r+=ans[j];                           j++;                       }                       max=Math.max(j,max);                                           }                    System.out.println(max);                                                          } }         } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ",0
712,"import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main{      static int dest1; static int dest2; public static void main(String args[]){        FastScanner in = new FastScanner(); int test=in.nextInt();                 while(test-->0){                     int n=in.nextInt();                     int count[][]=new int[n][5];                     int total[]=new int[n];                     String words[]=new String[n];                     for(int i=0;i<n;i++){                         words[i]=in.next();                         for(int j=0;j<words[i].length();j++)                             count[i][words[i].charAt(j)-'a']++;                                                  total[i]=words[i].length();                     }                     int max=Integer.MIN_VALUE;                    for(int i=0;i<5;i++){                                               Integer ans[]=new Integer[n];                       for(int j=0;j<n;j++){                           ans[j]=count[j][i]-(total[j]-count[j][i]);                       }                       Arrays.sort(ans,Collections.reverseOrder());                       int j=0;                       int r=0;                       while(j<n && r+ans[j]>0){                           r+=ans[j];                           j++;                       }                       max=Math.max(j,max);                                           }                    System.out.println(max);                                                          } }         } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ",1
713,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.util.Arrays; import java.io.BufferedWriter; import java.io.Writer; import java.io.OutputStreamWriter; import java.util.InputMismatchException; import java.io.IOException; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         OutputWriter out = new OutputWriter(outputStream);         CNotAssigning solver = new CNotAssigning();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CNotAssigning {         int N = 100010;         int M = N * 2;         int[] h;         int[] e = new int[M];         int[] ne = new int[M];         int idx;         int n;         int[] dep;         int[] res;         public void solve(int testNumber, InputReader in, OutputWriter out) {             n = in.nextInt();             h = new int[n + 1];             dep = new int[n + 1];             res = new int[n - 1];             Arrays.fill(h, -1);             idx = 0;             for (int i = 0; i < n - 1; i++) {                 int a = in.nextInt();                 int b = in.nextInt();                 add(a, b);                 add(b, a);                 dep[a]++;                 dep[b]++;             }             int start = 0;             for (int i = 1; i <= n; i++) {                 if (dep[i] > 2) {                     out.println(-1);                     return;                 }                 if (dep[i] == 1) {                     start = i;                 }             }             dfs(start, start, 2);             out.println(res);         }         private void dfs(int u, int p, int num) {             for (int i = h[u]; i != -1; i = ne[i]) {                 int j = e[i];                 if (j == p) {                     continue;                 }                 res[i / 2] = num;                 dfs(j, u, 7 - num);             }         }         void add(int a, int b) {             e[idx] = b;             ne[idx] = h[a];             h[a] = idx++;         }     }           } ","import java.util.Scanner; public class C { static int N = 100010; static int[] cot = new int[N]; static boolean[] vis = new boolean[N]; static int[] h = new int[N]; static int[] des = new int[2 * N], next = new int[2 * N]; static int idx = 0; static int[] ans = new int[N]; public static void main(String[] args) { Scanner in = new Scanner(System.in); int round = in.nextInt(); for (int z = 0; z < round; z++) { int n = in.nextInt(); for (int i = 1; i <= n; i++) { h[i] = -1; vis[i] = false; cot[i] = 0; } idx = 0; boolean flag = true; for (int i = 1; i < n; i++) { int a = in.nextInt(); int b = in.nextInt(); des[idx] = b; next[idx] = h[a]; h[a] = idx++; des[idx] = a; next[idx] = h[b]; h[b] = idx++; if (++cot[a] >= 3 | ++cot[b] >= 3) flag = false; } if (!flag) System.out.println(-1); else { int startPoint = -1; for (int i = 1; i <= n; i++) if (cot[i] == 1) { startPoint = i; break; } dfs(startPoint, 3); for (int i = 1; i < n; i++) System.out.print(ans[i] + "" ""); System.out.println(); } } } private static void dfs(int point, int preLen) { vis[point] = true; for (int i = h[point]; i != -1; i = next[i]) if (!vis[des[i]]) { ans[i / 2 + 1] = 5 - preLen; dfs(des[i], ans[i / 2 + 1]); } } } ",0
714,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.lang.reflect.Array; import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.*; public class Main {     public static void main(String[] args){         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         solve(in, out);         out.close();     }                                             static int parent[];     static int rank[];     static long m = 0;                              static int parent1[];     static int rank1[];                              static long max1 = 0;     static int count = 0;     static int count1 = 0;     static boolean possible;     public static void solve(InputReader sc, PrintWriter pw){         int i, j = 0;                  long mod = 1000000007;                                                                        int t = sc.nextInt();         u: while (t-- > 0) {             int n = sc.nextInt();             int e[][] = new int[n-1][2];             int x[] = new int[n];             int m = 0;             for(i=0;i<n-1;i++){                 e[i][0] = sc.nextInt()-1;                 e[i][1] = sc.nextInt()-1;                 x[e[i][0]]++;                 x[e[i][1]]++;                 m = Math.max(x[e[i][0]],m);                 m = Math.max(x[e[i][1]],m);             }             if(m>2)                 pw.println(-1);             else{                 if(n==2){                     pw.println(2);                 }                 else if(n==3){                     pw.println(2+"" ""+3);                 }                 else{                     int d = 0;                     int ans[] = new int[n-1];                     ArrayList<Integer> ar[] = new ArrayList[n];                     ArrayList<Integer> ar1[] = new ArrayList[n];                     for(i=0;i<n;i++){                         ar[i] = new ArrayList<>();                         ar1[i] = new ArrayList<>();                     }                     for(i=0;i<n-1;i++){                         int a = e[i][0];                         int b = e[i][1];                         ar[a].add(b);                         ar1[a].add(i);                         ar[b].add(a);                         ar1[b].add(i);                         if(x[a]==1)                             d = a;                         if(x[b]==1)                             d = b;                     }                     visit(d,ar,ar1,ans,-1,2);                     for(i=0;i<n-1;i++){                         pw.print(ans[i]+"" "");                     }                     pw.println();                 }             }         }     }     static void visit(int d, ArrayList<Integer> ar[], ArrayList<Integer> ar1[], int ans[], int par, int v){         if(ar[d].get(0)!=par){             ans[ar1[d].get(0)] = v;             visit(ar[d].get(0), ar, ar1, ans, d, 5-v);             return;         }         if(ar[d].size()==1)             return;         ans[ar1[d].get(1)] = v;         visit(ar[d].get(1), ar, ar1, ans, d, 5-v);     }                                                                                               } ","import java.io.*; import java.util.*; public class Main {     static boolean[] ret;     static boolean[] updated;     static ArrayList<Integer>[] adjacencyList;     static Edge[] edgeList;     static class Edge {         int start, end, number;         public Edge (int _start, int _end, int _number) {             start = _start;             end = _end;             number = _number;         }     }     public static void dfs(int node) {         updated[node] = true;         for (int next : adjacencyList[edgeList[node].start]) {             if (!updated[next]) {                 ret[next] = !ret[node];                 dfs(next);             }         }         for (int next : adjacencyList[edgeList[node].end]) {             if (!updated[next]) {                 ret[next] = !ret[node];                 dfs(next);             }         }     }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));         int numCases = Integer.parseInt(br.readLine());         for (int i = 0; i < numCases; i++) {             int numVertices = Integer.parseInt(br.readLine());             int[] numEdges = new int[numVertices];             edgeList = new Edge[numVertices - 1];             adjacencyList = new ArrayList[numVertices];             for (int j = 0; j < numVertices; j++) {                 adjacencyList[j] = new ArrayList<>();             }             for (int j = 0; j < numVertices - 1; j++) {                 StringTokenizer st = new StringTokenizer(br.readLine());                 int a = Integer.parseInt(st.nextToken()) - 1;                 int b = Integer.parseInt(st.nextToken()) - 1;                 edgeList[j] = new Edge(a, b, j);                 numEdges[a]++;                 numEdges[b]++;                 adjacencyList[a].add(j);                 adjacencyList[b].add(j);             }             boolean good = true;             for (int j = 0; j < numVertices; j++) {                 if (numEdges[j] > 2) {                     good = false;                     break;                 }             }             if (!good) {                 pw.println(-1);             } else {                 ret = new boolean[numVertices - 1];                 updated = new boolean[numVertices - 1];                 dfs(0);                 for (boolean b : ret) {                     if (b)                         pw.print(5 + "" "");                     else                         pw.print(2 + "" "");                 }                 pw.println();             }         }         br.close();         pw.close();     } } ",0
715,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.BufferedReader; import java.io.InputStreamReader; public class First {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();                  int t;         t = in.nextInt();                  while (t > 0) {                          solver.call(in, out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n;             n = in.nextInt();             int[] arr = new int[n];             Integer[] lower = new Integer[n];             Integer[] higher = new Integer[n];             for (int i = 0; i < n; i++) {                 arr[i] = in.nextInt();             }             TreeSet<Integer> set = new TreeSet<>();             for (int i = 0; i < n; i++) {                 set.add(arr[i]);                 lower[i] = set.lower(arr[i]);                 higher[i] = set.higher(arr[i]);             }             for (int i = 1; i < n; i++) {                 if(arr[i]>arr[i-1]){                     if(higher[i-1] != null && higher[i-1]<arr[i]){                         out.println(""NO"");                         return;                     }                 }                 else{                     if(lower[i-1] != null && lower[i-1]>arr[i]){                         out.println(""NO"");                         return;                     }                 }             }             out.println(""YES"");         }     }                                   static final Random random=new Random();           } ","import java.util.*; import java.io.*; public class Main{     public static class Node {         int val;         Node left;         Node right;         Node(int val)         {             this.val=val;         }     }     public static void main(String[] args) throws java.io.IOException {         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         while(t-->0)         {             int n=sc.nextInt();             int[] arr=new int[n];             for(int i=0;i<n;++i)             {                 arr[i]=sc.nextInt();             }             Node head=new Node(arr[0]);             boolean cond=false;             for(int i=1;i<n;i++)             {                 int cur=head.val;                                  if(arr[i]>cur)                 {                     if(head.right==null)                     {                         Node next=new Node(arr[i]);                         head.right=next;                         next.left=head;                         head=head.right;                     }                     else if(head.right.val<arr[i])                     {                         cond=true;                         break;                     }                     else if(head.right.val==arr[i])                     {                         head=head.right;                     }                     else                     {                         Node next=new Node(arr[i]);                         next.right=head.right;                         head.right.left=next;                         head.right=next;                         next.left=head;                         head=next;                     }                 }                 else if(arr[i]<cur)                 {                     if(head.left==null)                     {                         Node next=new Node(arr[i]);                         head.left=next;                         next.right=head;                         head=head.left;                     }                     else if(head.left.val>arr[i])                     {                         cond=true;                         break;                     }                     else if(head.left.val==arr[i])                     {                         head=head.left;                     }                     else                     {                         Node next=new Node(arr[i]);                         next.left=head.left;                         head.left.right=next;                         head.left=next;                         next.right=head;                         head=next;                     }                 }             }             if(cond)                 System.out.println(""NO"");             else                 System.out.println(""YES"");         }     } } ",0
716,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.BufferedReader; import java.io.InputStreamReader; public class First {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();                  int t;         t = in.nextInt();                  while (t > 0) {                          solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n, m, x;             n = in.nextInt();             m = in.nextInt();             x = in.nextInt();             int[] arr = new int[n];             answer[] array = new answer[n];             int[] ar = new int[n];             for (int i = 0; i < n; i++) {                 arr[i] = in.nextInt();                 array[i] = new answer(arr[i],i);             }             long[] ans = new long[m];             Arrays.sort(array);             int a = 0 , b = 0;             while(true){                 for (int i = 0; i < m; i++) {                     ar[b] = i+1;                     b++;                     if(b==n){                         break;                     }                 }                 if(b==n){                     break;                 }                 for (int i = m-1; i >= 0; i--) {                     ar[b] = i+1;                     b++;                     if(b==n){                         break;                     }                 }                 if(b==n){                     break;                 }             }             for (int i = 0; i < n; i++) {                 ans[ar[i]-1] += array[i].a;             }             for (int i = 0; i < m-1; i++) {                 if(Math.abs(ans[i]- ans[i+1])>x){                     out.println(""NO"");                     return;                 }             }             out.println(""YES"");             int[] answer = new int[n];             for (int i = 0; i < n; i++) {                 answer[array[i].b] = ar[i];             }             for (int i = 0; i < n; i++) {                 out.print(answer[i]+"" "");             }             out.println();         }     }               static class answer implements Comparable<answer>{         int a;         int b;         public answer(int a, int b) {             this.a = a;             this.b = b;         }                       }               static void sort(long[] a) {         ArrayList<Long> l=new ArrayList<>();         for (Long i:a) l.add(i);         l.sort(Collections.reverseOrder());         for (int i=0; i<a.length; i++) a[i]=l.get(i);     }     static final Random random=new Random();           } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.BufferedReader; import java.io.InputStreamReader; public class First {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();                  int t;         t = in.nextInt();                  while (t > 0) {                          solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n, m, x;             n = in.nextInt();             m = in.nextInt();             x = in.nextInt();             int[] arr = new int[n];             answer[] array = new answer[n];             int[] ar = new int[n];             for (int i = 0; i < n; i++) {                 arr[i] = in.nextInt();                 array[i] = new answer(arr[i],i);             }             long[] ans = new long[m];             Arrays.sort(array);             int a = 0 , b = 0;             while(true){                 for (int i = 0; i < m; i++) {                     ar[b] = i+1;                     b++;                     if(b==n){                         break;                     }                 }                 if(b==n){                     break;                 }                 for (int i = m-1; i >= 0; i--) {                     ar[b] = i+1;                     b++;                     if(b==n){                         break;                     }                 }                 if(b==n){                     break;                 }             }             for (int i = 0; i < n; i++) {                 ans[ar[i]-1] += array[i].a;             }             for (int i = 0; i < m-1; i++) {                 if(Math.abs(ans[i]- ans[i+1])>x){                     out.println(""NO"");                     return;                 }             }             out.println(""YES"");             int[] answer = new int[n];             for (int i = 0; i < n; i++) {                 answer[array[i].b] = ar[i];             }             for (int i = 0; i < n; i++) {                 out.print(answer[i]+"" "");             }             out.println();         }     }               static class answer implements Comparable<answer>{         int a;         int b;         public answer(int a, int b) {             this.a = a;             this.b = b;         }                       }               static void sort(long[] a) {         ArrayList<Long> l=new ArrayList<>();         for (Long i:a) l.add(i);         l.sort(Collections.reverseOrder());         for (int i=0; i<a.length; i++) a[i]=l.get(i);     }     static final Random random=new Random();           } ",1
717,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.BufferedReader; import java.io.InputStreamReader; public class First {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();                  int t;         t = in.nextInt();                  while (t > 0) {                          solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n;             n = in.nextInt();             int[] arr = new int[n];             long[] array = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = in.nextInt();                 if(i==0){                     array[i] = arr[i];                 }                 else                     array[i] = (long)arr[i] + array[i-1];             }             int evenMin = arr[0], oddMin = arr[1];             long ans = ((long) n * (long)arr[0]) + ((long) n * (long)arr[1]);             for (int i = 2; i < n; i++) {                 if(i%2==0){                     if(evenMin>arr[i]) {                         evenMin = arr[i];                     }                 }                 else{                     if(oddMin>arr[i]) {                         oddMin = arr[i];                     }                 }                 if(i%2==0){                     ans = Math.min(ans, array[i] + (long) ((n - (i / 2)) - 1) * (long)evenMin + (long) ((n - ((i-1) / 2)) - 1) * (long)oddMin );                 }                 else{                     ans = Math.min(ans, array[i] + (long) ((n - (i / 2)) - 1) * (long)oddMin + (long) ((n - ((i-1) / 2)) - 1) * (long)evenMin);                 }             }             out.println(ans);         }     }                                   static final Random random=new Random();           } ","import java.io.*; import java.util.*; public class C {     static FastReader sc=null;            public static void main(String[] args) {     sc=new FastReader();     int t=sc.nextInt();     while(t-->0) {     int n=sc.nextInt();     int c[]=sc.readArray(n);     long dp[]=new long[n];     dp[0]=Long.MAX_VALUE;     dp[1]=(long)n*c[1]+ (long)n*c[0];     long preMin[]=new long[n],pre[]=new long[n];     preMin[0]=pre[0]=c[0];     preMin[1]=pre[1]=c[1];     for(int i=2;i<n;i++) {     preMin[i]=Math.min(preMin[i-2],c[i]);     pre[i]=pre[i-2]+c[i];     }     for(int i=2;i<n;i++) {     dp[i]=preMin[i]*(n-i/2)+pre[i]-preMin[i]+preMin[i-1]*(n-(i-1)/2)+pre[i-1]-preMin[i-1];     }     long ans=Long.MAX_VALUE;          for(long e:dp)ans=Math.min(ans, e);     System.out.println(ans);     }               }                                                                                                                                     } ",0
718,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class TaskA {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Solver solver = new Solver();         int testCount = 1;         testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class Solver {                  public Pair[] pairs;         ArrayList<ArrayList<Integer>> adj;         long[][] dp;         public void dfs(int vertex,int parent){             for(int i=0;i<adj.get(vertex).size();i++){                 if((int)adj.get(vertex).get(i)!=parent){                     int curVer = adj.get(vertex).get(i);                     dfs(curVer,vertex);                     dp[0][vertex] += Math.max( (dp[0][curVer] + Math.abs(pairs[curVer].f - pairs[vertex].f) )                             , (dp[1][curVer] + Math.abs(pairs[curVer].s - pairs[vertex].f)) );                     dp[1][vertex] += Math.max( (dp[0][curVer] + Math.abs(pairs[curVer].f - pairs[vertex].s) )                             , (dp[1][curVer] + Math.abs(pairs[curVer].s - pairs[vertex].s)) );                 }             }         }         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt();             pairs = new Pair[n];             adj = new ArrayList<>();             for(int i=0;i<n;i++){                 pairs[i] = new Pair(in.nextInt(),in.nextInt());                 adj.add(new ArrayList<>());             }             for(int i=0;i<n-1;i++){                 int u = in.nextInt(),v = in.nextInt();                 adj.get(u-1).add(v-1);                 adj.get(v-1).add(u-1);             }             dp = new long[2][n];             dfs(0,-1);             out.println(Math.max(dp[0][0],dp[1][0]));         }     }     static class Pair implements Comparable<Pair>{         int f;         int s;         public Pair(int a,int b){             this.f = a;             this.s = b;         }              }      } ","import java.io.*; import java.util.*;   public class Main {     static class Task {       int NN = 200005;     int MOD = 1000000007;     int INF = 2000000000;     long INFINITY = 2000000000000000000L; int [] a; int [] b; List<Integer> [] g; long [][] dp; long rec(int node, int prev, int index) { if(dp[node][index] != -1){ return dp[node][index]; } long ret = 0; int val = index==0?a[node]:b[node]; for(int adj: g[node]) { if(adj == prev) { continue; } ret += Math.max((long)(rec(adj, node, 0) + (long)(Math.abs(val - a[adj]))), (long)(rec(adj, node, 1) + (long)(Math.abs(val - b[adj])))); } return dp[node][index] = ret; }          public void solve(InputReader in, PrintWriter out) { int t = in.nextInt(); while(t-->0) { int n = in.nextInt(); a = new int[n + 1]; b = new int[n + 1]; g = new ArrayList[n + 1]; dp = new long[n + 1][2]; for(int i=1;i<=n;++i) { a[i] = in.nextInt(); b[i] = in.nextInt(); g[i] = new ArrayList<>(); dp[i][0] = dp[i][1] = -1; } for(int i=1;i<n;++i) { int u = in.nextInt(); int v = in.nextInt(); g[u].add(v); g[v].add(u); } long ans = Math.max(rec(1, -1, 0), rec(1, -1, 1)); out.println(ans); }     }   }     static void prepareIO(boolean isFileIO) {          Task solver = new Task();          if (!isFileIO) {       InputStream inputStream = System.in;       OutputStream outputStream = System.out;       InputReader in = new InputReader(inputStream);       PrintWriter out = new PrintWriter(outputStream);       solver.solve(in, out);              out.close();     }          else {       String IPfilePath = System.getProperty(""user.home"") + ""/Downloads/ip.in"";       String OPfilePath = System.getProperty(""user.home"") + ""/Downloads/op.out"";       InputReader fin = new InputReader(IPfilePath);       PrintWriter fout = null;       try {         fout = new PrintWriter(new File(OPfilePath));       } catch (FileNotFoundException e) {         e.printStackTrace();       }       solver.solve(fin, fout);              fout.close();     }   }     public static void main(String[] args) {     prepareIO(false);   }      } ",0
719,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class java1 {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskB solver = new TaskB();         solver.solve(1, in, out);         out.close();     }     static class TaskB {         public void solve(int testNumber, InputReader in, PrintWriter out) {             int t=in.nextInt();           tt:  while(t-- >0)             {             int n=in.nextInt();             String ar[]=new String[n];             for(int x=0;x<n;x++)             {             ar[x]=in.next();             }             char ch[]= {'a', 'b', 'c', 'd', 'e'};             int max=-1;             for(char c:ch)             {             int lmax=0;             ArrayList<Integer> al=new ArrayList<>();             int c1=0;             int c2=0;             for(int x=0;x<n;x++)             {             int a1=0;             int a2=0;             for(int y=0;y<ar[x].length();y++)             {             if(ar[x].charAt(y)==c)             {             a1++;             }             else             {             a2++;             }             }             if(a1>a2)             {             c1+=a1; c2+=a2; lmax++;             }             else             {             al.add(a2-a1);             }             }             Collections.sort(al);             for(int x:al)             {             if(c1>c2+x )             {             lmax++; c2+=x;             }             }             max=Math.max(lmax, max);             }             out.println(max);                                                                }         }         static void sort(int[] a) {     ArrayList<Integer> l=new ArrayList<>();     for (int i:a) l.add(i);     Collections.sort(l);     for (int i=0; i<a.length; i++) a[i]=l.get(i);     }              }      } ","import java.util.*; public class B {      static Scanner sc = null; public static void main(String[] args) { sc = new Scanner(System.in); int t = sc.nextInt(); while(t-- >0){     int n = sc.nextInt();     sc.nextLine();     String a[] = new String[n];     for(int i=0;i<n;i++){         a[i] = sc.nextLine();     }     ArrayList<Character> a1 = new ArrayList<>();     a1.add('a');     a1.add('b');     a1.add('c');     a1.add('d');     a1.add('e');     int res = 0;     for(Character ch : a1){         ArrayList<Integer> a2 = new ArrayList<>();         for(int i=0;i<n;i++){              int f1 = 0;              int f2 = 0;              String s = a[i];              for(int j=0;j<s.length();j++){                  char c2 = s.charAt(j);                  if(c2==ch)                  f1++;                  else                  f2++;              }              a2.add(f1-f2);         }         Collections.sort(a2);         int sum = 0;         int count = 0;         for(int j = n-1;j>=0;j--){             int num = a2.get(j);             sum+=num;             if(sum>0){                 count++;             }             else             break;         }         res = Math.max(res,count);     }     System.out.println(res); } } } ",0
720,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.PriorityQueue; import java.util.Set; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import java.util.function.Function; import java.util.stream.Collectors; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class Solution { public static int INF= Integer.MAX_VALUE; public static long MOD= 1000000000+7L; public static int WHITE= 0; public static int GRAY= 1; public static int BLACK= 2; static class Solver { public void solve(InputReader in, PrintWriter out) { int tt=in.nextInt(); for(int cases=1;cases<=tt;cases++){ int n= in.nextInt(); long odd_min= Long.MAX_VALUE; long even_min= Long.MAX_VALUE; long ans= Long.MAX_VALUE; int odd_length=0; int even_length=0; long total=0; for(int segment=1;segment<=n;segment++){ int cost= in.nextInt(); total+=cost; if(segment%2==1){ odd_min = Math.min(odd_min, cost); odd_length++; } else{ even_min = Math.min(even_min, cost); even_length++; } if(segment>1){ { long value=total-(odd_min+even_min); value+= odd_min * (n-odd_length+1); value+= even_min * (n-even_length+1); ans= Math.min(value, ans); } } } System.out.println(ans); } } }  public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); PrintWriter out = new PrintWriter(outputStream); Solver solver = new Solver(); solver.solve(in, out); out.close(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.out; import java.util.*; import java.io.PrintStream; import java.io.PrintWriter; public class A {   static final int mod = 1000000007; static final long temp = 998244353; static final long MOD = 1000000007; static final long M = (long)1e9+7;                                                                                                 public static void main(String[] args) throws Exception  { Reader sc = new Reader(); PrintWriter fout = new PrintWriter(System.out); int t = sc.nextInt(); while(t-- > 0) { long INF = 1000000000000000007L; int n = sc.nextInt(); long[] c = new long[n+1]; for(int i = 1;i<=n;i++) c[i] = sc.nextLong(); long ans = INF; long mo = INF,  so = 0, co = 0; long me = INF,  se = 0, ce = 0; for(int i=1;i<=n;i++) { if(i%2 == 1) { mo = min(mo,c[i]); so += c[i]; co++; } else { me = min(me,c[i]); se += c[i]; ce++; } if(i>=2) { long x = so + (n - co) * mo + se + (n - ce) * me; ans=min(ans,x); } } fout.println(ans); } fout.close(); } } ",0
721,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.StringTokenizer; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class TaskC {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Solver solver = new Solver();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class Solver {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(),m = in.nextInt();             int[][] a = new int[n][m];             for(int i=0;i<n;i++){                 String s = in.next();                 for(int j=0;j<m;j++){                     a[i][j] = (s.charAt(j)-'0');                 }             }             ArrayList<Pair> ans = new ArrayList<>();             for(int i=0;i<=n-2;i++){                 for(int j=0;j<=m-2;j++) {                     int cnt = 0;                     if (a[i][j] == 1) cnt++;                     if (a[i + 1][j] == 1) cnt++;                     if(a[i][j+1]==1) cnt++;                     if(a[i+1][j+1]==1) cnt++;                     if(cnt==4){                         a[i][j] = 0;                         a[i+1][j] = 0;                         a[i+1][j+1] = 0;                         ans.add(new Pair((i+1),(j+1)));                         ans.add(new Pair((i+2),(j+1)));                         ans.add(new Pair((i+2),(j+2)));                         cnt = 1;                     }                     if(cnt==1){                         boolean flag = false;                         for(int x=0;x<2;x++){                             for(int y=0;y<2;y++){                                 if(a[i+x][j+y]==1){                                     ans.add(new Pair((i+1+x),(j+1+y)));                                     int cnt2 = 1;                                     for(int sx=0;sx<2;sx++){                                         for(int sy=0;sy<2;sy++){                                             if(a[i+sx][j+sy]!=1){                                                 a[i+sx][j+sy]=1;                                                 ans.add(new Pair((i+sx+1),(j+sy+1)));                                                 cnt2++;                                                 if(cnt2==3){                                                     a[i+x][j+y]=0;                                                     flag = true;                                                     break;                                                 }                                             }                                         }                                         if(flag) break;                                     }                                     if(flag) break;                                 }                                 if(flag) break;                             }                             if(flag) break;                         }                         cnt = 2;                     }                     if(cnt==2){                         boolean flag = false;                         for(int x=0;x<2;x++){                             for(int y=0;y<2;y++){                                 if(a[i+x][j+y]==1){                                     ans.add(new Pair((i+1+x),(j+1+y)));                                     int cnt2 = 1;                                     for(int sx=0;sx<2;sx++){                                         for(int sy=0;sy<2;sy++){                                             if(a[i+sx][j+sy]!=1){                                                 cnt2++;                                                 ans.add(new Pair((i+sx+1),(j+1+sy)));                                                 a[i+sx][j+sy]=1;                                                 if(cnt2==3){                                                     a[i+x][j+y]=0;                                                     flag = true;                                                     break;                                                 }                                             }                                         }                                         if(flag) break;                                     }                                     if(flag) break;                                 }                                 if(flag) break;                             }                             if(flag) break;                         }                         cnt = 3;                     }                     if(cnt==3){                         for(int x=0;x<2;x++){                             for(int y=0;y<2;y++){                                 if(a[i+x][j+y]==1){                                     a[i+x][j+y]=0;                                     ans.add(new Pair((i+1+x),(j+1+y)));                                 }                             }                         }                     }                 }             }             out.println((ans.size())/3);             for(int i=0;i<ans.size();i+=3){                 for(int j=0;j<=2;j++){                     out.print(ans.get(i+j).a+"" ""+ans.get(i+j).b+ "" "");                 }                 out.println();             }         }     }     static class Pair{         int a,b;         public Pair(int a,int b){             this.a=a;             this.b=b;         }     }      } ","import java.io.*; import java.util.*; public class C {     static InputReader in;     static PrintWriter out;     public static void main(String[] args) {                  initReaderPrinter(false);         solve(in.nextInt());              }     static void solve(int testCnt) {         for (int testNumber = 0; testNumber < testCnt; testNumber++) {             int n = in.nextInt(), m = in.nextInt();             char[][] g = new char[n][];             for(int i = 0; i < n; i++) {                 g[i] = in.next().toCharArray();             }             List<List<Integer>> list = new ArrayList<>();             for(int i = 0; i < n - 1; i++) {                 for(int j = 0; j < m - 1; j++) {                     list.addAll(change(g, i, j));                 }             }             out.println(list.size());             for(int i = 0; i < list.size(); i++) {                 for(int j = 0; j < 6; j++) {                     out.print(list.get(i).get(j) + "" "");                 }                 out.println();             }         }         out.close();     }     static List<List<Integer>> change(char[][] g, int i, int j) {         List<List<Integer>> list = new ArrayList<>();         int cnt = 0;         cnt += g[i][j] - '0';         cnt += g[i][j + 1] - '0';         cnt += g[i + 1][j] - '0';         cnt += g[i + 1][j + 1] - '0';         if(cnt != 0) {             if(cnt == 4) {                 List<Integer> op = new ArrayList<>();                 op.add(i + 1); op.add(j + 1 + 1); op.add(i + 1 + 1); op.add(j + 1); op.add(i + 1 + 1); op.add(j + 1 + 1);                 list.add(op);                 g[i][j + 1] = '0';                 g[i + 1][j] = '0';                 g[i + 1][j + 1] = '0';                 cnt = 1;             }             if(cnt == 1) {                 List<Integer> op = new ArrayList<>();                 int zeroCnt = 0;                 for(int k1 = 0; k1 < 2; k1++) {                     for(int k2 = 0; k2 < 2; k2++) {                         if(g[i + k1][j + k2] == '0' && zeroCnt < 2) {                             op.add(i + k1 + 1);                             op.add(j + k2 + 1);                             zeroCnt++;                         }                         else if(g[i + k1][j + k2] == '1'){                             op.add(i + k1 + 1);                             op.add(j + k2 + 1);                         }                     }                 }                 list.add(op);                 zeroCnt = 0;                 for(int k1 = 0; k1 < 2; k1++) {                     for(int k2 = 0; k2 < 2; k2++) {                         if(g[i + k1][j + k2] == '0' && zeroCnt < 2) {                             g[i + k1][j + k2] = '1';                             zeroCnt++;                         }                         else if(g[i + k1][j + k2] == '1'){                             g[i + k1][j + k2] = '0';                         }                     }                 }                 cnt = 2;             }             if(cnt == 2) {                 List<Integer> op = new ArrayList<>();                 int oneCnt = 0;                 for(int k1 = 0; k1 < 2; k1++) {                     for(int k2 = 0; k2 < 2; k2++) {                         if(g[i + k1][j + k2] == '0') {                             op.add(i + k1 + 1);                             op.add(j + k2 + 1);                         }                         else if(oneCnt < 1){                             op.add(i + k1 + 1);                             op.add(j + k2 + 1);                             oneCnt++;                         }                     }                 }                 list.add(op);                 oneCnt = 0;                 for(int k1 = 0; k1 < 2; k1++) {                     for(int k2 = 0; k2 < 2; k2++) {                         if(g[i + k1][j + k2] == '0') {                             g[i + k1][j + k2] = '1';                         }                         else if(oneCnt < 1){                             g[i + k1][j + k2] = '0';                             oneCnt++;                         }                     }                 }                 cnt = 3;             }             if(cnt == 3) {                 List<Integer> op = new ArrayList<>();                 for(int k1 = 0; k1 < 2; k1++) {                     for(int k2 = 0; k2 < 2; k2++) {                         if(g[i + k1][j + k2] == '1') {                             op.add(i + k1 + 1);                             op.add(j + k2 + 1);                         }                     }                 }                 list.add(op);             }             for(int k1 = 0; k1 < 2; k1++) {                 for(int k2 = 0; k2 < 2; k2++) {                     g[i + k1][j + k2] = '0';                 }             }         }         return list;     }     static void initReaderPrinter(boolean test) {         if (test) {             try {                 in = new InputReader(new FileInputStream(""src/input.in""));                 out = new PrintWriter(new FileOutputStream(""src/output.out""));             } catch (IOException e) {                 e.printStackTrace();             }         } else {             in = new InputReader(System.in);             out = new PrintWriter(System.out);         }     }      } ",0
722,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.util.InputMismatchException; import java.io.IOException; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         EAirConditioners solver = new EAirConditioners();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }       static class EAirConditioners {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(), q = in.nextInt();             int[] a = in.readArray(q);             long[] t = in.readLongArray(q);             long[] pref = new long[n + 2];             long[] suff = new long[n + 2];               Arrays.fill(pref, (long) 1e14);             Arrays.fill(suff, (long) 1e14);               for (int i = 0; i < q; ++i) {                 pref[a[i]] = t[i] - a[i];                 suff[a[i]] = t[i] + a[i];             }               for (int i = 1; i <= n; ++i) {                 pref[i] = Math.min(pref[i], pref[i - 1]);             }               for (int i = n; i >= 1; --i) {                 suff[i] = Math.min(suff[i], suff[i + 1]);             }               for (int i = 1; i <= n; ++i) {                 out.print(Math.min(pref[i] + i, suff[i] - i) + "" "");             }             out.println();         }       }        } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.util.InputMismatchException; import java.io.IOException; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         EAirConditioners solver = new EAirConditioners();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class EAirConditioners {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(), q = in.nextInt();             int[] a = in.readArray(q);             long[] t = in.readLongArray(q);             long[] pref = new long[n + 2];             long[] suff = new long[n + 2];             Arrays.fill(pref, (long) 1e14);             Arrays.fill(suff, (long) 1e14);             for (int i = 0; i < q; ++i) {                 pref[a[i]] = t[i] - a[i];                 suff[a[i]] = t[i] + a[i];             }             for (int i = 1; i <= n; ++i) {                 pref[i] = Math.min(pref[i], pref[i - 1]);             }             for (int i = n; i >= 1; --i) {                 suff[i] = Math.min(suff[i], suff[i + 1]);             }             for (int i = 1; i <= n; ++i) {                 out.print(Math.min(pref[i] + i, suff[i] - i) + "" "");             }             out.println();         }     }      } ",1
723,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DArmchairs solver = new DArmchairs();         solver.solve(1, in, out);         out.close();     }     static class DArmchairs {         ArrayList<Integer>[] arr;         long[][] dp;         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt();             int[] a = in.readArray(n);             int mx = 5001;             dp = new long[mx][mx];             for (int i = 0; i < mx; ++i) {                 Arrays.fill(dp[i], -1);             }             arr = new ArrayList[2];             for (int i = 0; i < 2; ++i) {                 arr[i] = new ArrayList<>();             }             for (int i = 0; i < n; ++i) {                 arr[a[i]].add(i);             }             out.println(go(0, 0));         }         long go(int i, int j) {             if (i == arr[1].size()) return 0;             if (j == arr[0].size()) return (long) 1e9;             if (dp[i][j] != -1) return dp[i][j];             long pick = Math.abs(arr[0].get(j) - arr[1].get(i)) + go(i + 1, j + 1);             long leave = go(i, j + 1);             dp[i][j] = Math.min(leave, pick);             return dp[i][j];         }     }      } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DArmchairs solver = new DArmchairs();         solver.solve(1, in, out);         out.close();     }     static class DArmchairs {         ArrayList<Integer>[] arr;         long[][] dp;         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt();             int[] a = in.readArray(n);             int mx = 5001;             dp = new long[mx][mx];             for (int i = 0; i < mx; ++i) {                 Arrays.fill(dp[i], -1);             }             arr = new ArrayList[2];             for (int i = 0; i < 2; ++i) {                 arr[i] = new ArrayList<>();             }             for (int i = 0; i < n; ++i) {                 arr[a[i]].add(i);             }             out.println(go(0, 0));         }         long go(int i, int j) {             if (i == arr[1].size()) return 0;             if (j == arr[0].size()) return (long) 1e9;             if (dp[i][j] != -1) return dp[i][j];             long pick = Math.abs(arr[0].get(j) - arr[1].get(i)) + go(i + 1, j + 1);             long leave = go(i, j + 1);             dp[i][j] = Math.min(leave, pick);             return dp[i][j];         }     }      } ",1
724,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CSbalansirovannieKuchkiKamnei solver = new CSbalansirovannieKuchkiKamnei();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CSbalansirovannieKuchkiKamnei {         public void solve(int testNumber, InputReader in, PrintWriter out) {             int n = in.nextInt();             long[] a = new long[n];             for (int i = 0; i < n; i++) {                 a[i] = in.nextInt();             }             long t1 = 0;             long t2 = (int) 1e9 + 10;             long[] b = new long[n];             while (t1 < t2) {                 long mid = (t1 + t2 + 1) / 2;                 System.arraycopy(a, 0, b, 0, n);                 boolean fine = true;                 for (int i = n - 1; i >= 0; i--) {                     if (b[i] < mid) {                         fine = false;                         break;                     }                     if (i >= 2) {                         long how = Math.min(a[i], (b[i] - mid)) / 3;                         b[i - 1] += how;                         b[i - 2] += how * 2;                     }                 }                 if (fine) {                     t1 = mid;                 } else {                     t2 = mid - 1;                 }             }             out.println(t1);         }     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; import java.util.*; public class cp {     public static void main(String args[]) throws Exception {         FastScanner sc = new FastScanner();         int T = 1;         T = sc.nextInt();         PrintWriter pw = new PrintWriter(System.out);         StringBuilder sb = new StringBuilder();         while (T-- > 0) {             solve(sc, pw, sb);         }         pw.print(sb);         pw.close();     }     public static void solve(FastScanner sc, PrintWriter pw, StringBuilder sb) throws Exception {        int n=sc.nextInt();        int[] h=new int[n];        for(int i=0;i<n;i++){             h[i]=sc.nextInt();        }        long low=0,high=(long)1e12,ans=low;        while(low<=high){             long mid=low+(high-low)/2L;             if(ok(mid,h)){                 ans=mid;                 low=mid+1;             }             else{                 high=mid-1;             }        }        sb.append(ans+""\n"");     }     public static boolean ok(long value,int[] h){         int n=h.length;         int[] copy=new int[n];         for(int i=0;i<n;i++){             copy[i]=h[i];         }         for(int i=n-1;i-2>=0;i--){             if(copy[i]<value) return false;                          long toSub=Math.min(copy[i]-value,h[i])/3L;                          copy[i-1]+=toSub;             copy[i-2]+=toSub*2L;         }                  if(copy[0]<value || copy[1]<value) return false;                  return true;     }                     } ",0
725,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.util.Objects; import java.util.Collections; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CPhoenixAndTowers solver = new CPhoenixAndTowers();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CPhoenixAndTowers {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();             ArrayList<Pair<Integer, Integer>> a = new ArrayList<>();             for (int i = 0; i < n; ++i) {                 a.add(new Pair<>(in.nextInt(), i));             }             Collections.sort(a);             int[] ans = new int[n];             int[] sum = new int[m];             int j = 1;             for (int i = 0; i < n; ++i) {                 ans[a.get(i).y] = j;                 sum[j - 1] += a.get(i).x;                 j++;                 if (j == m + 1) j = 1;             }             for (int i = 1; i < m; ++i) {                 if (Math.abs(sum[i - 1] - sum[i]) > k) {                     out.println(""NO"");                 }             }             out.println(""YES"");             for (int e : ans) {                 out.print(e + "" "");             }             out.println();         }     }     static class Pair<U, V> implements Comparable<Pair<U, V>> {         public U x;         public V y;         public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                }      } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.util.Objects; import java.util.Collections; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CPhoenixAndTowers solver = new CPhoenixAndTowers();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CPhoenixAndTowers {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();             ArrayList<Pair<Integer, Integer>> a = new ArrayList<>();             for (int i = 0; i < n; ++i) {                 a.add(new Pair<>(in.nextInt(), i));             }             Collections.sort(a);             int[] ans = new int[n];             int[] sum = new int[m];             int j = 1;             for (int i = 0; i < n; ++i) {                 ans[a.get(i).y] = j;                 sum[j - 1] += a.get(i).x;                 j++;                 if (j == m + 1) j = 1;             }             for (int i = 1; i < m; ++i) {                 if (Math.abs(sum[i - 1] - sum[i]) > k) {                     out.println(""NO"");                 }             }             out.println(""YES"");             for (int e : ans) {                 out.print(e + "" "");             }             out.println();         }     }          static class Pair<U, V> implements Comparable<Pair<U, V>> {         public U x;         public V y;         public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                } } ",1
726,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Scanner; public class Main {     public static void main(String[] args)     {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         Scanner in = new Scanner(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskC solver = new TaskC();         solver.solve(1, in, out);         out.close();     }     static class TaskC     {         public void solve(int testNumber, Scanner in, PrintWriter out)         {             int T = in.nextInt();             while (T-- > 0)             {                 solveOne(in, out);             }         }         private void solveOne(Scanner in, PrintWriter out)         {             int N = in.nextInt();             int nums[] = L.readIntArray(N, in);             int min[] = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE};             int rem[] = new int[]{N, N};             long sum = 0;             long ans = Long.MAX_VALUE;             for (int idx = 0; idx < N; idx++)             {                 min[idx % 2] = Math.min(min[idx % 2], nums[idx]);                 rem[idx % 2]--;                 sum += nums[idx];                 long cur = sum + rem[0] * (long) min[0] + rem[1] * (long) min[1];                 ans = Math.min(ans, cur);             }             out.println(ans);         }     }     static class L     {         public static int[] readIntArray(int size, Scanner in)         {             int[] array = new int[size];             for (int i = 0; i < size; i++)             {                 array[i] = in.nextInt();             }             return array;         }     } } ","import java.util.Scanner; public class C1499 { public static void main(String[] args) { Scanner in = new Scanner(System.in); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); long[] mn = { Long.MAX_VALUE, Long.MAX_VALUE }; long[] rem = { n, n }; long sum = 0; long ans = Long.MAX_VALUE; for (int i = 0; i < n; i++) { int temp = in.nextInt(); mn[i % 2] = Math.min(mn[i % 2], temp); rem[i % 2]--; sum += temp; if (i > 0) { long cur = sum + rem[0] * mn[0] + rem[1] * mn[1]; ans = Math.min(ans, cur); } } System.out.println(ans); } } } ",1
727,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Scanner; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         Scanner in = new Scanner(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskC solver = new TaskC();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class TaskC {         public void solve(int testNumber, Scanner in, PrintWriter out) {             int n = in.nextInt();             int[] arr = new int[n];             for (int i = 0; i < n; i++) {                 arr[i] = in.nextInt();             }             long ans = Long.MAX_VALUE;                          long[] evenSum = new long[n];             long[] oddSum = new long[n];             int[] evenMin = new int[n];             int[] oddMin = new int[n];             evenSum[0] = arr[0];             oddSum[1] = arr[1];             evenMin[0] = arr[0];             oddMin[1] = arr[1];             for (int i = 2; i < n; i++) {                 if (i % 2 == 0) {                     evenSum[i] = evenSum[i - 2] + arr[i];                     evenMin[i] = Math.min(evenMin[i - 2], arr[i]);                 } else {                     oddSum[i] = oddSum[i - 2] + arr[i];                     oddMin[i] = Math.min(oddMin[i - 2], arr[i]);                 }             }             for (int i = 1; i < n; i++) {                 ans = Math.min(ans, compute(arr, i, evenSum, oddSum, evenMin, oddMin));             }             out.println(ans);         }         private long compute(int[] arr, int i, long[] evenSum, long[] oddSum, int[] evenMin, int[] oddMin) {             if (i % 2 == 0) {                 return evenSum[i] + (arr.length - (i / 2) - 1) * (long) evenMin[i] + oddSum[i - 1] + (arr.length - (i / 2)) * (long) oddMin[i - 1];             } else {                 return evenSum[i - 1] + (arr.length - (i / 2) - 1) * (long) evenMin[i - 1] + oddSum[i] + (arr.length - (i / 2) - 1) * (long) oddMin[i];             }         }     } } ","import java.util.*; import java.lang.Math; import java.util.concurrent.TimeUnit; import java.util.stream.Collectors; import javax.management.Query; import java.io.*; import java.math.BigInteger; public class Main {     static int mod = 1000000007;                              static FastReader f = new FastReader();     static BufferedWriter w = new BufferedWriter(new OutputStreamWriter(System.out));                                                                                                         static int DP[][];     static ArrayList<ArrayList<Integer>> g;     static int count = 0;               public static void main(String args[]) throws Exception {                           Random rand = new Random();         int t = 1;         t = f.nextInt();         int tc = 1;         while (t-- != 0) {             int n = f.nextInt();             int c[] = new int[n];             long minOdd = 0, minEven = 0;             long sumEven = 0, sumOdd = 0;             for (int i = 0; i < n ; i++) {                 c[i] = f.nextInt();                                                                                                                                    }             minEven = c[0];             minOdd = c[1];             sumEven=c[0];             sumOdd=c[1];             long min=minEven*n + minOdd*n;             int even=1,odd=1;             for (int k = 3; k <= n; k++) {                 if(k%2==1){                     sumEven+=c[k-1];                     minEven=Math.min(minEven, c[k-1]);                     even++;                 }else{                     sumOdd+=c[k-1];                     minOdd=Math.min(minOdd, c[k-1]);                     odd++;                 }                 min=Math.min(min, sumEven-minEven+minEven*(n-even+1) + sumOdd-minOdd+minOdd*(n-odd+1));             }             w.write(min+""\n"");         }         w.flush();     } } ",0
728,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.StringTokenizer; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastScanner in = new FastScanner(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskC solver = new TaskC();         solver.solve(1, in, out);         out.close();     }     static class TaskC {         public void solve(int testNumber, FastScanner in, PrintWriter out) {             int numTests = in.nextInt();             for (int test = 0; test < numTests; test++) {                 int n = in.nextInt();                 char[] a = in.next().toCharArray();                 char[] b = in.next().toCharArray();                 int ka = 0;                 int kb = 0;                 int k11 = 0;                 int k01 = 0;                 for (int i = 0; i < n; i++) {                     if (a[i] == '1') {                         ++ka;                     }                     if (b[i] == '1') {                         ++kb;                     }                     if (a[i] == '1' && b[i] == '1') {                         ++k11;                     }                     if (a[i] == '0' && b[i] == '1') {                         ++k01;                     }                 }                 if (ka == 0) {                     out.println(kb == 0 ? 0 : -1);                     continue;                 }                 int ans = Integer.MAX_VALUE;                 if (ka == kb) {                     ans = Math.min(ans, 2 * (ka - k11));                 }                 if (ka == n - kb + 1) {                     int cur = 0;                     if (k11 == 0) {                         cur = 1 + 2 * (kb - k01);                     } else {                         cur = 1 + 2 * (kb - k01 - 1);                     }                     ans = Math.min(ans, cur);                 }                 if (ans == Integer.MAX_VALUE) {                     ans = -1;                 }                 out.println(ans);             }         }     }      } ","import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);                 public static void main(String [] args)     {                  int testcases = i();         while(testcases-->0)         {                          solve();         }         out.flush();         out.close();     }     static void solve()     {          int n = i();         char c[] = inputC();         char d[] = inputC();         int x01=0,x10=0,x00=0,x11=0;         for(int i=0;i<n;i++)         {             if(c[i]=='0'&&d[i]=='0')x00++;             if(c[i]=='0'&&d[i]=='1')x01++;             if(c[i]=='1'&&d[i]=='0')x10++;             if(c[i]=='1'&&d[i]=='1')x11++;         }         int ans = Integer.MAX_VALUE;         if(x01==0 && x10==0)         {             System.out.println(0);             return ;         }         if(x11==x00+1)         {             ans = Math.min(x11+x00,ans);         }       if(x01==x10)         {             ans = Math.min(x01+x10,ans);         }         if(ans == Integer.MAX_VALUE){             ans = -1;         }         System.out.println(ans);     }                     static int i() {         return sc.nextInt();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }                                                                                                                                                        } ",0
729,"import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.StringTokenizer; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.ArrayList; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DTreeTag solver = new DTreeTag();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class DTreeTag {         int diam = 0;         public int dfs(ArrayList<Integer> g[], int x, int depth[], int p) {             int len = 0;             for (int y : g[x]) {                 if (y != p) {                     depth[y] = depth[x] + 1;                     int cur = 1 + dfs(g, y, depth, x);                     diam = Math.max(diam, cur + len);                     len = Math.max(len, cur);                 }             }             return len;         }         public void solve(int testNumber, InputReader in, PrintWriter out) {             int n = in.nextInt();             int a = in.nextInt() - 1;             int b = in.nextInt() - 1;             int da = in.nextInt();             int db = in.nextInt();             int dis[] = new int[n];             ArrayList<Integer> g[] = new ArrayList[n];             for (int i = 0; i < n; i++) g[i] = new ArrayList<>();             for (int i = 0; i < n - 1; i++) {                 int u = in.nextInt() - 1;                 int v = in.nextInt() - 1;                 g[u].add(v);                 g[v].add(u);             }             diam = 0;             dfs(g, a, dis, -1);             int disb = dis[b];             if (2 * da >= Math.min(diam, db) || disb <= da) {                 out.println(""Alice"");             } else {                 out.println(""Bob"");             }         }     }      } ","import java.io.BufferedOutputStream; import java.io.BufferedReader; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.StringTokenizer; public class D { static int diam=0; public static int dfs(int a, int p,int[] depth,ArrayList<Integer>[] list) { int len=0; for(int y:list[a]) { if(y==p) continue; depth[y]=depth[a]+1; int cur=1+dfs(y,a,depth,list); diam=Math.max(cur+len,diam); len=Math.max(cur, len); } return len; } public static void main(String[] args) { MyScanner s = new MyScanner(); out = new PrintWriter(new BufferedOutputStream(System.out)); try { int t=s.nextInt(); while(t-->0) { int n=s.nextInt(); int a=s.nextInt(); int b=s.nextInt(); int da=s.nextInt(); int db=s.nextInt(); ArrayList<Integer>[] list=new ArrayList[n+1]; for(int i=0;i<=n;i++) list[i]=new ArrayList<Integer>(); for(int i=0;i<n-1;i++) { int u=s.nextInt(); int v=s.nextInt(); list[u].add(v); list[v].add(u); } int[] depth=new int[n+1]; diam=0; depth[a]=0; int dia=dfs(a,0,depth,list); if(2*da>=Math.min(diam, db) || depth[b]<=da) { System.out.println(""Alice""); } else { System.out.println(""Bob""); } } out.close(); }catch(Exception e) { System.out.println(e); return; } } public static PrintWriter out; } ",1
730,"import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class a{      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(),k=s.nextInt(); int pos[]=s.readArray(k); int temp[]=s.readArray(k); long ans[]=new long[n]; Arrays.fill(ans,Integer.MAX_VALUE); for(int i=0;i<k;i++){ ans[pos[i]-1]=temp[i]; } for(int i=1;i<n;i++){ ans[i]=Math.min(ans[i-1]+1,ans[i]); } for(int i=n-2;i>=0;i--){ ans[i]=Math.min(ans[i],ans[i+1]+1); } for(int i=0;i<n;i++){ out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ","import java.util.*; public class Solution{     public static void main(String[] args){         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         long max=(long)1e18;         StringBuilder sb=new StringBuilder();         while(t-->0){             int n=sc.nextInt();             int k=sc.nextInt();             long[] ans=new long[n+1];             long[] tem=new long[n+1];             int[] item=new int[k];                          Arrays.fill(ans,max);                          for(int i=0;i<k;i++){                 item[i]=sc.nextInt();                             }             for(int i=0;i<k;i++){                 tem[item[i]]=sc.nextLong();             }             for(int i=n;i>=1;i--){                  if(tem[i]!=0){                      if(i==n)ans[i]=Math.min(ans[i],tem[i]);                      else{ ans[i]=Math.min(ans[i],ans[i+1]+1);                            ans[i]=Math.min(tem[i],ans[i]);                                                  }                  }                  else{                      if(i<n)ans[i]=Math.min(ans[i],ans[i+1]+1);                                      }             }                for(int i=1;i<=n;i++){                  if(tem[i]!=0){                      if(i==1)ans[i]=Math.min(ans[i],tem[i]);                      else{ ans[i]=Math.min(ans[i],ans[i-1]+1);                      ans[i]=Math.min(tem[i],ans[i]);                      }                  }                  else{                      if(i>1)ans[i]=Math.min(ans[i],ans[i-1]+1);                                      }             }             for(int i=1;i<=n;i++){                                sb.append(ans[i]+"" "");             }             sb.append(""\n"");         }         System.out.println(sb);     } } ",0
731,"import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class solution {      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(), k=s.nextInt(); int[] a=s.readArray(k), temp=s.readArray(k); long[] ans=new long[n]; Arrays.fill(ans, Integer.MAX_VALUE); for (int i=0; i<k; i++) { ans[a[i]-1]=temp[i]; } for (int i=1; i<n; i++) { ans[i]=Math.min(ans[i],ans[i-1]+1); } for (int i=n-2; i>=0; i--) { ans[i]=Math.min(ans[i],ans[i+1]+1); } for (int i=0; i<n; i++) { out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ","import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class a{      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(),k=s.nextInt(); int pos[]=s.readArray(k); int temp[]=s.readArray(k); long ans[]=new long[n]; Arrays.fill(ans,Integer.MAX_VALUE); for(int i=0;i<k;i++){ ans[pos[i]-1]=temp[i]; } for(int i=1;i<n;i++){ ans[i]=Math.min(ans[i-1]+1,ans[i]); } for(int i=n-2;i>=0;i--){ ans[i]=Math.min(ans[i],ans[i+1]+1); } for(int i=0;i<n;i++){ out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ",1
732,"import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class solution {      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(); int c[][]=new int[n][5]; int sum[]=new int[5]; for(int i=0;i<n;i++) { String a=s.next(); for(int j=0;j<a.length();j++) { c[i][a.charAt(j)-'a']++; } for(int j=0;j<5;j++) { sum[j]+=c[i][j]; } } int sum1=0; for(int i=0;i<5;i++) { sum1+=sum[i]; } int ans=0; for(int i=0;i<5;i++) { int sum2=sum1-sum[i]; if(sum[i]>sum2) { ans=n; break; }else { ArrayList<Integer> f=new ArrayList<>(); for(int j=0;j<n;j++) { int sum3=0; for(int k=0;k<5;k++) { if(k!=i) { sum3+=c[j][k]; }else { sum3-=c[j][k]; } } f.add(sum3); } Collections.sort(f); while(sum[i]<=sum2 && f.size()>0 && f.get(f.size()-1)>0) { sum2-=f.get(f.size()-1); f.remove(f.size()-1); } if(sum[i]>sum2) { ans=Math.max(ans,f.size()); } } } out.println(ans); } out.close();     }          static void sort(long [] a) { ArrayList<Long> l=new ArrayList<>(); for (long i:a) l.add(i); Collections.sort(l); for (int i=0; i<a.length; i++) a[i]=l.get(i); }     static void sort(int [] a) { ArrayList<Integer> l=new ArrayList<>(); for (int i:a) l.add(i); Collections.sort(l); for (int i=0; i<a.length; i++) a[i]=l.get(i); }                          } ","import java.util.*; import java.io.*; public class C1551 { public static void main(String[] args) throws IOException { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[][] arr = new char[n][]; for (int i = 0; i < arr.length; i++) { arr[i] = sc.next().toCharArray(); } int[][] cnt = new int[n][5]; for (int i = 0; i < cnt.length; i++) { for (char c : arr[i]) { cnt[i][c - 'a']++; } } int fans = 0; for (int letter = 0; letter < 5; letter++) { ArrayList<Integer> al = new ArrayList<Integer>(); for (int i = 0; i < n; i++) { al.add(2 * cnt[i][letter] - arr[i].length); } Collections.sort(al, Collections.reverseOrder()); int sum = 0; int ans = 0; for (int x : al) { sum += x; if (sum > 0) { ans++; } else { break; } } fans = Math.max(ans, fans); } pw.println(fans); } pw.close(); } } ",0
733,"import java.io.PrintWriter; import java.util.*; public class codeforces { public static void main(String[] args) { PrintWriter out=new PrintWriter(System.out);     Scanner s=new Scanner(System.in);       int t=s.nextInt();     for(int tt=0;tt<t;tt++) {     int n=s.nextInt(),m=s.nextInt(),x=s.nextInt();     HashMap<Integer,ArrayList<Integer>> map=new HashMap<>();     int a[]=new int[n];     for(int i=0;i<n;i++) {     a[i]=s.nextInt();     if(map.containsKey(a[i])) {     ArrayList<Integer> c=map.get(a[i]);     c.add(i+1);     map.put(a[i], c);     }else {     ArrayList<Integer> c=new ArrayList<>();     c.add(i+1);     map.put(a[i], c);     }     }     sort(a);     long ans[]=new long[m];     int c=0;     boolean l=true;     for(int i=n-1;i>=0;i--) {     if(c==m && l) {     c=m-1;     l=false;     }else if(!l && c==-1){     l=true;     c=0;     }     ans[c]+=a[i];     if(l) {     c++;     }else {     c--;     }     }     long min=Integer.MAX_VALUE,max=Integer.MIN_VALUE;     for(int i=0;i<m;i++) {     min=Math.min(ans[i], min);     max=Math.max(ans[i], max);     }     if(max-min>x) {     System.out.println(""NO"");     }else {     System.out.println(""YES"");     int a1[]=new int[n];     c=0;     l=true;     for(int i=n-1;i>=0;i--) {     if(c==m && l) {         c=m-1;         l=false;         }else if(!l && c==-1){         l=true;         c=0;         }     a1[map.get(a[i]).get(0)-1]=c+1;          map.get(a[i]).remove(0);     if(l) {         c++;         }else {         c--;         }          }     for(int i=0;i<n;i++) {     System.out.print(a1[i]+"" "");     }     System.out.println();     }     }     out.close();     s.close(); } static void sort(int[] a) { ArrayList<Integer> l=new ArrayList<>(); for (int i:a) l.add(i); Collections.sort(l); for (int i=0; i<a.length; i++) a[i]=l.get(i); } } ","import java.util.*;   import java.io.*;   public class AiseHi { static Scanner sc = new Scanner(System.in); static int mod = (int)(1e9+7); public static void main (String[] args) { PrintWriter out = new PrintWriter(System.out); int t = 1;     t = sc.nextInt();     z : while(t-->0) {     int n = sc.nextInt();     int m = sc.nextInt();     int x = sc.nextInt();     PriorityQueue<twoval> myQueue = new PriorityQueue<>();     for(int i=1;i<=m;i++) {     myQueue.add(new twoval(0,i));     }     List<twoval> arrayList = new ArrayList<>();     int myArray[] = new int[n];     for(int i=0;i<n;i++) {     int aasjd = sc.nextInt();     arrayList.add(new twoval(aasjd,i));     myArray[i] = aasjd;     }     Collections.sort(arrayList);     int ans[] = new int[n];     for(int i=n-1;i>=0;i--) {     twoval p = myQueue.poll();     long aasjd = p.myArray;     int idx = p.b;     aasjd += arrayList.get(i).myArray;     ans[arrayList.get(i).b] = idx;     myQueue.add(new twoval(aasjd,idx));     }     long dasdaknw[] = new long[m];     long min = Long.MAX_VALUE, max = Long.MIN_VALUE;     for(int i=0;i<n;i++) {     dasdaknw[ans[i]-1] += myArray[i];     }     for(int i=0;i<m;i++) {     min = Math.min(min, dasdaknw[ans[i]-1]);     max = Math.max(max, dasdaknw[ans[i]-1]);     }     if(max-min>x) {     out.write(""NO\n"");     continue;     }     out.write(""YES\n"");     for(int aasjd : ans) out.write(aasjd+"" "");     out.write(""\n"");     } out.close(); } static boolean prime[] = new boolean[2000009]; static int fac[] = new int[2000009]; }   class twoval implements Comparable<twoval>{ long myArray; int b; twoval(long aasjd,int r){ this.myArray = aasjd; this.b = r; } } ",0
734,"import java.io.PrintWriter; import java.util.*; public class codeforces { static int dp[][]=new int[5001][5001]; public static void main(String[] args) { Scanner s=new Scanner(System.in);   PrintWriter out=new PrintWriter(System.out);         int t=1;         for(int tt=0;tt<t;tt++) {         int n=s.nextInt();         int a[]=new int[n];         ArrayList<Integer> z=new ArrayList<>();         ArrayList<Integer> o=new ArrayList<>();         for(int i=0;i<n;i++) {         a[i]=s.nextInt();         if(a[i]==1) {         o.add(i);         }else {         z.add(i);         }         }         for(int i=0;i<5001;i++) {         Arrays.fill(dp[i], -1);         }         System.out.println(sol(0,0,z,o));         }         out.close();     s.close(); } public static int sol(int i,int j,ArrayList<Integer> z,ArrayList<Integer> o) { if(j==o.size()) { return 0; } int h=z.size()-i; int l=o.size()-j; if(i==z.size()) { return 10000000; } if(dp[i][j]!=-1) { return dp[i][j]; } int ans1=sol(i+1,j,z,o); int ans2=sol(i+1,j+1,z,o)+Math.abs(z.get(i)-o.get(j)); dp[i][j]=Math.min(ans1, ans2); return dp[i][j]; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.HashSet; import java.util.List; import java.util.StringTokenizer; public class ProblemD { public static void main(String[] args) throws IOException { final int INF = 20000000; InputStream in = System.in; InputReader scan = new InputReader(in); int n = scan.nextInt(); int occ = 0; List<Integer> occPos = new ArrayList<>(); HashSet<Integer> occPosSet = new HashSet<>(); for(int i=1;i<=n;i++) { int num = scan.nextInt(); if(num==1) { occ++; occPos.add(i); occPosSet.add(i); } } int[][] dp = new int[n+1][occ+1]; for(int i=0;i<=n;i++) { for(int j=0;j<=occ;j++) { dp[i][j] = 20000000; } } for(int i=1;i<=n;i++) { int k=1; for(int pos: occPos) { if(occPosSet.contains(i)) { dp[i][k] = dp[i-1][k]; } else { dp[i][k] = Math.min(dp[i-1][k], dp[i-1][k-1]+Math.abs(pos-i)); if(k==1) dp[i][k]=Math.min(dp[i][k],Math.abs(pos-i)); } k++; } } if(dp[n][occ]==INF) { System.out.println(0); } else { System.out.println(dp[n][occ]); } } } ",0
735,"import java.io.PrintWriter; import java.util.*; public class codeforces { static int dp[][]=new int[5001][5001]; public static void main(String[] args) { Scanner s=new Scanner(System.in);   PrintWriter out=new PrintWriter(System.out);         int t=1;         for(int tt=0;tt<t;tt++) {         int n=s.nextInt();         int a[]=new int[n];         ArrayList<Integer> z=new ArrayList<>();         ArrayList<Integer> o=new ArrayList<>();         for(int i=0;i<n;i++) {         a[i]=s.nextInt();         if(a[i]==1) {         o.add(i);         }else {         z.add(i);         }         }         for(int i=0;i<5001;i++) {         Arrays.fill(dp[i], -1);         }         System.out.println(sol(0,0,z,o));         }         out.close();     s.close(); } public static int sol(int i,int j,ArrayList<Integer> z,ArrayList<Integer> o) { if(j==o.size()) { return 0; } int h=z.size()-i; int l=o.size()-j; if(i==z.size()) { return 10000000; } if(dp[i][j]!=-1) { return dp[i][j]; } int ans1=sol(i+1,j,z,o); int ans2=sol(i+1,j+1,z,o)+Math.abs(z.get(i)-o.get(j)); dp[i][j]=Math.min(ans1, ans2); return dp[i][j]; } } ","import java.util.*; import java.io.*; public class Solution {          private static boolean[] isPrime;                                                                                     public static void main(String[] args) throws IOException {         FastReader sc = new FastReader();         PrintWriter out = new PrintWriter(System.out);                                                                                          int n = sc.nextInt();         int arr[] = new int[n];         for(int i=0;i<n;i++){             arr[i] = sc.nextInt();         }         out.println(solver(n, arr));                  out.flush();     }     public static long solver(int n, int[] arr) {         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i=0;i<n;i++){             if(arr[i] ==1){                 a.add(i);             }             else{                 b.add(i);             }         }                           long inf = (long)1e10;         int aLen = a.size(), bLen = b.size();         long[][] dp = new long[bLen+1][aLen+1];         for(int i=0;i<bLen+1;i++)Arrays.fill(dp[i],inf);                  for(int i=0;i<=bLen;i++){             dp[i][0] = 0;         }         for(int i=1;i<=bLen;i++){             for(int j=1;j<=i && j<=aLen;j++){                 int aa = a.get(j-1);                 int bb = b.get(i-1);                                  dp[i][j] = Math.min(                     Math.abs(aa-bb)+dp[i-1][j-1],                     dp[i-1][j]                 );                              }         }                                                               return dp[bLen][aLen]==inf?0:dp[bLen][aLen];     } } ",0
736,"import java.lang.*; import java.util.*; import java.io.*; public class C { final static int mod = (int)(1e9 + 7); static LinkedList<Integer>[] adj; static int arr[][] ; static long dp[][] ; public static void main(String[] args) { FastReader fs = new FastReader(); int testcase = 1; testcase = fs.nextInt(); while (testcase-- > 0) { solve(fs); } } public static void solve(FastReader fs) { int n = fs.nextInt(); arr = new int[n + 1][2]; adj = new LinkedList[n + 1]; dp = new long[n + 1][2]; for (int i = 0; i < adj.length; i++) { adj[i] = new LinkedList<Integer>(); } for (int i = 1; i < arr.length; i++) { arr[i][0] = fs.nextInt(); arr[i][1] = fs.nextInt(); } for (int i = 0; i < n - 1; i++) { int u = fs.nextInt(); int v = fs.nextInt(); adj[u].add(v); adj[v].add(u); } dfs(1, -1); System.out.println(Math.max(dp[1][0], dp[1][1])); } static void dfs(int source , int parent) { for (int val : adj[source]) { if (val == parent) continue; dfs(val, source); dp[source][0] += Math.max(dp[val][0] + Math.abs(arr[source][0] - arr[val][0]),                           dp[val][1] + Math.abs(arr[source][0] - arr[val][1])); dp[source][1] += Math.max(dp[val][0] + Math.abs(arr[source][1] - arr[val][0]),                           dp[val][1] + Math.abs(arr[source][1] - arr[val][1])); } } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintStream; import java.util.*; public class Main {     public static long[] ans(List<List<Integer>> edges, long[][] range, int root, boolean[] visited, PrintStream out) {         if (visited[root]) {             return new long[2];         }         visited[root] = true;         long[] ans = new long[2];         for (int x : edges.get(root)) {             if (!visited[x]) {                 long[] temp = ans(edges, range, x, visited, out);                 ans[0] += Math.max(Math.abs(range[root][0] - range[x][0]) + temp[0], Math.abs(range[root][0] - range[x][1]) + temp[1]);                 ans[1] += Math.max(Math.abs(range[root][1] - range[x][0]) + temp[0], Math.abs(range[root][1] - range[x][1]) + temp[1]);             }         }         return ans;     }     public static void main(String[] args) throws IOException {         BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));         PrintStream out = new PrintStream(System.out);         int t = Integer.parseInt(reader.readLine());         while (t-->0) {             int n = Integer.parseInt(reader.readLine());             long[][] range = new long[n][2];             for (int i = 0; i < n; i++) {                 String[] input = reader.readLine().split("" "");                 range[i][0] = Integer.parseInt(input[0]);                 range[i][1] = Integer.parseInt(input[1]);             }             List<List<Integer>> edges = new ArrayList<>();             for (int i = 0; i < n; i++) {                 edges.add(new ArrayList<>());             }             for (int i = 0; i < n - 1; i++) {                 String[] input = reader.readLine().split("" "");                 int u = Integer.parseInt(input[0]) - 1, v = Integer.parseInt(input[1]) - 1;                 edges.get(u).add(v);                 edges.get(v).add(u);             }             int root = 0;             for (int i = 0; i < n; i++) {                 if (edges.get(i).size() > 1) {                     root = i;                     break;                 }                 if (edges.get(i).size() == 1) {                     root = i;                 }             }             long[] ans = ans(edges, range, root, new boolean[n], out);             out.println(Math.max(ans[0], ans[1]));         }         out.close();     } } ",0
737,"import java.lang.*; import java.util.*; import java.io.*; public class Main {         static void deal(int[] arr,int n) {         int m1 = 0;         int m2 = 0;         for(int i=0;i<n;i++) {             if(arr[i]==1) {                 m1 ++;             } else {                 m2 ++;             }         }         if(m1 ==0) {             System.out.println(0);             return;         }         int[] arr1 = new int[m1];         int[] arr2 = new int[m2];         int index1 = 0;         int index2 = 0;         for(int i=0;i<n;i++) {             if(arr[i] == 1) {                 arr1[index1] = i;                 index1++;             } else {                 arr2[index2] = i;                 index2++;             }         }         int[][] dp = new int[m2][m1];         dp[0][0] = Math.abs(arr1[0]-arr2[0]);         for(int i=0;i<m1;i++) {             if(i>0) dp[i][i] = dp[i-1][i-1] + Math.abs(arr1[i]-arr2[i]);             for(int j=i+1;j<m2;j++) {                 if(i>0) {                     dp[j][i] = Math.min(dp[j-1][i],dp[j-1][i-1]+Math.abs(arr2[j]-arr1[i]));                 } else {                     dp[j][i] = Math.min(dp[j-1][i],Math.abs(arr2[j]-arr1[i]));                 }             }         }         System.out.println(dp[m2-1][m1-1]);     }      public static void main(String[] args) {       MyScanner scanner = new MyScanner();         int n = scanner.nextInt();         int[] arr = new int[n];         for(int i=0;i<n;i++) {             arr[i] = scanner.nextInt();             }         deal(arr,n);     }      } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef { static long dp[][]; public static void main(String[] args) throws java.lang.Exception { FastReader in = new FastReader(System.in); StringBuilder sb = new StringBuilder(); int t = 1; while (t > 0) { --t; int n = in.nextInt(); int arr[] = new int[n]; List<Integer> ones = new ArrayList<Integer>(); List<Integer> zero = new ArrayList<>(); for(int i = 0;i<n;i++) { int a = in.nextInt(); if(a == 1) ones.add(i); else  zero.add(i); } if(ones.size() == 0) { sb.append(0+""\n""); continue; } dp = new long[ones.size()][zero.size()]; for(int i = 0;i<ones.size();i++)     Arrays.fill(dp[i], -1); sb.append(findans(ones, zero, ones.size()-1, zero.size()-1));             } System.out.print(sb); } static long findans(List<Integer> ones,List<Integer> zero,int x,int y) { if(x < 0) return 0; if(y<0) return Integer.MAX_VALUE;         if(dp[x][y]!=-1)         return dp[x][y]; return  dp[x][y] = Math.min(findans(ones, zero, x, y-1),findans(ones, zero, x-1, y-1) + (long)Math.abs(ones.get(x)-zero.get(y))); } } ",0
738,"import java.lang.*; import java.util.*; import java.io.*; public class Main {     static FastScanner in = new FastScanner();     static void solve() {         int n = in.nextInt();         long[] a = new long[n], odd = new long[n], even = new long[n];         long[] sum = new long[n];         long m1 = Long.MAX_VALUE, m2 = Long.MAX_VALUE;         long st = 0;         for (int i = 0; i < n; ++i) {             a[i] = in.nextLong();             if (i % 2 == 0 && a[i] < m1)                 m1 = a[i];             if (i % 2 == 1 && a[i] < m2)                 m2 = a[i];             st += a[i];             odd[i] = m1; even[i] = m2;             sum[i] = st;         }         long ans = Long.MAX_VALUE;         for (int i = 1; i < n; ++i) {             long aux = sum[i] + odd[i] * (n - i - 1 + (i + 1) / 2) + even[i] * (n - (i + 1) / 2);             if (aux < ans && aux > 0)                 ans = aux;         }         System.out.println(ans);     }     public static void main(String[] args) {         int T = in.nextInt();         while (T-- > 0)             solve();     }      } ",import java.util.*; public class Main {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         int t=s.nextInt();         while(t-->0) {             int n=s.nextInt();             long[] a=new long[n];             long[] odd=new long[n];             long[] even=new long[n];             long[] sum=new long[n];             long m1=Long.MAX_VALUE;             long m2=Long.MAX_VALUE;             long st=(long)0;             for(int i=0;i<n;i++){               a[i]=s.nextLong();               if(i%2==0&&m1>a[i])                   m1=a[i];               if(i%2==1&&m2>a[i])                   m2=a[i];               st+=a[i];               odd[i]=m1;               even[i]=m2;               sum[i]=st;             }             long minc=Long.MAX_VALUE;             for(int i=1;i<n;i++){                 long c=sum[i]+odd[i]*(n-i-1+(i+1)/2)+even[i]*(n-(i+1)/2);                 if(c<minc&&c>0)                     minc=c;             }             System.out.println(minc);         }     } } ,1
739,"import java.lang.reflect.Array; import java.util.*; import java.io.*; import java.util.regex.Pattern; public class B2 {                    public static long[] maxBeauty(HashMap[] arr, long[] lv,long[] rv,int start,int parent,boolean[] vis){         vis[start] = true;         long[] ans  = new long[2];                 ArrayList<Integer> list = new ArrayList<Integer>(arr[start].keySet());         for(int node:list){             if(vis[node]==false) {                 long[] curr = maxBeauty(arr,lv,rv,node,start,vis);                 ans[0] += Math.max(curr[0] + Math.abs(lv[start]-lv[node]),curr[1] + Math.abs(lv[start]-rv[node]));                 ans[1]  += Math.max(curr[0] + Math.abs(rv[start]-lv[node]),curr[1] + Math.abs(rv[start]-rv[node]));             }         }         return ans;     }     public static void main(String args[]) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         PrintWriter pw = new PrintWriter(System.out);         int tc = Integer.parseInt(br.readLine());         while (tc > 0) {             int n = Integer.parseInt(br.readLine());             boolean[] vis = new boolean[n+1];             HashMap[] arr = new HashMap[n+1];             for(int i=0;i<=n;i++){                 arr[i] = new HashMap<Integer,Long>();             }             long[] lv = new long[n+1];             long[] rv = new long[n+1];             for(int i=1;i<=n;i++){                 String[] s1 = br.readLine().split("" "");                 lv[i] = Long.valueOf(s1[0]);                 rv[i] = Long.valueOf(s1[1]);             }             for(int i=0;i<n-1;i++){                 String[] s1 = br.readLine().split("" "");                 int u = Integer.valueOf(s1[0]);                 int v = Integer.valueOf(s1[1]);                 arr[u].put(v,1);                 arr[v].put(u,1);             }             long[] ans  = maxBeauty(arr,lv,rv,1,0,vis);                                       pw.println(Math.max(ans[1],ans[0]));             tc--;         }         pw.close();     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.InputMismatchException; import java.util.*; import java.io.*; import java.lang.*; public class Main{                      public static void sortbyColumn(int arr[][], int col)      {                   Arrays.sort(arr, new Comparator<int[]>() {                                   });       }           public static class Pair<U extends Comparable<U>, V extends Comparable<V>> implements Comparable<Pair<U, V>> {         public U x;         public V y;              public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                                                  }                                                                                               static long dist[],dp[][],left[],right[];     static int visited[],isit[];     static ArrayList<Pair<Integer,Pair<Long,Long>>> adj[],li;          static int MOD=1000000007;     static char ch[];     static int[] sieve,is_sieve;     static TreeSet<Integer> tr;     static long mat[][];                                                                                                                                                                                                                                                                                                                                                                                                               static void dfs(int node,int par, Pair<Long,Long> p[]){         for(Pair<Integer,Pair<Long,Long>> pp:adj[node]){             if(pp.x!=par){                                  dfs(pp.x,node,p);                                  long x=Math.abs(p[node].x-p[pp.x].x);                 long y=Math.abs(p[node].x-p[pp.x].y);                 long z=Math.abs(p[node].y-p[pp.x].x);                 long w=Math.abs(p[node].y-p[pp.x].y);                                  left[node]+=Math.max(x+left[pp.x],y+right[pp.x]);                 right[node]+=Math.max(z+left[pp.x],w+right[pp.x]);                              }         }     }          public static void main(String args[]){         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter w = new PrintWriter(outputStream);         int t,i,j,tno=0,tte;                  t=in.nextInt();                                    while(t-->0){                          int n=in.nextInt();             adj=new ArrayList[n+1];             left=new long[n+1];             right=new long[n+1];             visited=new int[n+1];             for(i=0;i<n+1;i++){                 adj[i]=new ArrayList<>();             }             Pair<Long,Long> p[]=new Pair[n+1];             for(i=1;i<=n;i++){                 p[i]=new Pair<>(in.nextLong(),in.nextLong());             }              for(i=0;i<n-1;i++){                 int u,v;                 u=in.nextInt();                 v=in.nextInt();                 adj[u].add(new Pair<>(v,p[v]));                 adj[v].add(new Pair<>(u,p[u]));             }                          dfs(1,-1,p);                                                                 w.println((long)Math.max(left[1],right[1]));         }         w.close();     } } ",0
740,"import java.lang.reflect.Array; import java.util.*; import java.io.*; public class fastTemp {     static FastScanner fs = null;     public static void main(String[] args) {         fs = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int t = fs.nextInt();         while (t-- > 0) {             int n = fs.nextInt();            int p[] = new int[n];            Arrays.fill(p,-1);            for(int i=0;i<n;i++){                if(p[i]!=-1){                    continue;                }                System.out.println(""? ""+(i+1));                int ans = (i+1);                int x = fs.nextInt();                while(p[x-1]==-1){                    System.out.println(""? ""+(i+1));                    int last = fs.nextInt();                    p[x-1] = last;                    x = last;                }            }             System.out.print(""! "");            for(int i=0;i<n;i++){                System.out.print(p[i]+"" "");            }             System.out.flush();         }     }                                                                                                                                                       } ","import java.io.*; import java.util.*; public class check1  {     public static void main(String[] args) throws IOException{         Reader sc=new Reader();         int t=sc.nextInt();         while(t-->0)         {             int n = sc.nextInt();             int p[]=new int[n];             System.out.println(""? 1"");             System.out.flush();             int t1 = sc.nextInt();             Set<Integer> hs = new HashSet<>();             int i=1;             int prev=1;             int cnt=1;             while(i<n && cnt<2*n)             {                  if(p[prev-1]!=0)                 {                     i++;                     if(i>=n || cnt>=2*n) break;                     System.out.println(""? ""+i);                     System.out.flush();                     cnt++;                     int t2 = sc.nextInt();                     prev=t2;                     continue;                 }                 String s1 = ""? ""+i;                 System.out.println(s1);                 System.out.flush();                 int tt = sc.nextInt();                                  cnt++;                                 p[prev-1]=tt;                 prev=tt;             }             long sum=0;             int ind=-1;             for(i=0;i<n;i++)             {                 sum+=p[i];                 if(p[i]==0) ind=i;             }             long diff = n*(n+1)-sum*2;             if(diff>0)             {                 p[ind]=(int)(diff/2);             }             System.out.print(""!"");             for(i=0;i<n;i++)             {                 System.out.print("" ""+p[i]);             }             System.out.println();             System.out.flush();         }         System.out.flush();     }                                                             } ",0
741,"import java.lang.reflect.Array; import java.util.*; public class Rough {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);            int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             sc.nextLine();             String s[] = new String[n];             int f[][] = new int[n][5];             for (int i = 0; i < n; i++) {                 s[i]  = sc.nextLine();                 for (int j = 0; j < s[i].length(); j++) {                     f[i][s[i].charAt(j)-'a']++;                 }             }             int ans = 0;             for ( int i = 0; i < 5; i++) {                 ArrayList<Integer> al = new ArrayList<>();                 for (int j = 0; j < n; j++) {                     int o = 0;                     for (int k = 0; k < 5; k++) {                         if(k != i)                             o+=f[j][k];                     }                     al.add(f[j][i]-o);                 }                 Collections.sort(al,Collections.reverseOrder());                 int max = 0;                 int x = 0;                 for (int j = 0; j < n; j++) {                     x+=al.get(j);                     if(x<=0)break;                     max++;                 }                 ans = Math.max(max,ans);             }             System.out.println(ans);         }         sc.close();     } } ","import java.io.File; import java.io.IOException; import java.util.*; public class C {     public static void main(String[] args){         Scanner in = new Scanner(System.in);         int t = in.nextInt();         while (t-- > 0){             int n = in.nextInt();             int[][] cnt = new int[n][5];             int[] len = new int[n];             for (int i = 0; i < n; i++){                 String s = in.next();                 len[i] = s.length();                 for (char c : s.toCharArray()) cnt[i][c-'a']++;             }             int max = 0;             for (int i = 0; i < 5; i++){                 int[] diff = new int[n];                 for (int j = 0; j < n; j++) diff[j] = cnt[j][i] - (len[j] - cnt[j][i]);                 Arrays.sort(diff);                 int j = n-2, sum = diff[n-1];                 while (j>=0 && sum > 0){                     max = Math.max(max, n - 1 - j);                     sum += diff[j]; j--;                 }                 if (sum > 0) max = Math.max(max, n);             }             System.out.println(max);         }     } } ",0
742,"import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; public class Practice {     static HashMap<String, Integer> map = new HashMap<>();     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             int[][] occurances = new int[5][n];             for(int i=0;i<n;i++){                 String s = sc.next();                 int[] count = new int[5];                 int len = s.length();                 for(int j=0;j<s.length();j++){                     count[s.charAt(j)-'a']++;                 }                 for(int j=0;j<5;j++){                     occurances[j][i] = count[j] - (len-count[j]);                 }             }             int ans = 0;             for(int i=0;i<5;i++){                 Arrays.sort(occurances[i]);                 int tmpAns = 0; int tmpSum=0;                 for(int j=n-1;j>=0;j--){                     tmpSum+=occurances[i][j];                     if(tmpSum>0) tmpAns++;                     else break;                 }                 ans = Math.max(ans, tmpAns);             }             System.out.println(ans);         }     } } ","import java.io.*; import java.util.*; public class A734C {     public static void main(String[] args) {         JS scan = new JS();         int t = scan.nextInt();         loop:while(t-->0){             int n = scan.nextInt();             String[] arr= new String[n];             Integer[][] counts = new Integer[5][n];             for(int i = 0;i<5;i++){                 for(int j = 0;j<n;j++){                     counts[i][j] = 0;                 }             }             for(int i =0;i<n;i++){                 arr[i] = scan.next();                 int[] freq =new int[5];                 for(int j = 0;j<arr[i].length();j++){                     freq[arr[i].charAt(j)-'a']++;                 }                 for(int j = 0;j<5;j++){                     counts[j][i] = freq[j]-(arr[i].length()-freq[j]);                 }             }             int best = 0;             for(int i = 0;i<5;i++){                 Arrays.sort(counts[i]);                 int curr = 0;                 int extra = 0;                 for(int j = n-1;j>=0;j--){                     extra+=counts[i][j];                     if(extra>0)curr++;                 }                 best = Math.max(best,curr);             }             System.out.println(best);         }     }      } ",1
743,"import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; public class Practice {     static HashMap<String, Integer> map = new HashMap<>();     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             int[][] occurances = new int[5][n];             for(int i=0;i<n;i++){                 String s = sc.next();                 int[] count = new int[5];                 int len = s.length();                 for(int j=0;j<s.length();j++){                     count[s.charAt(j)-'a']++;                 }                 for(int j=0;j<5;j++){                     occurances[j][i] = count[j] - (len-count[j]);                 }             }             int ans = 0;             for(int i=0;i<5;i++){                 Arrays.sort(occurances[i]);                 int tmpAns = 0; int tmpSum=0;                 for(int j=n-1;j>=0;j--){                     tmpSum+=occurances[i][j];                     if(tmpSum>0) tmpAns++;                     else break;                 }                 ans = Math.max(ans, tmpAns);             }             System.out.println(ans);         }     } } ","import java.util.*; import java.lang.*; import java.io.*; public class InterestingStrory {     public static void main(String[] args) throws java.lang.Exception {                  try {                          FastReader sc = new FastReader();             int t =sc.nextInt();             while (t-- > 0) {                 int n=sc.nextInt();                 int[][] occ=new int[n][5];                 for(int i=0;i<n;i++){                     char[] warr=sc.next().toCharArray();                     for(char ch:warr){                         occ[i][ch-'a']++;                     }                 }                 int ans=Integer.MIN_VALUE;;                 for(int c=0;c<5;c++){                     int[] sums=new int[n];                     for(int i=0;i<n;i++){                         int sum=0;                         for(int j=0;j<5;j++){                             if(c==j){                                 sum+=occ[i][j];                             }                             else{                                 sum-=occ[i][j];                             }                         }                         sums[i]=sum;                     }                     Arrays.sort(sums);                     int currSum=0;                     int l=n-1;                     for(l=n-1;l>=0;l--){                         if(currSum+sums[l]<=0){                             break;                         }                         else{                             currSum+=sums[l];                         }                     }                     ans=Math.max(ans,n-l-1);                 }                 System.out.println(ans);             }         } catch (Exception e) {             return;         }     }                                         } ",0
744,"import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; public class Practice {     static HashMap<String, Integer> map = new HashMap<>();     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             int[][] occurances = new int[5][n];             for(int i=0;i<n;i++){                 String s = sc.next();                 int[] count = new int[5];                 int len = s.length();                 for(int j=0;j<s.length();j++){                     count[s.charAt(j)-'a']++;                 }                 for(int j=0;j<5;j++){                     occurances[j][i] = count[j] - (len-count[j]);                 }             }             int ans = 0;             for(int i=0;i<5;i++){                 Arrays.sort(occurances[i]);                 int tmpAns = 0; int tmpSum=0;                 for(int j=n-1;j>=0;j--){                     tmpSum+=occurances[i][j];                     if(tmpSum>0) tmpAns++;                     else break;                 }                 ans = Math.max(ans, tmpAns);             }             System.out.println(ans);         }     } } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ",0
745,"import java.math.BigInteger; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.Arrays; import java.util.ArrayDeque; import java.util.ArrayList; import java.util.StringTokenizer; public class mathcomp { public static void main(String []args) { FastScanner fs=new FastScanner(); int T=fs.nextInt(); PrintWriter out=new PrintWriter(System.out); for(int tt=0;tt<T;tt++) { int n=fs.nextInt(); int aStart=fs.nextInt()-1; int bStart=fs.nextInt()-1; int adist=fs.nextInt();int bdist=fs.nextInt(); Node[] nodes=new Node[n]; for(int i=0;i<n;i++) nodes[i]=new Node(); for(int i=1;i<n;i++) { int a=fs.nextInt()-1,b=fs.nextInt()-1; nodes[a].adj.add(nodes[b]);nodes[b].adj.add(nodes[a]); } bfs(nodes,nodes[bStart]); if(nodes[aStart].dist<=adist) { out.println(""Alice""); continue; } Node farthest=farthest(nodes); bfs(nodes,farthest); farthest=farthest(nodes); int diam=farthest.dist; if(2*adist>=diam) { out.println(""Alice""); continue; } if(bdist>2*adist) { out.println(""Bob""); } else { out.println(""Alice""); } } out.close(); } static Node farthest(Node[] nodes) { Node ans=nodes[0]; for(Node nn:nodes) if(nn.dist>ans.dist) ans=nn; return ans; } static void bfs(Node[] nodes,Node from) { for(Node nn:nodes) nn.dist=-1; ArrayDeque<Node> bfs=new ArrayDeque<>(); bfs.add(from); from.dist=0; while(!bfs.isEmpty()) { Node nn=bfs.remove(); for(Node adj:nn.adj) { if(adj.dist==-1) { adj.dist=nn.dist+1; bfs.add(adj); } } } } static class Node{ ArrayList<Node> adj=new ArrayList<>(); int dist=-1; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayDeque; import java.util.Arrays; import java.util.HashMap; import java.util.LinkedList; import java.util.StringTokenizer; public class Solution{ public static void main(String[] args) throws Exception{ FastScanner fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int tt = fs.nextInt(); while(tt-->0) { int n = fs.nextInt(), aStart = fs.nextInt()-1, bStart = fs.nextInt()-1, aMove = fs.nextInt(), bMove = fs.nextInt(); Node[] nodes = new Node[n]; for(int i=0;i<n;i++) { nodes[i] = new Node(); } for(int i=0;i<n-1;i++) { int u = fs.nextInt()-1, v = fs.nextInt()-1; nodes[u].adjList.add(nodes[v]); nodes[v].adjList.add(nodes[u]); } if(2*aMove>=bMove) { out.println(""Alice""); continue; } bfs(nodes,nodes[aStart]); if(nodes[bStart].dis<=aMove) { out.println(""Alice""); continue; } Node fNode = farthest(nodes); bfs(nodes, fNode); fNode = farthest(nodes); if(fNode.dis>=2*aMove+1) { out.println(""Bob""); } else { out.println(""Alice""); } } out.close(); } static Node farthest(Node[] nodes) { Node fNode = nodes[0]; for(Node n: nodes) { if(n.dis>fNode.dis) { fNode = n; } } return fNode; } static void bfs(Node[] nodes, Node start) { for(Node n: nodes) n.dis = -1; start.dis = 0; ArrayDeque<Node> queue = new ArrayDeque<Node>(); queue.add(start); while(!queue.isEmpty()) { Node n = queue.remove(); for(Node node: n.adjList) { if(node.dis==-1) { node.dis = n.dis + 1; queue.add(node); } } } } static class Node{ LinkedList<Node> adjList = new LinkedList<Node>(); int dis = -1; } } ",1
746,"import java.math.BigInteger; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Random; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.Vector; import java.util.Scanner; public class ahh { static Scanner scn = new Scanner(System.in); static boolean vis[][]; static FastReader s = new FastReader(); static int MOD = 1000000007; public static void main(String[] args) { int n=scn.nextInt(),count=0; int arr[]=new int[n]; for(int i=0;i<n;i++) { arr[i]=scn.nextInt(); } ArrayList<Integer>zer=new ArrayList<Integer>(),one=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(arr[i]==0) zer.add(i); else one.add(i); } count=one.size(); long memo[][]=new long[one.size()+1][zer.size()+1]; for(int i=0;i<=one.size();i++) { for(int j=0;j<=zer.size();j++) memo[i][j]=-1; } System.out.println(arm(one, zer, 0, 0, count,memo)); } public static long arm(ArrayList<Integer>one,ArrayList<Integer>zer,int i,int j,int count,long memo[][]) {if(count==0) return 0; if(i==one.size()||j==zer.size()) return Integer.MAX_VALUE; if(memo[i][j]!=-1) return memo[i][j]; long a=Integer.MAX_VALUE,b=Integer.MAX_VALUE; a=arm(one, zer, i+1, j+1,count-1,memo)+Math.abs(one.get(i)-zer.get(j)); b=arm(one, zer, i, j+1,count,memo); memo[i][j]=Math.min(a, b); return Math.min(a, b); } } ","import java.awt.Point; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.io.ObjectInputStream.GetField; import java.lang.reflect.Array; import java.math.BigDecimal; import java.math.BigInteger; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashSet; import java.util.Hashtable; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Set; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import javax.sound.sampled.ReverbType; public class Edu109 { static PrintWriter out; static Scanner sc; static int[]a; static int A,B,n,m,h,ans,sum; public static void main(String[]args) throws IOException { sc=new Scanner(System.in); out=new PrintWriter(System.out); D(); out.close(); }    static long[][]mem; static int ones; static ArrayList<Integer>pos; static void D() throws IOException { int t=1; while(t-->0) { n=ni(); a=nai(n); mem=new long[n][n]; ones=0; pos=new ArrayList<Integer>(); for(int i=0;i<n;i++) { Arrays.fill(mem[i], -1); if(a[i]==1)pos.add(i); } ones=pos.size(); long ans=solve(0,0); out.println(ans); } } private static long solve(int i, int j) { if(i==n||j>=ones)return j==ones?0:(long)1e14; if(mem[i][j]!=-1)return mem[i][j]; long lv=solve(i+1,j); if(a[i]==0) { int pr=Math.abs(i-pos.get(j)); lv=Math.min(lv, pr+solve(i+1,j+1)); } return mem[i][j]=lv; } static int ni() throws IOException { return sc.nextInt(); } static int[] nai(int n) throws IOException { int[] a = new int[n]; for (int i = 0; i < n; i++) a[i] = sc.nextInt(); return a; } } ",0
747,"import java.math.BigInteger; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Random; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.Vector; import java.util.Scanner; public class ahh { static Scanner scn = new Scanner(System.in); static boolean vis[][]; static FastReader s = new FastReader(); static int MOD = 1000000007; public static void main(String[] args) { int n=scn.nextInt(),count=0; int arr[]=new int[n]; for(int i=0;i<n;i++) { arr[i]=scn.nextInt(); } ArrayList<Integer>zer=new ArrayList<Integer>(),one=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(arr[i]==0) zer.add(i); else one.add(i); } count=one.size(); long memo[][]=new long[one.size()+1][zer.size()+1]; for(int i=0;i<=one.size();i++) { for(int j=0;j<=zer.size();j++) memo[i][j]=-1; } System.out.println(arm(one, zer, 0, 0, count,memo)); } public static long arm(ArrayList<Integer>one,ArrayList<Integer>zer,int i,int j,int count,long memo[][]) {if(count==0) return 0; if(i==one.size()||j==zer.size()) return Integer.MAX_VALUE; if(memo[i][j]!=-1) return memo[i][j]; long a=Integer.MAX_VALUE,b=Integer.MAX_VALUE; a=arm(one, zer, i+1, j+1,count-1,memo)+Math.abs(one.get(i)-zer.get(j)); b=arm(one, zer, i, j+1,count,memo); memo[i][j]=Math.min(a, b); return Math.min(a, b); } } ","import java.util.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ",0
748,"import java.math.BigInteger; import java.sql.Array;     import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Deque; import java.util.HashMap; import java.util.HashSet; import java.util.InputMismatchException; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Scanner; import java.util.Set; import java.util.Stack; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class Main { static HashMap<Integer,Boolean>map; static long dp[][]; static boolean flag; staticHashSet<Long>hs; static long mod=(long)(1e9+7); public static void main(String[] args) { StringBuilder ans=new StringBuilder(); FastReader sc=new FastReader(); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k=sc.nextInt(); long L[]=new long[n]; long R[]=new long[n]; int a[]=new int[k]; int temp[]=new int[k]; for(int i=0;i<k;i++) a[i]=sc.nextInt(); for(int i=0;i<k;i++) temp[i]=sc.nextInt(); int c[]=new int [n]; Arrays.fill(c, Integer.MAX_VALUE); for(int i=0;i<k;i++) c[a[i]-1]=temp[i]; long p=Integer.MAX_VALUE; for(int i=0;i<n;i++) { p=Math.min(p+1, c[i]); L[i]=p; } p=Integer.MAX_VALUE; for(int i=n-1;i>=0;i--) { p=Math.min(p+1, c[i]); R[i]=p; } for(int i=0;i<n;i++) { ans.append(Math.min(L[i], R[i])+"" ""); } ans.append(""\n""); } System.out.println(ans); }                     } ","import java.io.*; import java.util.*; public class CODECHEF {          static long MOD=1000000000;          static long[] solve(int[] pos,long[] arr,int n,int k){         long[] ans=new long[n];         long[] left=new long[n];         long[] right=new long[n];         long min=Integer.MAX_VALUE;         for(int i=0;i<n;i++){             min=Math.min(min+1,arr[i]);             left[i]=min;         }         min=Integer.MAX_VALUE;         for(int i=n-1;i>=0;i--){             min=Math.min(min+1,arr[i]);             right[i]=min;         }         for(int i=0;i<n;i++){             ans[i]=Math.min(left[i],right[i]);         }         return ans;     }     public static void main(String[] args) throws java.lang.Exception {          FastReader fs=new FastReader(System.in);          int t=fs.nextInt();          while (t-->0){             int n=fs.nextInt();             int k=fs.nextInt();             int[] pos=new int[k];             for(int i=0;i<k;i++)                 pos[i]=fs.nextInt()-1;             long[] temp=new long[n];             int ptr=0;             Arrays.fill(temp,Integer.MAX_VALUE);              for(int i=0;i<k;i++)                  temp[pos[ptr++]]=fs.nextLong();              long[] ans=solve(pos,temp,n,k);              for(int i=0;i<n;i++)                  System.out.print(ans[i]+"" "");              System.out.println();          }              } } ",1
749,"import java.math.BigInteger; import java.sql.Array;     import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Deque; import java.util.HashMap; import java.util.HashSet; import java.util.InputMismatchException; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Scanner; import java.util.Set; import java.util.Stack; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class Main { static HashMap<Integer,Boolean>map; static long dp[][]; static boolean flag; staticHashSet<Long>hs; static long mod=(long)(1e9+7); public static void main(String[] args) { StringBuilder ans=new StringBuilder(); FastReader sc=new FastReader(); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k=sc.nextInt(); long L[]=new long[n]; long R[]=new long[n]; int a[]=new int[k]; int temp[]=new int[k]; for(int i=0;i<k;i++) a[i]=sc.nextInt(); for(int i=0;i<k;i++) temp[i]=sc.nextInt(); int c[]=new int [n]; Arrays.fill(c, Integer.MAX_VALUE); for(int i=0;i<k;i++) c[a[i]-1]=temp[i]; long p=Integer.MAX_VALUE; for(int i=0;i<n;i++) { p=Math.min(p+1, c[i]); L[i]=p; } p=Integer.MAX_VALUE; for(int i=n-1;i>=0;i--) { p=Math.min(p+1, c[i]); R[i]=p; } for(int i=0;i<n;i++) { ans.append(Math.min(L[i], R[i])+"" ""); } ans.append(""\n""); } System.out.println(ans); }                     } ","import java.io.*; import java.util.*; public class GFG { public static void main (String[] args) {     Scanner sc = new Scanner(System.in);     int t = sc.nextInt();     while(t-- > 0){         int n = sc.nextInt();         int k = sc.nextInt();         int[] a = new int[k];         int[] temp = new int[k];         for(int i=0;i<k;i++){             a[i] = sc.nextInt();         }         for(int i=0;i<k;i++){             temp[i] = sc.nextInt();         }         long[] c = new long[n];         Arrays.fill(c,Integer.MAX_VALUE);         for(int i=0;i<k;i++){             c[a[i]-1] = temp[i];         }         long p = Integer.MAX_VALUE;         long[] left = new long[n];         for(int i=0;i<n;i++){             p = (p+1<c[i])?p+1:c[i];             left[i] = p;         }         p = Integer.MAX_VALUE;         long[] right = new long[n];         for(int i=n-1;i>=0;i--){             p = (p+1<c[i])?p+1:c[i];             right[i] = p;         }         for(int i=0;i<n;i++){             long kl = (left[i]>right[i])?right[i]:left[i];             System.out.print(kl+"" "");         }         System.out.println();     } } } ",1
750,"import java.math.BigInteger; import java.sql.Array;     import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Deque; import java.util.HashMap; import java.util.HashSet; import java.util.InputMismatchException; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Scanner; import java.util.Set; import java.util.Stack; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class Main { static HashMap<Integer,Boolean>map; static long dp[][]; static boolean flag; staticHashSet<Long>hs; static long mod=(long)(1e9+7); public static void main(String[] args) { StringBuilder ans=new StringBuilder(); FastReader sc=new FastReader(); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k=sc.nextInt(); long L[]=new long[n]; long R[]=new long[n]; int a[]=new int[k]; int temp[]=new int[k]; for(int i=0;i<k;i++) a[i]=sc.nextInt(); for(int i=0;i<k;i++) temp[i]=sc.nextInt(); int c[]=new int [n]; Arrays.fill(c, Integer.MAX_VALUE); for(int i=0;i<k;i++) c[a[i]-1]=temp[i]; long p=Integer.MAX_VALUE; for(int i=0;i<n;i++) { p=Math.min(p+1, c[i]); L[i]=p; } p=Integer.MAX_VALUE; for(int i=n-1;i>=0;i--) { p=Math.min(p+1, c[i]); R[i]=p; } for(int i=0;i<n;i++) { ans.append(Math.min(L[i], R[i])+"" ""); } ans.append(""\n""); } System.out.println(ans); }                     } ","import java.io.*; import java.util.Arrays; import java.util.Hashtable; public class AirConditionersUpsolve{               static InputReader sc = new InputReader();     static OutputStream outputStream = System.out;     static PrintWriter w = new PrintWriter(outputStream);          private static void initiateIO()             throws IOException {if (System.getProperty(""ONLINE_JUDGE"") == null) { try { w = new PrintWriter(""output.txt"");sc = new InputReader(new FileInputStream(""input.txt"")); } catch (Exception e) { throw new IOException(); }} }     public static void main(String[] args)             throws IOException {         initiateIO();         int t = sc.nextInt();         while(t-- > 0) {             solve();         }         w.close();     }     static void solve() throws IOException {         int n = sc.nextInt();         int k = sc.nextInt();         int[] ac = new int[n+1];         Arrays.fill(ac, Integer.MAX_VALUE);         int[] pos = new int[k+1];         for(int i = 1; i <= k; i++) {             pos[i] = sc.nextInt();         }         for(int i = 1; i <= k; i++) {             int posi = pos[i];             int temp = sc.nextInt();             ac[posi] = temp;         }         long[] prev = new long[n+1];         long temp = Integer.MAX_VALUE;         for(int i = 1; i <= n; i++) {             temp = Math.min(temp+1, ac[i]);             prev[i] = temp;         }         long[] next = new long[n+1];         temp = Integer.MAX_VALUE;         for(int i = n; i > 0; i--) {             temp = Math.min(temp+1, ac[i]);             next[i] = temp;         }         for(int i = 1; i <= n; i++) {             w.print(Math.min(prev[i], next[i])+"" "");         }         w.println();     } } ",1
751,"import java.math.BigInteger; import java.sql.Array;     import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Deque; import java.util.HashMap; import java.util.HashSet; import java.util.InputMismatchException; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Scanner; import java.util.Set; import java.util.Stack; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class Main { static HashMap<Integer,Boolean>map; static long dp[][]; static boolean flag; staticHashSet<Long>hs; static long mod=(long)(1e9+7); public static void main(String[] args) { StringBuilder ans=new StringBuilder(); FastReader sc=new FastReader(); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int k=sc.nextInt(); long L[]=new long[n]; long R[]=new long[n]; int a[]=new int[k]; int temp[]=new int[k]; for(int i=0;i<k;i++) a[i]=sc.nextInt(); for(int i=0;i<k;i++) temp[i]=sc.nextInt(); int c[]=new int [n]; Arrays.fill(c, Integer.MAX_VALUE); for(int i=0;i<k;i++) c[a[i]-1]=temp[i]; long p=Integer.MAX_VALUE; for(int i=0;i<n;i++) { p=Math.min(p+1, c[i]); L[i]=p; } p=Integer.MAX_VALUE; for(int i=n-1;i>=0;i--) { p=Math.min(p+1, c[i]); R[i]=p; } for(int i=0;i<n;i++) { ans.append(Math.min(L[i], R[i])+"" ""); } ans.append(""\n""); } System.out.println(ans); }                     } ","import java.util.*; public class D{     private static Scanner scanner = new Scanner(System.in);     public static void main(String[] args){         int q = scanner.nextInt();         while(q-- > 0){             int n = scanner.nextInt(),             k = scanner.nextInt();             int[] a = new int[k];             for(int i=0;i<k;i++){                 a[i] = scanner.nextInt();             }             int[] t = new int[k];             for(int j=0;j<k;j++){                 t[j] = scanner.nextInt();             }             long[] L = new long[n];             long[] R = new long[n];             for(int i=0;i<n;i++){                 L[i] = Integer.MAX_VALUE;                 R[i] = Integer.MAX_VALUE;             }             for(int i=0;i<k;i++){                 L[a[i]-1] = t[i];                 R[a[i]-1] = t[i];             }                          long min = Integer.MAX_VALUE;             for(int i=0;i<n;i++){                 L[i] = Math.min(min+1,L[i]);                 min = L[i];             }             min = Integer.MAX_VALUE;             for(int i=n-1;i>=0;i--){                 R[i] = Math.min(min+1,R[i]);                 min = R[i];             }             for(int i=0;i<n;i++){                 System.out.print(Math.min(L[i],R[i]) + "" "");             }             System.out.println();         }     } } ",1
752,"import java.math.BigInteger; import java.util.*; import java.io.*; import java.util.concurrent.atomic.AtomicIntegerFieldUpdater; public class CodeForces {     public void run() throws Exception {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         next : while (t-- > 0) {             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             long k = Long.parseLong(st.nextToken());             Long[] a = new Long[n];             st = new StringTokenizer(br.readLine());             for (int i = 0; i < n; i++) {                 a[i] = Long.parseLong(st.nextToken());             }             Arrays.sort(a);             long ans = Long.MAX_VALUE;             long[] lsum = new long[n + 1];             for (int i = 0; i < n; i++) {                 lsum[i + 1] = lsum[i] + a[i];             }             for (long y = 0; y < n; y++) {                 long x = 0;                 if ((k - lsum[n - (int)y] + a[0]) >= 0) {                     x = (k - lsum[n - (int)y] + a[0]) / (y + 1);                 } else {                     if ((k - lsum[n - (int)y] + a[0]) % (y + 1) == 0) {                         x = (k - lsum[n - (int)y] + a[0]) / (y + 1);                     } else {                         x = (k - lsum[n - (int)y] + a[0]) / (y + 1) - 1;                     }                 }                 x = a[0] - x;                 ans = Math.min(ans, Math.max(0, x) + y);             }             System.out.println(ans);         }     }     public static void main(String[] args) throws Exception {         new CodeForces().run();     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*;   public class Main {     public static long floor(long a, long b) {         long res = a / b;         while(res * b > a) res--;         return res;     }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-- > 0) {             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             long k = Long.parseLong(st.nextToken());             st = new StringTokenizer(br.readLine());             Long[] p = new Long[n];             for(int i = 0 ;i<n;i++) {                 p[i] = Long.parseLong(st.nextToken());             }             Arrays.sort(p);             long[] sums = new long[n+1];             for(int i=0;i<n;i++) sums[i+1] = sums[i] + p[i];             long ans = Long.MAX_VALUE;             for(int y=0;y<n;y++) {                 long x = p[0] - floor(k - sums[n-y] + p[0], y+1);                 ans = Math.min(Math.max(x, 0) + y, ans);             }             System.out.println(ans);         }     } } ",0
753,"import java.math.BigInteger; import java.util.*; import java.io.*; import java.util.concurrent.atomic.AtomicIntegerFieldUpdater; public class CodeForces {     public void run() throws Exception {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         next : while (t-- > 0) {             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             long k = Long.parseLong(st.nextToken());             Long[] a = new Long[n];             st = new StringTokenizer(br.readLine());             for (int i = 0; i < n; i++) {                 a[i] = Long.parseLong(st.nextToken());             }             Arrays.sort(a);             long ans = Long.MAX_VALUE;             long[] lsum = new long[n + 1];             for (int i = 0; i < n; i++) {                 lsum[i + 1] = lsum[i] + a[i];             }             for (long y = 0; y < n; y++) {                 long x = 0;                 if ((k - lsum[n - (int)y] + a[0]) >= 0) {                     x = (k - lsum[n - (int)y] + a[0]) / (y + 1);                 } else {                     if ((k - lsum[n - (int)y] + a[0]) % (y + 1) == 0) {                         x = (k - lsum[n - (int)y] + a[0]) / (y + 1);                     } else {                         x = (k - lsum[n - (int)y] + a[0]) / (y + 1) - 1;                     }                 }                 x = a[0] - x;                 ans = Math.min(ans, Math.max(0, x) + y);             }             System.out.println(ans);         }     }     public static void main(String[] args) throws Exception {         new CodeForces().run();     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     public static long floor(long a, long b) {         long res = a / b;         while(res * b > a) res--;         return res;     }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-- > 0) {             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             long k = Long.parseLong(st.nextToken());             st = new StringTokenizer(br.readLine());             Long[] p = new Long[n];             for(int i = 0 ;i<n;i++) {                 p[i] = Long.parseLong(st.nextToken());             }             Arrays.sort(p);             long[] sums = new long[n+1];             for(int i=0;i<n;i++) sums[i+1] = sums[i] + p[i];             long ans = Long.MAX_VALUE;             for(int y=0;y<n;y++) {                 long x = p[0] - floor(k - sums[n-y] + p[0], y+1);                 ans = Math.min(Math.max(x, 0) + y, ans);             }             System.out.println(ans);         }     } } ",0
754,"import java.util.*;     import java.io.*;     public class D{                                     static int mod = (int)(1e9+7);                  public static void main(String[] args) {             InputReader in = new InputReader(System.in);             OutputWriter out = new OutputWriter(System.out);             int n = in.nextInt();             int[] arr = in.nextIntArray(n);             Stack<Integer> min = new Stack<>();             Stack<Integer> max = new Stack<>();             int[] dp = new int[n];                          dp[0] = 0;             min.push(0);             max.push(0);             for(int i=1;i<n;i++)             {                 int h=dp[i-1]+1;                 while(!max.isEmpty() && arr[i]>arr[max.peek()])                 {                     int x = arr[max.peek()];                     h = Math.min(h,1+dp[max.pop()]);                     while(!max.isEmpty() && arr[max.peek()]==x)                     {                         max.pop();                     }                 }                 if(!max.isEmpty())                 {                     h = Math.min(h,1+dp[max.peek()]);                 }                 while(!min.isEmpty() && arr[i]<arr[min.peek()])                 {                     int x = arr[min.peek()];                     h = Math.min(h,1+dp[min.pop()]);                     while(!min.isEmpty() && arr[min.peek()]==x)                     {                         min.pop();                     }                 }                 if(!min.isEmpty())                 {                     h = Math.min(h,1+dp[min.peek()]);                 }                 dp[i] = h;                 min.push(i);                 max.push(i);             }             out.printLine(dp[n-1]);             out.flush();             out.close();         }     } ","import java.util.ArrayList; import java.util.Scanner; import java.util.Stack; public class D {     static Scanner sc = new Scanner(System.in);     static int[] height;     static int[] dp;     public static void main(String[] args) {         int n = sc.nextInt();         height = new int[n];         dp = new int[n];         dp[0] = 0;         for (int i = 0; i < n; i++) {             height[i] = sc.nextInt();         }         Stack<Integer> rise = new Stack<Integer>();         Stack<Integer> fail = new Stack<Integer>();         rise.push(0);         fail.push(0);         for (int i = 1; i < n; i++) {             dp[i] = dp[i-1]+1;             if (rise.isEmpty()) {                 rise.push(i);             } else if (height[rise.peek()] < height[i]) {                 rise.push(i);             } else {                 while (!rise.isEmpty() && height[rise.peek()] > height[i]) {                     rise.pop();                     if (!rise.isEmpty()) {                         dp[i] = Math.min(dp[i], dp[rise.peek()] + 1);                     }                 }                 while (!rise.isEmpty() && height[rise.peek()] == height[i]) {                     rise.pop();                 }                 rise.push(i);             }             if (fail.isEmpty()) {                 fail.push(i);             } else if (height[fail.peek()] > height[i]) {                 fail.push(i);             } else {                 while (!fail.isEmpty() && height[fail.peek()] < height[i]) {                     fail.pop();                     if (!fail.isEmpty()){                         dp[i] = Math.min(dp[i], dp[fail.peek()] + 1);                     }                 }                 while (!fail.isEmpty() && height[fail.peek()] == height[i]) {                     fail.pop();                 }                 fail.push(i);             }         }         System.out.println(dp[n - 1]);     } } ",0
755,"import java.util.*;     import java.math.*;     import java.io.*;      import java.util.concurrent.ThreadLocalRandom;     import java.util.stream.Collectors;      public class A{         static InputStream inputStream = System.in;             static FastScanner scan=new FastScanner();                     public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));  static boolean vis[]=new boolean[26];  static LinkedList<Integer>edges[];  static int cnt=0;  static ArrayList<Integer>arr=new ArrayList();   public static void main(String[] args)  throws Exception        {           int tt=1;         tt=scan.nextInt();        outer:while(tt-->0)     {     int l=scan.nextInt(),n=scan.nextInt();     int arr[]=new int[n];     long t[]=new long[n];     int pos[]=new int[l+1];     Arrays.fill(pos,-1);     TreeSet<Integer>tree=new TreeSet<Integer>();     for(int i=0;i<n;i++){     arr[i]=scan.nextInt();     tree.add(arr[i]);     pos[arr[i]]=i;     }          for(int i=0;i<n;i++)     t[i]=scan.nextLong();     long L[]=new long[l+5];     long R[]=new long[l+5];     Arrays.fill(L,Integer.MAX_VALUE);     Arrays.fill(R,Integer.MAX_VALUE);     for(int i=1;i<=l;i++)     {     if(pos[i]!=-1)     {     L[i]=t[pos[i]];     }     L[i]=Math.min(L[i],L[i-1]+1);     }     for(int i=l;i>=1;i--)     {     if(pos[i]!=-1)     {     R[i]=t[pos[i]];     }     R[i]=Math.min(R[i],R[i+1]+1);     }     for(int i=1;i<=l;i++)     out.print(Math.min(L[i],R[i])+"" ""); out.println();                                   }       out.close();         }                                                                     } ","import java.io.*; import java.util.*; import java.lang.*; public class codeforces {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         if (System.getProperty(""ONLINE_JUDGE"") == null) {             long startTime = System.currentTimeMillis();             try {                 sc = new InputReader(new FileInputStream(""input.txt""));                 out = new PrintWriter(new FileOutputStream(""output.txt""));                 pr = new PrintWriter(new FileOutputStream(""error.txt""));             } catch (Exception ignored) {             }             int t = 1;             int tt = t;             t = sc.nextInt();             while (t-- > 0) {                 solve();             }             long endTime = System.currentTimeMillis();             System.out.println(""Time: "" + (endTime - startTime) / tt + "" ms"");             out.flush();             pr.flush();         } else {             sc = new InputReader(inputStream);             out = new PrintWriter(outputStream);             pr = new PrintWriter(outputStream);             int t = 1;             t = sc.nextInt();             while (t-- > 0) {                 solve();             }             out.flush();         }     }     public static void solve() {         n = sc.nextInt();         for (int i = 0; i < n; i++) {             dp[i] = inf;                 ans[i] = inf;         }         m = sc.nextInt();         for (int i = 0; i < m; i++)             arr[i] = sc.nextInt() - 1;         for (int i = 0; i < m; i++) {             arr2[i] = sc.nextInt();             dp[(int)arr[i]] = arr2[i];         }         temp = inf;         for (int i = 0; i < n; i++) {             temp = Math.min(temp, dp[i]);             ans[i] = Math.min(ans[i], temp);             temp++;         }         temp = inf;         for (int i = (int)n - 1; i > -1; i--) {             temp = Math.min(temp, dp[i]);             ans[i] = Math.min(ans[i], temp);             temp++;         }         for (int i = 0; i < n; i++)             out.print(ans[i] + "" "");         out.println("""");     }                    public static long n, m, temp;     public static int template_array_size = (int) 1e6 + 16813;     public static long[] arr = new long[template_array_size];     public static long[] arr2 = new long[template_array_size];     public static long[] dp = new long[template_array_size];     public static long[] ans = new long[template_array_size];     public static int inf = Integer.MAX_VALUE;     public static int minf = Integer.MIN_VALUE;     public static int mod = 1000000007;     public static int ml = (int) 1e9;     public static String s = """";     public static InputReader sc;     public static PrintWriter out;     public static PrintWriter pr;                                                                                                                                                           public static boolean sysFlag = System.getProperty(""ONLINE_JUDGE"") == null;                                                                                                     } ",0
756,"import java.util.*;     import java.math.*;     import java.io.*;      import java.util.stream.Collectors;        public class A{         static InputStream inputStream = System.in;             static FastScanner scan=new FastScanner();      public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out)); static final long p=29; static final long mod=(long)1e9+9; static int n,m; static String spotty[],plain[]; public static void main(String[] args)  throws Exception        {           int tt=1; tt=scan.nextInt(); int T=tt;  outer:while(tt-->0)     {     int n=scan.nextInt();    int cnt[][]=new int[n][5];    String arr[]=new String[n];    int sumlens=0;    for(int i=0;i<n;i++)    {    String s=scan.next();    sumlens+=s.length();    arr[i]=s;    for(int j=0;j<s.length();j++)    cnt[i][s.charAt(j)-'a']++;    }    int res=0;    for(int to=0;to<5;to++)    {    ArrayList<Pair>tmp=new ArrayList<Pair>();    int sumall=0;    for(int i=0;i<n;i++)    sumall+=cnt[i][to];    for(int i=0;i<n;i++)    {    int sum=0;    for(int j=0;j<5;j++)    {    if(j!=to)    {    sum+=cnt[i][j];    }    }    tmp.add(new Pair(arr[i].length()-sum,sum));    }    Collections.sort(tmp);    int THIS=sumall,THAT=sumlens-sumall;           for(int i=0;i<tmp.size();i++)    {    if(THIS>THAT)    {            res=Math.max(res,n-i);    break;    }    THIS-=tmp.get(i).x;    THAT-=tmp.get(i).y;    }    }    out.println(res);                            }    out.close(); }                                                      private static void sort(long[] arr) {             List<Long> list = new ArrayList<>();             for (long object : arr) list.add(object);             Collections.sort(list);                      for (int i = 0; i < list.size(); ++i) arr[i] = list.get(i);         }                 static class Pair implements Comparable<Pair>{             public long x, y,z;             public Pair(long x1, long y1,long z1) {                 x=x1;                 y=y1;                 z=z1;             }              public Pair(long x1, long y1) {                 x=x1;                 y=y1;                  }                                       public String toString() {                 return x + "" "" + y+"" ""+z;             }                             }          } ","import java.io.*; import java.math.BigDecimal; import java.math.MathContext; import java.math.RoundingMode; import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.util.Collections; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.*; public class Main1 {     public static void main(String[] args) throws IOException {         FastScanner in = new FastScanner();         PrintWriter out = new PrintWriter(System.out);             int t = in.nextInt() ;             while (t-- > 0){                 int n = in.nextInt() ;                 int dp[][] = new int[n][5] ;                 String tt[] = new String[n] ;                 for (int i = 0; i <n ; i++) {                     String  s= in.next() ;                     tt[i] = s ;                     for (int j = 0; j <s.length() ; j++) {                         dp[i][s.charAt(j)-'a']++ ;                     }                 }                 int max = 0 ;                 for (int i = 0; i <5 ; i++) {                     ArrayList<Integer>list = new ArrayList<>() ;                     for (int j = 0; j <n ; j++) {                         list.add(dp[j][i] - (tt[j].length()-dp[j][i]) );                     }                     list.sort(Collections.reverseOrder());                     int ans = 0 ;                     int sum = 0 ;                     for (int curr : list){                         sum+= curr ;                         if (sum > 0){                             ans++ ;                             max = max(max , ans) ;                         }                         else break;                     }                 }                 System.out.println(max);             }             out.flush();             out.close(); }               static void sort(int ar[]) {         int n = ar.length;         ArrayList<Integer> a = new ArrayList<>();         for (int i = 0; i < n; i++)             a.add(ar[i]);         Collections.sort(a);         for (int i = 0; i < n; i++)             ar[i] = a.get(i);     }                          } ",0
757,"import java.util.*;     import java.math.*;     import java.io.*;      import java.util.stream.Collectors;        public class A{         static InputStream inputStream = System.in;             static FastScanner scan=new FastScanner();      public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out)); static final long p=29; static final long mod=(long)1e9+9; static int n,m; static String spotty[],plain[]; public static void main(String[] args)  throws Exception        {           int tt=1; tt=scan.nextInt(); int T=tt;  outer:while(tt-->0)     {     int n=scan.nextInt();    int cnt[][]=new int[n][5];    String arr[]=new String[n];    int sumlens=0;    for(int i=0;i<n;i++)    {    String s=scan.next();    sumlens+=s.length();    arr[i]=s;    for(int j=0;j<s.length();j++)    cnt[i][s.charAt(j)-'a']++;    }    int res=0;    for(int to=0;to<5;to++)    {    ArrayList<Pair>tmp=new ArrayList<Pair>();    int sumall=0;    for(int i=0;i<n;i++)    sumall+=cnt[i][to];    for(int i=0;i<n;i++)    {    int sum=0;    for(int j=0;j<5;j++)    {    if(j!=to)    {    sum+=cnt[i][j];    }    }    tmp.add(new Pair(arr[i].length()-sum,sum));    }    Collections.sort(tmp);    int THIS=sumall,THAT=sumlens-sumall;           for(int i=0;i<tmp.size();i++)    {    if(THIS>THAT)    {            res=Math.max(res,n-i);    break;    }    THIS-=tmp.get(i).x;    THAT-=tmp.get(i).y;    }    }    out.println(res);                            }    out.close(); }                                                      private static void sort(long[] arr) {             List<Long> list = new ArrayList<>();             for (long object : arr) list.add(object);             Collections.sort(list);                      for (int i = 0; i < list.size(); ++i) arr[i] = list.get(i);         }                 static class Pair implements Comparable<Pair>{             public long x, y,z;             public Pair(long x1, long y1,long z1) {                 x=x1;                 y=y1;                 z=z1;             }              public Pair(long x1, long y1) {                 x=x1;                 y=y1;                  }                                       public String toString() {                 return x + "" "" + y+"" ""+z;             }                             }          } ","import java.util.StringTokenizer; import java.io.*; public class CF_1551c{     public static final void main(String[] args){         Kattio io= new Kattio();         int t= io.getInt();         while(t-->0){             int n= io.getInt();             int[][] ps= new int[5][n];             for(int i=0; i<n; i++){                 String w= io.getWord();                 int len= w.length();                                  for(int j=0; j<len; j++)                     ps[w.charAt(j)-'a'][i]++;                                                      for(int k=0; k<5; k++)                     ps[k][i]+= ps[k][i]-len;                }                          for(int k=0; k<5; k++)                 mergeSort(ps[k]);                                                    int max= 0;             for(int k=0; k<5; k++){                 if(ps[k][n-1]<=0) continue;                 if(max==0) max= 1;                 for(int i=2; i<=n; i++){                     ps[k][n-i]+= ps[k][n-i+1];                     if(ps[k][n-i]<=0) break;                     if(i>max) max= i;                 }             }             io.println(max);         }         io.close();     }          static void mergeSort(int arr[]){         int n= arr.length;         for (int sz= 1; sz<=n-1; sz=2*sz){             for (int l= 0; l<n-1; l+=2*sz){                 int m= Math.min(l + sz-1, n-1);                 int r= Math.min(l + 2*sz-1, n-1);                 int n1= m-l+1, n2= r-m;                 int L[] = new int[n1];                 for (int i= 0; i<n1; i++) L[i]= arr[l+i];                 int R[] = new int[n2];                 for (int j= 0; j<n2; j++) R[j]= arr[m+1+j];                 int i= 0, j= 0, k= l;                 for(;i<n1 && j<n2; k++){                     if(L[i]<=R[j]){arr[k]= L[i]; i++;}                     else{arr[k] = R[j]; j++;}                 }                 for(;i<n1; i++, k++) arr[k]= L[i];                 for(;j<n2; j++, k++) arr[k]= R[j];             }         }     }              static class Kattio extends PrintWriter {         private BufferedReader r;         private String line, token;         private StringTokenizer st;              public Kattio(){this(System.in);}         public Kattio(InputStream i){         super(new BufferedOutputStream(System.out));             r= new BufferedReader(new InputStreamReader(i));         }         public Kattio(InputStream i, OutputStream o){         super(new BufferedOutputStream(o));             r= new BufferedReader(new InputStreamReader(i));         }                  public boolean hasMoreTokens(){             return peekToken()!=null;         }         public int getInt(){             return Integer.parseInt(nextToken());         }                           public String getWord(){             return nextToken();         }                  private String peekToken(){             if(token==null) try {                 while(st==null || !st.hasMoreTokens()) {                     line= r.readLine();                     if(line==null) return null;                     st= new StringTokenizer(line);                 }                 token= st.nextToken();             }catch(IOException e){}             return token;         }         private String nextToken() {             String ans= peekToken();             token= null;             return ans;         }     } } ",0
758,"import java.util.*;   import java.io.*;   public class AiseHi { static Scanner sc = new Scanner(System.in); static int mod = (int)(1e9+7); public static void main (String[] args) { PrintWriter out = new PrintWriter(System.out); int t = 1;     t = sc.nextInt();     z : while(t-->0) {     int n = sc.nextInt();     int m = sc.nextInt();     int x = sc.nextInt();     PriorityQueue<twoval> myQueue = new PriorityQueue<>();     for(int i=1;i<=m;i++) {     myQueue.add(new twoval(0,i));     }     List<twoval> arrayList = new ArrayList<>();     int myArray[] = new int[n];     for(int i=0;i<n;i++) {     int aasjd = sc.nextInt();     arrayList.add(new twoval(aasjd,i));     myArray[i] = aasjd;     }     Collections.sort(arrayList);     int ans[] = new int[n];     for(int i=n-1;i>=0;i--) {     twoval p = myQueue.poll();     long aasjd = p.myArray;     int idx = p.b;     aasjd += arrayList.get(i).myArray;     ans[arrayList.get(i).b] = idx;     myQueue.add(new twoval(aasjd,idx));     }     long dasdaknw[] = new long[m];     long min = Long.MAX_VALUE, max = Long.MIN_VALUE;     for(int i=0;i<n;i++) {     dasdaknw[ans[i]-1] += myArray[i];     }     for(int i=0;i<m;i++) {     min = Math.min(min, dasdaknw[ans[i]-1]);     max = Math.max(max, dasdaknw[ans[i]-1]);     }     if(max-min>x) {     out.write(""NO\n"");     continue;     }     out.write(""YES\n"");     for(int aasjd : ans) out.write(aasjd+"" "");     out.write(""\n"");     } out.close(); } static boolean prime[] = new boolean[2000009]; static int fac[] = new int[2000009]; }   class twoval implements Comparable<twoval>{ long myArray; int b; twoval(long aasjd,int r){ this.myArray = aasjd; this.b = r; } } ","import java.io.*; import java.util.*;   public class Main { static FastReader sc = new FastReader(); static long mod = (long) (1e9+7); static boolean spe[]; static int spen[]; static int dep[]; static List<Integer> tre[]; static int par[][]; public static void main (String[] args){         PrintWriter out = new PrintWriter(System.out);         int t = 1;         t = sc.nextInt();         z :for(int tc=1;tc<=t;tc++){     int n = sc.nextInt();     int m = sc.nextInt();     int x = sc.nextInt();     PriorityQueue<pairClass> priority = new PriorityQueue<>();     for(int i=1;i<=m;i++) {     priority.add(new pairClass(0,i));     }     List<pairClass> list = new ArrayList<>();     int a[] = new int[n];     for(int i=0;i<n;i++) {     int value = sc.nextInt();     list.add(new pairClass(value,i));     a[i] = value;     }     Collections.sort(list);     int answer[] = new int[n];     for(int i=n-1;i>=0;i--) {     pairClass p = priority.poll();     long value = p.a;     int idx = p.b;     value += list.get(i).a;     answer[list.get(i).b] = idx;     priority.add(new pairClass(value,idx));     }     long totalSum[] = new long[m];     long min = Long.MAX_VALUE, max = Long.MIN_VALUE;     for(int i=0;i<n;i++) {     totalSum[answer[i]-1] += a[i];     }     for(int i=0;i<m;i++) {     min = Math.min(min, totalSum[answer[i]-1]);     max = Math.max(max, totalSum[answer[i]-1]);     }     if(max-min>x) {     out.write(""NO\n"");     continue;     }     out.write(""YES\n"");     for(int value : answer) out.write(value+"" "");     out.write(""\n"");         } out.close(); } } class pairClass implements Comparable<pairClass>{ long a; int b; pairClass(long value,int r){ this.a = value; this.b = r; } } ",1
759,"import java.util.*;   import java.io.*;   public class AiseHi { static Scanner sc = new Scanner(System.in); static int mod = (int)(1e9+7); public static void main (String[] args) { PrintWriter out = new PrintWriter(System.out); int t = 1;     t = sc.nextInt();     z : while(t-->0) {     int n = sc.nextInt();     int m = sc.nextInt();     int x = sc.nextInt();     PriorityQueue<twoval> myQueue = new PriorityQueue<>();     for(int i=1;i<=m;i++) {     myQueue.add(new twoval(0,i));     }     List<twoval> arrayList = new ArrayList<>();     int myArray[] = new int[n];     for(int i=0;i<n;i++) {     int aasjd = sc.nextInt();     arrayList.add(new twoval(aasjd,i));     myArray[i] = aasjd;     }     Collections.sort(arrayList);     int ans[] = new int[n];     for(int i=n-1;i>=0;i--) {     twoval p = myQueue.poll();     long aasjd = p.myArray;     int idx = p.b;     aasjd += arrayList.get(i).myArray;     ans[arrayList.get(i).b] = idx;     myQueue.add(new twoval(aasjd,idx));     }     long dasdaknw[] = new long[m];     long min = Long.MAX_VALUE, max = Long.MIN_VALUE;     for(int i=0;i<n;i++) {     dasdaknw[ans[i]-1] += myArray[i];     }     for(int i=0;i<m;i++) {     min = Math.min(min, dasdaknw[ans[i]-1]);     max = Math.max(max, dasdaknw[ans[i]-1]);     }     if(max-min>x) {     out.write(""NO\n"");     continue;     }     out.write(""YES\n"");     for(int aasjd : ans) out.write(aasjd+"" "");     out.write(""\n"");     } out.close(); } static boolean prime[] = new boolean[2000009]; static int fac[] = new int[2000009]; }   class twoval implements Comparable<twoval>{ long myArray; int b; twoval(long aasjd,int r){ this.myArray = aasjd; this.b = r; } } ","import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.Collections; import java.util.Comparator; import java.util.Arrays; import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; import java.util.Queue; import java.util.PriorityQueue; import java.util.List; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Map; import java.util.HashMap; import java.util.Scanner; import java.util.Set; import java.util.StringTokenizer; import java.util.Vector; public class Dobby { public static void main(String[] args) { try { FastReader fr = new FastReader(); PrintWriter pt = new PrintWriter(System.out); int t = fr.nextInt(); while (t > 0) { int n = fr.nextInt(), m = fr.nextInt(), x = fr.nextInt(); ArrayList<Pair> pp = new ArrayList<>(); int A[] = new int[n]; for (int i = 0; i < n; i++) { A[i] = fr.nextInt(); Pair pr = new Pair(A[i], i); pp.add(pr); } Collections.sort(pp); Collections.reverse(pp); int ps[] = new int[n]; int pk[] = new int[n]; Arrays.fill(ps, 0); Arrays.fill(pk, 0); int index = 0; for (int i = 0; i < n; i++) { if (pk[index] < x) { pk[index] += pp.get(i).a; } ps[pp.get(i).b] = index + 1; index++; index = index == m ? 0 : index; } pt.println(""YES""); for (int i = 0; i < n; i++) { pt.print(ps[i] + "" ""); } pt.println(); t--; } pt.close(); } catch ( Exception e) { return; } } static void merge(long arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; long L[] = new long[n1]; long R[] = new long[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } static void sort(long arr[], int l, int r) { if (l < r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } static class Pair implements Comparable<Pair> { int a, b; Pair(int a, int b) { this.a = a; this.b = b; } } } ",0
760,"import java.util.*;   public class Main { public static void main(String[] args) {     Scanner sc = new Scanner(System.in);  int tc = sc.nextInt(); while(tc>0) {     tc--;     int ans = 0;     int n = sc.nextInt();     int in[] = new int[n];     int wx[] = new int[n-1];     int wy[] = new int[n-1];     ArrayList<ArrayList<Integer>> arr = new ArrayList<ArrayList<Integer>>();     HashMap<String,Integer> h = new HashMap<String,Integer>();     HashSet<Integer> h2 = new HashSet<Integer>();     for(int i=0;i<n;i++)     {         arr.add(new ArrayList<Integer>());     }     for(int i=0;i<n-1;i++)     {         int x = sc.nextInt();         int y = sc.nextInt();         x--;         y--;         in[x]++;         in[y]++;         if(in[x]>2 || in[y]>2)         {             ans = -1;         }         else if(ans!=-1)         {             arr.get(x).add(y);             arr.get(y).add(x);             wx[i] = x;             wy[i] = y;         }              }     if(ans == -1)     {         System.out.println(""-1"");     }     else     {         int vis[] = new int[n];         ArrayDeque<Integer> q = new ArrayDeque<Integer>();         q.add(0);         vis[0] = 1;         while(q.size()>0)         {             int x = q.removeFirst();             for(int i=0;i<arr.get(x).size();i++)             {                 int y = arr.get(x).get(i);                 String temp  =String.valueOf(x);                 if(vis[y] == 0)                 {                     vis[y] = 1;                     if(h2.contains(y) || h2.contains(x))                     {                         String s1 = temp+""_""+String.valueOf(y);                         String s2 = String.valueOf(y)+""_""+temp;                         h.put(s1,11);                         h.put(s2,11);                                              }                     else                     {                         String s1 = temp+""_""+String.valueOf(y);                         String s2 = String.valueOf(y)+""_""+temp;                         h.put(s1,2);                         h.put(s2,2);                         h2.add(x);                         h2.add(y);                     }                     q.add(y);                 }             }         }         for(int i=0;i<wx.length;i++)         {             String s1 = String.valueOf(wx[i])+""_""+String.valueOf(wy[i]);             System.out.print(h.get(s1)+"" "");         }         System.out.println();     } } } } ","import java.io.*; import java.util.*; public class c {     public static void main(String[] args){         FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             ArrayList<ArrayList<Edge>> graph = new ArrayList<>();             for(int i=0; i<n; i++){                 graph.add(new ArrayList<Edge>());             }             for(int i=0; i<n-1; i++){                 int u = sc.nextInt();                 int v = sc.nextInt();                 Edge e = new Edge(u-1, v-1, i+1);                 Edge e2 = new Edge(v-1, u-1, i+1);                 graph.get(u-1). add(e);                 graph.get(v-1).add(e2);             }             int edges[] = new int[n];             int indegree1count = 0;             int indegree2count = 0;             for(ArrayList<Edge> list : graph){                 if(list.size() == 1){                     indegree1count++;                 }                 else if(list.size() == 2){                     indegree2count++;                 }             }             if(indegree1count == 2 && indegree1count+indegree2count==n){                 for(int i=0; i<graph.size(); i++){                     ArrayList<Edge> list = graph.get(i);                     if(list.size() == 1){                         dfs(graph, edges, false, -1, i) ;                     }                 }                 for(int i=1; i<edges.length; i++){                     System.out.print(edges[i] + "" "");                 }                 System.out.println();             }             else{                 System.out.println(-1);             }         }     }     public static void dfs(ArrayList<ArrayList<Edge>> graph, int[] edges, boolean isprev2, int parent, int current){         for(Edge e : graph.get(current)){             if(e.v == parent){                 continue;             }             edges[e.id] = isprev2 ? 5 : 2;             dfs(graph, edges, !isprev2, current, e.v);         }     } } class Edge {     int u;     int v;     int id;     public Edge(int u, int v, int id) {         this.u = u;         this.v = v;         this.id = id;     } } ",0
761,"import java.util.*;  public class Solution {     static Scanner sc=new Scanner(System.in);     public static void main(String args[]) {       int t=sc.nextInt();       outer:while(t-->0){         int n=sc.nextInt();         int[][] ct=new int[n][5];         int[] len=new int[n];         for (int i=0;i<n;i++) {             String s=sc.next();             len[i]=s.length();             for(char c:s.toCharArray()){                 ct[i][c-'a']++;             }         }         int mx=0;         for (int i=0;i<5;i++) {             int[] diff=new int[n];             for (int j=0;j<n;j++) {                 diff[j]=ct[j][i]-(len[j]-ct[j][i]);             }             Arrays.sort(diff);             int sum=0,inc=0;             for(int j=n-1;j>=0;j--){                 sum+=diff[j];                 if (sum>0) {                     inc++;                 }else {                     break;                 }             }             mx=Math.max(mx,inc);         }         System.out.println(mx);         }                }     } ","import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; public class Practice {     static HashMap<String, Integer> map = new HashMap<>();     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             int[][] occurances = new int[5][n];             for(int i=0;i<n;i++){                 String s = sc.next();                 int[] count = new int[5];                 int len = s.length();                 for(int j=0;j<s.length();j++){                     count[s.charAt(j)-'a']++;                 }                 for(int j=0;j<5;j++){                     occurances[j][i] = count[j] - (len-count[j]);                 }             }             int ans = 0;             for(int i=0;i<5;i++){                 Arrays.sort(occurances[i]);                 int tmpAns = 0; int tmpSum=0;                 for(int j=n-1;j>=0;j--){                     tmpSum+=occurances[i][j];                     if(tmpSum>0) tmpAns++;                     else break;                 }                 ans = Math.max(ans, tmpAns);             }             System.out.println(ans);         }     } } ",1
762,"import java.util.*;  public class Solution {     static Scanner sc=new Scanner(System.in);     public static void main(String args[]) {       int t=sc.nextInt();       outer:while(t-->0){         int n=sc.nextInt();         int[][] ct=new int[n][5];         int[] len=new int[n];         for (int i=0;i<n;i++) {             String s=sc.next();             len[i]=s.length();             for(char c:s.toCharArray()){                 ct[i][c-'a']++;             }         }         int mx=0;         for (int i=0;i<5;i++) {             int[] diff=new int[n];             for (int j=0;j<n;j++) {                 diff[j]=ct[j][i]-(len[j]-ct[j][i]);             }             Arrays.sort(diff);             int sum=0,inc=0;             for(int j=n-1;j>=0;j--){                 sum+=diff[j];                 if (sum>0) {                     inc++;                 }else {                     break;                 }             }             mx=Math.max(mx,inc);         }         System.out.println(mx);         }                }     } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ",1
763,"import java.util.*; import java.io.*;          @SuppressWarnings(""unchecked"") public class Main {     public static void main(String args[]) {             FastReader input = new FastReader();         PrintWriter out = new PrintWriter(System.out);         int t = input.nextInt();         while(t-- > 0) {         int n = input.nextInt();         int m = input.nextInt();         int x = input.nextInt();         int arr[] = new int[n];         for(int i = 0; i < n; i++) arr[i] = input.nextInt();          PriorityQueue<Pair> queue = new PriorityQueue();         out.println(""YES"");         int res[] = new int[n];         for(int i = 1; i <= m; i++) {             queue.add(new Pair(0, i));         }         for(int i = 0; i < n; i++) {             Pair p = queue.remove();             out.print(p.second()+"" "");             queue.add(new Pair(p.first()+arr[i], p.second()));             }         out.println();         out.flush();         }     }    }   class Pair implements Comparable<Pair> {         public int x;     public int y;       public Pair(int x, int y) {         this.x = x;         this.y = y;     }       public int first() {         return x;     }     public int second() {         return y;     }         }   ","import java.io.*; import java.util.*; public class Asd {     static PrintWriter w = new PrintWriter(System.out);     static FastScanner s = new FastScanner();     static boolean sd = false;        public static void main(String[] args) {        int t = s.nextInt();                  while (t-- > 0) {             solve();         }         w.close();     }   public static class Student {     public int i1;     public int value;                     public Student(int i1,int i2) {                this.i1 = i1;         this.value=i2;     }            public int getkey() {         return i1;     }      public int getValue() {         return value;     }  }    static class StudentComparator implements Comparator<Student>{                                                                       }               public static void solve() {         int n=s.nextInt();         int m=s.nextInt();         int x=s.nextInt();         int arr[]=new int[n];int res[]=new int[n];         for(int i=0;i<n;i++)             arr[i]=s.nextInt();                  PriorityQueue<Student> pq=new PriorityQueue<Student>(new StudentComparator());         for(int i=0;i<m;i++){             pq.add(new Student(arr[i],i));res[i]=i;}         for(int i=m;i<n;i++)         {             Student s1=pq.poll();             int k2=s1.getkey()+arr[i];             int v2=s1.getValue();res[i]=v2;             pq.add(new Student(k2,v2));         }         w.println(""YES"");         for(int i=0;i<n;i++)             w.print(res[i]+1+"" "");         w.println();             }                               } ",0
764,"import java.util.*; import java.io.*;          @SuppressWarnings(""unchecked"") public class Main {     public static void main(String args[]) {             FastReader input = new FastReader();         PrintWriter out = new PrintWriter(System.out);         int t = input.nextInt();         while(t-- > 0) {         int n = input.nextInt();         int m = input.nextInt();         int x = input.nextInt();         int arr[] = new int[n];         for(int i = 0; i < n; i++) arr[i] = input.nextInt();          PriorityQueue<Pair> queue = new PriorityQueue();         out.println(""YES"");         int res[] = new int[n];         for(int i = 1; i <= m; i++) {             queue.add(new Pair(0, i));         }         for(int i = 0; i < n; i++) {             Pair p = queue.remove();             out.print(p.second()+"" "");             queue.add(new Pair(p.first()+arr[i], p.second()));             }         out.println();         out.flush();         }     }    }   class Pair implements Comparable<Pair> {         public int x;     public int y;       public Pair(int x, int y) {         this.x = x;         this.y = y;     }       public int first() {         return x;     }     public int second() {         return y;     }         }   ","import java.io.*; import java.util.*; public class three{ public static class Pair implements Comparable<Pair>{ int min; int idx; } public static void main(String[] args) throws Exception {         MyScanner scn = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));                        int t = scn.nextInt();       while(t-- > 0){       int n = scn.nextInt();       int m = scn.nextInt();       int x = scn.nextInt();       int arr[] = scn.nextIntArray(n);       PriorityQueue<Pair> pq = new PriorityQueue<>();             System.out.println(""YES"");       for(int i=0;i<m;i++){       Pair p = new Pair();       p.min = arr[i];       p.idx = i+1;       pq.add(p);       System.out.print(p.idx + "" "");       }       for(int i=m;i<n;i++){       Pair p = pq.peek();       int mini = p.min;       int index = p.idx;       System.out.print(index + "" "");       pq.remove();       Pair np = new Pair();       np.min = arr[i] + mini;       np.idx = index;       pq.add(np);       }       System.out.println();              }                out.close();            }         public static PrintWriter out;                                                                                                                                                          } ",0
765,"import java.util.*; import java.io.*;     public class Main {   static long mod = (long)(1e9+7);  static FastReader sc = new FastReader();  static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { int ttt = 1; ttt = sc.nextInt(); z :for(int tc=1;tc<=ttt;tc++){ int n = sc.nextInt(); long d[] = new long[n]; for(int i=0;i<n;i++) { d[i] = sc.nextLong(); } long h[] = new long[n]; for(int i=0;i<n;i++) { h[i] = sc.nextLong(); } long req[] = new long[n]; for(int i=n-1;i>0;i--) { long dif = d[i] - d[i-1]; long nxt = 0; if(i+1<n) nxt = req[i+1]; long cur = Math.max(nxt, h[i]); if(dif >= cur) { req[i] = 0; } else { req[i] = cur-dif; } } long ans = 0, prev = 0; for(int i=0;i<n;i++) { if(i == 0) { ans = ans + sumFrom(0, h[i]); prev = h[i]; } else { if(req[i] == 0) { ans = ans + sumFrom(0, h[i]); prev = h[i]; } else { if(req[i]>prev) { ans = ans + sumFrom(prev, req[i]); ans = ans + sumFrom(req[i], req[i] + (d[i]-d[i-1])); prev = req[i] + d[i] - d[i-1]; } else { ans = ans + sumFrom(prev, prev + (d[i]-d[i-1])); prev = prev + d[i] - d[i-1]; } } } } out.write(ans+""\n""); } out.close(); } private static long sumFrom(long l, long cur) { long is1 = (cur*(cur+1))/2; long is2 = (l*(l+1))/2; return is1 - is2; }           } ","import java.util.*; import java.io.*;   public class AiseHi { static Scanner sc = new Scanner(System.in); public static void main (String[] args) { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); z : while(t-->0) { int n = sc.nextInt(); long dsasds[] = new long[n]; for(int i=0;i<n;i++) { dsasds[i] = sc.nextLong(); } long dsasdsuyuiyu[] = new long[n]; for(int i=0;i<n;i++) { dsasdsuyuiyu[i] = sc.nextLong(); } long dsasdsuyuiyubtrtr[] = new long[n]; for(int i=n-1;i>0;i--) { long dif = dsasds[i] - dsasds[i-1]; long nxt = 0; if(i+1<n) nxt = dsasdsuyuiyubtrtr[i+1]; long cur = Math.max(nxt, dsasdsuyuiyu[i]); if(dif >= cur) { dsasdsuyuiyubtrtr[i] = 0; } else { dsasdsuyuiyubtrtr[i] = cur-dif; } } long dsasdscsacsauyuiyubtrtr = 0, kokopmom = 0; for(int i=0;i<n;i++) { if(i == 0) { dsasdscsacsauyuiyubtrtr = dsasdscsacsauyuiyubtrtr + sumFrom(0, dsasdsuyuiyu[i]); kokopmom = dsasdsuyuiyu[i]; } else { if(dsasdsuyuiyubtrtr[i] == 0) { dsasdscsacsauyuiyubtrtr = dsasdscsacsauyuiyubtrtr + sumFrom(0, dsasdsuyuiyu[i]); kokopmom = dsasdsuyuiyu[i]; } else { if(dsasdsuyuiyubtrtr[i]>kokopmom) { dsasdscsacsauyuiyubtrtr = dsasdscsacsauyuiyubtrtr + sumFrom(kokopmom, dsasdsuyuiyubtrtr[i]); dsasdscsacsauyuiyubtrtr = dsasdscsacsauyuiyubtrtr + sumFrom(dsasdsuyuiyubtrtr[i], dsasdsuyuiyubtrtr[i] + (dsasds[i]-dsasds[i-1])); kokopmom = dsasdsuyuiyubtrtr[i] + dsasds[i] - dsasds[i-1]; } else { dsasdscsacsauyuiyubtrtr = dsasdscsacsauyuiyubtrtr + sumFrom(kokopmom, kokopmom + (dsasds[i]-dsasds[i-1])); kokopmom = kokopmom + dsasds[i] - dsasds[i-1]; } } } } System.out.println(dsasdscsacsauyuiyubtrtr); } } private static long sumFrom(long l, long cur) { long is1 = (cur*(cur+1))/2; long is2 = (l*(l+1))/2; return is1 - is2; }           }   ",1
766,"import java.util.*; import java.io.*;   public class AiseHi { static Scanner sc = new Scanner(System.in); public static void main (String[] args) { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); z : while(t-->0) { int n = sc.nextInt(); char sadsasa[] = sc.next().toCharArray(); char sadsdsdsasa[] = sc.next().toCharArray(); if(sadsdscds(sadsasa, sadsdsdsasa)) { System.out.print(""0\n""); continue; } int sadsdscdhggs = 0, sadsdscdiyuihggs = 0, sadsdscdiyhtruihggs = 0, poinhnhgs = 0; for(int i=0;i<n;i++) { if(sadsasa[i]!=sadsdsdsasa[i]) { if(sadsasa[i] == '0') poinhnhgs++; else sadsdscdiyhtruihggs++; } else { if(sadsasa[i] == '0') sadsdscdiyuihggs++; else sadsdscdhggs++; } } int rtenymu = 0;     rtenymu = uiuyfdsfrinhgw(sadsdscdhggs, sadsdscdiyuihggs, sadsdscdiyhtruihggs, poinhnhgs); rtenymu = Math.min(rtenymu, uiuyfdsfrinhgwdss(sadsdscdhggs, sadsdscdiyuihggs, sadsdscdiyhtruihggs, poinhnhgs)); if(rtenymu == Integer.MAX_VALUE) { rtenymu = -1; } System.out.print(rtenymu+""\n""); } } private static int uiuyfdsfrinhgwdss(int sadsdscdhggs, int sadsdscdiyuihggs, int sadsdscdiyhtruihggs, int poinhnhgs) { boolean rtenymuefwefw = false; int uiuyinhgw = 0; while(true) { if(sadsdscdiyhtruihggs == 0 && poinhnhgs == 0) return uiuyinhgw; if((rtenymuefwefw && sadsdscdhggs == 0) || (!rtenymuefwefw && sadsdscdiyhtruihggs == 0)) return Integer.MAX_VALUE; if(rtenymuefwefw) { int td1 = sadsdscdiyuihggs; int td0 = sadsdscdhggs - 1; int te1 = poinhnhgs + 1; int te0 = sadsdscdiyhtruihggs; sadsdscdiyhtruihggs = td1; poinhnhgs = td0; sadsdscdhggs = te1; sadsdscdiyuihggs = te0; } else { int td1 = 1 + sadsdscdiyuihggs; int td0 = sadsdscdhggs; int te1 = poinhnhgs; int te0 = sadsdscdiyhtruihggs-1; sadsdscdiyhtruihggs = td1; poinhnhgs = td0; sadsdscdhggs = te1; sadsdscdiyuihggs = te0; } rtenymuefwefw = !rtenymuefwefw; uiuyinhgw++; } } private static int uiuyfdsfrinhgw(int sadsdscdhggs, int sadsdscdiyuihggs, int sadsdscdiyhtruihggs, int poinhnhgs) { boolean rtenymuefwefw = true; int uiuyinhgw = 0; while(true) { if(sadsdscdiyhtruihggs == 0 && poinhnhgs == 0) return uiuyinhgw; if((rtenymuefwefw && sadsdscdhggs == 0) || (!rtenymuefwefw && sadsdscdiyhtruihggs == 0)) return Integer.MAX_VALUE; if(rtenymuefwefw) { int td1 = sadsdscdiyuihggs; int td0 = sadsdscdhggs - 1; int te1 = poinhnhgs + 1; int te0 = sadsdscdiyhtruihggs; sadsdscdiyhtruihggs = td1; poinhnhgs = td0; sadsdscdhggs = te1; sadsdscdiyuihggs = te0; } else { int td1 = 1 + sadsdscdiyuihggs; int td0 = sadsdscdhggs; int te1 = poinhnhgs; int te0 = sadsdscdiyhtruihggs-1; sadsdscdiyhtruihggs = td1; poinhnhgs = td0; sadsdscdhggs = te1; sadsdscdiyuihggs = te0; } rtenymuefwefw = !rtenymuefwefw; uiuyinhgw++; } } private static boolean sadsdscds(char[] sadsasa, char[] sadsdsdsasa) { for(int i=0;i<sadsasa.length;i++) { if(sadsasa[i]!=sadsdsdsasa[i]) return false; } return true; }           }   ","import java.util.*; import java.io.*;     public class Main {   static long mod = (long)(1e9+7);  static FastReader sc = new FastReader();  static PrintWriter out = new PrintWriter(System.out); static int ans; public static void main (String[] args) { int ttt = 1; ttt = sc.nextInt(); z :for(int tc=1;tc<=ttt;tc++){ int n = sc.nextInt(); char a[] = sc.next().toCharArray(); char b[] = sc.next().toCharArray(); if(same(a, b)) { out.write(""0\n""); continue; } int e1 = 0, e0 = 0, d1 = 0, d0 = 0; for(int i=0;i<n;i++) { if(a[i]!=b[i]) { if(a[i] == '0') d0++; else d1++; } else { if(a[i] == '0') e0++; else e1++; } } int ans = 0; ans = solveByFirstD(e1, e0, d1, d0); ans = Math.min(ans, solveByFirstE(e1, e0, d1, d0)); if(ans == Integer.MAX_VALUE) { ans = -1; } out.write(ans+""\n""); } out.close(); } private static int solveByFirstD(int e1, int e0, int d1, int d0) { boolean is = false; int cnt = 0; while(true) { if(d1 == 0 && d0 == 0) return cnt; if((is && e1 == 0) || (!is && d1 == 0)) return Integer.MAX_VALUE; if(is) { int td1 = e0; int td0 = e1 - 1; int te1 = d0 + 1; int te0 = d1; d1 = td1; d0 = td0; e1 = te1; e0 = te0; } else { int td1 = 1 + e0; int td0 = e1; int te1 = d0; int te0 = d1-1; d1 = td1; d0 = td0; e1 = te1; e0 = te0; } is = !is; cnt++; } } private static int solveByFirstE(int e1, int e0, int d1, int d0) { boolean is = true; int cnt = 0; while(true) { if(d1 == 0 && d0 == 0) return cnt; if((is && e1 == 0) || (!is && d1 == 0)) return Integer.MAX_VALUE; if(is) { int td1 = e0; int td0 = e1 - 1; int te1 = d0 + 1; int te0 = d1; d1 = td1; d0 = td0; e1 = te1; e0 = te0; } else { int td1 = 1 + e0; int td0 = e1; int te1 = d0; int te0 = d1-1; d1 = td1; d0 = td0; e1 = te1; e0 = te0; } is = !is; cnt++; } } private static boolean same(char[] a, char[] b) { for(int i=0;i<a.length;i++) { if(a[i]!=b[i]) return false; } return true; }           } ",1
767,"import java.util.*; import java.io.*;   public class C_Menorah{     public static void main(String[] args) {         FastScanner s= new FastScanner();                                             StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;                  while(p<t){         int n=s.nextInt();         String str1=s.nextToken();         String str2=s.nextToken();                 if(str1.equals(str2)){             res.append(""0 \n"");         }                else{             long count1=0;             long count0=0;             for(int i=0;i<n;i++){                 char ch=str1.charAt(i);                 if(ch=='1'){                     count1++;                 }             }             count0=n-count1;             if(count1==0){                 res.append(""-1 \n"");             }             else{                 long nice1=0;                 long nice0=0;                 for(int i=0;i<n;i++){                     char ch=str2.charAt(i);                     if(ch=='1'){                         nice1++;                     }                 }                 nice0=(n-nice1);                 int check1=0;                 int check2=0;                 if((count1==nice1)&&(count0==nice0)){                     check1=1;                 }                 long yo1=(1+count0);                 long yo0=(count1-1);                 if((yo1==nice1)&&(yo0==nice0)){                     check2=1;                 }                 if(check1==0 && check2==0){                     res.append(""-1 \n"");                 }                 else{                                          long correct=0;                     long wrong=0;                     long correct1=0;                     long correct0=0;                     long wrong1=0;                     long wrong0=0;                                         for(int i=0;i<n;i++){                         char ch1=str1.charAt(i);                         char ch2=str2.charAt(i);                         if(ch1==ch2){                             correct++;                             if(ch1=='1'){                                 correct1++;                             }                             else{                                 correct0++;                             }                         }                         else{                             wrong++;                             if(ch1=='1'){                                 wrong1++;                             }                             else{                                 wrong0++;                             }                         }                     }               long ans1=      solve(correct1,correct0,wrong1,wrong0,1);               long ans2=      solve(correct1,correct0,wrong1,wrong0,0);               long ans=Math.min(ans1,ans2);               if(ans>=Integer.MAX_VALUE){                   ans=-1;               }               res.append(ans+"" \n"");                                                                             }             }         }         p++;     }          System.out.println(res);          }     private static long solve( long correct1, long correct0, long wrong1, long wrong0,long a) {                long op1=Integer.MAX_VALUE;                long op2=Integer.MAX_VALUE;                if(wrong1==0 && wrong0==0){                    return 0;                }                if(a==1){                {                                        if(correct1>0){                        long newcorrect1=1+wrong0;                        long newcorrect0=wrong1;                        long newwrong1=correct0;                        long newwrong0=correct1-1;                        op1=(1+solve(newcorrect1,newcorrect0,newwrong1,newwrong0,0));                    }                }             }             else{                {                                        {                        if(wrong1>0){                         long newcorrect1=wrong0;                         long newcorrect0=wrong1-1;                         long newwrong1=1+correct0;                         long newwrong0=correct1;                         op2=(1+solve(newcorrect1,newcorrect0,newwrong1,newwrong0,1));                        }                    }                }             }                  long ans=Math.min(op1,op2);                return ans;          }                         } ","import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.util.*; import java.util.concurrent.ThreadLocalRandom; public class a729 { public static void main(String[] args) throws IOException {     BufferedWriter out = new BufferedWriter(             new OutputStreamWriter(System.out)); BufferedReader br = new BufferedReader(         new InputStreamReader(System.in)); PrintWriter pt = new PrintWriter(System.out); FastReader sc = new FastReader(); int t = sc.nextInt(); for(int o = 0 ; o<t;o++){ int n = sc.nextInt(); String s1 = sc.next(); String s2 = sc.next(); if(s1.equals(s2)) { System.out.println(0); continue; } int f = 0; for(int i = 0 ; i<n;i++) { if(s1.charAt(i) == '1') { f = 1; break; } } if(f == 0) { System.out.println(-1); continue; } int c = 0; int c1 = 0; int c2 = 0; int c3 = 0; int c4 = 0; for(int i = 0; i<n;i++) { if(s1.charAt(i)!=s2.charAt(i)) { c++; if(s1.charAt(i) == '1') { c1++; }else { c2++; } }else { if(s1.charAt(i) == '1') { c3++; }else { c4++; } } } int g = 0; int h = 0; int v1 = Integer.MAX_VALUE; int v2 = Integer.MAX_VALUE; if(c%2==1) { g = 1; } int e = n-c; if(e%2==0) { h = 1; } if(c2!=c/2){ g = 1; } if(c4!=e/2){ h = 1; } if(g == 0){ v1 = c; } if(h == 0){ v2 = e; } int ans = Math.min(v1, v2); if(ans == Integer.MAX_VALUE) { System.out.println(-1); }else { System.out.println(ans); } }      }             } ",0
768,"import java.util.*; import java.io.*;   public class C_Menorah{     public static void main(String[] args) {         FastScanner s= new FastScanner();                                             StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;                  while(p<t){         int n=s.nextInt();         String str1=s.nextToken();         String str2=s.nextToken();                 if(str1.equals(str2)){             res.append(""0 \n"");         }                else{             long count1=0;             long count0=0;             for(int i=0;i<n;i++){                 char ch=str1.charAt(i);                 if(ch=='1'){                     count1++;                 }             }             count0=n-count1;             if(count1==0){                 res.append(""-1 \n"");             }             else{                 long nice1=0;                 long nice0=0;                 for(int i=0;i<n;i++){                     char ch=str2.charAt(i);                     if(ch=='1'){                         nice1++;                     }                 }                 nice0=(n-nice1);                 int check1=0;                 int check2=0;                 if((count1==nice1)&&(count0==nice0)){                     check1=1;                 }                 long yo1=(1+count0);                 long yo0=(count1-1);                 if((yo1==nice1)&&(yo0==nice0)){                     check2=1;                 }                 if(check1==0 && check2==0){                     res.append(""-1 \n"");                 }                 else{                                          long correct=0;                     long wrong=0;                     long correct1=0;                     long correct0=0;                     long wrong1=0;                     long wrong0=0;                                         for(int i=0;i<n;i++){                         char ch1=str1.charAt(i);                         char ch2=str2.charAt(i);                         if(ch1==ch2){                             correct++;                             if(ch1=='1'){                                 correct1++;                             }                             else{                                 correct0++;                             }                         }                         else{                             wrong++;                             if(ch1=='1'){                                 wrong1++;                             }                             else{                                 wrong0++;                             }                         }                     }               long ans1=      solve(correct1,correct0,wrong1,wrong0,1);               long ans2=      solve(correct1,correct0,wrong1,wrong0,0);               long ans=Math.min(ans1,ans2);               if(ans>=Integer.MAX_VALUE){                   ans=-1;               }               res.append(ans+"" \n"");                                                                             }             }         }         p++;     }          System.out.println(res);          }     private static long solve( long correct1, long correct0, long wrong1, long wrong0,long a) {                long op1=Integer.MAX_VALUE;                long op2=Integer.MAX_VALUE;                if(wrong1==0 && wrong0==0){                    return 0;                }                if(a==1){                {                                        if(correct1>0){                        long newcorrect1=1+wrong0;                        long newcorrect0=wrong1;                        long newwrong1=correct0;                        long newwrong0=correct1-1;                        op1=(1+solve(newcorrect1,newcorrect0,newwrong1,newwrong0,0));                    }                }             }             else{                {                                        {                        if(wrong1>0){                         long newcorrect1=wrong0;                         long newcorrect0=wrong1-1;                         long newwrong1=1+correct0;                         long newwrong0=correct1;                         op2=(1+solve(newcorrect1,newcorrect0,newwrong1,newwrong0,1));                        }                    }                }             }                  long ans=Math.min(op1,op2);                return ans;          }                         } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();         int t;         t = in.nextInt();                  while (t > 0) {             solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n, _00 = 0, _01 = 0, _11 = 0, _10 = 0;             n = in.nextInt();             char[] s = in.next().toCharArray();             char[] s1 = in.next().toCharArray();             for (int i = 0; i < n; i++) {                 if(s[i]==s1[i]){                     if(s[i]=='0'){                         _00++;                     }                     else{                         _11++;                     }                 }                 else{                     if(s[i]=='0'){                         _01++;                     }                     else{                         _10++;                     }                 }             }             int ans = Integer.MAX_VALUE;             if(_10 ==_01){                 ans = 2*_01;             }             if(_11 == _00 + 1){                 ans = Math.min(ans, 2*_00 + 1);             }             if(ans == Integer.MAX_VALUE){                 out.println(-1);             }             else{                 out.println(ans);             }         }     }                                   static final Random random=new Random();           } ",0
769,"import java.util.*; import java.io.*;   public class C_Menorah{     public static void main(String[] args) {         FastScanner s= new FastScanner();                                             StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;                  while(p<t){         int n=s.nextInt();         String str1=s.nextToken();         String str2=s.nextToken();                 if(str1.equals(str2)){             res.append(""0 \n"");         }                else{             long count1=0;             long count0=0;             for(int i=0;i<n;i++){                 char ch=str1.charAt(i);                 if(ch=='1'){                     count1++;                 }             }             count0=n-count1;             if(count1==0){                 res.append(""-1 \n"");             }             else{                 long nice1=0;                 long nice0=0;                 for(int i=0;i<n;i++){                     char ch=str2.charAt(i);                     if(ch=='1'){                         nice1++;                     }                 }                 nice0=(n-nice1);                 int check1=0;                 int check2=0;                 if((count1==nice1)&&(count0==nice0)){                     check1=1;                 }                 long yo1=(1+count0);                 long yo0=(count1-1);                 if((yo1==nice1)&&(yo0==nice0)){                     check2=1;                 }                 if(check1==0 && check2==0){                     res.append(""-1 \n"");                 }                 else{                                          long correct=0;                     long wrong=0;                     long correct1=0;                     long correct0=0;                     long wrong1=0;                     long wrong0=0;                                         for(int i=0;i<n;i++){                         char ch1=str1.charAt(i);                         char ch2=str2.charAt(i);                         if(ch1==ch2){                             correct++;                             if(ch1=='1'){                                 correct1++;                             }                             else{                                 correct0++;                             }                         }                         else{                             wrong++;                             if(ch1=='1'){                                 wrong1++;                             }                             else{                                 wrong0++;                             }                         }                     }               long ans1=      solve(correct1,correct0,wrong1,wrong0,1);               long ans2=      solve(correct1,correct0,wrong1,wrong0,0);               long ans=Math.min(ans1,ans2);               if(ans>=Integer.MAX_VALUE){                   ans=-1;               }               res.append(ans+"" \n"");                                                                             }             }         }         p++;     }          System.out.println(res);          }     private static long solve( long correct1, long correct0, long wrong1, long wrong0,long a) {                long op1=Integer.MAX_VALUE;                long op2=Integer.MAX_VALUE;                if(wrong1==0 && wrong0==0){                    return 0;                }                if(a==1){                {                                        if(correct1>0){                        long newcorrect1=1+wrong0;                        long newcorrect0=wrong1;                        long newwrong1=correct0;                        long newwrong0=correct1-1;                        op1=(1+solve(newcorrect1,newcorrect0,newwrong1,newwrong0,0));                    }                }             }             else{                {                                        {                        if(wrong1>0){                         long newcorrect1=wrong0;                         long newcorrect0=wrong1-1;                         long newwrong1=1+correct0;                         long newwrong0=correct1;                         op2=(1+solve(newcorrect1,newcorrect0,newwrong1,newwrong0,1));                        }                    }                }             }                  long ans=Math.min(op1,op2);                return ans;          }                         } ","import java.util.*; public class Main {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         for (int i = 0; i < t; i++) {             int n = scan.nextInt();             String a = scan.next();             String b = scan.next();             int[] cChet = new int[n];             int[] cNech = new int[n];             int sumChet = 0;             int sumNechet = 0;             int numOnesA = 0;             int numOnesB = 0;             boolean soluble = true;             for (int j = 0; j < n; j++) {                 cChet[j] = (a.charAt(j) - 48) ^ (b.charAt(j) - 48);                 cNech[j] = cChet[j] ^ 1;                 sumChet += cChet[j];                 sumNechet += cNech[j];             }             int INF = 100000000;             int ans = INF;             if (((sumChet % 2 == 1) && (sumNechet % 2 == 0)) ||                     !(numOnesB == numOnesA || numOnesB == (n - numOnesA + 1))) {                 ans = -1;             } else {                 if (sumChet % 2 == 0) {                     int ones = 0;                     int zeroes = 0;                     for (int j = 0; j < n; j++) {                         if (cChet[j] == 1) {                             if (a.charAt(j) == '1') {                                 ones++;                             } else {                                 zeroes++;                             }                         }                     }                     if ((ones - zeroes) == 0 || (ones - zeroes) == 1) {                         ans = Math.min(sumChet, ans);                     }                 }                 if (sumNechet % 2 == 1) {                     int ones = 0;                     int zeroes = 0;                     for (int j = 0; j < n; j++) {                         if (cNech[j] == 1) {                             if (a.charAt(j) == '1') {                                 ones++;                             } else {                                 zeroes++;                             }                         }                     }                     if ((ones - zeroes) == 0 || (ones - zeroes) == 1) {                         ans = Math.min(sumNechet, ans);                     }                 }             }             if (ans != INF) {                 System.out.println(ans);             } else {                 System.out.println(-1);             }         }     }      } ",0
770,"import java.util.*; import java.io.*;   public class C_Set_or_Decrease{     public static void main(String[] args) {         FastScanner s= new FastScanner();                                             StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){         int n=s.nextInt();         long k=s.nextLong();         ArrayList<Long> list = new  ArrayList<Long>();         long sum=0;         for(int i=0;i<n;i++){             long a=s.nextLong();             list.add(a);             sum+=a;         }         if(sum<=k){             res.append(""0 \n"");         }         else{             Collections.sort(list);             long well[]= new long[n-1];             long ss=0;             for(int i=1;i<n;i++){                 long a=list.get(i);                 ss+=a;                 well[i-1]=ss;                            }             System.out.println();             long yo=k/n;             long first=list.get(0);             long yo1=Math.min(yo,first);             long ans=Long.MAX_VALUE;                         for(long i=yo1;i>(yo1-n-5);i--){                                long num=first-i;                 long start=-1;                 long end=n-1;                 long mid=0;                 while(start<end){                     mid=(start+end)/2;                     if(start+1==end){                         break;                     }                     long hh=well[(int)mid];                     long a1=(n-mid-1);                     long a2=(a1*i);                     hh+=a2;                     if(hh<=k){                         start=mid;                     }                     else{                         end=mid;                     }                 }                 long jj=n-start-2;                 long kk=jj+num;                 ans=Math.min(ans,kk);             }             res.append(ans+"" \n"");         }         p++;     }     System.out.println(res);     }                         } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*;   public class C {   public static void main(String[] args) { FastScanner fs=new FastScanner(); int t=fs.nextInt(); while(t-->0)  { int n; long k,sum=0L,temp=0L,min=Integer.MAX_VALUE; n=fs.nextInt(); k=fs.nextLong(); int[] arr=fs.readArray(n);     for(int i=0;i<n;i++)         sum+=arr[i];     sort(arr);     Stack<Integer> s=new Stack<>();     for(int i=1;i<n;i++){         s.push(arr[i]-arr[0]);     }     while(!s.empty() && sum>k){         min=Math.min(min,temp+(sum-k+temp)/(temp+1));         sum-=s.peek();         s.pop();         temp++;     }     if(sum>k){     temp+=(sum-k+temp)/(temp+1);     }     System.out.println(Math.min(min, temp)); } }   static void sort(int[] a) { ArrayList<Integer> l=new ArrayList<>(); for (int i:a) l.add(i); Collections.sort(l); for (int i=0; i<a.length; i++) a[i]=l.get(i); }   } ",0
771,"import java.util.*; import java.io.*;   public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();               List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }               Collections.sort(blue);             Collections.sort(red);               boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ","import java.io.BufferedReader; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.math.BigInteger; import java.util.ArrayList; import java.util.Arrays; import java.util.BitSet; import java.util.Calendar; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.SortedSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; public class D_Round_753_Div3 {     public static int MOD = 1000000007;     static int[][] dp;     public static void main(String[] args) throws FileNotFoundException {                           PrintWriter out = new PrintWriter(System.out);         Scanner in = new Scanner();         int T = in.nextInt();         for (int z = 0; z < T; z++) {             int n = in.nextInt();             int[] data = new int[n];             for (int i = 0; i < n; i++) {                 data[i] = in.nextInt();             }             String line = in.next();             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for (int i = 0; i < n; i++) {                 if (line.charAt(i) == 'B') {                     blue.add(data[i]);                 } else {                     red.add(data[i]);                 }             }             Collections.sort(blue);             Collections.sort(red);             int st = 1;             boolean ok = true;             for (int i : blue) {                 if (i < st) {                     ok = false;                     break;                 }                 st++;             }             if (ok) {                 for (int i : red) {                     if (i > st) {                         ok = false;                         break;                     }                     st++;                 }             }             out.println(ok ? ""Yes"" : ""No"");         }         out.close();     }                                                        } ",1
772,"import java.util.*; import java.io.*;   public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();               List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }               Collections.sort(blue);             Collections.sort(red);               boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ","import java.util.*; import java.io.*; public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();             List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }             Collections.sort(blue);             Collections.sort(red);             boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ",1
773,"import java.util.*; import java.io.*;   public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();               List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }               Collections.sort(blue);             Collections.sort(red);               boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ","import java.util.*; import java.io.*; public class Main { private static FS sc = new FS(); private static class extra { static int[] intArr(int size) { int[] a = new int[size]; for(int i = 0; i < size; i++) a[i] = sc.nextInt(); return a; } } static int mod = (int) 1e9 + 7; static LinkedList<String>[] temp, temp2; static int inf = (int) 1e9; public static void main(String[] args) { int t = sc.nextInt(); StringBuilder ret = new StringBuilder(); while(t-- > 0) { int n = sc.nextInt(); int[] a = extra.intArr(n); String s = sc.next(); ArrayList<Integer> red = new ArrayList<>(), blue = new ArrayList<>(); for(int i = 0; i < n; i++) { if(s.charAt(i) == 'R') red.add(a[i]); else blue.add(a[i]); } Collections.sort(red); Collections.sort(blue); int start = 1, flag = 0; for(int aa:blue) { if(start > aa) { flag = 1; break; } start++; } for(int aa:red) { if(start < aa) { flag = 1; break; } start++; } if(flag == 1) ret.append(""NO\n""); else ret.append(""YES\n""); } System.out.println(ret); } } ",1
774,"import java.util.*; import java.io.*;   public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();               List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }               Collections.sort(blue);             Collections.sort(red);               boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ","import java.util.*; import java.lang.*; import java.io.*; public class D753 {     public static void main(String[] args) throws java.lang.Exception {                  try {                          FastReader sc = new FastReader();             int t = sc.nextInt();             while (t-- > 0) {                 int n=sc.nextInt();                 int[] arr=new int[n];                 for(int i=0;i<n;i++){                     arr[i]=sc.nextInt();                 }                                  char[] color=sc.next().toCharArray();                 ArrayList<Integer> b=new ArrayList<>();                 ArrayList<Integer> r=new ArrayList<>();                 for(int i=0;i<n;i++){                     if(color[i]=='B')b.add(arr[i]);                     else r.add(arr[i]);                 }                 Collections.sort(b);                 Collections.sort(r);                 boolean ok=true;                 int cur=1;                 for(int i:b){                     if(i>=cur)cur++;                     else{                         ok=false;                         break;                     }                                      }                 for(int i:r){                     if(i<=cur)cur++;                     else{                         ok=false;                         break;                     }                 }                 if(ok)System.out.println(""YES"");                 else System.out.println(""NO"");             }         } catch (Exception e) {             return;         }     }                                                        } ",1
775,"import java.util.*; import java.io.*;   public class D_Blue_Red_Permutation{     public static void main(String[] args) {         FastScanner s= new FastScanner();                                           StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){         int n=s.nextInt();         long array[]= new long[n];         for(int i=0;i<n;i++){             array[i]=s.nextLong();         }         String str=s.nextToken();         ArrayList<Long> red = new  ArrayList<Long>();         ArrayList<Long> blue = new  ArrayList<Long>();         for(int i=0;i<n;i++){             if(str.charAt(i)=='R'){                 red.add(array[i]);             }             else{                 blue.add(array[i]);             }         }         Collections.sort(blue);         int check1=0;         for(int i=0;i<blue.size();i++){             int yo=i+1;             if(blue.get(i)<yo){                 check1=1;                 break;             }         }         Collections.sort(red,Collections.reverseOrder());         int number=n;         int check2=0;         for(int i=0;i<red.size();i++){              if(red.get(i)>number){                  check2=1;                  break;              }              number--;         }         if(check1==0 && check2==0){             res.append(""YES\n"");         }         else{             res.append(""NO\n"");         }         p++;     }     System.out.println(res);     }      } ","import java.util.*; public class Main {   public static void main(String[] args) {     Scanner sc= new Scanner(System.in);     int t=sc.nextInt();     while(t-->0){       int n=sc.nextInt();       int[] a=new int[n];       for(int i=0;i<n;i++)a[i]=sc.nextInt();       String x=sc.next();       Vector<Integer> R=new Vector<>();       Vector<Integer> B=new Vector<>();       for(int i=0;i<n;i++){         if(x.charAt(i)=='B') R.add(a[i]);         else B.add(a[i]);       }       Collections.sort(R);       Collections.sort(B);       boolean yes=true;       for(int i=0;i<R.size();i++){         if(R.get(i)-i<1){System.out.println(""NO"");yes=false;break;}       }       if(yes)         {           int s=B.size();           for(int j=0;j<s;j++){             if(B.get(j)+s-j>n+1){System.out.println(""NO"");yes=false;break;}           }         }         if(yes)System.out.println(""YES"");     }     sc.close();   } } ",0
776,"import java.util.*; import java.io.*;   public class D_Blue_Red_Permutation{     public static void main(String[] args) {         FastScanner s= new FastScanner();                                           StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){         int n=s.nextInt();         long array[]= new long[n];         for(int i=0;i<n;i++){             array[i]=s.nextLong();         }         String str=s.nextToken();         ArrayList<Long> red = new  ArrayList<Long>();         ArrayList<Long> blue = new  ArrayList<Long>();         for(int i=0;i<n;i++){             if(str.charAt(i)=='R'){                 red.add(array[i]);             }             else{                 blue.add(array[i]);             }         }         Collections.sort(blue);         int check1=0;         for(int i=0;i<blue.size();i++){             int yo=i+1;             if(blue.get(i)<yo){                 check1=1;                 break;             }         }         Collections.sort(red,Collections.reverseOrder());         int number=n;         int check2=0;         for(int i=0;i<red.size();i++){              if(red.get(i)>number){                  check2=1;                  break;              }              number--;         }         if(check1==0 && check2==0){             res.append(""YES\n"");         }         else{             res.append(""NO\n"");         }         p++;     }     System.out.println(res);     }      } ","import java.util.*; public class the_child_and_set { public static void main(String args[]) { Scanner in=new Scanner(System.in); int t=in.nextInt(); in.nextLine(); while(t--!=0) { int n=in.nextInt(); int arr[]=new int[n]; for(int i=0;i<n;i++) { arr[i]=in.nextInt(); } in.nextLine(); String s=in.nextLine(); int rc=0; int bc=0; for(int i=0;i<n;i++) { if(s.charAt(i)=='B') bc++; else rc++; } int r[]=new int[rc]; int b[]=new int[bc]; int bi=0; int ri=0; for(int i=0;i<n;i++) { if(s.charAt(i)=='B') { b[bi]=arr[i]; bi++; } else { r[ri]=arr[i]; ri++; } } Arrays.sort(b); Arrays.sort(r); boolean flag=true; for(int i=0;i<bi;i++) { if(b[i]<(i+1)) { flag=false; break; } } if(flag) { for(int i=0;i<ri;i++) { if(r[i]>bi+(i+1)) { flag=false; break; } } } if(flag) System.out.println(""YES""); else System.out.println(""NO""); } } } ",0
777,"import java.util.*; import java.io.*;   public class Main {       public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             String[] s = new String[n];             for(int i=0; i<n; i++)                 s[i] = sc.next();             int MAX = 0;             for(char c = 'a'; c <= 'e'; c++){                 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());                  for(int i=0; i<n; ++i) {                     int curChar = 0;                     int otherChar = 0;                     for(int j=0; j<s[i].length(); j++) {                         if(s[i].charAt(j) == c)                             curChar++;                         else                             otherChar++;                     }                     int diff = curChar - otherChar;                     pq.add(diff);                 }                 int cur = 0;                 int numberOfWords = 0;                 while(!pq.isEmpty()){                     if(cur + pq.peek() > 0){                         cur += pq.poll();                         numberOfWords++;                     }else{                         break;                     }                 }                 MAX = Math.max(MAX, numberOfWords);             }             pw.println(MAX);         }         pw.close();     }        } ","import java.io.BufferedReader;     import java.io.IOException;     import java.io.InputStreamReader;     import java.io.PrintWriter; import java.lang.reflect.Array; import java.util.*; public class Main{               static int MOD=1000003;     public static void main(String[] args) throws IOException {         FastScanner in = new FastScanner();         FastWriter out = new FastWriter();         int t=in.nextInt();                  while (t-->0){             int n=in.nextInt();             String[] ar=new String[n];             for (int i = 0; i < n; i++) {                 ar[i]=in.next();             }             int ans=0;             for(char ch='a';ch<='e';ch++){                 int[] res=new int[n];                 for (int i = 0; i < n; i++) {                     String ss=ar[i];                     for (int j = 0; j < ss.length(); j++) {                         if(ss.charAt(j)==ch){                             res[i]++;                         }else {                             res[i]--;                         }                     }                 }                 Arrays.sort(res);int max=0,nn=0;                 for (int i = n-1; i>=0; i--) {                     max+=res[i];                     if(max>0){                         nn++;                     }else {                         break;                     }                 }                 ans=Math.max(ans,nn);             }             out.println(ans);         }         out.close();     }                                                                                                                                             } ",0
778,"import java.util.*; import java.io.*;   public class Main {     PrintWriter out;     FastReader sc;     StringBuilder sb;               public void sol() { int n=ni(); int[] ar=new int[n]; for(int i=0;i<n;i++)ar[i]=ni(); char[] s=rl(); PriorityQueue<Integer> red=new PriorityQueue<>(Collections.reverseOrder()),blue=new PriorityQueue<>(); for(int i=0;i<n;i++) { if(s[i]=='R')red.add(ar[i]); else blue.add(ar[i]); } int a=n; while(red.size()>0) { if(red.poll()>a) { no();return; }a--; }a=1; while(blue.size()>0) { if(blue.poll()<a) { no();return; }a++; }yes(); }     public static void main(String[] args)  {      Main g=new Main(); g.out=new PrintWriter(System.out); g.sc=new FastReader(); int t=1;  t=g.ni(); while(t-->0) g.sol(); g.out.flush(); }  public int ni(){       return sc.nextInt(); }public char[] rl(){       return sc.nextLine().toCharArray(); } public void pl(Object s){       out.println(s); } public String next(){       return sc.next(); }                                        void yes(){             pl(""YES"");       }void no(){             pl(""NO"");       }                                           } ","import java.io.*; import java.util.*; public class D { static class Pair implements Comparable<Pair>{ int a; char b; public Pair(int a, char b) { this.a = a; this.b = b; } } public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); PrintWriter output = new PrintWriter(System.out); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); int arr[] = scan.readArray(n); char line[] = scan.next().toCharArray(); ArrayList<Pair> pairs = new ArrayList<Pair>(); for(int i = 0;i<n;i++) { pairs.add(new Pair(arr[i], line[i])); } Collections.sort(pairs); boolean possible = true; for(int i = 1;i<=n;i++) { if(pairs.get(i-1).a == i) { continue; } else if(pairs.get(i-1).a < i && pairs.get(i-1).b == 'R') { continue; } else if(pairs.get(i-1).a > i && pairs.get(i-1).b == 'B') { continue; } else { possible = false; break; } } output.println(possible == true ? ""YES"" : ""NO""); } output.flush(); } public static int[] sort(int arr[]) { List<Integer> list = new ArrayList<>(); for(int i:arr) list.add(i); Collections.sort(list); for(int i = 0;i<list.size();i++) arr[i] = list.get(i); return arr; } } ",0
779,"import java.util.*; import java.io.*;   public class Main {     PrintWriter out;     FastReader sc;     StringBuilder sb;               public void sol() { int n=ni(); int[] ar=new int[n]; for(int i=0;i<n;i++)ar[i]=ni(); char[] s=rl(); PriorityQueue<Integer> red=new PriorityQueue<>(Collections.reverseOrder()),blue=new PriorityQueue<>(); for(int i=0;i<n;i++) { if(s[i]=='R')red.add(ar[i]); else blue.add(ar[i]); } int a=n; while(red.size()>0) { if(red.poll()>a) { no();return; }a--; }a=1; while(blue.size()>0) { if(blue.poll()<a) { no();return; }a++; }yes(); }     public static void main(String[] args)  {      Main g=new Main(); g.out=new PrintWriter(System.out); g.sc=new FastReader(); int t=1;  t=g.ni(); while(t-->0) g.sol(); g.out.flush(); }  public int ni(){       return sc.nextInt(); }public char[] rl(){       return sc.nextLine().toCharArray(); } public void pl(Object s){       out.println(s); } public String next(){       return sc.next(); }                                        void yes(){             pl(""YES"");       }void no(){             pl(""NO"");       }                                           } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class D {          public static void main(String[] args)     {         FastScanner sc=new FastScanner();         int t=sc.nextInt();         PrintWriter pw=new PrintWriter(System.out);         while(t-->0) {             int n=sc.nextInt();             int[] a=sc.readArray(n);             char[] s=sc.next().toCharArray();             boolean ok=true;             ArrayList<Integer> blues=new ArrayList<>();             ArrayList<Integer> reds=new ArrayList<>();             for(int i=0;i<n;i++){                 if(s[i]=='B'){                     blues.add(a[i]);                 } else {                     reds.add(a[i]);                 }             }             Collections.sort(blues);             Collections.sort(reds);             for(int i=0;i<blues.size();i++){                 if(blues.get(i)<(i+1)){                     ok=false;                     break;                 }             }             int start=blues.size()+1;             for(int i=0;i<reds.size();i++){                 if(reds.get(i)>(start++)){                     ok=false;                     break;                 }             }             if(ok){                pw.println(""YES"");             } else {                 pw.println(""NO"");             }         }         pw.flush();     }      } ",0
780,"import java.util.*; import java.io.*;   public class minimum_grid_path {       public static void main(String[] args) throws IOException{     BufferedReader in = new BufferedReader(new InputStreamReader(System.in));          StringTokenizer line = new StringTokenizer(in.readLine());              int t = Integer.parseInt(line.nextToken());                  for(int i1=0;i1<t;i1++) {                  line = new StringTokenizer(in.readLine());                      int n = Integer.parseInt(line.nextToken()); long[] ar = new long[n]; line = new StringTokenizer(in.readLine()); for(int i=0;i<n;i++) { ar[i] = Long.parseLong(line.nextToken()); } long[] ans=new long[n]; ans[0]=ar[0]*n; long m=ar[0]; long s1=ar[0]; for(int i=2;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2);   } ans[1]=ar[1]*n;  m=ar[1];  s1=ar[1];   for(int i=3;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2); } long mini=ans[0]+ans[1]; for(int i=1;i<n-1;i++) { mini=Math.min(ans[i]+ans[i+1],mini); } System.out.println(mini);         }     } } ","import java.util.*; public class ss {     public static void main(String[]args)     {         Scanner in=new Scanner (System.in);         int t=in.nextInt();         for(int i1=0;i1<t;i1++)         {             int n=in.nextInt(); long[] ar=new long[n]; for(int i=0;i<n;i++) { ar[i]=in.nextLong(); } long[] ans=new long[n]; ans[0]=ar[0]*n; long m=ar[0]; long s1=ar[0]; for(int i=2;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2);       } ans[1]=ar[1]*n;  m=ar[1];  s1=ar[1]; for(int i=3;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2); } long mini=ans[0]+ans[1]; for(int i=1;i<n-1;i++) { mini=Math.min(ans[i]+ans[i+1],mini); } System.out.println(mini); } } } ",1
781,"import java.util.*; import java.io.*;  public class C{           static int MOD=1000000007;     static PrintWriter pw;     static FastReader sc;                                                       static int Max=2*100005;               static ArrayList<ArrayList<Integer>> arr= new ArrayList<>();     static ArrayList<Integer> tot= new ArrayList<>();     static int fun(int ch , int n){     ArrayList<Integer> list= new ArrayList<>();     for(int i=0;i<n;i++){     list.add( (arr.get(i).get(ch))-(tot.get(i)-(arr.get(i).get(ch))) );     }     Collections.sort(list,Collections.reverseOrder());     int count=0,sum=0;     for(Integer x: list){     sum+=x;     if(sum>0){     count++;     }     }     return count;     }     static void solve() throws Exception{     int n=sc.nextInt();     arr= new ArrayList<>();     tot= new ArrayList<>();     for(int i=0;i<n;i++){             arr.add( new ArrayList<>());     tot.add(0);     for(int j=0;j<5;j++){     ArrayList<Integer> list=arr.get(i);     list.add(0);     }     }                    for(int i=0;i<n;i++){     String s=sc.next();     tot.set(i,s.length());     for(int j=0;j<s.length();j++){     ArrayList<Integer> list=arr.get(i);     list.set((s.charAt(j)-'a'),list.get((s.charAt(j)-'a'))+1);          }     }     int ans =0;     for(int i=0;i<5;i++){     ans = Math.max(ans,fun(i,n));     }     pw.println(ans);  }         public static void main(String[] args) throws Exception{         try {             System.setIn(new FileInputStream(""input.txt""));             System.setOut(new PrintStream(new FileOutputStream(""output.txt"")));         } catch (Exception e) {             System.err.println(""Error"");         }         sc= new FastReader();         pw = new PrintWriter(System.out);             int tc=1;         tc=sc.nextInt();         for(int i=1;i<=tc;i++) {             solve();         }                 pw.flush();          } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.HashSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.Vector; public class Main{ static InputStream inputStream = System.in; static OutputStream outputStream = System.out; static InputReader in = new InputReader(inputStream); static PrintWriter out = new PrintWriter(outputStream); public static void main(String[] args) { int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); String[] v = new String[n]; for (int i = 0; i < n; i++) { v[i] = in.next(); } ArrayList<ArrayList<Integer>> v1 = new ArrayList<>(); for (int i = 0; i < n; i++) { ArrayList<Integer> list = new ArrayList<>(); for (int j = 0; j < 5; j++) { list.add(0); } v1.add(list); } for (int i = 0; i < n; i++) { String s = v[i]; for (int j = 0; j < s.length(); j++) { int val = v1.get(i).get(s.charAt(j) - 'a'); val++; v1.get(i).set(s.charAt(j) - 'a', val); } } int ret = 0; for (int i = 0; i < 5; i++) { ArrayList<Integer> v3 = new ArrayList<>(); for (int j = 0; j < n; j++) { String s1 = v[j]; int n2 = s1.length(); int cnt = v1.get(j).get(i); int diff = cnt - (n2 - cnt); v3.add(diff); } Collections.sort(v3); Collections.reverse(v3); int till = 0; for (int k = 0; k < n; k++) { till += v3.get(k); if (till > 0) { ret = Math.max(ret, k + 1); } } } out.println(ret); } out.close(); } } ",0
782,"import java.util.*; import java.io.*;  public class Interactive{          static long MOD=(long)1e9+7;               static Scanner sc = new Scanner(System.in);          static long query(int l, int r) {     System.out.println(""? "" + l + "" "" + r);     return sc.nextLong();     }     static int query(int i) {     System.out.println(""? "" + i);     return sc.nextInt();     }          public static void main (String[] args) throws java.lang.Exception {     int test=1;     test=sc.nextInt();     while(test-->0) {     int n = sc.nextInt();     int ans[] = new int[n];     for(int i = 1; i <= n; i++) {     if(ans[i - 1] != 0) continue;     HashSet<Integer> set = new HashSet<>();     ArrayList<Integer> arr = new ArrayList<>();     while(true) {     int x = query(i);     if(set.contains(x)) break;     set.add(x);     arr.add(x - 1);     }     for(int j = 0; j < arr.size(); j++) {     ans[arr.get(j)] = arr.get((j + 1) % arr.size()) + 1;     }     }     System.out.print(""! "");     for(int x: ans) System.out.print(x+"" "");     System.out.println();     }     } } ","import java.awt.Container; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileNotFoundException; import java.io.FileWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class Main {                  public static void main(String[] args)     {         FastScanner input = new FastScanner();         int tc = input.nextInt();         work:         while (tc-- > 0) {              int n = input.nextInt();        int ans[] = new int[n];         for (int i = 1; i <=n; i++) {             if(ans[i-1]!=0)             {                 continue ;             }             HashSet<Integer> set = new HashSet<>();             ArrayList<Integer> a = new ArrayList<>();             while(true)             {                 System.out.println(""? ""+i);                 int value = input.nextInt();                 if(set.contains(value))                 {                     break;                 }                 a.add(value-1);                 set.add(value);                              }             for (int j = 0; j <a.size(); j++) {                 ans[a.get(j)] = a.get((j+1)%a.size())+1;             }         }         System.out.print(""! "");         for (int an : ans) {             System.out.print(an+"" "");         }         System.out.println("""");            }     }      } ",1
783,"import java.util.*; import java.io.*;  public class Main{               static long MOD=(long)1e9+7;               static FastReader sc=new FastReader();     static PrintWriter out=new PrintWriter(System.out);                 public static void main (String[] args) throws java.lang.Exception {     int test=1;     test=sc.nextInt();     while(test-->0) {     int n=sc.nextInt();     long a[]=new long[n];     for(int i=0;i<n;i++) a[i]=sc.nextLong();     long x[]=new long[n],pre[]=new long[n];     pre[0]=a[0];     pre[1]=a[1];     for(int i=2;i<n;i++) pre[i]=a[i]+pre[i-2];     x[0]=n*a[0];     x[1]=n*a[1];     long m[]= {a[0],a[1]};     for(int i=2;i<n;i++) {     m[i%2]=Math.min(m[i%2],a[i]);     x[i]=(n-(i+2)/2)*m[i%2]+pre[i];          }     long ans=Long.MAX_VALUE/10;     for(int i=1;i<n;i++) ans=Math.min(ans, x[i]+x[i-1]);     out.println(ans);          }         out.flush();         out.close();     } } ","import java.io.*; import java.lang.*; import java.util.*; import java.io.*; import java.util.*; public class Main{ static Scanner scanner=new Scanner(System.in); public static void main(String[] args) { int q=scanner.nextInt(); while(q-->0) { int n=scanner.nextInt(); long a[]=new long [n]; for(int i=0;i<n;i++)a[i]=scanner.nextLong(); long minr=Integer.MAX_VALUE; long mind=Integer.MAX_VALUE; long x=a[0],s=a[0]*n; long y=a[1],ss=a[1]*n; long ans=s+ss; for(int i=2;i<n;i++) { if(i%2==0) { if(x<=a[i]) { s+=(a[i]-x); }else { s-=(x-a[i])*(n-(i)/2); x=a[i]; } }else { if(y<=a[i]) { ss+=(a[i]-y); }else { ss-=(y-a[i])*(n-(i)/2); y=a[i]; } } ans=Math.min(ans, s+ss); } System.out.println(ans); } } } ",0
784,"import java.util.*; import java.io.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; public class Test{         static FastReader scan;         static void solve(){             scan.nextLine();             int n=scan.nextInt();             int k=scan.nextInt();             int []arr=new int[n+1];             int []block=new int[k];             int []temp=new int[k];             for(int i=0;i<k;i++){                 block[i]=scan.nextInt();             }             for(int i=0;i<k;i++){                 temp[i]=scan.nextInt();             }             for(int i=0;i<k;i++){                 arr[block[i]]=temp[i];             }             int []dp=new  int[n+1];             int prev=Integer.MAX_VALUE-1000;             for(int i=1;i<=n;i++){                 if(arr[i]==0){                     if(prev==Integer.MAX_VALUE-1000){                         dp[i]=prev;                     }                     else{                         prev=prev+1;                         dp[i]=prev;                     }                 }                 else{                     prev=Math.min(prev+1,arr[i]);                     dp[i]=prev;                 }             }             prev=Integer.MAX_VALUE-1000;             for(int i=n;i>=1;i--){                 if(arr[i]==0){                     if(prev==Integer.MAX_VALUE-1000){                         dp[i]=Math.min(prev,dp[i]);                     }                     else{                         prev=prev+1;                         dp[i]=Math.min(prev,dp[i]);                     }                 }                 else{                     prev=Math.min(prev+1,arr[i]);                     dp[i]=Math.min(prev,dp[i]);                 }             }             for(int i=1;i<=n;i++){                 System.out.print(dp[i]+"" "");             }             System.out.println();         }         public static void main (String[] args) throws java.lang.Exception{             scan=new FastReader();             int t=scan.nextInt();             while(t-->0){                 solve();                               }         }                                                                                                                                 } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.HashSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.Vector; public class Main { static InputStream inputStream = System.in; static OutputStream outputStream = System.out; static InputReader in = new InputReader(inputStream); static PrintWriter out = new PrintWriter(outputStream); public static void main(String[] args) { int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); int k = in.nextInt(); int[] v1 = new int[k]; int[] v2 = new int[k]; for (int i = 0; i < k; i++) { v1[i] = in.nextInt(); } for (int i = 0; i < k; i++) { v2[i] = in.nextInt(); } int[] res = new int[n + 2]; Arrays.fill(res, 2000000000); for (int i = 0; i < k; i++) { res[v1[i]] = v2[i]; } for (int i = 1; i <= n; i++) { int val = Math.min(res[i], res[i - 1] + 1); res[i] = val; } for (int i = n; i >= 1; i--) { int val1 = Math.min(res[i], res[i + 1] + 1); res[i] = val1; } for (int i = 1; i <= n; i++) { int r = res[i]; out.print(r + "" ""); } out.println(); } out.close(); } } ",0
785,"import java.util.*; import java.io.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; public class Test{         static FastReader scan;         static void solve(){             scan.nextLine();             int n=scan.nextInt();             int k=scan.nextInt();             int []arr=new int[n+1];             int []block=new int[k];             int []temp=new int[k];             for(int i=0;i<k;i++){                 block[i]=scan.nextInt();             }             for(int i=0;i<k;i++){                 temp[i]=scan.nextInt();             }             for(int i=0;i<k;i++){                 arr[block[i]]=temp[i];             }             int []dp=new  int[n+1];             int prev=Integer.MAX_VALUE-1000;             for(int i=1;i<=n;i++){                 if(arr[i]==0){                     if(prev==Integer.MAX_VALUE-1000){                         dp[i]=prev;                     }                     else{                         prev=prev+1;                         dp[i]=prev;                     }                 }                 else{                     prev=Math.min(prev+1,arr[i]);                     dp[i]=prev;                 }             }             prev=Integer.MAX_VALUE-1000;             for(int i=n;i>=1;i--){                 if(arr[i]==0){                     if(prev==Integer.MAX_VALUE-1000){                         dp[i]=Math.min(prev,dp[i]);                     }                     else{                         prev=prev+1;                         dp[i]=Math.min(prev,dp[i]);                     }                 }                 else{                     prev=Math.min(prev+1,arr[i]);                     dp[i]=Math.min(prev,dp[i]);                 }             }             for(int i=1;i<=n;i++){                 System.out.print(dp[i]+"" "");             }             System.out.println();         }         public static void main (String[] args) throws java.lang.Exception{             scan=new FastReader();             int t=scan.nextInt();             while(t-->0){                 solve();                               }         }                                                                                                                                 } ","import java.io.PrintWriter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class a{      public static void main(String args[]) throws java.lang.Exception{      FastScanner s=new FastScanner(); PrintWriter out=new PrintWriter(System.out); int t=s.nextInt(); for(int tt=0;tt<t;tt++) { int n=s.nextInt(),k=s.nextInt(); int pos[]=s.readArray(k); int temp[]=s.readArray(k); long ans[]=new long[n]; Arrays.fill(ans,Integer.MAX_VALUE); for(int i=0;i<k;i++){ ans[pos[i]-1]=temp[i]; } for(int i=1;i<n;i++){ ans[i]=Math.min(ans[i-1]+1,ans[i]); } for(int i=n-2;i>=0;i--){ ans[i]=Math.min(ans[i],ans[i+1]+1); } for(int i=0;i<n;i++){ out.print(ans[i]+"" ""); } out.println(); } out.close();     }                                    } ",0
786,"import java.util.*; import java.io.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; public class Test{     static class Pair implements Comparable<Pair>{     int wt;     int idx;     Pair(int x,int y){         this.wt=x;         this.idx=y;     }           }        public static void main (String[] args) throws java.lang.Exception{         FastReader scan=new FastReader();         int t=scan.nextInt();         while(t-->0){             int n=scan.nextInt();             int m=scan.nextInt();             int x=scan.nextInt();             int[]arr=new int[n];             for(int i=0;i<n;i++){                 arr[i]=scan.nextInt();             }             Queue<Pair>q=new PriorityQueue<>();             for(int i=1;i<=m;i++){                 q.add(new Pair(0,i));             }             System.out.println(""YES"");             for(int i=0;i<n;i++){                 Pair temp=q.poll();                 int wt=temp.wt;                 int idx=temp.idx;                 System.out.print(idx+"" "");                                  q.add(new Pair(wt+arr[i],idx));             }             System.out.println();         }     }          } ","import java.util.*; import java.io.*; public class JavaTract { static class Pair implements Comparable<Pair>{     int first;     int second;     Pair(int x,int y){         this.first=x;         this.second=y;     }         }     public static void main (String[] args)      {         Scanner scan=new Scanner(System.in);         int t=scan.nextInt();         while(t-->0){             int n=scan.nextInt();             int m=scan.nextInt();             int x=scan.nextInt();             int[]arr=new int[n];             for(int i=0;i<n;i++){                 arr[i]=scan.nextInt();             }                          Queue<Pair> set = new PriorityQueue<>();             for(int i=1;i<=m;i++){                                set.add(new Pair(0,i));             }                          System.out.println(""YES"");             for(int i=0;i<n;i++){                 Pair temp=set.poll();                                  int first = temp.first;                 int second = temp.second;                 System.out.print(second+"" "");                                  set.add(new Pair(first+arr[i],second));                              }             System.out.println();         }     }         } ",1
787,"import java.util.*; import java.io.*; import java.lang.*; import java.util.jar.JarEntry; public class Main{          public static void main(String args[]){         InputReader in=new InputReader(System.in);         TASK solver = new TASK();         int t=1;         t = in.nextInt();         for(int i=1;i<=t;i++)         {             solver.solve(in,i);         }     }     static class TASK {         void solve(InputReader in, int testNumber) {            int n = in.nextInt();            int a[][] = new int[n][5];            for(int i=0;i<n;i++)            {                char[] s = in.next().toCharArray();                for(int j=0;j<s.length;j++)                {                    a[i][s[j]-'a']++;                }            }            int max=0;            int x[] = new int[n];            for(int j=0;j<=4;j++)            {                for(int i=0;i<n;i++)                {                    x[i]=2*a[i][j];                    for(int k=0;k<5;k++)                    {                        x[i]-=a[i][k];                    }                }                Arrays.sort(x);                int c=0,sum=0;                for(int i=n-1;i>=0;i--)                {                    sum+=x[i];                    if(sum<=0)                        break;                    c++;                }                max=Math.max(max,c);            }             System.out.println(max);         }     }                } ","import java.util.*; import java.io.*;   public class Main {       public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             String[] s = new String[n];             for(int i=0; i<n; i++)                 s[i] = sc.next();             int MAX = 0;             for(char c = 'a'; c <= 'e'; c++){                 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());                  for(int i=0; i<n; ++i) {                     int curChar = 0;                     int otherChar = 0;                     for(int j=0; j<s[i].length(); j++) {                         if(s[i].charAt(j) == c)                             curChar++;                         else                             otherChar++;                     }                     int diff = curChar - otherChar;                     pq.add(diff);                 }                 int cur = 0;                 int numberOfWords = 0;                 while(!pq.isEmpty()){                     if(cur + pq.peek() > 0){                         cur += pq.poll();                         numberOfWords++;                     }else{                         break;                     }                 }                 MAX = Math.max(MAX, numberOfWords);             }             pw.println(MAX);         }         pw.close();     }        } ",0
788,"import java.util.*; import java.io.*; import java.lang.*; import static java.lang.Math.*; public class cp{     static BufferedReader br;     static StringTokenizer st;     public static void main(String[] args)throws IOException{         br = new BufferedReader(new InputStreamReader(System.in));         List<Integer> answer = new ArrayList<Integer>();         for(int t=Integer.parseInt(br.readLine()); t>0; t--){             st = readLine();             int n = tokenInt();             String[] words = new String[n];             int i=0;             while(n-- >0){                 words[i] = br.readLine();                 i++;             }             answer.add(new Solver().solve(words));         }         for (int ans : answer ) System.out.println(ans);     }     static StringTokenizer readLine() throws IOException { return new StringTokenizer(br.readLine()); }     static int tokenInt() { return Integer.parseInt(st.nextToken()); }                                         } class Solver{     public int solve(String[] words) throws IOException{         char[] alphabets = {'a', 'b', 'c', 'd', 'e'};                  int[][] arr = new int[5][words.length];         int i=0;         for(String s : words) {             char[] wordArr = s.toCharArray();             int j=0;             for (char alpha : alphabets) {                 int counter = 0;                 for(char letter : wordArr){                     if(alpha == letter){                         counter++;                     }                 }                 arr[j][i] = 2*counter - s.length();                                  j++;             }                          i++;         }         int[] ans = new int[5];         int m=0;         for (int[] ar : arr) {                          Arrays.sort(ar);             int val=0;             int counter = 0;             for(i=ar.length-1; i>=0; i--){                 val += ar[i];                 if(val>0){                     counter++;                 } else break;             }             ans[m] = counter;             m++;                      }                  return Arrays.stream(ans).max().getAsInt();     } } ","import java.util.*; import java.io.*; import java.lang.*; import static java.lang.Math.*; public class cp{     static BufferedReader br;     static StringTokenizer st;     public static void main(String[] args)throws IOException{         br = new BufferedReader(new InputStreamReader(System.in));         List<Integer> answer = new ArrayList<Integer>();         for(int t=Integer.parseInt(br.readLine()); t>0; t--){             st = readLine();             int n = tokenInt();             String[] words = new String[n];             int i=0;             while(n-- >0){                 words[i] = br.readLine();                 i++;             }             answer.add(new Solver().solve(words));         }         for (int ans : answer ) System.out.println(ans);     }     static StringTokenizer readLine() throws IOException { return new StringTokenizer(br.readLine()); }     static int tokenInt() { return Integer.parseInt(st.nextToken()); }                                         } class Solver{     public int solve(String[] words) throws IOException{         char[] alphabets = {'a', 'b', 'c', 'd', 'e'};         int[][] arr = new int[5][words.length];         int i=0;         for(String s : words) {             char[] wordArr = s.toCharArray();             int j=0;             for (char alpha : alphabets) {                 int counter = 0;                 for(char letter : wordArr){                     if(alpha == letter)                         counter++;                 }                 arr[j][i] = 2*counter - s.length();                 j++;             }             i++;         }         int[] ans = new int[5];         int m=0;         for (int[] ar : arr) {             Arrays.sort(ar);             int val=0;             int counter=0;             for(i=ar.length-1; i>=0; i--){                 val += ar[i];                 if(val>0) counter++;                 else break;             }             ans[m] = counter;             m++;         }         return Arrays.stream(ans).max().getAsInt();     } } ",1
789,"import java.util.*; import java.io.*; import java.lang.*; import static java.lang.Math.*; public class cp{     static BufferedReader br;     static StringTokenizer st;     public static void main(String[] args)throws IOException{         br = new BufferedReader(new InputStreamReader(System.in));         List<int[]> answer = new ArrayList<int[]>();         for(int t=Integer.parseInt(br.readLine()); t>0; t--){             st = readLine();             st = readLine();             int n = tokenInt();             int k = tokenInt();             st = readLine();             int[] posArr = readIntArray(k);             st = readLine();             int[] tempArr = readIntArray(k);             answer.add(new Solver().solve(n, k, posArr, tempArr));         }         ListIterator<int[]> it = answer.listIterator();         while (it.hasNext())             printArr(it.next());     }     static StringTokenizer readLine() throws IOException { return new StringTokenizer(br.readLine()); }     static int tokenInt() { return Integer.parseInt(st.nextToken()); }                    static int[] readIntArray(int n) {         int[] a=new int[n];         for (int i=0; i<n; i++) a[i]=tokenInt();         return a;     }               static void printArr(int[] arr){         for (int i=0; i<arr.length; i++) System.out.print(arr[i] + "" "");         System.out.println();         return;     } } class Solver{     public int[] solve(int n, int k, int[] posArr, int[] tempArr) throws IOException{                           int[] answer = new int[n];         for(int i=0; i<n; i++)             answer[i] = Integer.MAX_VALUE / 2;         for(int i=0; i<k; i++)             answer[posArr[i]-1] = tempArr[i];         for (int i=1; i<n; i++)             answer[i] = min(answer[i-1]+1, answer[i]);         for (int j=n-2; j>=0; j--)             answer[j] = min(answer[j+1]+1, answer[j]);         return answer;     } } ","import java.util.*; import java.io.*; public class E {     public static void main(String[] args) throws IOException {         setIO();         int INF = 2000000000;         int Q = ni();         while (Q-- > 0) {         rl();         st = nl();         int N = ni(st), K = ni(st);         int[] P = nia(K);         int[] T = nia(K);         int[] A = new int[N];         Arrays.fill(A, INF);         for (int i = 0; i < K; i++) {         A[P[i]-1] = T[i]; }         int[] R = new int[N];         R[N-1] = A[N-1];         for (int i = N-2; i >= 0; i--) { R[i] = Math.min(R[i+1] + 1, A[i]); }         int[] L = new int[N];         L[0] = A[0];         for (int i = 1; i < N; i++) {         L[i] = Math.min(L[i-1] + 1, A[i]); }         for (int i = 0; i < N; i++) {         out.print(Math.min(L[i], R[i]) + "" ""); }         out.println(); }         f.close();         out.close();     }     static BufferedReader f;     static PrintWriter out;     static StringTokenizer st;     static String rl() throws IOException {         return f.readLine();     }     static int ni(StringTokenizer st) {         return Integer.parseInt(st.nextToken());     }          static int ni() throws IOException {         return Integer.parseInt(rl());     }          static StringTokenizer nl() throws IOException {         return new StringTokenizer(rl());     }     static int[] nia(int N) throws IOException {         StringTokenizer st = nl();         int[] A = new int[N];         for (int i = 0; i < N; i++)             A[i] = ni(st);         return A;     }     static void setIn() {         f = new BufferedReader(new InputStreamReader(System.in));     }     static void setOut() {         out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));     }          static void setIO() {         setIn();         setOut();     } } ",0
790,"import java.util.*; import java.io.*; import java.lang.*; public class Problem {     public static void dfs(int u, int parent, ArrayList<ArrayList<Integer>> graph,long[][] dp,Pair[] arr)     {         ArrayList<Integer> adja=graph.get(u);         for(int i=0;i<adja.size();i++)         {             int adja_ele=adja.get(i);             if(adja_ele!=parent)             {                 dfs(adja_ele, u,graph,dp,arr);                 long res1=Math.max(Math.abs(arr[u].getL()-arr[adja_ele].getL())+dp[adja_ele][0],Math.abs(arr[u].getL()-arr[adja_ele].getR())+dp[adja_ele][1]);                 long res2=Math.max(Math.abs(arr[u].getR()-arr[adja_ele].getL())+dp[adja_ele][0],Math.abs(arr[u].getR()-arr[adja_ele].getR())+dp[adja_ele][1]);                 dp[u][0]+=res1;                 dp[u][1]+=res2;             }         }     }     public static void main(String[] args) throws IOException{         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int t =Integer.parseInt(br.readLine());         while(t-- >0)         {             int n =Integer.parseInt(br.readLine().trim());             Pair[] arr=new Pair[n+1];             for(int i=1;i<n+1;i++) {                 String[] sa=br.readLine().trim().split("" "");                 int l=Integer.parseInt(sa[0]);                 int r=Integer.parseInt(sa[1]);                 Pair p=new Pair(l,r);                 arr[i]=p;             }             ArrayList<ArrayList<Integer>> graph=new ArrayList<ArrayList<Integer>>(n+1);             for(int i=0;i<n+1;i++)             {                graph.add(new ArrayList<Integer>());             }             for(int i=0;i<n-1;i++)             {                 String[] sa=br.readLine().trim().split("" "");                 int u=Integer.parseInt(sa[0]);                 int v=Integer.parseInt(sa[1]);                 graph.get(u).add(v);                 graph.get(v).add(u);             }             long[][] dp=new long[n+1][2];             dfs(1,0,graph,dp,arr);             System.out.println(Math.max(dp[1][0],dp[1][1]));         }     } } class Pair {     private int l;     private int r;     public Pair(int l, int r) {         this.l = l;         this.r = r;     }     public int getL() {         return l;     }          public int getR() {         return r;     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.List; public class Exam1 {          static int[] l, r;     static List<Integer>[] adj;     static Long[][] a;     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         String s = br.readLine();         int t = Integer.parseInt(s);         while (t-- > 0) {             s = br.readLine();             int n = Integer.parseInt(s);             l = new int[n];             r = new int[n];             for (int i = 0; i < n; i++) {                 s = br.readLine();                 String[] num = s.split("" "");                 l[i] = Integer.parseInt(num[0]);                 r[i] = Integer.parseInt(num[1]);             }             adj = new ArrayList[n];             for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();             for (int i = 1; i < n; i++) {                 s = br.readLine();                 String[] num = s.split("" "");                 int u = Integer.parseInt(num[0]) - 1, v = Integer.parseInt(num[1]) - 1;                 adj[u].add(v);                 adj[v].add(u);             }             a = new Long[n][2];             dfs(0, 0);             System.out.println(Math.max(a[0][0], a[0][1]));         }     }     private static void dfs(int cur, int fa) {         a[cur][0] = a[cur][1] = 0L;         for (int i = 0; i < adj[cur].size(); i++) {             int p = adj[cur].get(i);             if (p == fa) continue;             dfs(p, cur);             a[cur][0] += Math.max(a[p][0] + Math.abs(l[cur] - l[p]), a[p][1] + Math.abs(l[cur] - r[p]));             a[cur][1] += Math.max(a[p][0] + Math.abs(r[cur] - l[p]), a[p][1] + Math.abs(r[cur] - r[p]));         }     } } ",0
791,"import java.util.*; import java.io.*; import java.lang.*; public class Solution {     BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     PrintWriter out = new PrintWriter(System.out);     StringTokenizer st = new StringTokenizer("""");     String next() {         if (!st.hasMoreTokens()) {             try {                 st = new StringTokenizer(br.readLine());             } catch (Exception e) {             }         }         return st.nextToken();     }     int nextInt() {         return Integer.parseInt(next());     }          public static void main(String[] args) {         new Solution().solve();     }     long res = Long.MAX_VALUE;     List<Integer> l = new ArrayList<>(), r = new ArrayList<>();     long dp[][];     long ok(int i, int j) {         if (dp[i][j] != -1)             return dp[i][j];         if (i >= l.size()) {             return 0;         }         if (j >= r.size())             return Integer.MAX_VALUE;         long op1 = ok(i + 1, j + 1) + Math.abs(l.get(i) - r.get(j));         long op2 = ok(i, j + 1);         return dp[i][j] = Math.min(op1, op2);     }     void solve() {         int t = 1;                  for (int tt = 0; tt < t; tt++) {             int n = nextInt();             int arr[] = new int[n];             for (int i = 0; i < n; i++) {                 arr[i] = nextInt();                 if (arr[i] == 0)                     r.add(i + 1);                 else                     l.add(i + 1);             }             dp = new long[n][n];             for (int i = 0; i < n; i++)                 Arrays.fill(dp[i], -1);             out.println(ok(0, 0));         }         out.close();     } } ","import java.util.*; import java.io.*; public class _1525_D {     public static void main(String[] args) throws IOException {         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int n = Integer.parseInt(in.readLine());         int[] a = new int[n];         StringTokenizer line = new StringTokenizer(in.readLine());         int c = 0;         for (int i = 0; i < n; i++) {             a[i] = Integer.parseInt(line.nextToken());             if (a[i] == 1)                 c++;         }         int[] pos = new int[c];         int count = 0;         for (int i = 0; i < n; i++) {             if (a[i] == 1) {                 pos[count] = i;                 count++;             }         }         int[][] dp = new int[c + 1][n];         for (int i = 1; i <= c; i++) {             Arrays.fill(dp[i], Integer.MAX_VALUE);         }         for (int i = 1; i <= c; i++) {             for (int j = 0; j < n; j++) {                 if (j > 0) {                     if (a[j] == 0) {                         if (dp[i - 1][j - 1] != Integer.MAX_VALUE) {                             dp[i][j] = dp[i - 1][j - 1] + Math.abs(j - pos[i - 1]);                         }                     }                     dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);                 } else {                     if (a[j] == 0 && i == 1) {                         dp[i][j] = Math.abs(j - pos[i - 1]);                     }                 }             }         }         out.println(dp[c][n - 1]);         in.close();         out.close();     } } ",0
792,"import java.util.*; import java.io.*; import java.math.*; import java.lang.*; public class MinimumGridPath {          static int mod = 1000000007;          public static void main(String[] args) throws Exception {         Reader scn = new Reader();         PrintWriter pw = new PrintWriter(System.out);         int t = scn.nextInt();         outer : while(t-->0){             int n = scn.nextInt();             long[] arr = new long[n];             for(int i=0; i<n; i++){             arr[i] = scn.nextInt();             }             long ans = Long.MAX_VALUE;            int k = 2;            long oddSum = arr[0];            long evenSum = 0;            long oddMin = arr[0];            long evenMin = Long.MAX_VALUE;            long oddCount = 1;            long evenCount = 0;            while(k <= n){            if(k % 2 == 1){            oddSum += arr[k-1];            oddCount++;            oddMin = Math.min(oddMin, arr[k-1]);            }else{            evenSum += arr[k-1];            evenCount++;            evenMin = Math.min(evenMin, arr[k-1]);            }            long sum = oddSum - oddMin + oddMin*(n - oddCount + 1) + evenSum - evenMin + evenMin*(n - evenCount + 1);            ans = Math.min(ans, sum);            k++;            }            pw.println(ans);         }         pw.close();     }                                                                                                           } ","import java.util.*; import java.awt.Point; import java.io.*; import java.math.BigInteger; public class Solutions { static int MAX=Integer.MAX_VALUE; static int MIN=Integer.MIN_VALUE; static FastScanner scr=new FastScanner(); static PrintStream out=new PrintStream(System.out); public static void main(String []args) { int T=scr.nextInt(); t:for(int tt=0;tt<T;tt++) { int n=scr.nextInt(); int []a=scr.readArray(n); long min[]=new long[2];     long sum[]=new long[2];  sum  [0]=a[0]; sum  [1]=0; min[0]=a[0]; min[1]=MAX; long ans=Long.MAX_VALUE; for(int i=1;i<n;i++) { min[i%2]=Math.min(min[i%2],a[i]); sum[i%2]+=a[i]; int odd=(i+2)/2; int even=(i+1)/2; ans=Math.min(ans,sum[0]+((n-odd)*min[0])+sum[1]+((n-even)*min[1])); } out.println(ans); } } } ",0
793,"import java.util.*; import java.io.*; import java.math.*; import java.sql.Array; import java.sql.ResultSet; import java.sql.SQLException; public class Solution {          static long mod = (long)(1e9 + 7);                                                                                                                         static Reader sc = new Reader();  static StringBuilder sb = new StringBuilder();  public static void main(String args[]) throws IOException {  int tc = 1;   tc = sc.nextInt();  for(int i = 1 ; i<=tc ; i++) {  TEST_CASE();     }  System.out.println(sb);  }  static void TEST_CASE() { int n = sc.nextInt(); ArrayList<ArrayList<Integer>> adj = new ArrayList<>(); for(int i =0 ; i<n ; i++) adj.add(new ArrayList<>()); int[] U = new int[n-1] , V = new int[n-1]; for(int i = 0 ; i<n-1 ; i++) { int u = sc.nextInt()-1 , v = sc.nextInt()-1; U[i] = u; V[i] = v; adj.get(u).add(v); adj.get(v).add(u); } int ind = -1; for(int i =0 ; i<n ; i++) { if(adj.get(i).size()>2) { sb.append(""-1\n""); return; } if(adj.get(i).size() == 1) { ind = i; } } Map<String , Integer> map = new HashMap<>(); dfs(adj, ind, -1, true, map); for(int i =0 ; i<n-1 ; i++) {  int u = U[i];  int v = V[i];  if(map.containsKey(u+"" ""+v)) sb.append(map.get(u+"" ""+v)+"" "");  else sb.append(map.get(v+"" ""+u)+"" ""); } sb.append(""\n"");  }  static void dfs(ArrayList<ArrayList<Integer>> adj ,int u , int p ,boolean eve ,Map<String , Integer> map ) {  if(eve) {  map.put(u+"" ""+p, 2);  }else {  map.put(u+"" ""+p, 3);  }  for(int v:adj.get(u)) {  if(v == p) continue;  eve = !eve;  dfs(adj, v, u, eve, map);  }  } } ","import java.io.*; import java.util.*; public class C {     static FastScanner sc = new FastScanner();     static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));     static class pair{         public pair(int x, int y) {             this.x = x;             this.y = y;         }         int x;         int y;                       }     static void solve(){         int n = sc.nextInt();         int[]degree = new int[n];         List<Integer>[]grid = new List[n];         for (int i = 0; i < n; i++) {             grid[i] = new ArrayList();         }         List<pair>list = new ArrayList<>();         for (int i = 0; i < n - 1; i++) {             int x = sc.nextInt() - 1;             int y = sc.nextInt() - 1;             grid[x].add(y);             grid[y].add(x);             degree[x]++;             degree[y]++;             list.add(new pair(Math.min(x,y),Math.max(x,y)));         }         int begin = 0;         for(int i = 0;i < degree.length;i++){             if(degree[i] > 2){                 System.out.println(-1);                 return;             }             if(degree[i] == 1){                 begin = i;             }         }         boolean[]used = new boolean[n];         int[]p = new int[]{5,2,11,2};         int idx = 0;         HashMap<pair,Integer>map = new HashMap<>();         while (!used[begin]){             used[begin] = true;             for(int next : grid[begin]){                 if(used[next])                     continue;                 map.put(new pair(Math.min(begin,next),Math.max(begin,next)),p[idx % 4]);                 idx++;                 begin = next;             }         }         StringBuilder bd = new StringBuilder();         for(pair pp : list){             bd.append(map.get(pp) + "" "");         }         System.out.println(bd.toString().trim());     }     public static void main(String[] args) {         int n = sc.nextInt();         for(int i = 0;i < n;i++){             solve();         }     }      } ",0
794,"import java.util.*; import java.io.*; import java.math.*; import java.sql.Array; import java.sql.ResultSet; import java.sql.SQLException; public class Solution {          static long mod = (long)(1e9 + 7);                                                                                                                         static Reader sc = new Reader();  static StringBuilder sb = new StringBuilder();  public static void main(String args[]) throws IOException {  int tc = 1;   tc = sc.nextInt();  for(int i = 1 ; i<=tc ; i++) {  TEST_CASE();     }  System.out.println(sb);  }  static void TEST_CASE() { int n = sc.nextInt(); ArrayList<ArrayList<Integer>> adj = new ArrayList<>(); for(int i =0 ; i<n ; i++) adj.add(new ArrayList<>()); int[] U = new int[n-1] , V = new int[n-1]; for(int i = 0 ; i<n-1 ; i++) { int u = sc.nextInt()-1 , v = sc.nextInt()-1; U[i] = u; V[i] = v; adj.get(u).add(v); adj.get(v).add(u); } int ind = -1; for(int i =0 ; i<n ; i++) { if(adj.get(i).size()>2) { sb.append(""-1\n""); return; } if(adj.get(i).size() == 1) { ind = i; } } Map<String , Integer> map = new HashMap<>(); dfs(adj, ind, -1, true, map); for(int i =0 ; i<n-1 ; i++) {  int u = U[i];  int v = V[i];  if(map.containsKey(u+"" ""+v)) sb.append(map.get(u+"" ""+v)+"" "");  else sb.append(map.get(v+"" ""+u)+"" ""); } sb.append(""\n"");  }  static void dfs(ArrayList<ArrayList<Integer>> adj ,int u , int p ,boolean eve ,Map<String , Integer> map ) {  if(eve) {  map.put(u+"" ""+p, 2);  }else {  map.put(u+"" ""+p, 3);  }  for(int v:adj.get(u)) {  if(v == p) continue;  eve = !eve;  dfs(adj, v, u, eve, map);  }  } } ","import java.io.*; import java.util.*; public class new1{ public static void dfs(ArrayList<ArrayList<int[]> > aList1, int p, int u, int[] ans, int v) { int[] aa = aList1.get(u).get(0); if(aa[0] != p) { ans[aa[1]] = v; if(v == 2) dfs(aList1, u, aa[0], ans, 3); else dfs(aList1, u, aa[0], ans, 2); } else if(aList1.get(u).size() > 1){ aa = aList1.get(u).get(1); ans[aa[1]] = v; if(v == 2) dfs(aList1, u, aa[0], ans, 3); else dfs(aList1, u, aa[0], ans, 2); } } public static void main(String[] args)  throws IOException{ BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out)); FastReader s = new FastReader(); int t = s.nextInt(); for(int z = 0; z < t; z++) { int n = s.nextInt(); ArrayList<ArrayList<int[]> > aList1 =  new ArrayList<ArrayList<int[]> >(n + 1);         for (int j = 1; j <= n + 1; j++) {              ArrayList<int[]> list = new ArrayList<>();             aList1.add(list);         } for(int j = 0; j < n - 1; j ++) { int u = s.nextInt(); int v = s.nextInt(); int[] aa = {v, j}; int[] bb = {u, j}; aList1.get(u).add(aa); aList1.get(v).add(bb); } int pos = 1; int ind = -1; for(int i = 1; i <= n; i++) { if(aList1.get(i).size() > 2) { pos = 0; break; } if(aList1.get(i).size() == 1) { ind = i; } } if(pos == 0) { output.write(-1 + ""\n""); } else { int[] ans = new int[n - 1]; dfs(aList1, -1, ind, ans, 2); for(int i = 0; i < n - 1; i++) { output.write(ans[i] + "" ""); } output.write(""\n""); } }    output.flush();   } }   ",0
795,"import java.util.*; import java.io.*; import java.math.*; public class A { private static long[][] dp; private static ArrayList<Integer> lis1,lis0; public static void process() throws IOException { int n = sc.nextInt(); int arr[] = sc.readArray(n); lis1 = new ArrayList<Integer>(); lis0 = new ArrayList<Integer>(); for(int i = 0; i<n; i++) { if(arr[i] == 1)lis1.add(i+1); else lis0.add(i+1); } Collections.sort(lis0); Collections.sort(lis1); int n0 = lis0.size(); int n1 = lis1.size(); dp = new long[n0+1][n1+1]; for(int i = 0; i<=n0; i++) { Arrays.fill(dp[i], -1); } long ans = solve(0,0,n0,n1); System.out.println(ans); } private static long solve(int i, int j, int n0, int n1) { if(j == n1)return 0; if(i == n0)return INF; if(dp[i][j] != -1)return dp[i][j]; long ans = solve(i+1, j, n0, n1); ans = Math.min(ans,Math.abs(lis0.get(i) - lis1.get(j)) + solve(i+1, j+1, n0, n1)); return dp[i][j] = ans; } private static long INF = 2000000000000000000L; static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; int TTT = 1; while (t-- > 0) { process(); } out.flush(); out.close(); } } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger;  public final class B {     static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); static ArrayList<ArrayList<Integer>> g; static long mod=(long)(1e9+7); static int D1[],D2[],par[]; static boolean set[]; static int value[]; static long INF=Long.MAX_VALUE; static int dp[][]; static int N,M; static int A[][],B[][]; static int s=1; public static void main(String args[])throws IOException {   int N=i(); int A[]=input(N); ArrayList<Integer> one=new ArrayList<Integer>(); ArrayList<Integer> zero=new ArrayList<Integer>(); for(int i=1; i<=N; i++) { if(A[i-1]==1)one.add(i); else zero.add(i); } int sum[][]=new int[N+5][N+5]; for(int i=1; i<=one.size(); i++) { for(int j=1; j<=zero.size(); j++) { sum[i][j]=Math.abs(one.get(i-1)-zero.get(j-1)); } } dp=new int[N+5][N+5]; Arrays.fill(dp[0], 0); for(int i=1; i<=one.size(); i++) { for(int j=i; j<=zero.size(); j++) { if(i==j) { dp[i][j]=dp[i-1][j-1]+sum[i][j]; } else { dp[i][j]=Math.min(dp[i][j-1], dp[i-1][j-1]+sum[i][j]); } } } System.out.println(dp[one.size()][zero.size()]); } static long min(long a,long b,long c) { return Math.min(a, Math.min(c, b)); } static int i() { return in.nextInt(); } static int[] input(int N){ int A[]=new int[N]; for(int i=0; i<N; i++) { A[i]=in.nextInt(); } return A; } } ",0
796,"import java.util.*; import java.io.*; import java.math.*; public class A { private static long[][] dp; private static ArrayList<Integer> lis1,lis0; public static void process() throws IOException { int n = sc.nextInt(); int arr[] = sc.readArray(n); lis1 = new ArrayList<Integer>(); lis0 = new ArrayList<Integer>(); for(int i = 0; i<n; i++) { if(arr[i] == 1)lis1.add(i+1); else lis0.add(i+1); } Collections.sort(lis0); Collections.sort(lis1); int n0 = lis0.size(); int n1 = lis1.size(); dp = new long[n0+1][n1+1]; for(int i = 0; i<=n0; i++) { Arrays.fill(dp[i], -1); } long ans = solve(0,0,n0,n1); System.out.println(ans); } private static long solve(int i, int j, int n0, int n1) { if(j == n1)return 0; if(i == n0)return INF; if(dp[i][j] != -1)return dp[i][j]; long ans = solve(i+1, j, n0, n1); ans = Math.min(ans,Math.abs(lis0.get(i) - lis1.get(j)) + solve(i+1, j+1, n0, n1)); return dp[i][j] = ans; } private static long INF = 2000000000000000000L; static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; int TTT = 1; while (t-- > 0) { process(); } out.flush(); out.close(); } } ","import java.util.*; import java.io.*; import java.lang.*; public class Main{     public static void main(String args[]){         InputReader in=new InputReader(System.in);         TASK solver = new TASK();         int t=1;         for(int i=1;i<=t;i++)         {             solver.solve(in,i);         }     }     static class TASK {         static int mod = 1000000007;         static long solve(int a[],ArrayList<Integer> al,int i,int j,long dp[][])         {             if(j<0 || i<0)                 return Integer.MAX_VALUE;             if(i==0 && j==0)                 return 0;             if(j==0)                 return 0;             if(i==0)                 return Integer.MAX_VALUE;             if(dp[i-1][j-1]==-1)             {                 dp[i-1][j-1]=solve(a,al,i-1,j-1,dp);             }             if(dp[i-1][j]==-1)                 dp[i-1][j]=solve(a,al,i-1,j,dp);             if(a[i-1]==1)                 return dp[i-1][j];             dp[i][j]=Math.min(dp[i-1][j],dp[i-1][j-1]+Math.abs(i-al.get(j-1)));             return dp[i][j];         }         void solve(InputReader in, int testNumber) {             int n = in.nextInt();             int a[] = new int[n+1];             long dp[][] = new long[n+1][n+1];             ArrayList<Integer> al = new ArrayList<>();             for(int i=0;i<n;i++) {                 a[i] = in.nextInt();                 if(a[i]==1)                     al.add(i+1);                 Arrays.fill(dp[i],-1);             }             Arrays.fill(dp[n],-1);             System.out.println(solve(a,al,n,al.size(),dp));         }     }                } ",0
797,"import java.util.*; import java.io.*; import java.math.*; public class A { private static long[][] dp; private static ArrayList<Integer> lis1,lis0; public static void process() throws IOException { int n = sc.nextInt(); int arr[] = sc.readArray(n); lis1 = new ArrayList<Integer>(); lis0 = new ArrayList<Integer>(); for(int i = 0; i<n; i++) { if(arr[i] == 1)lis1.add(i+1); else lis0.add(i+1); } Collections.sort(lis0); Collections.sort(lis1); int n0 = lis0.size(); int n1 = lis1.size(); dp = new long[n0+1][n1+1]; for(int i = 0; i<=n0; i++) { Arrays.fill(dp[i], -1); } long ans = solve(0,0,n0,n1); System.out.println(ans); } private static long solve(int i, int j, int n0, int n1) { if(j == n1)return 0; if(i == n0)return INF; if(dp[i][j] != -1)return dp[i][j]; long ans = solve(i+1, j, n0, n1); ans = Math.min(ans,Math.abs(lis0.get(i) - lis1.get(j)) + solve(i+1, j+1, n0, n1)); return dp[i][j] = ans; } private static long INF = 2000000000000000000L; static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; int TTT = 1; while (t-- > 0) { process(); } out.flush(); out.close(); } } ","import java.util.*; import java.lang.*; import java.io.*; public final class Solution {          public static void main(String[] args) throws Exception {                  Reader sc = new Reader();         BufferedWriter op = new BufferedWriter(new OutputStreamWriter(System.out));                    int n=sc.nextInt();           ArrayList<Integer> fill= new ArrayList<Integer>();           ArrayList<Integer> unfilled= new ArrayList<>();           for(int i=0;i<n;i++){               int x =sc.nextInt();               if(x==1){                   fill.add(i);               }else{                   unfilled.add(i);               }           }           Collections.sort(fill);           Collections.sort(unfilled);                                 long[][] dp =new long[fill.size()+1][unfilled.size()+1];            for(int i=0;i<fill.size()+1;i++){               for(int j=0;j<unfilled.size()+1;j++){                   dp[i][j]=Integer.MAX_VALUE;               }           }           for(int i=0;i<unfilled.size()+1;i++){               dp[0][i]=0;           }                                                for(int i=1;i<fill.size()+1;i++){               for(int j=1;j<unfilled.size()+1;j++){                   dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(fill.get(i-1)-unfilled.get(j-1)));               }           }           System.out.println(dp[fill.size()][unfilled.size()]);                                                                              }         } ",0
798,"import java.util.*; import java.io.*; import java.math.*; public class C { private static ArrayList<Integer>[] adj; private static ArrayList<Pair> lis; private static Pair[] arr; public static void process() throws IOException { int n = sc.nextInt(); lis = new ArrayList<C.Pair>(); for(int i = 0; i<n; i++)lis.add(new Pair(sc.nextInt(), sc.nextInt())); adj = new ArrayList[n+1]; for(int i = 0; i<=n; i++)adj[i] = new ArrayList<Integer>(); for(int i = 1; i<n; i++) { int u = sc.nextInt(),v = sc.nextInt(); adj[u].add(v); adj[v].add(u); } arr = new Pair[n+1]; for(int i = 1; i<=n; i++)arr[i] = new Pair(0, 0); dfs(1,-1); System.out.println(Math.max(arr[1].x,arr[1].y)); } private static void dfs(int node, int par) { for(int child : adj[node]) { if(child == par)continue; dfs(child, node); long ff = lis.get(node-1).x; long ss = lis.get(node-1).y; long cff = lis.get(child-1).x; long css = lis.get(child-1).y; long val1 = Math.abs(ff-cff) + arr[child].x; long val2 = Math.abs(ff-css) + arr[child].y; if(val1 > val2) { arr[node].x+=val1; } else { arr[node].x+=val2; } val1 = Math.abs(ss-cff) + arr[child].x; val2 = Math.abs(ss-css) + arr[child].y; if(val1 > val2) { arr[node].y+=val1; } else { arr[node].y+=val2; } } } static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; t = sc.nextInt(); int TTT = 1; while (t-- > 0) { process(); } out.flush(); out.close(); } static class Pair implements Comparable<Pair> { long x, y; Pair(long x, long y) { this.x = x; this.y = y; } } } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger;  public final class B {      static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); static ArrayList<Integer> g[]; static long L[],R[],dp[][]; public static void main(String args[])throws IOException {   int T=i(); outer:while(T-->0) { int N=i(); setGraph(N); for(int i=1; i<=N; i++) { L[i]=l(); R[i]=l(); } for(int i=1; i<N; i++) { int a=i(),b=i(); g[a].add(b); g[b].add(a); } f(1,-1); out.println(Math.max(dp[0][1], dp[1][1])); } out.close(); } static void f(int n,int p) { for(int c:g[n]) { if(c!=p) { f(c,n); long a=dp[0][c]+Math.abs(L[c]-L[n]); long b=dp[1][c]+Math.abs(R[c]-L[n]); dp[0][n]+=Math.max(a, b); a=dp[0][c]+Math.abs(L[c]-R[n]); b=dp[1][c]+Math.abs(R[c]-R[n]); dp[1][n]+=Math.max(a, b); } } } static void setGraph(int N) { g=new ArrayList[N+1]; dp=new long[2][N+1]; L=new long[N+1]; R=new long[N+1]; for(int i=0; i<=N; i++) { g[i]=new ArrayList<Integer>(); } } static int i() { return in.nextInt(); } static long l() { return in.nextLong(); } } ",0
799,"import java.util.*; import java.io.*; import java.math.*; public class C1529 {     public static void main(String[] args) throws IOException {         PrintWriter out = new PrintWriter(System.out);         Reader s = new Reader();         int t = s.i();         while (t-- > 0) {             int n = s.i();             pairLong [] arr = new pairLong[n];             for (int i=0;i<n;i++) {                 long x = s.l() , y = s.l();                 arr[i] = new pairLong(x,y);             }             ArrayList<Integer>[] tree = new ArrayList[n+1];             for (int i=0;i<=n;i++) tree[i] = new ArrayList<>();             for (int i=0;i<n-1;i++) {                 int x = s.i() , y = s.i();                 tree[x].add(y);                 tree[y].add(x);             }             pairLong[] dp = new pairLong[n+1];             boolean [] vis = new boolean[n+1];             pairLong x = value(tree,arr,dp,1,vis);             out.println(Math.max(x.first,x.second));         }         out.flush();     }     private static pairLong value(ArrayList<Integer>[] tree , pairLong [] arr , pairLong [] dp , int in , boolean [] vis) {         if (dp[in] != null) return dp[in];         vis[in] = true;         long a = 0L , b = 0L;         for (int x : tree[in]) {             if (!vis[x]) {                 pairLong y = value(tree,arr,dp,x,vis);                 a += Math.max(Math.abs(arr[in-1].first-arr[x-1].first) + y.first,Math.abs(arr[in-1].first-arr[x-1].second) + y.second);                 b += Math.max(Math.abs(arr[in-1].second-arr[x-1].first) + y.first,Math.abs(arr[in-1].second-arr[x-1].second) + y.second);             }         }         dp[in] = new pairLong(a,b);         return dp[in];     }                                                            static class pairLong implements Comparator<pairLong> {         long first, second;         pairLong() {         }         pairLong(long first, long second) {             this.first = first;             this.second = second;         }              } } ","import java.io.BufferedReader; import java.util.StringTokenizer; import java.io.InputStreamReader; import java.io.IOException; import java.io.PrintWriter; import java.util.ArrayList; public class C {     static int[][] lr = new int[2][(int)2e5+10];     static long[][] dp = new long[2][(int)2e5+10];     static ArrayList<ArrayList<Integer>> g;     public static void main(String[] args) {                  FastReader fr = new FastReader();         PrintWriter out = new PrintWriter(System.out, true);         int cases = fr.nextInt();         for(int c = 0; c < cases; c++) {             int nodes = fr.nextInt();             g = new ArrayList<ArrayList<Integer>>();                          for(int i = 1; i <= nodes; i++) {                 lr[0][i] = fr.nextInt();                 lr[1][i] = fr.nextInt();             }             for(int i = 0; i <= nodes; i++) {                 g.add(new ArrayList<Integer>());             }             for(int i = 0; i < nodes-1; i++) {                 int f = fr.nextInt();                 int t = fr.nextInt();                 g.get(f).add(t);                 g.get(t).add(f);             }             DFS(1, -1);             out.write(Math.max(dp[0][1], dp[1][1]) + ""\n"");         }         out.close();     }     static void DFS(int v, int p) {         dp[0][v] = dp[1][v] = 0;         for(Integer u : g.get(v)) {             if (u == p) continue;             DFS(u, v);             dp[0][v] += Math.max(Math.abs(lr[0][v] - lr[1][u]) + dp[1][u], dp[0][u] + Math.abs(lr[0][v] - lr[0][u]));             dp[1][v] += Math.max(Math.abs(lr[1][v] - lr[1][u]) + dp[1][u], dp[0][u] + Math.abs(lr[1][v] - lr[0][u]));         }     }      } ",0
800,"import java.util.*; import java.io.*; import java.math.*; public class Coder {   static int n, k;   static long a[];   static int pos[];   static int temp[];   static StringBuilder str = new StringBuilder("""");   static int cnt[][] = new int[(int)1e5+5][2];   static void solve() {     long []l = new long[n];     long []r = new long[n];     long p = Integer.MAX_VALUE;     for(int i=0;i<n;i++){         p = Math.min(p+1, a[i]);         l[i] = p;     }     p=Integer.MAX_VALUE;     for(int i=n-1;i>=0;i--){      p = Math.min(p+1, a[i]);      r[i] = p;     }     for(int i=0;i<n;i++){         str.append(Math.min(l[i],r[i])).append("" "");     }     str.append(""\n"");   }   public static void main(String[] args) throws java.lang.Exception {     BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));     int t = Integer.parseInt(bf.readLine().trim());     while (t-- > 0) {       bf.readLine();       String s[] = bf.readLine().trim().split(""\\s+"");       n = Integer.parseInt(s[0]);       k = Integer.parseInt(s[1]);       s = bf.readLine().trim().split(""\\s+"");       pos = new int[k];       temp = new int[k];       a = new long[n];       for(int i=0;i<k;i++) pos[i]=Integer.parseInt(s[i]);       s = bf.readLine().trim().split(""\\s+"");       for(int i=0;i<k;i++) temp[i]=Integer.parseInt(s[i]);       Arrays.fill(a, Integer.MAX_VALUE);       for(int i=0;i<k;i++) a[pos[i]-1] = temp[i];        solve();     }     System.out.print(str);   } } ","import java.io.*; import java.util.*; public class Codeforce {          static int mod = (int) (1e9 + 7);                                   public static void main(String arg[]) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         StringBuilder sb = new StringBuilder();         while (t-- > 0) {                                 br.readLine();                         String s[]=br.readLine().split("" "");                         int n=Integer.parseInt(s[0]);                         int k=Integer.parseInt(s[1]);                         long a[]=new long[n];                         long b[]=new long[n];                         long c[]=new long[n];                         Arrays.fill(c,Integer.MAX_VALUE);                         String s1[]=br.readLine().split("" "");                         s=br.readLine().split("" "");                         for(int i=0;i<k;i++)                             c[Integer.parseInt(s1[i])-1]=Integer.parseInt(s[i]);                         long p=Integer.MAX_VALUE;                         for(int i=0;i<n;i++)                         {                             p=Math.min(p+1,c[i]);                             a[i]=p;                         }                         p=Integer.MAX_VALUE;                         for(int i=n-1;i>=0;i--){                             p=Math.min(p+1,c[i]);                             b[i]=p;                         }                         for(int i=0;i<n;i++)                             sb.append((Math.min(a[i],b[i]))+"" "");                         sb.append(""\n"");                        }         System.out.println(sb);     } } ",1
801,"import java.util.*; import java.io.*; import java.math.*; public class Coder {   static int n, k;   static long a[];   static int pos[];   static int temp[];   static StringBuilder str = new StringBuilder("""");   static int cnt[][] = new int[(int)1e5+5][2];   static void solve() {     long []l = new long[n];     long []r = new long[n];     long p = Integer.MAX_VALUE;     for(int i=0;i<n;i++){         p = Math.min(p+1, a[i]);         l[i] = p;     }     p=Integer.MAX_VALUE;     for(int i=n-1;i>=0;i--){      p = Math.min(p+1, a[i]);      r[i] = p;     }     for(int i=0;i<n;i++){         str.append(Math.min(l[i],r[i])).append("" "");     }     str.append(""\n"");   }   public static void main(String[] args) throws java.lang.Exception {     BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));     int t = Integer.parseInt(bf.readLine().trim());     while (t-- > 0) {       bf.readLine();       String s[] = bf.readLine().trim().split(""\\s+"");       n = Integer.parseInt(s[0]);       k = Integer.parseInt(s[1]);       s = bf.readLine().trim().split(""\\s+"");       pos = new int[k];       temp = new int[k];       a = new long[n];       for(int i=0;i<k;i++) pos[i]=Integer.parseInt(s[i]);       s = bf.readLine().trim().split(""\\s+"");       for(int i=0;i<k;i++) temp[i]=Integer.parseInt(s[i]);       Arrays.fill(a, Integer.MAX_VALUE);       for(int i=0;i<k;i++) a[pos[i]-1] = temp[i];        solve();     }     System.out.print(str);   } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.lang.reflect.Array; import java.util.Arrays; import java.util.StringTokenizer; public class Main {          public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(                 new InputStreamReader(System.in));         int q = Integer.parseInt(br.readLine());         for (int i = 0; i < q; i++) {             br.readLine();             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             int k = Integer.parseInt(st.nextToken());                          st = new StringTokenizer(br.readLine());             int[] a = new int[k];             for (int j = 0; j < k; j++) {                 a[j] = Integer.parseInt(st.nextToken());             }                          st = new StringTokenizer(br.readLine());             int[] t = new int[k];             for (int j = 0; j < k; j++) {                 t[j] = Integer.parseInt(st.nextToken());             }                          int[] c = new int[n];             Arrays.fill(c, Integer.MAX_VALUE);             for (int j = 0; j < k; j++) {                 c[a[j] - 1] = t[j];             }                          long[] left = new long[n];             Arrays.fill(left, Integer.MAX_VALUE);             long p = Integer.MAX_VALUE;             for (int j = 0; j < n; j++) {                 p = Math.min(p + 1, c[j]);                 left[j] = p;             }                          long[] right = new long[n];             Arrays.fill(right, Integer.MAX_VALUE);             p = Integer.MAX_VALUE;             for (int j = n - 1; j >= 0; j--) {                 p = Math.min(p + 1, c[j]);                 right[j] = p;             }             for (int j = 0; j < n; j++) {                 System.out.print(Math.min(left[j], right[j]) + "" "");             }             System.out.println();         }     } } ",1
802,"import java.util.*; import java.io.*; import java.math.*; public class Coder {   static int n, k;   static long a[];   static int pos[];   static int temp[];   static StringBuilder str = new StringBuilder("""");   static int cnt[][] = new int[(int)1e5+5][2];   static void solve() {     long []l = new long[n];     long []r = new long[n];     long p = Integer.MAX_VALUE;     for(int i=0;i<n;i++){         p = Math.min(p+1, a[i]);         l[i] = p;     }     p=Integer.MAX_VALUE;     for(int i=n-1;i>=0;i--){      p = Math.min(p+1, a[i]);      r[i] = p;     }     for(int i=0;i<n;i++){         str.append(Math.min(l[i],r[i])).append("" "");     }     str.append(""\n"");   }   public static void main(String[] args) throws java.lang.Exception {     BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));     int t = Integer.parseInt(bf.readLine().trim());     while (t-- > 0) {       bf.readLine();       String s[] = bf.readLine().trim().split(""\\s+"");       n = Integer.parseInt(s[0]);       k = Integer.parseInt(s[1]);       s = bf.readLine().trim().split(""\\s+"");       pos = new int[k];       temp = new int[k];       a = new long[n];       for(int i=0;i<k;i++) pos[i]=Integer.parseInt(s[i]);       s = bf.readLine().trim().split(""\\s+"");       for(int i=0;i<k;i++) temp[i]=Integer.parseInt(s[i]);       Arrays.fill(a, Integer.MAX_VALUE);       for(int i=0;i<k;i++) a[pos[i]-1] = temp[i];        solve();     }     System.out.print(str);   } } ","import java.util.*; import java.lang.*; import java.io.*;   public class Codeforces {     public static void main(String[] args) throws java.lang.Exception {                  BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));        int t = Integer.parseInt(buf.readLine());         StringBuilder sb = new StringBuilder();        for (int i = 0; i < t; i++) {            String st=buf.readLine();           String st1[]=(buf.readLine()).split("" "");           int n=Integer.parseInt(st1[0]);           int k=Integer.parseInt(st1[1]);           int a[]=new int[k];           int temp[]=new int[k];           long arr[]=new long[n];           String st2[]=(buf.readLine()).split("" "");            String st3[]=(buf.readLine()).split("" "");            for(int j=0;j<k;j++)            {                a[j]=Integer.parseInt(st2[j]);                temp[j]=Integer.parseInt(st3[j]);            }           for(int j=0;j<k;j++)           {               arr[a[j]-1]=temp[j];           }           long min=Integer.MAX_VALUE;           long left[]=new long[n];           long right[]=new long[n];           if(arr[0]==0)               left[0]=min;           else               left[0]=arr[0];           for(int j=1;j<n;j++)           {               if(arr[j]==0)               {                   left[j]=left[j-1]+1;               }               else               {                   left[j]=Math.min(left[j-1]+1,arr[j]);               }           }           if(arr[n-1]==0)               right[n-1]=min;           else               right[n-1]=arr[n-1];           for(int j=n-2;j>=0;j--)           {               if(arr[j]==0)               {                   right[j]=right[j+1]+1;               }               else               {                   right[j]=Math.min(right[j+1]+1,arr[j]);               }           }           for(int j=0;j<n;j++)           {               arr[j]=Math.min(left[j],right[j]);               sb.append(arr[j]+"" "");           }           sb.append(""\n"");         }         System.out.println(sb);     } } ",0
803,"import java.util.*; import java.io.*; import java.math.*; public class Coder {   static int n, k;   static long a[];   static int pos[];   static int temp[];   static StringBuilder str = new StringBuilder("""");   static int cnt[][] = new int[(int)1e5+5][2];   static void solve() {     long []l = new long[n];     long []r = new long[n];     long p = Integer.MAX_VALUE;     for(int i=0;i<n;i++){         p = Math.min(p+1, a[i]);         l[i] = p;     }     p=Integer.MAX_VALUE;     for(int i=n-1;i>=0;i--){      p = Math.min(p+1, a[i]);      r[i] = p;     }     for(int i=0;i<n;i++){         str.append(Math.min(l[i],r[i])).append("" "");     }     str.append(""\n"");   }   public static void main(String[] args) throws java.lang.Exception {     BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));     int t = Integer.parseInt(bf.readLine().trim());     while (t-- > 0) {       bf.readLine();       String s[] = bf.readLine().trim().split(""\\s+"");       n = Integer.parseInt(s[0]);       k = Integer.parseInt(s[1]);       s = bf.readLine().trim().split(""\\s+"");       pos = new int[k];       temp = new int[k];       a = new long[n];       for(int i=0;i<k;i++) pos[i]=Integer.parseInt(s[i]);       s = bf.readLine().trim().split(""\\s+"");       for(int i=0;i<k;i++) temp[i]=Integer.parseInt(s[i]);       Arrays.fill(a, Integer.MAX_VALUE);       for(int i=0;i<k;i++) a[pos[i]-1] = temp[i];        solve();     }     System.out.print(str);   } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); for(int q=0;q<t;q++){            String s = br.readLine();                   String s1[] = br.readLine().split("" "");                   int n = Integer.parseInt(s1[0]);                   int k = Integer.parseInt(s1[1]);                   String s2[] = br.readLine().split("" "");                   int a[] = new int[k];                   for(int i=0;i<k;i++){                         a[i] = Integer.parseInt(s2[i]);                   }                   String s3[] = br.readLine().split("" "");                   int b[] = new int[k];                   for(int i=0;i<k;i++){                         b[i] = Integer.parseInt(s3[i]);                   }                   long ans[] = new long[n];                   for(int i=0;i<n;i++){                         ans[i] = Integer.MAX_VALUE;                   }                   for(int i=0;i<k;i++){                         ans[a[i]-1] = b[i];                   }                   for(int i=1;i<n;i++){                         ans[i] = Math.min(ans[i],ans[i-1]+1);                   }                   for(int i=n-2;i>=0;i--){                         ans[i] = Math.min(ans[i],ans[i+1]+1);                   }                                      for(int i=0;i<n;i++){                         System.out.print(ans[i]+"" "");                   }                   System.out.println(); } } } ",0
804,"import java.util.*; import java.io.*; import java.math.*; public class Coder {   static int n;   static long c[];   static StringBuilder str = new StringBuilder("""");   static void solve() {       long mne=c[0];       long mno=c[1];       long ans=(c[0]+c[1])*n;       long se=c[0];       long so=c[1];       long ecnt=1,ocnt=1;       for(int i=2;i<n;i++){           if(i%2==0){mne=Math.min(mne, c[i]);se+=c[i];ecnt++;}           else{mno=Math.min(mno, c[i]);so+=c[i];ocnt++;}                      ans=Math.min(ans, se+mne*(n-ecnt)+so+mno*(n-ocnt));       }       str.append(ans).append(""\n"");   }   public static void main(String[] args) throws java.lang.Exception {     BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));     int q = Integer.parseInt(bf.readLine().trim());     while(q-->0) {         n=Integer.parseInt(bf.readLine().trim());         c=new long[n];         String s[]=bf.readLine().trim().split(""\\s+"");         for(int i=0;i<n;i++) c[i]=Long.parseLong(s[i]);       solve();     }     System.out.print(str);   } } ","import java.util.*; import java.lang.*; import java.io.*; public class C { public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); StringBuilder sb = new StringBuilder(); while (t-- > 0) { String[] scn = (br.readLine()).trim().split("" ""); int n = Integer.parseInt(scn[0]); long[] arr = new long[n]; scn = (br.readLine()).trim().split("" ""); for (int i = 0; i < n; i++) { arr[i] = Long.parseLong(scn[i]); } long min; long hor = arr[0], ver = arr[1]; long min1 = 0, min2 = 0; min = (hor + ver) * n; long x = 0, y = 0; for (int i = 2; i < n; i++) { if (i % 2 == 0) { x += 1; if (arr[i] >= hor) { min1 += arr[i]; } else { min1 += hor; hor = arr[i]; } } else { y += 1; if (arr[i] >= ver) { min2 += arr[i]; } else { min2 += ver; ver = arr[i]; } } long pro =  (n - x) * hor + (n - y) * ver; min = Math.min(min, min1 + min2 +pro); } sb.append(min); sb.append(""\n""); } System.out.println(sb); return; } } ",0
805,"import java.util.*; import java.io.*; import java.math.*; public class Euler { static int N = (int)1e5 + 5; static int n, a, b, da, db; static int[] depth = new int[N]; static ArrayList<Integer>[] adj = new ArrayList[N]; static int diam; public static int dfs(int x, int p) { int len = 0; for (int y : adj[x]) { if (y != p) { depth[y] = depth[x] + 1; int cur = 1 + dfs(y, x); diam = Math.max(diam, cur + len); len = Math.max(len, cur); } } return len; }     public static void main(String[] args){         FastReader in = new FastReader();         PrintWriter o = new PrintWriter(System.out);                  int t = in.nextInt();                  while(t-- > 0) { n = in.nextInt(); a = in.nextInt(); b = in.nextInt(); da = in.nextInt(); db = in.nextInt(); for (int i = 1; i <= n; i++) { adj[i] = new ArrayList<>(); } for (int i = 0; i < n - 1; i++) { int u = in.nextInt(); int v = in.nextInt(); adj[u].add(v); adj[v].add(u); } diam = 0; depth[a] = 0; dfs(a, -1); boolean works = true; if (depth[b] <= da) { o.println(""Alice""); continue; } if (2 * da >= diam) { o.println(""Alice""); continue; } if (db > 2 * da) { o.println(""Bob""); continue; } if (db <= 2 * da) { o.println(""Alice""); } }                           o.close();         o.flush();         return;     }                } ","import java.io.*;  import java.util.*;  public class D   {    public static ArrayList<Integer> adj[];    public static int node;    public static int dist = 0;    public static void main(String[] args) throws IOException    {       FastScanner sc = new FastScanner();       int T = sc.nextInt();       PrintWriter out = new PrintWriter(System.out);       for(int t = 0; t < T; t++){          int N = sc.nextInt();          int a = sc.nextInt(); int b = sc.nextInt();          int da = sc.nextInt(); int db = sc.nextInt();          adj = new ArrayList[N+1];          for(int i = 0; i <= N; i++){             adj[i] = new ArrayList<Integer>();          }          for(int i = 0; i < N-1; i++){             int v = sc.nextInt();             int u = sc.nextInt();             adj[v].add(u);             adj[u].add(v);          }          if(db > 2*da){             dfs1(a, 0, b, 0);             if(dist <= da){                out.println(""Alice"");             }             else{                node = 0;                dist = 0;                dfs(1, 0, 0);                dfs(node, 0, 0);                if(dist > 2*da){                   out.println(""Bob"");                }                else{                   out.println(""Alice"");                }             }          }          else{             out.println(""Alice"");          }       }       out.close();    }      public static void dfs1(int a, int p, int b, int d){       if(a == b){          dist = d;       }       for(int next : adj[a]){          if(next != p){             dfs1(next, a, b, d+1);          }         }    }    public static void dfs(int i, int p, int d){       if(d > dist){          node = i;          dist = d;       }       for(int next : adj[i]){          if(next != p){             dfs(next, i, d+1);          }         }    }         } ",0
806,"import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static long dp[][];    static PrintWriter out=new PrintWriter(System.out);   public static void main(String[] args) {                    int ttt=1;       ttt =i();         outer :while (ttt-- > 0)  {         int n=i();         int k=i();         int P[]=input(k);         int Q[]=input(k);         long A[]=new long[n+1];         Arrays.fill(A, Integer.MAX_VALUE);         for(int i=0;i<k;i++) {         A[P[i]]=Q[i];         }         long B[]=new long[n+1];         long C[]=new long[n+1];         Arrays.fill(B, Integer.MAX_VALUE);         Arrays.fill(C, Integer.MAX_VALUE);         for(int i=n;i>0;i--) {         if(i+1<=n) {         B[i]=Math.min(A[i],B[i+1]+1);         }         else {         B[i]=A[i];         }         }         for(int i=1;i<=n;i++) {         if(i-1>0) {         C[i]=Math.min(A[i],C[i-1]+1);         }         else {         C[i]=A[i];         }         }         for(int i=1;i<=n;i++) {         out.print(Math.min(B[i],C[i])+"" "");         }         out.println();                                                      }               out.close();                                                              }                static int[] input(int n) { int A[]=new int[n];    for(int i=0;i<n;i++) {    A[i]=sc.nextInt();    }    return A;    }      static int i() {      return sc.nextInt();      }                                                                                     } ","import java.util.*; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.StringTokenizer; public class PW { public static int memo[][]; public static FastReader s = new FastReader(); public static List<Long> primes; public static int sz= 1000000; public static int MOD=1000000007; public static List<List<Integer>> adj; public static void main(String[] args) {     int t=s.nextInt(); while(t-- >0) { int n=s.nextInt(); int k=s.nextInt();   long arr[]=new long[n];   Arrays.fill(arr,Long.MAX_VALUE/10);   int ac[]=new int[k];   long tmp[]=new long[k];   for(int i = 0 ; i < k ; i++){     ac[i]=s.nextInt();     ac[i]--;   }   for(int i = 0 ; i < k ; i++){     tmp[i]=s.nextLong();     arr[ac[i]] = tmp[i];   }   long P[] = getP(arr, n);      int i=0,j=arr.length-1;   while(i<=j)   {   long temp=arr[i];   arr[i]=arr[j];   arr[j]=temp;   i++;   j--;   }      long[] S = getP(arr, n);      i=0;j=S.length-1;   while(i<=j)   {   long temp=S[i];   S[i]=S[j];   S[j]=temp;   i++;   j--;   }   for(i = 0 ; i < n ; i++){     System.out.print(Math.min(P[i], S[i])+"" "");   }   System.out.println(); } } public static long[] getP(long []arr, int n){   long mn = Long.MAX_VALUE/10;   long P[]=new long[n];   Arrays.fill(P, Long.MAX_VALUE/10);   int cnt = 0;   for(int i = 0 ; i < n ; i++){     long curr = arr[i];     if(mn + cnt < curr){       P[i] = mn + cnt;     }else{       mn = arr[i];       P[i] = arr[i];       cnt  = 0;     }     cnt++;   }   return  P; }         public static String largestNumber( List<String> ab) {                                                                   Collections.sort(ab, new Comparator<String>(){                                                                           });         StringBuilder abc= new StringBuilder();                           for(int i=0;i<ab.size();i++)         {            abc.append(ab.get(i));                      }         if(abc.length()==0)             return abc.toString();                  if(abc.charAt(0)=='0')         return ""0"";         else         return abc.toString();              } }   ",0
807,"import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static long dp[][];  static int max;   public static void main(String[] args) {    PrintWriter out=new PrintWriter(System.out);       int ttt=1;               outer :while (ttt-- > 0)  {         int n=i();         int A[]=input(n);         dp=new long[n+1][n+1];         for(int i=0;i<=n;i++) {         Arrays.fill(dp[i],-1);         }                           ArrayList<Integer> l=new ArrayList<Integer>();         ArrayList<Integer> m=new ArrayList<Integer>();         for(int i=0;i<n;i++) {         if(A[i]==0) {         l.add(i+1);         }         else {         m.add(i+1);         }         }         A=new int[m.size()];         int B[]=new int[l.size()];         for(int i=0;i<l.size();i++) {         B[i]=l.get(i);         }         for(int i=0;i<m.size();i++) {         A[i]=m.get(i);         }         n=m.size();         int o=l.size();         System.out.println(go(A,B,0,0,n,o));          }            out.close();                                                                      }              private static long go(int[] A, int[] B, int i, int j, int n, int m) { if(i==n) return 0; if(j==m) return Integer.MAX_VALUE; if(dp[i][j]!=-1) return dp[i][j]; long op1=go(A, B, i+1, j+1, n, m)+Math.abs(A[i]-B[j]); long op2=go(A, B, i, j+1, n, m); return dp[i][j]=Math.min(op1, op2); } static int[] input(int n) { int A[]=new int[n];    for(int i=0;i<n;i++) {    A[i]=sc.nextInt();    }    return A;    }      static int i() {      return sc.nextInt();      }            static long l() {      return sc.nextLong();      }                                                                         } ","import java.awt.Point; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.io.ObjectInputStream.GetField; import java.lang.reflect.Array; import java.math.BigDecimal; import java.math.BigInteger; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashSet; import java.util.Hashtable; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Set; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import javax.sound.sampled.ReverbType; public class Edu109 { static PrintWriter out; static Scanner sc; static int[]a; static int A,B,n,m,h,ans,sum; public static void main(String[]args) throws IOException { sc=new Scanner(System.in); out=new PrintWriter(System.out); D(); out.close(); }    static long[][]mem; static int ones; static ArrayList<Integer>pos; static void D() throws IOException { int t=1; while(t-->0) { n=ni(); a=nai(n); mem=new long[n][n]; ones=0; pos=new ArrayList<Integer>(); for(int i=0;i<n;i++) { Arrays.fill(mem[i], -1); if(a[i]==1)pos.add(i); } ones=pos.size(); long ans=solve(0,0); out.println(ans); } } private static long solve(int i, int j) { if(i==n||j>=ones)return j==ones?0:(long)1e14; if(mem[i][j]!=-1)return mem[i][j]; long lv=solve(i+1,j); if(a[i]==0) { int pr=Math.abs(i-pos.get(j)); lv=Math.min(lv, pr+solve(i+1,j+1)); } return mem[i][j]=lv; } static int ni() throws IOException { return sc.nextInt(); } static int[] nai(int n) throws IOException { int[] a = new int[n]; for (int i = 0; i < n; i++) a[i] = sc.nextInt(); return a; } } ",0
808,"import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static long dp[][];  static int max;   public static void main(String[] args) {    PrintWriter out=new PrintWriter(System.out);       int ttt=1;               outer :while (ttt-- > 0)  {         int n=i();         int A[]=input(n);         dp=new long[n+1][n+1];         for(int i=0;i<=n;i++) {         Arrays.fill(dp[i],-1);         }                           ArrayList<Integer> l=new ArrayList<Integer>();         ArrayList<Integer> m=new ArrayList<Integer>();         for(int i=0;i<n;i++) {         if(A[i]==0) {         l.add(i+1);         }         else {         m.add(i+1);         }         }         A=new int[m.size()];         int B[]=new int[l.size()];         for(int i=0;i<l.size();i++) {         B[i]=l.get(i);         }         for(int i=0;i<m.size();i++) {         A[i]=m.get(i);         }         n=m.size();         int o=l.size();         System.out.println(go(A,B,0,0,n,o));          }            out.close();                                                                      }              private static long go(int[] A, int[] B, int i, int j, int n, int m) { if(i==n) return 0; if(j==m) return Integer.MAX_VALUE; if(dp[i][j]!=-1) return dp[i][j]; long op1=go(A, B, i+1, j+1, n, m)+Math.abs(A[i]-B[j]); long op2=go(A, B, i, j+1, n, m); return dp[i][j]=Math.min(op1, op2); } static int[] input(int n) { int A[]=new int[n];    for(int i=0;i<n;i++) {    A[i]=sc.nextInt();    }    return A;    }      static int i() {      return sc.nextInt();      }            static long l() {      return sc.nextLong();      }                                                                         } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
809,"import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static long dp[][];  static int max;   public static void main(String[] args) {    PrintWriter out=new PrintWriter(System.out);       int ttt=1;               outer :while (ttt-- > 0)  {         int n=i();         int A[]=input(n);         dp=new long[n+1][n+1];         for(int i=0;i<=n;i++) {         Arrays.fill(dp[i],-1);         }                           ArrayList<Integer> l=new ArrayList<Integer>();         ArrayList<Integer> m=new ArrayList<Integer>();         for(int i=0;i<n;i++) {         if(A[i]==0) {         l.add(i+1);         }         else {         m.add(i+1);         }         }         A=new int[m.size()];         int B[]=new int[l.size()];         for(int i=0;i<l.size();i++) {         B[i]=l.get(i);         }         for(int i=0;i<m.size();i++) {         A[i]=m.get(i);         }         n=m.size();         int o=l.size();         System.out.println(go(A,B,0,0,n,o));          }            out.close();                                                                      }              private static long go(int[] A, int[] B, int i, int j, int n, int m) { if(i==n) return 0; if(j==m) return Integer.MAX_VALUE; if(dp[i][j]!=-1) return dp[i][j]; long op1=go(A, B, i+1, j+1, n, m)+Math.abs(A[i]-B[j]); long op2=go(A, B, i, j+1, n, m); return dp[i][j]=Math.min(op1, op2); } static int[] input(int n) { int A[]=new int[n];    for(int i=0;i<n;i++) {    A[i]=sc.nextInt();    }    return A;    }      static int i() {      return sc.nextInt();      }            static long l() {      return sc.nextLong();      }                                                                         } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
810,"import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static long dp[][];  static int max;   public static void main(String[] args) {    PrintWriter out=new PrintWriter(System.out);       int ttt=1;               outer :while (ttt-- > 0)  {         int n=i();         int A[]=input(n);         dp=new long[n+1][n+1];         for(int i=0;i<=n;i++) {         Arrays.fill(dp[i],-1);         }                           ArrayList<Integer> l=new ArrayList<Integer>();         ArrayList<Integer> m=new ArrayList<Integer>();         for(int i=0;i<n;i++) {         if(A[i]==0) {         l.add(i+1);         }         else {         m.add(i+1);         }         }         A=new int[m.size()];         int B[]=new int[l.size()];         for(int i=0;i<l.size();i++) {         B[i]=l.get(i);         }         for(int i=0;i<m.size();i++) {         A[i]=m.get(i);         }         n=m.size();         int o=l.size();         System.out.println(go(A,B,0,0,n,o));          }            out.close();                                                                      }              private static long go(int[] A, int[] B, int i, int j, int n, int m) { if(i==n) return 0; if(j==m) return Integer.MAX_VALUE; if(dp[i][j]!=-1) return dp[i][j]; long op1=go(A, B, i+1, j+1, n, m)+Math.abs(A[i]-B[j]); long op2=go(A, B, i, j+1, n, m); return dp[i][j]=Math.min(op1, op2); } static int[] input(int n) { int A[]=new int[n];    for(int i=0;i<n;i++) {    A[i]=sc.nextInt();    }    return A;    }      static int i() {      return sc.nextInt();      }            static long l() {      return sc.nextLong();      }                                                                         } ","import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.math.BigDecimal; import java.math.RoundingMode; import java.util.*; public class Main { static final long MOD=1000000007; static final long MOD1=998244353; static long ans=0; public static void main(String[] args){ PrintWriter out = new PrintWriter(System.out); InputReader sc=new InputReader(System.in); int N = sc.nextInt(); int[] A = sc.nextIntArray(N); ArrayList<Integer> a1 = new ArrayList<Integer>(); ArrayList<Integer> a2 = new ArrayList<Integer>(); for (int i = 0; i < A.length; i++) { if (A[i]==0) { a1.add(i); }else { a2.add(i); } } int[][] dp = new int[a1.size()+1][a2.size()+1]; for (int i = 0; i < dp.length; i++) { Arrays.fill(dp[i], Integer.MAX_VALUE/2); } dp[0][0] = 0; for (int i = 1; i <= a1.size() ; i++) { int pos1 = a1.get(i-1); for (int j = 0; j <= a2.size(); j++) { dp[i][j] = dp[i-1][j]; if (j-1>=0) { int pos2 = a2.get(j-1); dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + Math.abs(pos1-pos2)); } } } System.out.println(dp[a1.size()][a2.size()]); } } ",0
811,"import java.util.*; import java.io.*; import java.math.*; public class Main {   static FastReader sc=new FastReader();   static long dp[][];  static int mod=1000000007;     public static void main(String[] args) {    PrintWriter out=new PrintWriter(System.out);    StringBuffer sb=new StringBuffer("""");   int ttt=1; ttt =i();              outer :while (ttt-- > 0)  {         int n=i();         int m=i();         int x=i();         Pair A[]=new Pair[n];         for(int i=0;i<n;i++) {         A[i]=new Pair(i(), i+1);         }         Arrays.sort(A);         int B[]=new int[n+1];         int a=m;         for(int i=n-1;i>=0;i--) {         B[A[i].y]=a;         a--;         if(a==0) {         a=m;         }         }         out.println(""YES"");         for(int i=1;i<=n;i++) {         out.print(B[i]+"" "");         }         out.println();                   }            out.close();                                                                      }                              static class Pair implements Comparable<Pair>      {      int x;      int y;      Pair(int x,int y){      this.x=x;      this.y=y;      }      } static void print(int A[]) { for(int i : A) { System.out.print(i+"" ""); } System.out.println(); } static void print(long A[]) { for(long i : A) { System.out.print(i+"" ""); } System.out.println(); }      static int i() {      return sc.nextInt();      }                    static void sort(int[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             int tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);      }      static void sort(long[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             long tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);      }   static String sort(String s) {   Character ch[]=new Character[s.length()];   for(int i=0;i<s.length();i++) {   ch[i]=s.charAt(i);   }   Arrays.sort(ch);   StringBuffer st=new StringBuffer("""");   for(int i=0;i<s.length();i++) {   st.append(ch[i]);   }   return st.toString();   }                                                        } ","import java.util.*; import java.io.*; public class Codeforces {     final static long mod = 1000000007;     public static void main(String[] args) {         FastReader sc = new FastReader();         int t = sc.nextInt();         while(t-->0){            int n=sc.nextInt();            int m=sc.nextInt();            int x=sc.nextInt();                        Pair a[]=new Pair[n];                        for(int i=0;i<n;i++){                a[i]=new Pair(sc.nextInt(), i+1);            }                        Arrays.sort(a);                        int b[]=new int[n+1];            int k=m;                        for(int i=n-1;i>=0;i--){                b[a[i].y]=k;                k--;                if(k==0)                 k=m;            }                        System.out.println(""YES"");            for(int i=1;i<=n;i++){                System.out.print(b[i]+"" "");            }            System.out.println();                     }     }                    static class Pair implements Comparable<Pair> {         public final int x;         public final int y;         public Pair(int x, int y) {             this.x = x;             this.y = y;         }                       }                               } ",1
812,"import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();         int t;         t = in.nextInt();                  while (t > 0) {             solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n, _00 = 0, _01 = 0, _11 = 0, _10 = 0;             n = in.nextInt();             char[] s = in.next().toCharArray();             char[] s1 = in.next().toCharArray();             for (int i = 0; i < n; i++) {                 if(s[i]==s1[i]){                     if(s[i]=='0'){                         _00++;                     }                     else{                         _11++;                     }                 }                 else{                     if(s[i]=='0'){                         _01++;                     }                     else{                         _10++;                     }                 }             }             int ans = Integer.MAX_VALUE;             if(_10 ==_01){                 ans = 2*_01;             }             if(_11 == _00 + 1){                 ans = Math.min(ans, 2*_00 + 1);             }             if(ans == Integer.MAX_VALUE){                 out.println(-1);             }             else{                 out.println(ans);             }         }     }                                   static final Random random=new Random();           } ",0
813,"import java.util.*; import java.io.*; import java.math.BigInteger;   public class code2{                           public static void main(String[] arg) throws IOException{                           PrintWriter out = new PrintWriter(System.out);         Scanner in = new Scanner(System.in);                  int t=in.nextInt();                  while(t-- > 0){            int n=in.nextInt();            long[] k=new long[n];            long[] h=new long[n];            for(int i=0;i<n;i++) k[i]=in.nextLong();            for(int i=0;i<n;i++) h[i]=in.nextLong();            long[] res=new long[n];            long[] power=new long[n];            long l=k[n-1]+1,r=-1;            for(int i=0;i<n;i++){              long lc=k[i]-h[i]+1;                            long m=h[i];              if(lc<=l){                res[i]=(m*(m+1))/2;                power[i]=h[i];              }              else if(lc>r){                                res[i]=res[i-1]+(m*(m+1))/2;                power[i]=h[i];              }              else{                res[i]=Long.MAX_VALUE;                                for(int j=i-1;j>=0;j--){                                   if(power[j]+k[i]-k[j] >= h[i]){                    long x=power[j]+k[i]-k[j];                        if(x>=h[i]){   if(k[i]-h[i]+1>k[j]){ power[i]=h[i]; res[i]=res[j]+(m*(m+1))/2;   }    else{ power[i]=x; long c=(x*(x+1))/2; long d=(power[j]*(power[j]+1))/2; res[i]=res[j]+c-d;   }   break;    }                  }                }              }              l=Math.min(l,lc);              r=k[i];                          }            out.println(res[n-1]);         }           out.flush();     }   } ","import java.io.*; import java.util.*; public class Main{                          public static void main(String[] args) throws Exception {     FastReader sc = new FastReader();         int t=sc.nextInt();       while(t-->0)   {       int n=sc.nextInt();       long k[]=new long[n];       for(int i=0;i<n;i++)       {           k[i]=sc.nextLong();       }       long h[]=new long[n];       for(int i=0;i<n;i++)       {           h[i]=sc.nextLong();       }       ArrayList<Long> al=new ArrayList<>();       long csp=h[n-1],idx=k[n-1]-h[n-1];       for(int i=n-2;i>=0;i--)       {           if(idx<k[i])           {               if(k[i]-idx<h[i])               {                   long diff=h[i]-(k[i]-idx);                   csp+=diff;                   idx-=diff;               }           }           else           {               al.add(csp);               csp=h[i];               idx=k[i]-csp;           }                 }       long sum=0;       al.add(csp);       for(long i:al)       {          sum=sum+((i*(i+1))/2);       }       System.out.println(sum);         } } } ",0
814,"import java.util.*; import java.io.*; import java.math.BigInteger; import java.nio.charset.StandardCharsets; public class Main { private static FS sc = new FS(); static int mod = (int) 1e9; static LinkedList<Integer>[] temp, idx; static long inf = (long) Long.MAX_VALUE; public static void main(String[] args) {  int t = sc.nextInt(); StringBuilder ret = new StringBuilder(); while(t-- > 0) { int n = sc.nextInt(); String a = sc.next(), b = sc.next(); int _00 = 0, _01 = 0, _10 = 0, _11 = 0; for(int i = 0; i < n; i++) { if(a.charAt(i) == '0' && b.charAt(i) == '0') _00++; if(a.charAt(i) == '0' && b.charAt(i) == '1') _01++; if(a.charAt(i) == '1' && b.charAt(i) == '0') _10++; if(a.charAt(i) == '1' && b.charAt(i) == '1') _11++; } int ans = Integer.MAX_VALUE; if(_10 == _01) ans = _01 + _10; if(_10 > 0) { int n00 = _10 - 1;             int n01 = _11;             int n10 = _00 + 1;             int n11 = _01;             if (n01 == n10) {                 ans = Math.min(ans, 1 + n01 + n10);             } } if(_11 > 0) { int n00 = _10;             int n01 = _11 - 1;             int n10 = _00;             int n11 = _01 + 1;             if (n01 == n10) {                 ans = Math.min(ans, 1 + n01 + n10);             } } ret.append(ans == Integer.MAX_VALUE ? -1 : ans); ret.append(""\n""); } System.out.println(ret); } } ","import javax.swing.plaf.IconUIResource; import java.lang.reflect.Array; import java.text.CollationElementIterator; import java.util.*; import java.io.*;       public class Main {                           public static int mod = (int) (1e9 + 7);     static int ans = Integer.MAX_VALUE;       public static void main(String hi[]) throws Exception {         FastReader sc = new FastReader();         int t =sc.nextInt();         while(t-->0)         {             int n =sc.nextInt();             String a = sc.nextLine(),b=sc.nextLine();               int count1=0,count2=0,count3=0,count4=0;               for(int i=0;i<n;i++)             {                 if(a.charAt(i)=='0'&&b.charAt(i)=='0')                     count1++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='1')                     count2++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='0')                     count3++;                 else  if(a.charAt(i)=='0'&&b.charAt(i)=='1')                     count4++;             }             int ans=Integer.MAX_VALUE;               if(count3==count4)                 ans=Math.min(count3*2,ans);               if(count2==count1+1)                 ans=Math.min(ans,2*count1+1);                           if(ans==Integer.MAX_VALUE)                 System.out.println(-1);             else System.out.println(ans);           }       }                                                                 } ",0
815,"import java.util.*; import java.io.*; import java.math.BigInteger; import java.sql.Array; public class CP {     static int mod  = 1000000007;            static FR sc = new FR();  static StringBuilder sb = new StringBuilder();  public static void main(String args[]) {  int tc = sc.nextInt();  while(tc-- > 0) {  TEST_CASE();  } System.out.println(sb);  } static void TEST_CASE() { int n = sc.nextInt();  lr = new long[n][2]; for(int  i =0 ; i < n ; i ++) { lr[i][0] = sc.nextLong(); lr[i][1] = sc.nextLong(); }  adj = new ArrayList<ArrayList<Integer>>(); for(int i = 0 ; i <n ; i++) adj.add(new ArrayList<Integer>()); for(int i = 0 ; i<n-1 ; i++) { int u = sc.nextInt()-1 , v = sc.nextInt()-1; adj.get(u).add(v); adj.get(v).add(u); } min = new long[n]; max = new long[n]; dfs(0,-1); sb.append(Math.max(min[0], max[0])).append(""\n""); } static long[] min , max , lr[]; static ArrayList<ArrayList<Integer>> adj; static void dfs(int u , int p  ) { for(int child:adj.get(u)) { if(child == p) continue; dfs(child , u); } long left = lr[u][0] , right = lr[u][1]; long ansl = 0 , ansr = 0; for(int child:adj.get(u)) { if(child == p) continue; long leftc = lr[child][0] , rightc = lr[child][1]; ansl += Math.max( min[child] + Math.abs(left - leftc)  , max[child] +Math.abs(left - rightc)      ); } for(int child:adj.get(u)) { if(child == p) continue; long leftc = lr[child][0] , rightc = lr[child][1]; ansr += Math.max( min[child] + Math.abs(right - leftc)  , max[child] +Math.abs(right - rightc)      ); } min[u] = ansl; max[u] = ansr; } } ","import java.io.*; import java.util.*; public class C {          static FastReader s = new FastReader();     static PrintWriter out = new PrintWriter(System.out);                         private static int ri() {         return s.nextInt();     }     private static long rl() {         return s.nextLong();     }                         static int MOD=1000000007;          static long[][] dp;     static void dfs(List<Integer>[] list, long[] l, long[] r, boolean[] vis,int node)     {         vis[node] = true;         for(int i:list[node])         {             if(!vis[i])             {                 dfs(list,l,r,vis, i);                 dp[node][0] += Math.max(dp[i][0]+Math.abs(l[node]-l[i]), dp[i][1]+Math.abs(l[node]-r[i]));                 dp[node][1] += Math.max(dp[i][0]+Math.abs(r[node]-l[i]), dp[i][1]+Math.abs(r[node]-r[i]));             }         }     }     public static void main(String[] args) {         StringBuilder ans = new StringBuilder();         int t = ri();         while (t-- > 0)         {             int n=ri();             dp = new long[n][2];             long[] l = new long[n];             long[] r = new long[n];             for(int i=0;i<n;i++)             {                 l[i] = rl();                 r[i] = rl();             }             List<Integer>[] list=new ArrayList[n];             for(int i=0;i<n;i++)             {                 list[i] = new ArrayList<>();             }             for(int i=0;i<n-1;i++)             {                 int a= ri();int b=ri();                 a--;b--;                 list[a].add(b);                 list[b].add(a);             }             boolean[] vis = new boolean[n];             dfs(list,l,r,vis,0);             ans.append(Math.max(dp[0][0],dp[0][1])).append(""\n"");         }         out.print(ans.toString());         out.flush();     } } ",0
816,"import java.util.*; import java.io.*; import java.math.BigInteger; import java.sql.Array; public class CP {     static int mod  = 1000000007;            static FR sc = new FR();  static StringBuilder sb = new StringBuilder();  public static void main(String args[]) {  int tc = sc.nextInt();  while(tc-- > 0) {  TEST_CASE();  } System.out.println(sb);  } static void TEST_CASE() { int n = sc.nextInt();  lr = new long[n][2]; for(int  i =0 ; i < n ; i ++) { lr[i][0] = sc.nextLong(); lr[i][1] = sc.nextLong(); }  adj = new ArrayList<ArrayList<Integer>>(); for(int i = 0 ; i <n ; i++) adj.add(new ArrayList<Integer>()); for(int i = 0 ; i<n-1 ; i++) { int u = sc.nextInt()-1 , v = sc.nextInt()-1; adj.get(u).add(v); adj.get(v).add(u); } min = new long[n]; max = new long[n]; dfs(0,-1); sb.append(Math.max(min[0], max[0])).append(""\n""); } static long[] min , max , lr[]; static ArrayList<ArrayList<Integer>> adj; static void dfs(int u , int p  ) { for(int child:adj.get(u)) { if(child == p) continue; dfs(child , u); } long left = lr[u][0] , right = lr[u][1]; long ansl = 0 , ansr = 0; for(int child:adj.get(u)) { if(child == p) continue; long leftc = lr[child][0] , rightc = lr[child][1]; ansl += Math.max( min[child] + Math.abs(left - leftc)  , max[child] +Math.abs(left - rightc)      ); } for(int child:adj.get(u)) { if(child == p) continue; long leftc = lr[child][0] , rightc = lr[child][1]; ansr += Math.max( min[child] + Math.abs(right - leftc)  , max[child] +Math.abs(right - rightc)      ); } min[u] = ansl; max[u] = ansr; } } ","import java.io.*; import java.util.*; public class Solution{     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Task solver = new Task();         solver.solve(in, out);         out.close();     }          static class Task{         double eps= 0.00000001;         static final int MAXN = 10000001;                  static int spf[] = new int[MAXN];         Map<Integer,Set<Integer>> dp= new HashMap<>();                                                                                                                                       long[] dpl, dpr;         List<Integer>[] adj;         int[] l,r;         public void solve(InputReader in, PrintWriter out) {             int t= in.nextInt();             while(t-->0){                 int n= in.nextInt();                 l= new int[n];                 r= new int[n];                 adj= new List[n];                 for(int i=0;i<n;i++){                     l[i]= in.nextInt();                     r[i]= in.nextInt();                 }                 for(int i=0;i<n;i++) adj[i]= new ArrayList<>();                 for(int i=0;i<n-1;i++){                     int u= in.nextInt()-1, v= in.nextInt()-1;                     adj[u].add(v); adj[v].add(u);                 }                 dpl= new long[n]; dpr= new long[n];                 dfs(0,-1);                 out.println(Math.max(dpl[0],dpr[0]));                              }         }         public void dfs(int u, int p){             long suml=0, sumr=0;             for(int v: adj[u] ){                 if(v==p) continue;                 dfs(v,u);                 suml+= Math.max((long)Math.abs((long)l[u]-(long)l[v])+dpl[v], (long)Math.abs((long)l[u]-(long)r[v])+dpr[v]);                 sumr+= Math.max((long)Math.abs((long)r[u]-(long)l[v])+dpl[v],(long) Math.abs((long)r[u]-(long)r[v])+dpr[v]);             }             dpl[u]= suml; dpr[u]= sumr;         }                                                                             }                                                             } ",0
817,"import java.util.*; import java.io.*; import java.math.BigInteger; import java.sql.Array; public class CP {     static int mod  = 1000000007;            static FR sc = new FR();  static StringBuilder sb = new StringBuilder();  public static void main(String args[]) {  int tc = sc.nextInt();  while(tc-- > 0) {  TEST_CASE();  } System.out.println(sb);  } static void TEST_CASE() { int n = sc.nextInt();  lr = new long[n][2]; for(int  i =0 ; i < n ; i ++) { lr[i][0] = sc.nextLong(); lr[i][1] = sc.nextLong(); }  adj = new ArrayList<ArrayList<Integer>>(); for(int i = 0 ; i <n ; i++) adj.add(new ArrayList<Integer>()); for(int i = 0 ; i<n-1 ; i++) { int u = sc.nextInt()-1 , v = sc.nextInt()-1; adj.get(u).add(v); adj.get(v).add(u); } min = new long[n]; max = new long[n]; dfs(0,-1); sb.append(Math.max(min[0], max[0])).append(""\n""); } static long[] min , max , lr[]; static ArrayList<ArrayList<Integer>> adj; static void dfs(int u , int p  ) { for(int child:adj.get(u)) { if(child == p) continue; dfs(child , u); } long left = lr[u][0] , right = lr[u][1]; long ansl = 0 , ansr = 0; for(int child:adj.get(u)) { if(child == p) continue; long leftc = lr[child][0] , rightc = lr[child][1]; ansl += Math.max( min[child] + Math.abs(left - leftc)  , max[child] +Math.abs(left - rightc)      ); } for(int child:adj.get(u)) { if(child == p) continue; long leftc = lr[child][0] , rightc = lr[child][1]; ansr += Math.max( min[child] + Math.abs(right - leftc)  , max[child] +Math.abs(right - rightc)      ); } min[u] = ansl; max[u] = ansr; } } ","import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.ArrayList; public class Main { static int N=(int)2e5+10; static long[][] dp=new long[2][N]; static int[][] A=new int[2][N]; static ArrayList<ArrayList<Integer>> adj=new ArrayList<>(N); static { for(int i=0;i<N;i++) adj.add(new ArrayList<>()); } public static void dfs(int v,int p) { dp[0][v]=dp[1][v]=0; for(Integer u:adj.get(v)) { if(u==p) continue; dfs(u, v); dp[0][v]+=Math.max(Math.abs(A[0][v]-A[1][u])+dp[1][u], dp[0][u]+Math.abs(A[0][v]-A[0][u])); dp[1][v]+=Math.max(Math.abs(A[1][v]-A[1][u])+dp[1][u], dp[0][u]+Math.abs(A[1][v]-A[0][u])); } } public static void main(String[] args) throws Exception { BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); int t=Integer.parseInt(br.readLine()); while(t-->0) { int n=Integer.parseInt(br.readLine()); for(int i=1;i<=n;i++) { String[] ss1=br.readLine().split("" ""); A[0][i]=Integer.parseInt(ss1[0]); A[1][i]=Integer.parseInt(ss1[1]); adj.set(i, new ArrayList<>()); } for(int i=1;i<n;i++) { String[] ss2=br.readLine().split("" ""); int u=Integer.parseInt(ss2[0]); int v=Integer.parseInt(ss2[1]); adj.get(u).add(v); adj.get(v).add(u); } dfs(1, -1); System.out.println(Math.max(dp[0][1], dp[1][1])); }     } } ",0
818,"import java.util.*; import java.io.*; import java.util.Arrays; public class codeforces { static int[]av; static int[]oc; static int[][]memo; static int n; public static void main(String[] args) throws Exception { n=sc.nextInt(); int[]a=new int[n]; int avs=0; for (int i = 0; i < a.length; i++) { a[i]=sc.nextInt(); if(a[i]==0)avs++; } av=new int[avs]; oc=new int[n-avs]; for (int i = 0,c=0,j=0; i < a.length; i++) { if(a[i]==1) { oc[c++]=i; }else { av[j++]=i; } } memo=new int[oc.length][av.length]; for(int[]e:memo)Arrays.fill(e, -1); pw.println(dp(0,0)); pw.close(); } public static int dp(int i,int j) { if(j==av.length) { return i!=oc.length?(int)1e9:0; } if(i==oc.length) { return 0; } if(memo[i][j]!=-1) { return memo[i][j]; } int take=dp(i+1,j+1)+Math.abs(av[j]-oc[i]); int leave=dp(i,j+1); return memo[i][j]=Math.min(take, leave); }       static Scanner sc=new Scanner(System.in); static PrintWriter pw=new PrintWriter(System.out); } ","import java.math.BigInteger; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Random; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.Vector; import java.util.Scanner; public class ahh { static Scanner scn = new Scanner(System.in); static boolean vis[][]; static FastReader s = new FastReader(); static int MOD = 1000000007; public static void main(String[] args) { int n=scn.nextInt(),count=0; int arr[]=new int[n]; for(int i=0;i<n;i++) { arr[i]=scn.nextInt(); } ArrayList<Integer>zer=new ArrayList<Integer>(),one=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(arr[i]==0) zer.add(i); else one.add(i); } count=one.size(); long memo[][]=new long[one.size()+1][zer.size()+1]; for(int i=0;i<=one.size();i++) { for(int j=0;j<=zer.size();j++) memo[i][j]=-1; } System.out.println(arm(one, zer, 0, 0, count,memo)); } public static long arm(ArrayList<Integer>one,ArrayList<Integer>zer,int i,int j,int count,long memo[][]) {if(count==0) return 0; if(i==one.size()||j==zer.size()) return Integer.MAX_VALUE; if(memo[i][j]!=-1) return memo[i][j]; long a=Integer.MAX_VALUE,b=Integer.MAX_VALUE; a=arm(one, zer, i+1, j+1,count-1,memo)+Math.abs(one.get(i)-zer.get(j)); b=arm(one, zer, i, j+1,count,memo); memo[i][j]=Math.min(a, b); return Math.min(a, b); } } ",0
819,"import java.util.*; import java.io.*; import static java.lang.Math.*; public class Main {     static Scanner sc = new Scanner(System.in);     static PrintWriter pw = new PrintWriter(System.out);     static int[][] map;     static int n, m;     static ArrayList<String> actions = new ArrayList<>();     static String[] move = new String[]{"""", ""0110"", ""1001"", ""1101"", ""1001"", ""1110"", ""1011"", ""0000"", ""0110"", ""0111"", ""1101"", ""0000"", ""0111"", ""0000"", ""0000"", ""0001""};     static int[] xdif = new int[]{0, 0, 1, 1}, ydif = new int[]{0, 1, 0, 1};     public static void main(String[] args) throws IOException {         int tests = sc.nextInt();         for (int t = 0; t < tests; t++)             solve();         pw.close();     }     static void solve() throws IOException {         n = sc.nextInt();         m = sc.nextInt();         map = new int[n][m];         actions.clear();         for (int i = 0; i < n; i++) {             String line = sc.next();             for (int j = 0; j < m; j++)                 map[i][j] = line.charAt(j) - '0';         }         if (n % 2 + m % 2 == 2)             removeCorner();         if (n % 2 == 1)             for (int y = 0; y + 1 < m; y += 2)                 removeDown(y);         if (m % 2 == 1)             for (int x = 0; x + 1 < n; x += 2)                 removeRight(x);         for (int x = 0; x + 1 < n; x += 2)             for (int y = 0; y + 1 < m; y += 2)                 square(x, y);         pw.println(actions.size());         for (String action : actions)             pw.println(action);     }     static void square(int x, int y) {         String type = """" + map[x][y] + map[x][y + 1] + map[x + 1][y] + map[x + 1][y + 1];         if (map[x][y] + map[x + 1][y] + map[x][y + 1] + map[x + 1][y + 1] > 0) {             int[][] poses = new int[3][];             int index = 0;             for (int t = 0; t < 4; t++) {                 if (map[x + xdif[t]][y + ydif[t]] != move[Integer.parseInt(type, 2)].charAt(t) - '0')                     poses[index++] = new int[]{x + xdif[t], y + ydif[t]};             }             action(poses[0][0], poses[0][1], poses[1][0], poses[1][1], poses[2][0], poses[2][1]);             square(x, y);         }     }     static void invert(int x, int y) {         map[x][y] = 1 - map[x][y];     }     static void removeCorner() {         if (map[n - 1][m - 1] == 1)             action(n - 1, m - 1, n - 2, m - 1, n - 1, m - 2);     }     static void removeRight(int x) {         int y = m - 1;         if (map[x][y] + map[x + 1][y] == 2)             action(x, y, x + 1, y, x, y - 1);         else if (map[x][y] == 1)             action(x, y, x, y - 1, x + 1, y - 1);         else if (map[x + 1][y] == 1)             action(x + 1, y, x, y - 1, x + 1, y - 1);     }     static void removeDown(int y) {         int x = n - 1;         if (map[x][y] + map[x][y + 1] == 2)             action(x, y, x, y + 1, x - 1, y);         else if (map[x][y] == 1)             action(x, y, x - 1, y, x - 1, y + 1);         else if (map[x][y + 1] == 1)             action(x, y + 1, x - 1, y, x - 1, y + 1);     }     static void action(int x1, int y1, int x2, int y2, int x3, int y3) {         actions.add((x1 + 1) + "" "" + (y1 + 1) + "" "" + (x2 + 1) + "" "" + (y2 + 1) + "" "" + (x3 + 1) + "" "" + (y3 + 1));         invert(x1, y1);         invert(x2, y2);         invert(x3, y3);     } } ","import java.util.*; public class CodeForces{ static ArrayList<int[]> ans = new ArrayList<>();          public static void add(int a,int b,int c,int d,int e,int f){         int[] tem=new int[6];         tem[0]=a;tem[1]=b;tem[2]=c;tem[3]=d;tem[4]=e;tem[5]=f;         ans.add(tem);     }    public static void helper(int[][] arr,int r,int c){        for(int k=0;k<12;k++){            if(arr[r][c]==1){                add(r,c,r+1,c,r,c+1);                arr[r][c]=1-arr[r][c];                arr[r+1][c]=1-arr[r+1][c];                arr[r][c+1]=1-arr[r][c+1];            }            if(arr[r][c+1]==1){                 add(r,c+1,r+1,c+1,r,c);                arr[r][c+1]=1-arr[r][c+1];                arr[r+1][c+1]=1-arr[r+1][c+1];                arr[r][c]=1-arr[r][c];            }            if(arr[r+1][c]==1){                 add(r+1,c+1,r,c,r+1,c);                arr[r+1][c+1]=1-arr[r+1][c+1];                arr[r][c]=1-arr[r][c];                arr[r+1][c]=1-arr[r+1][c];            }            if(arr[r+1][c+1]==1){                 add(r+1,c+1,r+1,c,r,c+1);                arr[r+1][c+1]=1-arr[r+1][c+1];                arr[r+1][c]=1-arr[r+1][c];                arr[r][c+1]=1-arr[r][c+1];            }                    }            }     public static void main(String[] args) { Scanner sc = new Scanner(System.in); int t=sc.nextInt(); while(t-->0){     int n = sc.nextInt();     int m = sc.nextInt();     ans.clear();     int[][] arr=new int[n][m];     for(int i=0;i<n;i++){         String str = sc.next();         for(int j=0;j<m;j++){             arr[i][j]=str.charAt(j)-'0';         }     }          for(int i=0;i<n;i+=2){         for(int j=0;j<m;j+=2){             if(i==n-1&&j==m-1){                 helper(arr,i-1,j-1);             }else if(i==n-1){                 helper(arr,i-1,j);             }else if(j==m-1){                 helper(arr,i,j-1);             }else{                 helper(arr,i,j);             }                      }     }     System.out.println(ans.size());     for(int[] move:ans){         for(int i=0;i<6;i++){             System.out.print(move[i]+1 +"" "");         }         System.out.println();     }                                 }             } } ",0
820,"import java.util.*; import java.io.*; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.Math.max; public class EdB { static long[] mods = {1000000007, 998244353, 1000000009}; static long mod = mods[0]; public static MyScanner sc;     public static PrintWriter out; public static void main(String[] largewang) throws Exception{  sc = new MyScanner();  out = new PrintWriter(System.out);  int t = sc.nextInt();  while (t-->0) {  int n = sc.nextInt();  Set<Long> sums = new HashSet<>();  boolean found = false;  int[] arr = readArrayInt(n);  for(int j = 0;j<n;j++){  if (arr[j] == 0)  found = true;  }  for(int j = 1;j<(1<<n);j++){  long sum = 0;  for(int k = 0;k<n;k++){  if (((1<<k)&j) != 0) {  sum += (long)abs(arr[k]);  }  }  if (sums.contains(sum)) {  found = true;  break;  } else {  sums.add(sum);  }  }  verdict(found);  }  out.close();    } static int[] readArrayInt(int n){     int[] array = new int[n];     for(int j = 0;j<n;j++)     array[j] = sc.nextInt();     return array;     } static void verdict(boolean a){         out.println(a ? ""YES"" : ""NO"");     }      } ","import java.util.*; import java.io.*; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.Math.max; public class EdB { static long[] mods = {1000000007, 998244353, 1000000009}; static long mod = mods[0]; public static MyScanner sc;     public static PrintWriter out; public static void main(String[] largewang) throws Exception{  sc = new MyScanner();  out = new PrintWriter(System.out);  int t = sc.nextInt();  while (t-->0) {  int n = sc.nextInt();  Set<Long> sums = new HashSet<>();  boolean found = false;  int[] arr = readArrayInt(n);  for(int j = 0;j<n;j++){  if (arr[j] == 0)  found = true;  }  for(int j = 1;j<(1<<n);j++){  long sum = 0;  for(int k = 0;k<n;k++){  if (((1<<k)&j) != 0) {  sum += (long)abs(arr[k]);  }  }  if (sums.contains(sum)) {  found = true;  break;  } else {  sums.add(sum);  }  }  verdict(found);  }  out.close();    } static int[] readArrayInt(int n){     int[] array = new int[n];     for(int j = 0;j<n;j++)     array[j] = sc.nextInt();     return array;     } static void verdict(boolean a){         out.println(a ? ""YES"" : ""NO"");     }      } ",1
821,"import java.util.*; import java.io.*; public class Ana { static int n, a, b, da, db; static ArrayList<Integer>[] graph; public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); PrintWriter out = new PrintWriter(System.out); int t = sc.nextInt(); while (t-- > 0) { n = sc.nextInt(); a = sc.nextInt() - 1; b = sc.nextInt() - 1; da = sc.nextInt(); db = sc.nextInt(); graph = new ArrayList[n]; for (int i = 0; i < n; i++) graph[i] = new ArrayList<Integer>(); for (int i = 0; i < n - 1; i++) { int u = sc.nextInt() - 1, v = sc.nextInt() - 1; graph[u].add(v); graph[v].add(u); } int[] dist = new int[n]; Arrays.fill(dist, -1); bfs(a, dist); boolean bobwins = true;  if (dist[b] <= da || 2 * da >= db) bobwins = false; int far = a; for (int i = 0; i < n; i++) if (dist[i] > dist[far]) far = i; Arrays.fill(dist, -1); bfs(far, dist); for (int i = 0; i < n; i++) if (dist[i] > dist[far]) far = i; if(2*da>=dist[far]) bobwins = false; out.println(bobwins?""Bob"":""Alice""); } out.close(); } static void bfs(int s, int[] dist) { Queue<Integer> q = new LinkedList<Integer>(); q.add(s); dist[s] = 0; while (!q.isEmpty()) { int u = q.remove(); for (int v : graph[u]) { if (dist[v] == -1) { dist[v] = 1 + dist[u]; q.add(v); } } } } } ","import java.io.*; import java.util.*; import static java.lang.Math.*; public class Codeforces {     public static void main(String[] args) throws IOException {                           InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();         solver.solve(in.nextInt(), in, out);         out.close();     }     static class TaskA {         long mod = (long)(1000000007);         long fact[];         int depth[];         int parentTable[][];         int degree[];         ArrayList<Integer> leaves;         int max = Integer.MIN_VALUE;         int min = Integer.MAX_VALUE;         int diam = 0;         public void solve(int testNumber, InputReader in, PrintWriter out) throws IOException {             while(testNumber-->0){                 int n = in.nextInt();                 int a = in.nextInt();                 int b = in.nextInt();                 int na = in.nextInt();                 int nb = in.nextInt();                 ArrayList<ArrayList<Integer>> g = new ArrayList<>();                 for(int i=0;i<=n;i++)                     g.add(new ArrayList<>());                 for(int i=1;i<n;i++){                     int u = in.nextInt();                     int v = in.nextInt();                     g.get(u).add(v);                     g.get(v).add(u);                 }                 if(2*na>=nb){                     out.println(""Alice"");                     continue;                 }                                  depth = new int[n+1];                 diam = 0;                 dfs(g , a , 0);                 int distance = depth[b];                                  if(distance <= na){                     out.println(""Alice"");                     continue;                 }                 if(2*na >= min(nb , diam))                     out.println(""Alice"");                 else                     out.println(""Bob"");                                                                                                                                                                                                                                                                                             }         }           int dfs(ArrayList<ArrayList<Integer>> a , int x, int p) {             int len = 0;             for(int y : a.get(x)) {                 if(y != p) {                     depth[y] = depth[x] + 1;                     int cur = 1 + dfs(a , y, x);                     diam = max(diam, cur + len);                     len = max(len, cur);                 }             }             return len;         }                                                                                                                                                                                                                                                                                                                                                                                                                                   }      } ",0
822,"import java.util.*; import java.io.*; public class Armchairs  { public static int val(int b[],int m,int c[],int n,int dp[][]) { if(dp[m][n]>-1) { return dp[m][n]; } else if(m==0) { return 0; } else if(n==0) { return 2099999999; } else { return dp[m][n]=Math.min(val(b,m-1,c,n-1,dp)+Math.abs(b[m-1]-c[n-1]),val(b,m,c,n-1,dp)); } } public static void process()throws IOException { int n=I(); int a[]=Ai(n); ArrayList<Integer> arr=new ArrayList<Integer>(); ArrayList<Integer> arr1=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(a[i]==0) { arr1.add(i); } else { arr.add(i); } } int b[]=new int[arr.size()]; int c[]=new int[arr1.size()]; int m=arr.size();int n1=arr1.size(); int dp[][]=new int[m+1][n1+1]; dyn(dp,m+1,n1+1,-1); for(int i=0;i<arr.size();i++) { b[i]=arr.get(i); } for(int i=0;i<arr1.size();i++) { c[i]=arr1.get(i); } arr.clear();     arr1.clear();    pn(val(b,m,c,n1,dp)); } static Scanner sc = new Scanner(System.in); static PrintWriter out = new PrintWriter(System.out); static void pn(Object o){out.println(o);out.flush();} static int I() throws IOException{return sc.nextInt();} static int[] Ai(int n) throws IOException{int[] arr = new int[n];for (int i = 0; i < n; i++)arr[i] = I();return arr;} static void dyn(int dp[][],int n,int m,int z)throws IOException {for(int i=0;i<n;i++){ for(int j=0;j<m;j++){ dp[i][j]=z;}} } public static void main(String[] args)throws IOException{try{boolean oj=true;if(oj==true) {AnotherReader sk=new AnotherReader();PrintWriter out=new PrintWriter(System.out);} else {AnotherReader sk=new AnotherReader(100);out=new PrintWriter(""output.txt"");} {process();}out.flush();out.close();}catch(Exception e){return;}}} ","import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Scanner; public class D {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = 1;         for (int i = 0; i < t; i++) {             solve(sc, pw);         }         pw.close();     }     static void solve(Scanner in, PrintWriter out){         int n = in.nextInt();         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = in.nextInt();         }         int[] pre = new int[n + 1];         List<Integer> z = new ArrayList<>();         List<Integer> o = new ArrayList<>();         int cnt = 0;         for (int i = 0; i < n; i++) {             if (arr[i] == 0) {                 cnt++;                 z.add(i);             }else{                 o.add(i);             }         }         int[][] dp = new int[cnt + 1][(n - cnt) + 1];         int one = n - cnt;         Arrays.fill(dp[0], 100000000);         dp[0][0] = 0;         int min = 100000000;         for (int i = 1; i <= cnt; i++) {             Arrays.fill(dp[i], 100000000);             dp[i][0] = 0;             for (int j = 1; j <= Math.min(one, i); j++) {                 if (cnt - i < one - j){                     dp[i][j] = 100000000;                 }else{                     dp[i][j] = Math.min(dp[i - 1][j - 1] + Math.abs(o.get(j - 1) - z.get(i - 1)), dp[i - 1][j]);                 }                 if (j == one){                     min = Math.min(min, dp[i][j]);                 }             }         }         min = Math.min(min, dp[0][n - cnt]);         out.println(min);     }                                                   } ",0
823,"import java.util.*; import java.io.*; public class Armchairs{     public static void main(String[] args) {         FastReader fr = new FastReader();         PrintWriter out = new PrintWriter(System.out);         Scanner sc= new Scanner (System.in);                           int t =fr.nextInt();         ArrayList <Integer> chairs= new ArrayList<>();         ArrayList <Integer> free= new ArrayList<>();         for (int i = 0; i < t; i++) {             int state =fr.nextInt();             if(state==1)             {                 chairs.add(i);             }             else{                 free.add(i);             }         }         int [][] dp=new int [t][t];         for (int[] is : dp) {             Arrays.fill(is, -1);         }         int ans=solve(chairs,free,0,0,chairs.size(),dp);         out.println(ans);                       out.flush();         sc.close();     }              private static int solve(ArrayList<Integer> chairs, ArrayList<Integer> free, int i, int j, int size,int [][] dp) {         if (dp[i][j]!=-1) {             return dp[i][j];         }         if (size==0) {             return 0;         }         if (j==free.size()) {             return 10000000;         }         int a=solve(chairs, free, i, j+1, size,dp);         int b=Math.abs(chairs.get(i)-free.get(j))+solve(chairs, free, i+1, j+1, size-1,dp);         dp[i][j]=Math.min(a, b);         return dp[i][j];     }                                         } ","import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; import java.util.ArrayList; import java.util.Arrays; public class Armchairs {     static  ArrayList<Integer> f;     static ArrayList<Integer> u;     static int dp[][];     static int fun(int i, int j){         if(i == f.size()) return 0;         if(j == u.size()) return 99999999;         if(dp[i][j] != -1) return dp[i][j];         int ans1 = fun(i, j+1);         int ans2 = fun(i+1, j+1) + Math.abs(f.get(i)-u.get(j));         return dp[i][j] = Math.min(ans1, ans2);     }     private static int solve(int n, int a[]) {         for (int i = 0; i < n; i++) {             if (a[i]==0)                 u.add(i);             else                 f.add(i);         }         return fun(0,0);     }     public static void main(String[] args)             throws IOException {         Scanner s = new Scanner();         int t = 1;         StringBuilder ans = new StringBuilder();         int count = 0;         while (t-- > 0) {             int n = s.nextInt();             int a[] = new int[n];             dp=new int[n][n];             for (int i = 0; i < n; i++) {                 a[i]=s.nextInt();             }             f=new ArrayList<>();             u=new ArrayList<>();             for( int i=0; i<n; i++) Arrays.fill(dp[i],-1);             ans.append(solve(n, a)).append(""\n"");         }         System.out.println(ans.toString());     }                               } ",0
824,"import java.util.*; import java.io.*; public class C {     static class Scan {         private byte[] buf=new byte[1024];         private int index;         private InputStream in;         private int total;         public Scan()         {             in=System.in;         }         public int scan()throws IOException         {             if(total<0)             throw new InputMismatchException();             if(index>=total)             {                 index=0;                 total=in.read(buf);                 if(total<=0)                 return -1;             }             return buf[index++];         }         public int scanInt()throws IOException         {             int integer=0;             int n=scan();             while(isWhiteSpace(n))             n=scan();             int neg=1;             if(n=='-')             {                 neg=-1;                 n=scan();             }             while(!isWhiteSpace(n))             {                 if(n>='0'&&n<='9')                 {                     integer*=10;                     integer+=n-'0';                     n=scan();                 }                 else throw new InputMismatchException();             }             return neg*integer;         }                           private boolean isWhiteSpace(int n)         {             if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)             return true;             return false;         }     }                                        public static void main(String args[]) throws IOException {         Scan input=new Scan();         StringBuilder ans=new StringBuilder("""");         int test=input.scanInt();         for(int tt=1;tt<=test;tt++) {             int n=input.scanInt();             int m=input.scanInt();             int x=input.scanInt();             ans.append(""YES\n"");             TreeMap<Integer,Stack<Integer>> tm=new TreeMap<>();             for(int i=1;i<=m;i++) {                 ans.append(i+"" "");                 int tmp=input.scanInt();                 if(!tm.containsKey(tmp)) {                     Stack<Integer> stck=new Stack<>();                     stck.add(i);                     tm.put(tmp, stck);                 }                 else {                     Stack<Integer> stck=tm.get(tmp);                     stck.add(i);                 }             }             for(int i=m;i<n;i++) {                 int tmp=input.scanInt();                 int min=tm.firstKey();                 Stack<Integer> stck=tm.get(min);                 int indx=stck.pop();                 ans.append(indx+"" "");                 if(stck.isEmpty()) {                     tm.remove(min);                 }                 tmp+=min;                                  if(!tm.containsKey(tmp)) {                     stck=new Stack<>();                     stck.add(indx);                     tm.put(tmp, stck);                 }                 else {                     stck=tm.get(tmp);                     stck.add(indx);                 }             }             ans.append(""\n"");         }         System.out.println(ans);     } } ","import java.util.*; import java.io.*; public class C {     static class Scan {         private byte[] buf=new byte[1024];         private int index;         private InputStream in;         private int total;         public Scan()         {             in=System.in;         }         public int scan()throws IOException         {             if(total<0)             throw new InputMismatchException();             if(index>=total)             {                 index=0;                 total=in.read(buf);                 if(total<=0)                 return -1;             }             return buf[index++];         }         public int scanInt()throws IOException         {             int integer=0;             int n=scan();             while(isWhiteSpace(n))             n=scan();             int neg=1;             if(n=='-')             {                 neg=-1;                 n=scan();             }             while(!isWhiteSpace(n))             {                 if(n>='0'&&n<='9')                 {                     integer*=10;                     integer+=n-'0';                     n=scan();                 }                 else throw new InputMismatchException();             }             return neg*integer;         }                           private boolean isWhiteSpace(int n)         {             if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)             return true;             return false;         }     }                                        public static void main(String args[]) throws IOException {         Scan input=new Scan();         StringBuilder ans=new StringBuilder("""");         int test=input.scanInt();         for(int tt=1;tt<=test;tt++) {             int n=input.scanInt();             int m=input.scanInt();             int x=input.scanInt();             ans.append(""YES\n"");             TreeMap<Integer,Stack<Integer>> tm=new TreeMap<>();             for(int i=1;i<=m;i++) {                 ans.append(i+"" "");                 int tmp=input.scanInt();                 if(!tm.containsKey(tmp)) {                     Stack<Integer> stck=new Stack<>();                     stck.add(i);                     tm.put(tmp, stck);                 }                 else {                     Stack<Integer> stck=tm.get(tmp);                     stck.add(i);                 }             }             for(int i=m;i<n;i++) {                 int tmp=input.scanInt();                 int min=tm.firstKey();                 Stack<Integer> stck=tm.get(min);                 int indx=stck.pop();                 ans.append(indx+"" "");                 if(stck.isEmpty()) {                     tm.remove(min);                 }                 tmp+=min;                                  if(!tm.containsKey(tmp)) {                     stck=new Stack<>();                     stck.add(indx);                     tm.put(tmp, stck);                 }                 else {                     stck=tm.get(tmp);                     stck.add(indx);                 }             }             ans.append(""\n"");         }         System.out.println(ans);     } } ",1
825,"import java.util.*; import java.io.*; public class C {     static class Scan {         private byte[] buf=new byte[1024];         private int index;         private InputStream in;         private int total;         public Scan()         {             in=System.in;         }         public int scan()throws IOException         {             if(total<0)             throw new InputMismatchException();             if(index>=total)             {                 index=0;                 total=in.read(buf);                 if(total<=0)                 return -1;             }             return buf[index++];         }         public int scanInt()throws IOException         {             int integer=0;             int n=scan();             while(isWhiteSpace(n))             n=scan();             int neg=1;             if(n=='-')             {                 neg=-1;                 n=scan();             }             while(!isWhiteSpace(n))             {                 if(n>='0'&&n<='9')                 {                     integer*=10;                     integer+=n-'0';                     n=scan();                 }                 else throw new InputMismatchException();             }             return neg*integer;         }                           private boolean isWhiteSpace(int n)         {             if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)             return true;             return false;         }     }                                        static int n;     static long arr[];     public static void main(String args[]) throws IOException {         Scan input=new Scan();         StringBuilder ans=new StringBuilder("""");         int test=input.scanInt();         for(int tt=1;tt<=test;tt++) {             n=input.scanInt();             arr=new long[n];             for(int i=0;i<n;i++) {                 arr[i]=input.scanInt();             }             ans.append(solve()+""\n"");         }         System.out.println(ans);     }          public static long solve() {         long ans=Long.MAX_VALUE;         long r_min=Long.MAX_VALUE,u_min=Long.MAX_VALUE;         long r_rem=n,u_rem=n,sum=0;                  for(int i=0;i<n;i++) {             if(i%2==0) {                 r_min=Math.min(r_min,arr[i]);                 r_rem--;             }             else {                 u_min=Math.min(u_min,arr[i]);                 u_rem--;             }             sum+=arr[i];             if(i==0) {                 continue;             }                          ans=Math.min(ans,sum+(r_rem*r_min)+(u_rem*u_min));         }                  r_min=Long.MAX_VALUE;         u_min=Long.MAX_VALUE;         r_rem=n;         u_rem=n;         sum=0;                  for(int i=0;i<n;i++) {             if(i%2==1) {                 r_min=Math.min(r_min,arr[i]);                 r_rem--;             }             else {                 u_min=Math.min(u_min,arr[i]);                 u_rem--;             }             sum+=arr[i];             if(i==0) {                 continue;             }                          ans=Math.min(ans,sum+(r_rem*r_min)+(u_rem*u_min));         }                  return ans;     } } ","import java.util.*; import java.io.*; public class C {     static class Scan {         private byte[] buf=new byte[1024];         private int index;         private InputStream in;         private int total;         public Scan()         {             in=System.in;         }         public int scan()throws IOException         {             if(total<0)             throw new InputMismatchException();             if(index>=total)             {                 index=0;                 total=in.read(buf);                 if(total<=0)                 return -1;             }             return buf[index++];         }         public int scanInt()throws IOException         {             int integer=0;             int n=scan();             while(isWhiteSpace(n))             n=scan();             int neg=1;             if(n=='-')             {                 neg=-1;                 n=scan();             }             while(!isWhiteSpace(n))             {                 if(n>='0'&&n<='9')                 {                     integer*=10;                     integer+=n-'0';                     n=scan();                 }                 else throw new InputMismatchException();             }             return neg*integer;         }                           private boolean isWhiteSpace(int n)         {             if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)             return true;             return false;         }     }                                        static int n;     static long arr[];     public static void main(String args[]) throws IOException {         Scan input=new Scan();         StringBuilder ans=new StringBuilder("""");         int test=input.scanInt();         for(int tt=1;tt<=test;tt++) {             n=input.scanInt();             arr=new long[n];             for(int i=0;i<n;i++) {                 arr[i]=input.scanInt();             }             ans.append(solve()+""\n"");         }         System.out.println(ans);     }          public static long solve() {         long ans=Long.MAX_VALUE;         long r_min=Long.MAX_VALUE,u_min=Long.MAX_VALUE;         long r_rem=n,u_rem=n,sum=0;                  for(int i=0;i<n;i++) {             if(i%2==0) {                 r_min=Math.min(r_min,arr[i]);                 r_rem--;             }             else {                 u_min=Math.min(u_min,arr[i]);                 u_rem--;             }             sum+=arr[i];             if(i==0) {                 continue;             }                          ans=Math.min(ans,sum+(r_rem*r_min)+(u_rem*u_min));         }                  r_min=Long.MAX_VALUE;         u_min=Long.MAX_VALUE;         r_rem=n;         u_rem=n;         sum=0;                  for(int i=0;i<n;i++) {             if(i%2==1) {                 r_min=Math.min(r_min,arr[i]);                 r_rem--;             }             else {                 u_min=Math.min(u_min,arr[i]);                 u_rem--;             }             sum+=arr[i];             if(i==0) {                 continue;             }                          ans=Math.min(ans,sum+(r_rem*r_min)+(u_rem*u_min));         }                  return ans;     } } ",1
826,"import java.util.*; import java.io.*; public class C { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(); char[] s = new char[n]; char[] t = new char[n]; s = sc.next().toCharArray(); t = sc.next().toCharArray(); int a = 0, b = 0, c = 0, d = 0; for(int i = 0; i < n; i++) { if(s[i] == '0' && t[i] == '0') a++; if(s[i] == '1' && t[i] == '0') b++; if(s[i] == '0' && t[i] == '1') c++; if(s[i] == '1' && t[i] == '1') d++; } int res = Integer.MAX_VALUE; if(b == c || b+1 == c) { if((b + c) % 2 == 0) { res = Math.min(res, b + c); } } if(a == d || a+1 == d) { if((a + d) % 2 == 1) { res = Math.min(res, a + d); } } if(res == Integer.MAX_VALUE) System.out.println(-1); else System.out.println(res); } } } ","import java.util.*; import java.io.*; public class C { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(); char[] s = new char[n]; char[] t = new char[n]; s = sc.next().toCharArray(); t = sc.next().toCharArray(); int a = 0, b = 0, c = 0, d = 0; for(int i = 0; i < n; i++) { if(s[i] == '0' && t[i] == '0') a++; if(s[i] == '1' && t[i] == '0') b++; if(s[i] == '0' && t[i] == '1') c++; if(s[i] == '1' && t[i] == '1') d++; } int res = Integer.MAX_VALUE; if(b == c || b+1 == c) { if((b + c) % 2 == 0) { res = Math.min(res, b + c); } } if(a == d || a+1 == d) { if((a + d) % 2 == 1) { res = Math.min(res, a + d); } } if(res == Integer.MAX_VALUE) System.out.println(-1); else System.out.println(res); } } } ",1
827,"import java.util.*; import java.io.*; public class C { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(); char[] s = new char[n]; char[] t = new char[n]; s = sc.next().toCharArray(); t = sc.next().toCharArray(); int a = 0, b = 0, c = 0, d = 0; for(int i = 0; i < n; i++) { if(s[i] == '0' && t[i] == '0') a++; if(s[i] == '1' && t[i] == '0') b++; if(s[i] == '0' && t[i] == '1') c++; if(s[i] == '1' && t[i] == '1') d++; } int res = Integer.MAX_VALUE; if(b == c || b+1 == c) { if((b + c) % 2 == 0) { res = Math.min(res, b + c); } } if(a == d || a+1 == d) { if((a + d) % 2 == 1) { res = Math.min(res, a + d); } } if(res == Integer.MAX_VALUE) System.out.println(-1); else System.out.println(res); } } } ","import java.util.*; import java.lang.*; import java.io.*; import java.math.BigInteger; import java.text.DecimalFormat; public final class Solution {     static int inf = Integer.MAX_VALUE;     static long mod = 1000000000 + 7;       static void ne(Scanner sc, BufferedWriter op) throws Exception {             int n=sc.nextInt();      String one=sc.next();      String two=sc.next();      int _10=0;      int _00=0;      int _11=0;      int _01=0;    for(int i=0;i<n;i++){        int c1=one.charAt(i)-'0';        int c2=two.charAt(i)-'0';        if(c1==0 && c2==0){            _00++;        }        if(c1==1 && c2==0){            _10++;        }        if(c1==1 && c2==1){            _11++;        }        if(c1==0 && c2==1){            _01++;        }    }    int same=_00+_11;    int diff=_01+_10;    if(same==n){       op.write(""0\n"");       return;    }    if(same==1 && _11==1){        op.write(""1\n"");        return;    }      int ans=inf;          if(_11-_00==1 && _00!=0 && _11!=0){                  ans=Math.min(ans,same);      }      if(_10 ==_01 && _10!=0 && _01!=0){         ans=Math.min(ans,diff);      }          if(ans==inf){         op.write(""-1\n"");     }else{         op.write(ans+""\n"");     }  }                public static void main(String[] args) throws Exception {         BufferedWriter op = new BufferedWriter(new OutputStreamWriter(System.out));                  Scanner sc= new Scanner(System.in);         int t = sc.nextInt();         while (t-->0){ ne(sc, op); }                                                           op.flush();     }                        }   ",0
828,"import java.util.*; import java.io.*; public class C1615{ static FastScanner fs = null; public static void main(String[] args) { fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); while (t-->0) { int n = fs.nextInt(); String a = fs.next(); String b = fs.next(); char ch1[] = a.toCharArray(); char ch2[] = b.toCharArray(); int c00 = 0; int c01 = 0; int c10 = 0; int c11 = 0; for(int i=0;i<n;i++){ if(ch1[i]=='0'){ if(ch2[i]=='0'){ c00+=1; } else{ c01+=1; } } else{ if(ch2[i]=='0'){ c10+=1; } else{ c11+=1; } } } int ans = -1; if((c11-c00)==1 || c10==c01){ int s1 = (int)1e7;  int s2 = (int)1e7; if((c11-c00)==1){ s1 = c11+c00; } if(c10==c01) s2 = c10+c01; ans = Math.min(s1,s2);  } out.println(ans); } out.close(); } } ","import java.io.*; import java.util.*; public class B { public static void main(String[] args)throws IOException { FastScanner scan = new FastScanner(); PrintWriter output = new PrintWriter(System.out); int t = scan.nextInt(); for(int tt = 0;tt<t;tt++) { int n = scan.nextInt(); char initial[] = scan.next().toCharArray(); char desired[] = scan.next().toCharArray(); int lit1 = 0, lit2 = 0; int ans = Integer.MAX_VALUE; for(int i = 0;i<n;i++) { if(initial[i]=='1') lit1++; if(desired[i]=='1') lit2++; } if(lit1==lit2) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]!=desired[i]) count++; ans = Math.min(ans, count); } if(lit2==(n-lit1+1)) { int count = 0; for(int i = 0;i<n;i++) if(initial[i]==desired[i]) count++; ans = Math.min(ans, count); } if(ans == Integer.MAX_VALUE) ans = -1; output.println(ans); } output.flush(); } } ",0
829,"import java.util.*; import java.io.*; public class C1615{ static FastScanner fs = null; public static void main(String[] args) { fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); while (t-->0) { int n = fs.nextInt(); String a = fs.next(); String b = fs.next(); char ch1[] = a.toCharArray(); char ch2[] = b.toCharArray(); int c00 = 0; int c01 = 0; int c10 = 0; int c11 = 0; for(int i=0;i<n;i++){ if(ch1[i]=='0'){ if(ch2[i]=='0'){ c00+=1; } else{ c01+=1; } } else{ if(ch2[i]=='0'){ c10+=1; } else{ c11+=1; } } } int ans = -1; if((c11-c00)==1 || c10==c01){ int s1 = (int)1e7;  int s2 = (int)1e7; if((c11-c00)==1){ s1 = c11+c00; } if(c10==c01) s2 = c10+c01; ans = Math.min(s1,s2);  } out.println(ans); } out.close(); } } ","import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ",0
830,"import java.util.*; import java.io.*; public class CF_1525_D{ public static void main(String[] args) throws Exception{ BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out)); StringBuilder sb = new StringBuilder(); StringTokenizer st; int n = Integer.parseInt(br.readLine()); int a[] = new int[n]; ArrayList<Integer> pos = new ArrayList<Integer>(); st = new StringTokenizer(br.readLine()); for(int i=0;i<n;i++){ a[i] = Integer.parseInt(st.nextToken()); if(a[i]==1) pos.add(i); } int z = pos.size(); int dp[][] = new int[n+1][z+1]; for(int i=0;i<=n;i++) Arrays.fill(dp[i], Integer.MAX_VALUE); dp[0][0] = 0; for(int i=0;i<n;i++){ for(int j=0;j<=z;j++){ if(dp[i][j] == Integer.MAX_VALUE) continue; dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]); if(j<z && a[i]==0) dp[i+1][j+1] = Math.min(dp[i+1][j+1], dp[i][j]+Math.abs(pos.get(j)-i)); } } pw.print(dp[n][z]); pw.flush(); pw.close(); } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main {    static  Reader sc=new Reader();      static ArrayList<Integer> one;   static ArrayList<Integer> zero;   static long dp[][];   static void ini()    {       for(long a[] : dp)         Arrays.fill(a,-1);    } static long solve(int i,int j)  {     if(i==one.size()) return 0;     if(j==zero.size()) return int_max;          if(dp[i][j]!=-1) return dp[i][j];           long ans1=Math.abs(one.get(i)-zero.get(j))+solve(i+1,j+1);      long ans2=solve(i,j+1);      return dp[i][j]=Math.min(ans1,ans2);  }                                                                                                                                                                                                                                                                                                                                                              public static void main (String[] args) throws java.lang.Exception    { try{      int t = 1;   int max=5001;   dp=new long[max][max];   ini();   one=new ArrayList<>();   zero=new ArrayList<>();   while(t-->0)     {         int n=sc.nextInt();        long ans=0;        int a[]=new int[n];        for(int i=0;i<n;i++)          {            a[i]=sc.nextInt();            if(a[i]==1)             one.add(i);            else             zero.add(i);          }                                                                                                                                                                                                      ans=solve(0,0);     out.println(ans);     }      out.flush();      out.close();    }      catch(Exception e)  {} }                                               static  PrintWriter out=new PrintWriter(System.out);   static int int_max=Integer.MAX_VALUE;   static int int_min=Integer.MIN_VALUE;   static long long_max=Long.MAX_VALUE;   static long long_min=Long.MIN_VALUE; } ",0
831,"import java.util.*; import java.io.*; public class CF_1547_E{ public static void main(String[] args) throws Exception{ BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out)); StringBuilder sb = new StringBuilder(); StringTokenizer st, st1; int q = Integer.parseInt(br.readLine()); while(q-->0){ br.readLine(); st = new StringTokenizer(br.readLine()); int n = Integer.parseInt(st.nextToken()); int k = Integer.parseInt(st.nextToken()); PriorityQueue<Pair> right_side = new PriorityQueue<Pair>(); int at[] = new int[n+1]; st = new StringTokenizer(br.readLine()); st1 = new StringTokenizer(br.readLine()); for(int i=0;i<k;i++){ int a = Integer.parseInt(st.nextToken()); int t = Integer.parseInt(st1.nextToken()); at[a] = t; right_side.add(new Pair(a, t)); } long left= Integer.MAX_VALUE; for(int i=1;i<=n;i++){ while(right_side.isEmpty()==false && right_side.peek().a<=i){ Pair temp = right_side.poll(); if(temp.t - temp.a <= left) left = temp.t - temp.a; } if(at[i]!=0){ if(at[i]-i <=left) left = at[i] - i; } long ans = left+i; if(!right_side.isEmpty()){ Pair right = right_side.peek(); ans = Math.min(ans, right.t+right.a-i); } sb.append(ans+"" ""); } sb.append(""\n""); } pw.print(sb); pw.flush(); pw.close(); } } class Pair implements Comparable<Pair>{ int a, t; Pair(int a, int t){ this.a = a; this.t = t; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.StringTokenizer; public class Main {     static String solve(int n, int k, int[] a, int[] t) {         Pair[] pairs = new Pair[k];         for (int i = 0; i < k; i++) {             pairs[i] = new Pair(a[i], t[i]);         }         Arrays.sort(pairs);         int[] ret = new int[n + 1];         Arrays.fill(ret, Integer.MAX_VALUE);         int pIdx = 0;         int ct = pairs[pIdx].t;         ret[pairs[pIdx].a] = ct;         for (int i = pairs[pIdx].a + 1; i <= n; i++) {             ct++;             if (pIdx + 1 < k && pairs[pIdx + 1].a == i) {                 if (ct > pairs[pIdx + 1].t) {                     ct = pairs[pIdx + 1].t;                 }                 pIdx++;             }             ret[i] = ct;                      }                  pIdx = k - 1;         ct = pairs[pIdx].t;         for (int i = pairs[pIdx].a - 1; i > 0; i--) {             ct++;             if (pIdx - 1 >= 0 && pairs[pIdx - 1].a == i) {                 if (ct > pairs[pIdx - 1].t) {                     ct = pairs[pIdx - 1].t;                 }                 pIdx--;             }             if (ct < ret[i]) {                 ret[i] = ct;             }                      }         StringBuilder out = new StringBuilder();         for (int i = 1; i <= n; i++) {             out.append(ret[i]).append("" "");         }                           return out.toString();     }     static class Pair implements Comparable<Pair> {         int a, t;         public Pair(int a, int t) {             this.a = a;             this.t = t;         }              }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st = new StringTokenizer(br.readLine());         StringBuilder out = new StringBuilder();         int T = Integer.parseInt(st.nextToken());         while (T-- > 0) {             st = new StringTokenizer(br.readLine());             st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             int k = Integer.parseInt(st.nextToken());             st = new StringTokenizer(br.readLine());             int[] a = new int[k];             for (int i = 0; i < k; i++) {                 a[i] = Integer.parseInt(st.nextToken());             }             st = new StringTokenizer(br.readLine());             int[] t = new int[k];             for (int i = 0; i < k; i++) {                 t[i] = Integer.parseInt(st.nextToken());             }             out.append(solve(n, k, a, t)).append(""\n"");         }         System.out.println(out);     } } ",0
832,"import java.util.*; import java.io.*; public class C_Interesting_Story{     public static void main(String[] args) {         FastScanner s= new FastScanner();         StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){         int n=s.nextInt();         ArrayList<String> list = new ArrayList<String>();         for(int i=0;i<n;i++){             String str=s.nextToken();             list.add(str);         }         long max=Integer.MIN_VALUE;         for(int i=97;i<102;i++){             char ch=(char)i;             ArrayList<Integer> nice = new ArrayList<Integer>();             for(int j=0;j<n;j++){                 String obj=list.get(j);                 int count=0;                 for(int k=0;k<obj.length();k++){                      char ch2=obj.charAt(k);                      if(ch2==ch){                          count++;                      }                 }                 int num=obj.length()-count;                 nice.add(count-num);             }             Collections.sort(nice,Collections.reverseOrder());             long sum=0;             long counting=0;             for(int j=0;j<nice.size();j++){                 sum+=nice.get(j);                 if(sum>0){                     counting++;                 }                 else{                     break;                 }             }             max=Math.max(max,counting);         }         res.append(max+""\n"");         p++;     }     System.out.println(res);     }      } ","import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main{      static int dest1; static int dest2; public static void main(String args[]){        FastScanner in = new FastScanner(); int test=in.nextInt();                 while(test-->0){                     int n=in.nextInt();                     int count[][]=new int[n][5];                     int total[]=new int[n];                     String words[]=new String[n];                     for(int i=0;i<n;i++){                         words[i]=in.next();                         for(int j=0;j<words[i].length();j++)                             count[i][words[i].charAt(j)-'a']++;                                                  total[i]=words[i].length();                     }                     int max=Integer.MIN_VALUE;                    for(int i=0;i<5;i++){                                               Integer ans[]=new Integer[n];                       for(int j=0;j<n;j++){                           ans[j]=count[j][i]-(total[j]-count[j][i]);                       }                       Arrays.sort(ans,Collections.reverseOrder());                       int j=0;                       int r=0;                       while(j<n && r+ans[j]>0){                           r+=ans[j];                           j++;                       }                       max=Math.max(j,max);                                           }                    System.out.println(max);                                                          } }         } ",0
833,"import java.util.*; import java.io.*; public class C_Minimum_Grid_Path{     public static void main(String[] args) {         FastScanner s= new FastScanner();         StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){        int n=s.nextInt();        int array[]= new int[n];        long sumodd[]= new long[n];        long sumeven []= new long[n];        long minodd[]= new long[n];        long mineven[]= new long[n];        long sume=0;        long sumo=0;        for(int i=0;i<n;i++){            array[i]=s.nextInt();            if(i%2==0){                sume+=array[i];                sumeven[i]=sume;                if(i==0){                    mineven[i]=array[i];                }                else{                    mineven[i]=Math.min(array[i],mineven[i-2]);                }            }            else{                sumo+=array[i];                sumodd[i]=sumo;                if(i==1){                 minodd[i]=array[i];             }             else{                 minodd[i]=Math.min(array[i],minodd[i-2]);             }            }        }        long ans=Long.MAX_VALUE;        for(int i=1;i<n;i++){            long temp=0;            if(i%2==0){                int num=i/2;               temp=(mineven[i]*(n-num))+(sumeven[i]-mineven[i])+(minodd[i-1]*(n-(num-1)))+(sumodd[i-1]-minodd[i-1]);               ans=Math.min(ans,temp);            }            else{                int num=i/2;                temp=(minodd[i]*(n-num))+(sumodd[i]-minodd[i])+(mineven[i-1]*(n-num))+(sumeven[i-1]-mineven[i-1]);                ans=Math.min(ans,temp);            }        }        res.append(ans+""\n"");        p++;     }     System.out.println(res);     }      } ","import java.io.*; import java.util.*; public class Code {   public static void main(String[] args) {     FastReader in = new FastReader();     PrintWriter out = new PrintWriter(System.out);     int t = in.nextInt();     while (t-- > 0) {       int n = in.nextInt();       long a[] = new long[n];       for (int i = 0; i < n; i++) {         a[i] = in.nextLong();       }       long result = Long.MAX_VALUE;       for (int i = 0; i < 2; i++) {         long x = 0;         long y = 0;         long minX = Long.MAX_VALUE;         long minY = Long.MAX_VALUE;         long prefix = 0;         for (int j = 0; j < n; j++) {           if (j % 2 == i) {             if (j > 0) {               result = Math.min(result, (n - x) * a[j] + (n - y) * minY + prefix);             }             ++x;             prefix += a[j];             minX = Math.min(minX, a[j]);           } else {             if (j > 0) {               result = Math.min(result, (n - y) * a[j] + (n - x) * minX + prefix);             }             ++y;             prefix += a[j];             minY = Math.min(minY, a[j]);           }         }       }       out.println(result);     }     out.close();   }             } ",0
834,"import java.util.*; import java.io.*; public class C_Minimum_Grid_Path{     public static void main(String[] args) {         FastScanner s= new FastScanner();         StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){        int n=s.nextInt();        int array[]= new int[n];        long sumodd[]= new long[n];        long sumeven []= new long[n];        long minodd[]= new long[n];        long mineven[]= new long[n];        long sume=0;        long sumo=0;        for(int i=0;i<n;i++){            array[i]=s.nextInt();            if(i%2==0){                sume+=array[i];                sumeven[i]=sume;                if(i==0){                    mineven[i]=array[i];                }                else{                    mineven[i]=Math.min(array[i],mineven[i-2]);                }            }            else{                sumo+=array[i];                sumodd[i]=sumo;                if(i==1){                 minodd[i]=array[i];             }             else{                 minodd[i]=Math.min(array[i],minodd[i-2]);             }            }        }        long ans=Long.MAX_VALUE;        for(int i=1;i<n;i++){            long temp=0;            if(i%2==0){                int num=i/2;               temp=(mineven[i]*(n-num))+(sumeven[i]-mineven[i])+(minodd[i-1]*(n-(num-1)))+(sumodd[i-1]-minodd[i-1]);               ans=Math.min(ans,temp);            }            else{                int num=i/2;                temp=(minodd[i]*(n-num))+(sumodd[i]-minodd[i])+(mineven[i-1]*(n-num))+(sumeven[i-1]-mineven[i-1]);                ans=Math.min(ans,temp);            }        }        res.append(ans+""\n"");        p++;     }     System.out.println(res);     }      } ","import java.io.BufferedOutputStream; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; public class Main {     static class Clock {         protected long start, stop;         public void start() {             start = System.currentTimeMillis();         }                       }     public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));               static long mod = 1000000007;                         static int parent[];     static int rank[];               public static long arr[];     public static int arr1[];                         public static void main(String[] args) throws Exception {         FastReader sc = new FastReader();         Clock clock = new Clock();         clock.start();        int t1=sc.nextInt();         for (int t = 0; t <t1 ; t++) {           int n=sc.nextInt();           long arr[]=new long[n];             for (int i = 0; i < n; i++) {                 arr[i]=sc.nextLong();             }           long sum1=0;           long sum2=0;           long min1 =Long.MAX_VALUE;           long min2 =Long.MAX_VALUE;           long brr[]=new long[n];             for (int i = 0; i <n ; i+=2) {                 int nn =i/2;                 min1=Math.min(arr[i],min1);                 sum1+=arr[i];                 long x =(sum1-min1) + min1*(n-nn);                                brr[i]=x;             }             for (int i = 1; i <n ; i+=2) {                 int nn =i/2;                                  min2=Math.min(arr[i],min2);                 sum2+=arr[i];                 long x =(sum2-min2) + min2*(n-nn);                 brr[i]=x;             }             long min=Long.MAX_VALUE;             for (int i = 1; i < n; i++) {                 min=Math.min(brr[i]+brr[i-1],min);             }             out.println(min);                                  }         out.close();     } } ",0
835,"import java.util.*; import java.io.*; public class C_Not_Assigning {               static class Edge{         public int node;         public int next;         Edge(int node, int next){             this.node = node;             this.next = next;         }         }     public static void dfs(int u, ArrayList<ArrayList<Edge>> g,int[] vis, int flag, int[] weight){         vis[u] = 1;         for(Edge e : g.get(u)){             if(vis[e.node] == 0){                 if(flag == 0)                 {                     weight[e.next] = 2;                     dfs(e.node, g, vis, 1, weight);                 }                 else                 {                     weight[e.next] = 5;                     dfs(e.node, g, vis, 0, weight);                 }             }         }     }          public static void main(String[] args) {         FastReader reader = new FastReader();         int t = reader.nextInt();         while(t-->0){             int n = reader.nextInt();             int[] order = new int[n+1];             int flag = 0;                                        ArrayList<ArrayList<Edge>> graph= new ArrayList<>();             for(int i=0;i<n+1;i++){                 graph.add(new ArrayList<>());             }             for(int i=0;i<n-1;i++){                 int u = reader.nextInt();                 int v = reader.nextInt();                 order[u]++;                 order[v]++;                 graph.get(u).add(new Edge(v, i));                 graph.get(v).add(new Edge(u, i));                 if(order[u]==3 || order[v]==3){                     flag = 1;                 }             }             if(flag == 1)                 System.out.println(-1);             else{                 for(int i=1;i<=n;i++){                     if(order[i] == 1){                         int[] vis = new int[n+1];                         int[] weight = new int[n];                         dfs(i, graph, vis, 0, weight);                         for(int j =0;j<n-1;j++){                             System.out.print(weight[j] + "" "");                         }                         break;                     }                 }                 System.out.println();             }         }     } } ","import java.io.*; import java.util.*; public class practice { static FastScanner fs = new FastScanner(); public static void main(String[] args) { int t = 1; t = fs.nextInt();    for(int i=1;i<=t;i++) { solve(t); } } public static void dfs(int u, boolean visited[], ArrayList<ArrayList<Integer>> g[], int ans[], int x) { visited[u] = true; for(ArrayList<Integer> v:g[u]) { if(!visited[v.get(0)]) { ans[v.get(1)]=x; dfs(v.get(0),visited,g,ans,x^1); } } return; } @SuppressWarnings(""unused"") public static void solve(int tt) { int n = fs.nextInt(); @SuppressWarnings(""unchecked"") ArrayList<ArrayList<Integer>> g[] = new ArrayList[n]; for(int i=0;i<n;i++)g[i]=new ArrayList<ArrayList<Integer>>(); int ans[] = new int[n]; boolean visited[] = new boolean[n]; int deg[] = new int[n]; for(int i=0;i<n;i++)deg[i]=0; for(int i=0;i<n-1;i++) { int u = fs.nextInt() - 1;int v = fs.nextInt() - 1; ArrayList<Integer> L1=new ArrayList<Integer>(); L1.add(v);L1.add(i); g[u].add(L1); ArrayList<Integer> L2=new ArrayList<Integer>(); L2.add(u);L2.add(i); g[v].add(L2); deg[u]++; deg[v]++; } int leaf=-1; boolean notcool=false; for(int i=0;i<n;i++) { if(deg[i]>2) { System.out.println(-1); return; } } for(int i=0;i<n;i++) { if(deg[i]==1) { leaf=i; break; } } dfs(leaf,visited,g,ans,2); for(int i=0;i<n-1;i++)System.out.print(ans[i]+"" ""); System.out.println(); return; } } ",0
836,"import java.util.*; import java.io.*; public class C_Not_Assigning {               static class Edge{         public int node;         public int next;         Edge(int node, int next){             this.node = node;             this.next = next;         }         }     public static void dfs(int u, ArrayList<ArrayList<Edge>> g,int[] vis, int flag, int[] weight){         vis[u] = 1;         for(Edge e : g.get(u)){             if(vis[e.node] == 0){                 if(flag == 0)                 {                     weight[e.next] = 2;                     dfs(e.node, g, vis, 1, weight);                 }                 else                 {                     weight[e.next] = 5;                     dfs(e.node, g, vis, 0, weight);                 }             }         }     }          public static void main(String[] args) {         FastReader reader = new FastReader();         int t = reader.nextInt();         while(t-->0){             int n = reader.nextInt();             int[] order = new int[n+1];             int flag = 0;                                        ArrayList<ArrayList<Edge>> graph= new ArrayList<>();             for(int i=0;i<n+1;i++){                 graph.add(new ArrayList<>());             }             for(int i=0;i<n-1;i++){                 int u = reader.nextInt();                 int v = reader.nextInt();                 order[u]++;                 order[v]++;                 graph.get(u).add(new Edge(v, i));                 graph.get(v).add(new Edge(u, i));                 if(order[u]==3 || order[v]==3){                     flag = 1;                 }             }             if(flag == 1)                 System.out.println(-1);             else{                 for(int i=1;i<=n;i++){                     if(order[i] == 1){                         int[] vis = new int[n+1];                         int[] weight = new int[n];                         dfs(i, graph, vis, 0, weight);                         for(int j =0;j<n-1;j++){                             System.out.print(weight[j] + "" "");                         }                         break;                     }                 }                 System.out.println();             }         }     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.util.concurrent.ThreadLocalRandom; public class A {     private static void sport(List<Integer>[] g, Map<W, Integer> map) {         int n = g.length;         for (int i = 0; i < n; i++) {             if (g[i].size() > 2) {                 System.out.println(-1);                 return;             }         }         int[] ans = new int[n - 1];                  Queue<int[]> queue = new LinkedList<>();         Set<Integer> seen = new HashSet<>();         int val = 3;         for (Integer integer : g[0]) {             Integer idx = map.get(new W(0, integer));             ans[idx] = val;             queue.add(new int[]{val, integer});             seen.add(integer);             val = val == 2 ? 3 : 2;         }         seen.add(0);         while (!queue.isEmpty()) {             int[] poll = queue.poll();             for (Integer u : g[poll[1]]) {                 if (!seen.contains(u)) {                     seen.add(u);                     int curr = poll[0] == 2 ? 3 : 2;                     Integer integer = map.get(new W(poll[1], u));                     ans[integer] = curr;                     queue.add(new int[]{curr, u});                 }             }         }         for (int an : ans) {             System.out.print(an + "" "");         }         System.out.println();     }     static class W {         int u;         int v;         public W(int u, int v) {             this.u = u;             this.v = v;         }                       }               public static void main(String[] args) throws IOException {         FastScanner sc = new FastScanner();         int t = sc.nextInt();         for (int i = 0; i < t; i++) {             int n = sc.nextInt();             List<Integer>[] g = new ArrayList[n];             for (int j = 0; j < n; j++) {                 g[j] = new ArrayList<>();             }             Map<W, Integer> map = new HashMap<>();             for (int j = 0; j < n - 1; j++) {                 int u = sc.nextInt() - 1;                 int v = sc.nextInt() - 1;                 g[u].add(v);                 g[v].add(u);                 map.put(new W(u, v), j);                 map.put(new W(v, u), j);             }             sport(g, map);         }     }           } ",0
837,"import java.util.*; import java.io.*; public class C_Phoenix_and_Towers{     public static void main(String[] args) {         FastScanner s= new FastScanner();         StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){         int n=s.nextInt();         int m=s.nextInt();         int x=s.nextInt();         int array[]= new int[n];         HashMap<Integer,Queue<Integer>> indices = new HashMap<Integer,Queue<Integer>>();         for(int i=0;i<n;i++){             array[i]=s.nextInt();             if(indices.containsKey(array[i])){               indices.get(array[i]).add(i);             }             else{                 Queue<Integer> obj = new LinkedList<Integer>();                 obj.add(i);                 indices.put(array[i],obj);             }         }         long tower[]= new long[m];         int ans[]= new int[n];         Arrays.sort(array);         int k=0;         for(int i=0;i<n;i++){             tower[k]+=array[i];             int a=indices.get(array[i]).poll();             ans[a]=k+1;             k++;             if(k==m){                 k=0;             }         }         long max=Long.MIN_VALUE;         long min=Long.MAX_VALUE;         for(int i=0;i<m;i++){             min=Math.min(min,tower[i]);             max=Math.max(max,tower[i]);         }         if(max-min<=x){             res.append(""YES\n"");             for(int i=0;i<n;i++){                 res.append(ans[i]+"" "");             }             res.append(""\n"");         }         else{             res.append(""NO\n"");         }         p++;     }     System.out.println(res);     }      } ","import java.util.*; import java.io.*; public class C { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); StringBuilder sb = new StringBuilder(); while(T-->0) { int n = sc.nextInt(); int m = sc.nextInt(); long x = sc.nextLong(); long[] arr = new long[n]; for(int i = 0; i < n; i++) { arr[i] = sc.nextLong(); } int[] res = new int[n]; PriorityQueue<Pair> q = new PriorityQueue<>(); for(int i = 0; i < m; i++) { q.add(new Pair(i+1, 0)); } for(int i = 0; i < n; i++) { Pair p = q.poll(); res[i] = p.i; q.add(new Pair(p.i, p.w + arr[i])); } sb.append(""YES\n""); for(int i = 0; i < n; i++) { sb.append(res[i]+"" ""); } sb.replace(sb.length()-1, sb.length(), ""\n""); } PrintWriter pw = new PrintWriter(System.out); pw.println(sb.toString().trim()); pw.flush(); } static class Pair implements Comparable<Pair>{ int i; long w; public Pair(int i, long w) { this.i = i; this.w = w; } public String toString() { return i+"" ""+w; } } } ",0
838,"import java.util.*; import java.io.*; public class CodeForces {     public void run() {         try {             BufferedReader br = new BufferedReader(new InputStreamReader(System.in));             int q = Integer.parseInt(br.readLine());             while (q-- > 0){                 br.readLine();                 StringTokenizer st = new StringTokenizer(br.readLine());                 int n = Integer.parseInt(st.nextToken());                 int k = Integer.parseInt(st.nextToken());                 int[] a = new int[k];                 int[] t = new int[k];                 long[] L = new long[n];                 long[] R = new long[n];                 for (int i = 0; i < n; i++) {                     L[i] = Integer.MAX_VALUE;                     R[i] = Integer.MAX_VALUE;                 }                 st = new StringTokenizer(br.readLine());                 StringTokenizer st1 = new StringTokenizer(br.readLine());                 for (int i = 0; i < k; i++) {                     a[i] = Integer.parseInt(st.nextToken());                     t[i] = Integer.parseInt(st1.nextToken());                     L[a[i] - 1] = t[i];                     R[a[i] - 1] = t[i];                 }                 for (int i = 1; i < n; i++) {                     L[i] = Math.min(L[i-1] + 1, L[i]);                 }                 for (int i = n - 2; i >= 0; i--) {                     R[i] = Math.min(R[i], R[i + 1] + 1);                 }                 StringBuilder sb = new StringBuilder();                 for (int i = 0; i < n; i++) {                     long tmp = Math.min(L[i], R[i]);                     sb.append(tmp);                     sb.append("" "");                 }                 System.out.println(sb.toString().trim());             }         } catch (Exception e) {             e.printStackTrace();         }     }     public static void main(String[] args) {         new CodeForces().run();     } } ","import java.util.*; import java.lang.*; import java.io.*;   public class Codeforces {     public static void main(String[] args) throws java.lang.Exception {                  BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));        int t = Integer.parseInt(buf.readLine());         StringBuilder sb = new StringBuilder();        for (int i = 0; i < t; i++) {            String st=buf.readLine();           String st1[]=(buf.readLine()).split("" "");           int n=Integer.parseInt(st1[0]);           int k=Integer.parseInt(st1[1]);           int a[]=new int[k];           int temp[]=new int[k];           long arr[]=new long[n];           String st2[]=(buf.readLine()).split("" "");            String st3[]=(buf.readLine()).split("" "");            for(int j=0;j<k;j++)            {                a[j]=Integer.parseInt(st2[j]);                temp[j]=Integer.parseInt(st3[j]);            }           for(int j=0;j<k;j++)           {               arr[a[j]-1]=temp[j];           }           long min=Integer.MAX_VALUE;           long left[]=new long[n];           long right[]=new long[n];           if(arr[0]==0)               left[0]=min;           else               left[0]=arr[0];           for(int j=1;j<n;j++)           {               if(arr[j]==0)               {                   left[j]=left[j-1]+1;               }               else               {                   left[j]=Math.min(left[j-1]+1,arr[j]);               }           }           if(arr[n-1]==0)               right[n-1]=min;           else               right[n-1]=arr[n-1];           for(int j=n-2;j>=0;j--)           {               if(arr[j]==0)               {                   right[j]=right[j+1]+1;               }               else               {                   right[j]=Math.min(right[j+1]+1,arr[j]);               }           }           for(int j=0;j<n;j++)           {               arr[j]=Math.min(left[j],right[j]);               sb.append(arr[j]+"" "");           }           sb.append(""\n"");         }         System.out.println(sb);     } } ",0
839,"import java.util.*; import java.io.*; public class CodeForces { public static void main(String[] args) { FastReader in = new FastReader(); OutputStream op = System.out; PrintWriter out = new PrintWriter(op); int t = in.nextInt(); for (int i = 1; i <= t; i++) { int n=in.nextInt(); int arr[]=new int[n]; for(int j = 0; j < n; j++) arr[j]=in.nextInt(); helper(n,arr,out); out.println(); } out.close(); } public static void helper(int n,int arr[],PrintWriter o)  { int max=Integer.MIN_VALUE; for(int i=2;i<n;i++) max=Math.max(max,arr[i]); int ans=1,low=1,high=max; while(low<=high) { int mid=low+(high-low)/2; if(canFit(mid,arr)) { ans=mid; low=mid+1; } else  high=mid-1; } o.print(ans); } staticboolean canFit(int mid,int arr[]) { int copy[]=Arrays.copyOf(arr, arr.length); for(int i=arr.length-1;i>=0;i--) { if(copy[i]<mid) return false; int min=Math.min(copy[i]-mid,arr[i])/3; if(i>=2){ copy[i-1]+=min; copy[i-2]+=2*min; }} return true; } } ","import java.util.*; public class BalancedStoneHeaps {     public static boolean check(int n, int x, int[] h) {         int[] c_h = new int[n];         for (int i = 0; i < n; i++)             c_h[i] = h[i];         for (int i = n - 1; i >= 2; i--) {             if (c_h[i] < x)                 return false;             int d = Math.min(h[i], c_h[i] - x) / 3;             c_h[i - 1] += d;             c_h[i - 2] += 2 * d;         }         return c_h[0] >= x && c_h[1] >= x;     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] h = new int[n];             int max = Integer.MIN_VALUE;             for (int i = 0; i < n; i++) {                 h[i] = sc.nextInt();                 if (h[i] > max) {                     max = h[i];                 }             }             int l = 0;             int r = max;             while (l < r) {                 int mid = l + (r - l + 1) / 2;                 if (check(n, mid, h)) {                     l = mid;                 } else {                     r = mid - 1;                 }             }             System.out.println(l);         }     } } ",0
840,"import java.util.*; import java.io.*; public class Codeforces {   static int n;   static int[] h = new int[200001];   static boolean check(int x) {     int[] cur_h = new int[n];     for(int i = 0; i < n; i++) cur_h[i] = h[i];     for(int i = n-1; i >= 2; i--) {       if(cur_h[i] < x) return false;       int d = Math.min(h[i], cur_h[i]-x)/3;       cur_h[i-1] += d;       cur_h[i-2] += 2*d;     }     return cur_h[0] >= x && cur_h[1] >= x;   }   public static void main(String[] args) throws Exception {       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));       PrintWriter writer = new PrintWriter(System.out);       int T = Integer.parseInt(br.readLine());       while(T-- > 0) {         n = Integer.parseInt(br.readLine());         StringTokenizer st = new StringTokenizer(br.readLine());         int max = Integer.MIN_VALUE;         for(int i = 0; i < n; i++) {           h[i] = Integer.parseInt(st.nextToken());           max = Math.max(max, h[i]);         }         int l = 0;         int r = max;         while(l < r) {           int mid = l + (r-l+1)/2;           if(check(mid)) l = mid;           else r = mid-1;         }         writer.println(l);       }       writer.close();       br.close();   } } ","import java.io.*; import java.util.*; public class stones {     public static void main (String[] args) throws IOException {                  BufferedReader input = new BufferedReader(new InputStreamReader(System.in));                  PrintWriter out = new PrintWriter(System.out);         int T = Integer.parseInt(input.readLine());         for (int i=0;i<T;i++) {                          int n = Integer.parseInt(input.readLine());             int[] seq = new int[n];             StringTokenizer st = new StringTokenizer(input.readLine());             int low = 0;             int high = 0;             for (int j=0;j<n;j++) {                 seq[j] = Integer.parseInt(st.nextToken());                 high = Math.max(high, seq[j]);             }                          while (low<high) {                 int mid = (low+high+1)/2;                                  if (possible(seq, mid)) {                     low = mid; }                 else high = mid-1; }             out.println(low);         }         out.close();     }     static boolean possible(int[] seq, int goal) {                           int L = seq.length;         int[] arr = Arrays.copyOf(seq, L);                  for (int i=L-1;i>=2;i--) {                          if (arr[i] < goal) return false;             int max_d = Math.min((arr[i] - goal)/3, seq[i]/3);                                       arr[i-1] += max_d;             arr[i-2] += max_d*2;             arr[i] -= max_d*3;         }                  for (int num: arr) {             if (num < goal) return false; }         return true;     } } ",1
841,"import java.util.*; import java.io.*; public class Codeforces {   static long accurateFloor(long a, long b) {     long val = a/b;     while(val*b > a) val--;     return val;   }   public static void main(String[] args) throws Exception {       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));       PrintWriter writer = new PrintWriter(System.out);       int T = Integer.parseInt(br.readLine());       while(T-- > 0) {         StringTokenizer st = new StringTokenizer(br.readLine());         int n = Integer.parseInt(st.nextToken());         long k = Long.parseLong(st.nextToken());         Long[] a = new Long[n];         st = new StringTokenizer(br.readLine());         long[] sum = new long[n];         for(int i = 0; i < n; i++) {           a[i] = Long.parseLong(st.nextToken());         }         Arrays.sort(a);         sum[0] = a[0];         for(int i = 1; i < n; i++) {           sum[i] += sum[i-1]+a[i];         }         long ans = Long.MAX_VALUE;         for(int y = 0; y < n; y++) {                                                                                                              long x = a[0]-accurateFloor(k-sum[n-y-1]+a[0], y+1);           x = Math.max(0, x);           ans = Math.min(ans, y+x);         }         writer.println(ans);       }       writer.close();       br.close();   } } ","import java.math.BigInteger; import java.util.*; import java.io.*; import java.util.concurrent.atomic.AtomicIntegerFieldUpdater; public class CodeForces {     public void run() throws Exception {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         next : while (t-- > 0) {             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             long k = Long.parseLong(st.nextToken());             Long[] a = new Long[n];             st = new StringTokenizer(br.readLine());             for (int i = 0; i < n; i++) {                 a[i] = Long.parseLong(st.nextToken());             }             Arrays.sort(a);             long ans = Long.MAX_VALUE;             long[] lsum = new long[n + 1];             for (int i = 0; i < n; i++) {                 lsum[i + 1] = lsum[i] + a[i];             }             for (long y = 0; y < n; y++) {                 long x = 0;                 if ((k - lsum[n - (int)y] + a[0]) >= 0) {                     x = (k - lsum[n - (int)y] + a[0]) / (y + 1);                 } else {                     if ((k - lsum[n - (int)y] + a[0]) % (y + 1) == 0) {                         x = (k - lsum[n - (int)y] + a[0]) / (y + 1);                     } else {                         x = (k - lsum[n - (int)y] + a[0]) / (y + 1) - 1;                     }                 }                 x = a[0] - x;                 ans = Math.min(ans, Math.max(0, x) + y);             }             System.out.println(ans);         }     }     public static void main(String[] args) throws Exception {         new CodeForces().run();     } } ",0
842,"import java.util.*; import java.io.*; public class CodeforcesRound734 { static FastReader sc = new FastReader(); public static void main(String[] args) throws IOException { try { int t = sc.nextInt(); while (t-- > 0) { C(); } } catch (Exception e) { e.printStackTrace(); } } static void C() { int n = sc.nextInt(); int a[][] = new int[5][n]; for (int i = 0; i < n; i++) { String s = sc.next(); for (int j = 0; j < s.length(); j++) { if (s.charAt(j) == 'a') a[0][i]++; else a[0][i]--; if (s.charAt(j) == 'b') a[1][i]++; else a[1][i]--; if (s.charAt(j) == 'c') a[2][i]++; else a[2][i]--; if (s.charAt(j) == 'd') a[3][i]++; else a[3][i]--; if (s.charAt(j) == 'e') a[4][i]++; else a[4][i]--; } } for (int x[] : a) { Arrays.sort(x); } int ans = 0; for (int i = 0; i < 5; i++) { int temp = 0, cnt = 0; for (int j = n - 1; j >= 0; j--) { temp += a[i][j]; if (temp <= 0) break; else cnt++; } ans = Math.max(ans, cnt); } System.out.println(ans); } } ","import java.io.*; import java.util.*; public class C { static class Code { private void solve(InputReader in, OutputWriter out) throws IOException { ArrayOpn o= new ArrayOpn(); int t = in.readInt(); while(t -- > 0) { int n=in.readInt(); int[][] freq= new int[5][n]; for(int i=0; i<n; i++) { char s[]= in.readString().toCharArray(); for(char e: s) { if(e=='a') { freq[0][i]++; } else { freq[0][i]--; } if(e=='b') { freq[1][i]++; } else { freq[1][i]--; } if(e=='c') { freq[2][i]++; } else { freq[2][i]--; } if(e=='d') { freq[3][i]++; } else { freq[3][i]--; } if(e=='e') { freq[4][i]++; } else { freq[4][i]--; } } } for(int i=0; i<5; i++) { Arrays.sort(freq[i]); } int ans=0; for(int i=0; i<5; i++) { int temp=0, count=0; for(int j=n-1; j>=0; j--) { temp+=freq[i][j]; if(temp<=0) { break; } count++; } ans=Math.max(ans, count); } out.printLine(ans); } out.close(); } } static class ArrayOpn{ static final Random random = new Random(); private void sort(int A[]) { int n = A.length; for(int i=0; i<n; i++) { int j = random.nextInt(n),temp = A[j]; A[j] = A[i]; A[i] = temp; } Arrays.sort(A); } } public static void main(String[] args) throws IOException { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); OutputWriter out = new OutputWriter(outputStream); Code solver = new Code(); solver.solve(in, out); out.flush(); out.close(); } } ",1
843,"import java.util.*; import java.io.*; public class CodeforcesRound734 { static FastReader sc = new FastReader(); public static void main(String[] args) throws IOException { try { int t = sc.nextInt(); while (t-- > 0) { C(); } } catch (Exception e) { e.printStackTrace(); } } static void C() { int n = sc.nextInt(); int a[][] = new int[5][n]; for (int i = 0; i < n; i++) { String s = sc.next(); for (int j = 0; j < s.length(); j++) { if (s.charAt(j) == 'a') a[0][i]++; else a[0][i]--; if (s.charAt(j) == 'b') a[1][i]++; else a[1][i]--; if (s.charAt(j) == 'c') a[2][i]++; else a[2][i]--; if (s.charAt(j) == 'd') a[3][i]++; else a[3][i]--; if (s.charAt(j) == 'e') a[4][i]++; else a[4][i]--; } } for (int x[] : a) { Arrays.sort(x); } int ans = 0; for (int i = 0; i < 5; i++) { int temp = 0, cnt = 0; for (int j = n - 1; j >= 0; j--) { temp += a[i][j]; if (temp <= 0) break; else cnt++; } ans = Math.max(ans, cnt); } System.out.println(ans); } } ","import java.util.*; public class main {     public static final Scanner sc = new Scanner(System.in);     public static void solve(){         int n=sc.nextInt();         int[][] a=new int[5][n];         for(int i=0;i<n;i++){             String x=sc.next();             for(int j=0;j<x.length();j++){                 if(x.charAt(j)=='a') a[0][i]++;                 else a[0][i]--;                 if(x.charAt(j)=='b') a[1][i]++;                 else a[1][i]--;                 if(x.charAt(j)=='c') a[2][i]++;                 else a[2][i]--;                 if(x.charAt(j)=='d') a[3][i]++;                 else a[3][i]--;                 if(x.charAt(j)=='e') a[4][i]++;                 else a[4][i]--;             }         }         for(int j=0;j<5;j++) Arrays.sort(a[j]);         int ans=0;         for(int j=0;j<5;j++){             int tmp=0,cnt=0;             for(int i=n-1;i>=0;i--){                 tmp+=a[j][i];                 if(tmp<=0) break;                 else cnt++;             }             ans=Math.max(ans,cnt);         }         System.out.println(ans);     }     public static void main(String[] args) {         int T=1;         T=sc.nextInt();         while(--T>=0) solve();     } } ",1
844,"import java.util.*; import java.io.*; public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();             List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }             Collections.sort(blue);             Collections.sort(red);             boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ","import java.io.*; import java.util.*; import java.text.*; import java.math.*; import java.util.regex.*; public class JaiShreeRam{ static Scanner in=new Scanner(); static long mod = 1000000007; static ArrayList<ArrayList<Integer>> adj; public static void main(String[] args) throws Exception{ int z=in.readInt(); while(z-->0) { int n=in.readInt(); int a[]=nia(n); char c[]=in.readString().toCharArray(); ArrayList<Integer> d=new ArrayList<>(); ArrayList<Integer> in=new ArrayList<>(); for(int i=0;i<n;i++) { if(c[i]=='R') { in.add(a[i]); } else { d.add(a[i]); } } String ans=""YES""; Collections.sort(d); int k=1; for(int i:d) { if(i<k) { ans=""NO""; } k++; } Collections.sort(in); for(int i=in.size()-1;i>=0;i--) { if(in.get(i)>n) { ans=""NO""; break; } n--; } System.out.println(ans); } } static int[] nia(int n){ int[] arr= new int[n]; int i=0; while(i<n){ arr[i++]=in.readInt(); } return arr; } } ",0
845,"import java.util.*; import java.io.*; public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();             List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }             Collections.sort(blue);             Collections.sort(red);             boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ","import java.io.*; import java.util.*; public class Solution {     static int M = 998244353;     static Random rng = new Random();     private static boolean testCase(int n, int[] a, String colors) {         boolean[] contains = new boolean[n];         int any = 0, rem = n, idx;         List<Integer> fromLeft = new ArrayList<>(), fromRight = new ArrayList<>();         for (int i = 0; i < n; i++) {             if (colors.charAt(i) == 'B') {                 if (a[i] <= 0) {                     return false;                 } else if (a[i] >= n) {                     any++;                 } else {                     fromLeft.add(a[i]);                 }             } else {                 if (a[i] > n) {                     return false;                 } else if (a[i] <= 1) {                     any++;                 } else {                     fromRight.add(a[i]);                 }             }         }         sort(fromLeft);         sort(fromRight);                           idx = 1;         for (int i = 0; i < fromLeft.size(); i++) {                                       if (fromLeft.get(i) < idx) {                 return false;             } else {                 contains[idx - 1] = true;                 rem--;                 idx++;             }         }         idx = n;         for (int i = fromRight.size() - 1; i >= 0; i--) {                          if (idx < fromRight.get(i)) {                 return false;             } else {                 contains[idx - 1] = true;                 rem--;                 idx--;             }         }         return any >= rem;     }     public static void main(String[] args) {         FastScanner in = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int t = in.nextInt();                    for (int tt = 1; tt <= t; ++tt) {             int n = in.nextInt();             int[] a = in.readArray(n);             String colors = in.next();             out.println(testCase(n, a, colors) ? ""YES"" : ""NO"");         }         out.close();     }          private static void sort(int[] arr) {         int temp, idx;         for (int i = arr.length - 1; i > 0; i--) {             idx = rng.nextInt(i + 1);             temp = arr[i];             arr[i] = arr[idx];             arr[idx] = temp;         }         Arrays.sort(arr);     }     private static void sort(long[] arr) {         long temp;         int idx;         for (int i = arr.length - 1; i > 0; i--) {             idx = rng.nextInt(i + 1);             temp = arr[i];             arr[i] = arr[idx];             arr[idx] = temp;         }         Arrays.sort(arr);     }     private static <T> void sort(T[] arr) {         T temp;         int idx;         for (int i = arr.length - 1; i > 0; i--) {             idx = rng.nextInt(i + 1);             temp = arr[i];             arr[i] = arr[idx];             arr[idx] = temp;         }         Arrays.sort(arr);     }     private static <T> void sort(T[] arr, Comparator<? super T> cmp) {         T temp;         int idx;         for (int i = arr.length - 1; i > 0; i--) {             idx = rng.nextInt(i + 1);             temp = arr[i];             arr[i] = arr[idx];             arr[idx] = temp;         }         Arrays.sort(arr, cmp);     }     private static <T extends Comparable<? super T>> void sort(List<T> list) {         T temp;         int idx;         for (int i = list.size() - 1; i > 0; i--) {             idx = rng.nextInt(i + 1);             temp = list.get(i);             list.set(i, list.get(idx));             list.set(idx, temp);         }         Collections.sort(list);     }     private static <T> void sort(List<T> list, Comparator<? super T> cmp) {         T temp;         int idx;         for (int i = list.size() - 1; i > 0; i--) {             idx = rng.nextInt(i + 1);             temp = list.get(i);             list.set(i, list.get(idx));             list.set(idx, temp);         }         Collections.sort(list, cmp);     } } ",0
846,"import java.util.*; import java.io.*; public class D {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  int T = in.nextInt();         while(T-- > 0) {             int n = in.nextInt();             int[] a = new int[n];             for(int j=0;j<n;j++) a[j] = in.nextInt();             char[] s = in.next().toCharArray();             List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++) {                 if(s[j] == 'B') blue.add(a[j]);                 else red.add(a[j]);             }             Collections.sort(blue);             Collections.sort(red);             boolean p = true;             int cur = 1;             for(int val : blue) {                 if(val<cur) {                     p = false;                     break;                 }                 else cur++;             }             for(int val : red) {                 if(val>cur) {                     p = false;                     break;                 }                 else cur++;             }                          if(p) System.out.println(""yes"");             else System.out.println(""no"");         }     } } ","import java.util.*; public class Main { public static void main(String[] args) { Scanner s  = new Scanner(System.in); int t = s.nextInt(); while(t-- > 0){     int n = s.nextInt();     int[] arr = new int[n];     for(int i=0;i<n;i++)         arr[i] = s.nextInt();     String str = s.next();     List<Integer> left = new ArrayList<>();     List<Integer> right = new ArrayList<>();     for(int i=0;i<arr.length;i++){         if(str.charAt(i) == 'B')             left.add(arr[i]);         else right.add(arr[i]);     }     Collections.sort(left);     Collections.sort(right);     boolean flag = false;     for(int i=0;i<left.size();i++)         if(left.get(i) < i+1){             flag = true;             break;         }     if(!flag){         for(int i=0;i<right.size();i++)             if(right.get(i) > left.size()+i+1){                 flag = true;                 break;             }     }     if(flag)         System.out.println(""NO"");     else System.out.println(""YES""); } } } ",0
847,"import java.util.*; import java.io.*; public class D {     static ArrayList<Integer> adj[] = new ArrayList[(int)1e5+7];     static int diameter = 0;     static int[] depth = new int[(int)1e5 + 7];     public static void main(String[] args) {         FastReader in = new FastReader();         int t = in.nextInt();         while(t-- > 0){             int n = in.nextInt();             int a = in.nextInt(), b = in.nextInt(), da = in.nextInt(), db = in.nextInt();             for(int i = 1; i <= n; i++){                 adj[i] = new ArrayList<>();             }             for(int i = 1; i <=n; i++){                 adj[i].clear();             }             for(int i = 0; i < n- 1; i++){                 int u = in.nextInt();                 int v = in.nextInt();                 adj[u].add(v);                 adj[v].add(u);             }             diameter = 0;             depth[a] = 0;             dfs(a, -1);             System.out.println(2 * da >= Math.min(diameter, db) || depth[b] <= da ? ""Alice"" : ""Bob"");         }     }     static int dfs(int node, int parent){         int len = 0;         for(int x : adj[node]){             if(x != parent){                 depth[x] = depth[node] + 1;                 int cur = 1 + dfs(x, node);                 diameter = Math.max(diameter, cur + len);                 len = Math.max(len, cur);             }         }         return len;     }           } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.StringTokenizer; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.ArrayList; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DTreeTag solver = new DTreeTag();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class DTreeTag {         int diam = 0;         public int dfs(ArrayList<Integer> g[], int x, int depth[], int p) {             int len = 0;             for (int y : g[x]) {                 if (y != p) {                     depth[y] = depth[x] + 1;                     int cur = 1 + dfs(g, y, depth, x);                     diam = Math.max(diam, cur + len);                     len = Math.max(len, cur);                 }             }             return len;         }         public void solve(int testNumber, InputReader in, PrintWriter out) {             int n = in.nextInt();             int a = in.nextInt() - 1;             int b = in.nextInt() - 1;             int da = in.nextInt();             int db = in.nextInt();             int dis[] = new int[n];             ArrayList<Integer> g[] = new ArrayList[n];             for (int i = 0; i < n; i++) g[i] = new ArrayList<>();             for (int i = 0; i < n - 1; i++) {                 int u = in.nextInt() - 1;                 int v = in.nextInt() - 1;                 g[u].add(v);                 g[v].add(u);             }             diam = 0;             dfs(g, a, dis, -1);             int disb = dis[b];             if (2 * da >= Math.min(diam, db) || disb <= da) {                 out.println(""Alice"");             } else {                 out.println(""Bob"");             }         }     }      } ",1
848,"import java.util.*; import java.io.*; public class D {     static ArrayList<Integer> adj[] = new ArrayList[(int)1e5+7];     static int diameter = 0;     static int[] depth = new int[(int)1e5 + 7];     public static void main(String[] args) {         FastReader in = new FastReader();         int t = in.nextInt();         while(t-- > 0){             int n = in.nextInt();             int a = in.nextInt(), b = in.nextInt(), da = in.nextInt(), db = in.nextInt();             for(int i = 1; i <= n; i++){                 adj[i] = new ArrayList<>();             }             for(int i = 1; i <=n; i++){                 adj[i].clear();             }             for(int i = 0; i < n- 1; i++){                 int u = in.nextInt();                 int v = in.nextInt();                 adj[u].add(v);                 adj[v].add(u);             }             diameter = 0;             depth[a] = 0;             dfs(a, -1);             System.out.println(2 * da >= Math.min(diameter, db) || depth[b] <= da ? ""Alice"" : ""Bob"");         }     }     static int dfs(int node, int parent){         int len = 0;         for(int x : adj[node]){             if(x != parent){                 depth[x] = depth[node] + 1;                 int cur = 1 + dfs(x, node);                 diameter = Math.max(diameter, cur + len);                 len = Math.max(len, cur);             }         }         return len;     }           } ","import java.util.*; import java.io.*; import java.math.*; public class Euler { static int N = (int)1e5 + 5; static int n, a, b, da, db; static int[] depth = new int[N]; static ArrayList<Integer>[] adj = new ArrayList[N]; static int diam; public static int dfs(int x, int p) { int len = 0; for (int y : adj[x]) { if (y != p) { depth[y] = depth[x] + 1; int cur = 1 + dfs(y, x); diam = Math.max(diam, cur + len); len = Math.max(len, cur); } } return len; }     public static void main(String[] args){         FastReader in = new FastReader();         PrintWriter o = new PrintWriter(System.out);                  int t = in.nextInt();                  while(t-- > 0) { n = in.nextInt(); a = in.nextInt(); b = in.nextInt(); da = in.nextInt(); db = in.nextInt(); for (int i = 1; i <= n; i++) { adj[i] = new ArrayList<>(); } for (int i = 0; i < n - 1; i++) { int u = in.nextInt(); int v = in.nextInt(); adj[u].add(v); adj[v].add(u); } diam = 0; depth[a] = 0; dfs(a, -1); boolean works = true; if (depth[b] <= da) { o.println(""Alice""); continue; } if (2 * da >= diam) { o.println(""Alice""); continue; } if (db > 2 * da) { o.println(""Bob""); continue; } if (db <= 2 * da) { o.println(""Alice""); } }                           o.close();         o.flush();         return;     }                } ",1
849,"import java.util.*; import java.io.*; public class D {     static ArrayList<Integer> adj[] = new ArrayList[(int)1e5+7];     static int diameter = 0;     static int[] depth = new int[(int)1e5 + 7];     public static void main(String[] args) {         FastReader in = new FastReader();         int t = in.nextInt();         while(t-- > 0){             int n = in.nextInt();             int a = in.nextInt(), b = in.nextInt(), da = in.nextInt(), db = in.nextInt();             for(int i = 1; i <= n; i++){                 adj[i] = new ArrayList<>();             }             for(int i = 1; i <=n; i++){                 adj[i].clear();             }             for(int i = 0; i < n- 1; i++){                 int u = in.nextInt();                 int v = in.nextInt();                 adj[u].add(v);                 adj[v].add(u);             }             diameter = 0;             depth[a] = 0;             dfs(a, -1);             System.out.println(2 * da >= Math.min(diameter, db) || depth[b] <= da ? ""Alice"" : ""Bob"");         }     }     static int dfs(int node, int parent){         int len = 0;         for(int x : adj[node]){             if(x != parent){                 depth[x] = depth[node] + 1;                 int cur = 1 + dfs(x, node);                 diameter = Math.max(diameter, cur + len);                 len = Math.max(len, cur);             }         }         return len;     }           } ","import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class Template { static int mod = 1000000007; public static void main(String[] args) { FastScanner sc = new FastScanner(); int yo = sc.nextInt(); while (yo-- > 0) { int n = sc.nextInt();             int a = sc.nextInt()-1;             int b = sc.nextInt()-1;             int da = sc.nextInt();             int db = sc.nextInt();                          List<List<Integer>> list = new ArrayList<>();             for(int i = 0; i < n; i++) list.add(new ArrayList<>());                          for(int i = 0; i < n-1; i++){                 int x = sc.nextInt()-1;                 int y = sc.nextInt()-1;                 list.get(x).add(y);                 list.get(y).add(x);             }                          for(int i = 0; i <= n; i++) depth[i] = 0;             diam = 0;             dfs(a,-1,list);                          if(2 * da >= min(diam, db) || depth[b] <= da){                 out.println(""Alice"");             }             else {                 out.println(""Bob"");             }              } }          static int[] depth = new int[200001];     static int diam = 0;     static int dfs(int x, int p, List<List<Integer>> list) {         int len = 0;         List<Integer> ne = list.get(x);         for(int y : ne) {             if(y != p) {                 depth[y] = depth[x] + 1;                 int cur = 1 + dfs(y, x,list);                 diam = max(diam, cur + len);                 len = max(len, cur);             }         }         return len;     }     } ",1
850,"import java.util.*; import java.io.*; public class D { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(); int[] arr = new int[n]; for(int i = 0; i < n; i++) { arr[i] = sc.nextInt(); } if(check(arr)) System.out.println(""YES""); else System.out.println(""NO""); } } static boolean check(int[] arr) { int n = arr.length; TreeSet<Integer> set = new TreeSet<>(); set.add(arr[0]); for(int i = 1; i < n; i++) { set.add(arr[i]); if(arr[i-1] == arr[i]) continue; Integer x = set.lower(arr[i]); if(x != null && x == arr[i-1]) continue; x = set.higher(arr[i]); if(x != null && x == arr[i-1]) continue; return false; } return true; } } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger;  public final class B {     static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); static ArrayList<ArrayList<Integer>> g; static long mod=1000000007; static int D1[],D[],par[]; static boolean set[]; static long INF=Long.MAX_VALUE; public static void main(String args[])throws IOException {   int T=i(); while(T-->0) { int N=i(); long A[]=inputLong(N); boolean f=true; TreeSet<Long> set=new TreeSet<>(); for(int i=0; i<N; i++) { if(i>=2) { if(A[i]<A[i-1]) { if(set.ceiling(A[i]+1)!=A[i-1])f=false; } if(A[i]>A[i-1]) { if(set.floor(A[i]-1)!=A[i-1])f=false; } } set.add(A[i]); } if(f)System.out.println(""YES""); else System.out.println(""NO""); } } static int i() { return in.nextInt(); } static long[] inputLong(int N)     { long A[]=new long[N]; for(int i=0; i<A.length; i++)A[i]=in.nextLong(); return A; } } ",0
851,"import java.util.*; import java.io.*; public class D { public static void main(String[] args) { FastScanner sc = new FastScanner(); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(); int[] arr = new int[n]; for(int i = 0; i < n; i++) { arr[i] = sc.nextInt(); } if(check(arr)) System.out.println(""YES""); else System.out.println(""NO""); } } static boolean check(int[] arr) { int n = arr.length; TreeSet<Integer> set = new TreeSet<>(); set.add(arr[0]); for(int i = 1; i < n; i++) { set.add(arr[i]); if(arr[i-1] == arr[i]) continue; Integer x = set.lower(arr[i]); if(x != null && x == arr[i-1]) continue; x = set.higher(arr[i]); if(x != null && x == arr[i-1]) continue; return false; } return true; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.Scanner; import java.util.StringTokenizer; import java.util.TreeSet; public class A {     public static void main(String args[]) throws Exception {         FastScanner sc = new FastScanner();         int T = 1;         T = sc.nextInt();         PrintWriter pw = new PrintWriter(System.out);         while (T-- > 0) {             solve(sc, pw);         }         pw.close();     }     public static void solve(FastScanner sc, PrintWriter pw) throws Exception {         int n = sc.nextInt();         int[] arr = new int[n];         for(int i=0;i<n;i++){             arr[i]=sc.nextInt();         }         if(check(arr)) pw.println(""YES"");         else pw.println(""NO"");     }     public static boolean check(int[] arr){         int n=arr.length;         TreeSet<Integer> S = new TreeSet<>();         S.add(arr[0]);         for(int i=1;i<n;i++) {             S.add(arr[i]);             if (arr[i] == arr[i - 1]) continue;             Integer lb = S.lower(arr[i]);             if (lb != null && lb == arr[i - 1]) continue;             Integer ub = S.higher(arr[i]);             if (ub != null && ub == arr[i - 1]) continue;             return false;         }         return true;     }      } ",1
852,"import java.util.*; import java.io.*; public class D_1525 { static int INF = (int)1e9; static int n, m; static int[] full, free; static int[][] memo; public static int dp(int i, int j) { if(i == n) return 0; if(j == m) return INF; if(memo[i][j] != -1) return memo[i][j]; return memo[i][j] = Math.min(dp(i, j + 1), Math.abs(free[j] - full[i]) + dp(i + 1, j + 1)); } public static void main(String[] args) throws Exception { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int l = sc.nextInt(); int[] array = sc.nextIntArray(l); n = 0; for(int i = 0; i < l; i++) if(array[i] == 1) n++; m = l - n; full = new int[n]; free = new int[m]; int ind1 = 0, ind2 = 0; for(int i = 0; i < l; i++) if(array[i] == 0) free[ind2++] = i; else full[ind1++] = i; memo = new int[n][m]; for(int[] i : memo) Arrays.fill(i, -1); pw.println(dp(0, 0)); pw.flush(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Try2{ public static void main(String[] args) throws IOException { FastScanner fs = new FastScanner(); int t=1; while (t-- > 0) { int n = fs.nextInt(); int a[] = new int[n]; int countOne = 0; ArrayList<Integer> aa = new ArrayList<Integer>(); for(int i =0;i<n;i++) { a[i] =fs.nextInt(); if(a[i]==1) { countOne++; aa.add(i); } } int dp[][] = new int[n+1][countOne+1]; for(int i =0 ;i<=n;i++) { for(int j =0 ;j<=countOne;j++) { dp[i][j] = Integer.MAX_VALUE; } } dp[0][0] =0; for(int i =0 ;i<n;i++) { for(int j =0 ;j<countOne+1;j++) { if(dp[i][j]==Integer.MAX_VALUE) continue; dp[i+1][j] = Math.min(dp[i][j], dp[i+1][j]); if(j<countOne && a[i]==0) { dp[i+1][j+1]=Math.min(dp[i][j]+Math.abs(aa.get(j)-i),dp[i+1][j+1]); } } } System.out.println(dp[n][countOne]); } } static final Random random = new Random(); } ",0
853,"import java.util.*; import java.io.*; public class D_1525 { static int INF = (int)1e9; static int n, m; static int[] full, free; static int[][] memo; public static int dp(int i, int j) { if(i == n) return 0; if(j == m) return INF; if(memo[i][j] != -1) return memo[i][j]; return memo[i][j] = Math.min(dp(i, j + 1), Math.abs(free[j] - full[i]) + dp(i + 1, j + 1)); } public static void main(String[] args) throws Exception { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int l = sc.nextInt(); int[] array = sc.nextIntArray(l); n = 0; for(int i = 0; i < l; i++) if(array[i] == 1) n++; m = l - n; full = new int[n]; free = new int[m]; int ind1 = 0, ind2 = 0; for(int i = 0; i < l; i++) if(array[i] == 0) free[ind2++] = i; else full[ind1++] = i; memo = new int[n][m]; for(int[] i : memo) Arrays.fill(i, -1); pw.println(dp(0, 0)); pw.flush(); } } ","import java.util.Arrays; import java.util.Scanner; public class P1525D {     public static int[] ones, zeros;     public static int[][] memo;     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         int n = s.nextInt();         int[] arr = new int[n];         int oneCount = 0;         for (int i = 0; i < n; i++) {             arr[i] = s.nextInt();             oneCount += arr[i] % 2;         }         int o = 0, z = 0;         ones = new int[oneCount];         zeros = new int[n - oneCount];         for (int i = 0; i < n; i++) {             if (arr[i] % 2 == 1) {                 ones[o++] = i;             } else {                 zeros[z++] = i;             }         }         memo = new int[oneCount][n - oneCount];         for (int[] row : memo) Arrays.fill(row, -1);         System.out.println(dp(0, 0));     }     public static int dp(int oi, int zi) {         if (oi == ones.length) {             return 0;         } else if (zi == zeros.length) {             return 100000000;         } else {             if (memo[oi][zi] == -1) {                 memo[oi][zi] = Math.min(Math.abs(ones[oi] - zeros[zi]) + dp(oi + 1, zi + 1), dp(oi, zi + 1));             }             return memo[oi][zi];         }     } } ",1
854,"import java.util.*; import java.io.*; public class E1547{ static int inf = 2*(int)Math.pow(10,9); static FastScanner fs = null; public static void main(String[] args) { fs = new FastScanner(); int t = fs.nextInt(); while(t-->0){ int n = fs.nextInt(); int k = fs.nextInt(); int pos[] = new int[k]; for(int i=0;i<k;i++){ pos[i] = fs.nextInt(); } int time[] = new int[n]; Arrays.fill(time,inf); for(int i=0;i<k;i++){ time[pos[i]-1] = fs.nextInt(); } for(int i=0;i<n;i++){ if(i==0){ continue; } else{ time[i] = Math.min(time[i],time[i-1]+1); } } for(int i=n-2;i>=0;i--){ time[i] = Math.min(time[i],1+time[i+1]); } for(int i=0;i<n;i++){ System.out.print(time[i]+"" ""); } System.out.println(); } } } ","import java.util.*; import java.io.*; public class E_Air_Conditioners{     public static void main(String[] args) {         FastScanner s= new FastScanner();         StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){         int n=s.nextInt();         int k=s.nextInt();         int pos[]= new int[k];         int temp[]= new int[k];         int min=Integer.MAX_VALUE;         int ans[]= new int[n];         HashMap<Integer,ArrayList<Integer>> map = new HashMap<Integer,ArrayList<Integer>>();             HashMap<Integer,Integer> count1 = new  HashMap<Integer,Integer> ();         for(int i=0;i<k;i++){             pos[i]=s.nextInt();         }         for(int i=0;i<k;i++){             temp[i]=s.nextInt();             ans[pos[i]-1]=temp[i];             min=Math.min(temp[i],min);             if(map.containsKey(temp[i])){                 map.get(temp[i]).add(pos[i]-1);                 int a=count1.get(temp[i]);                 a++;                 count1.remove(temp[i]);                 count1.put(temp[i],a);             }             else{                 ArrayList<Integer> obj = new ArrayList<Integer>();                 obj.add(pos[i]-1);                 map.put(temp[i],obj);                 count1.put(temp[i],1);             }         }               int num=min;                 while(true){                                 if(!map.containsKey(num)){                break;            }           ArrayList<Integer> obj2 = map.get(num);                      for(int i=0;i<obj2.size();i++){               int index=obj2.get(i);               if(ans[index]!=0){                   if(ans[index]<num){                                           if(index+1<n && (ans[index+1]>(num+1)|| ans[index+1]==0)){                         ans[index+1]=num+1;                                                 if(map.containsKey(num+1)){                             map.get(num+1).add(index+1);                         }                         else{                             ArrayList<Integer> object = new  ArrayList<Integer>();                             object.add(index+1);                             map.put(num+1,object);                         }                     }                     if(index-1>=0 && (ans[index-1]>(num+1)|| ans[index-1]==0)){                         ans[index-1]=num+1;                                               if(map.containsKey(num+1)){                             map.get(num+1).add(index-1);                         }                         else{                             ArrayList<Integer> object = new  ArrayList<Integer>();                             object.add(index-1);                             map.put(num+1,object);                         }                     }                   }                   else if(ans[index]==num){                                           if(index+1<n && (ans[index+1]>(num+1)|| ans[index+1]==0)){                         ans[index+1]=num+1;                                             if(map.containsKey(num+1)){                             map.get(num+1).add(index+1);                         }                         else{                             ArrayList<Integer> object = new  ArrayList<Integer>();                             object.add(index+1);                             map.put(num+1,object);                         }                     }                     if(index-1>=0 && (ans[index-1]>(num+1)|| ans[index-1]==0)){                         ans[index-1]=num+1;                                              if(map.containsKey(num+1)){                             map.get(num+1).add(index-1);                         }                         else{                             ArrayList<Integer> object = new  ArrayList<Integer>();                             object.add(index-1);                             map.put(num+1,object);                         }                     }                   }               }                          }            num++;         }         for(int i=0;i<ans.length;i++){             res.append(ans[i]+"" "");         }         res.append(""\n"");         p++;     }     System.out.println(res);     }      } ",0
855,"import java.util.*; import java.io.*; public class E_1547 { public static void main(String[] args) throws Exception { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(), k = sc.nextInt(); int[] a = sc.nextIntArray(k); int[] t = sc.nextIntArray(k); int[] array = new int[n]; Arrays.fill(array, Integer.MAX_VALUE); for(int i = 0; i < k; i++) array[a[i] - 1] = t[i]; int[] pre = new int[n]; int[] post = new int[n]; int prev = (int)2e9; for(int i = 0; i < n; i++) prev = pre[i] = Math.min(prev + 1, array[i]); prev = (int)2e9; for(int i = n - 1; i >= 0; i--) prev = post[i] = Math.min(prev + 1, array[i]); for(int i = 0; i < n; i++) array[i] = Math.min(pre[i], post[i]); for(int i = 0; i < n; i++) pw.print(array[i] + (i == n - 1 ? ""\n"" : "" "")); } pw.flush(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.Comparator; import java.util.List; import java.util.StringTokenizer;   public class Main { static FastReader fr; static int arrForIndexSort[]; public static void main(String[] args) { fr = new FastReader(); int T = 1; T = fr.nextInt(); int t1 = T; while (T-- > 0) { solve(); } } public static void solve() { int n=fr.nextInt(); int k=fr.nextInt(); int[] a = new int[k]; int[] map = new int[n]; int[] temp = new int[n]; Arrays.fill(temp, Integer.MAX_VALUE); Arrays.fill(map, Integer.MAX_VALUE); int min = Integer.MAX_VALUE; int max = Integer.MIN_VALUE; for(int i=0;i<k;i++) { a[i] = fr.nextInt()-1; min = Math.min(a[i], min); max = Math.max(a[i], max); } for(int i=0;i<k;i++) { map[a[i]] = fr.nextInt(); } int diff = 0; int curr = map[min]; for(int i=min;i<n;i++) { int airConditioner = map[i]; if(airConditioner<curr+diff) { temp[i] = airConditioner; diff = 1; curr = airConditioner; } else { temp[i] = curr+diff; diff++; } } diff = 0; curr = map[max]; for(int i=max;i>=0;i--) { int airConditioner = map[i]; if(airConditioner<curr+diff) { temp[i] = Math.min(temp[i], airConditioner); diff = 1; curr = airConditioner; } else { temp[i] =  Math.min(temp[i], curr+diff); diff++; } } System.out.println(Arrays.toString(temp).replaceAll("",|\\[|\\]"","""")); } } ",0
856,"import java.util.*; import java.io.*; public class E_1547 { public static void main(String[] args) throws Exception { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(), k = sc.nextInt(); int[] a = sc.nextIntArray(k); int[] t = sc.nextIntArray(k); int[] array = new int[n]; Arrays.fill(array, Integer.MAX_VALUE); for(int i = 0; i < k; i++) array[a[i] - 1] = t[i]; int[] pre = new int[n]; int[] post = new int[n]; int prev = (int)2e9; for(int i = 0; i < n; i++) prev = pre[i] = Math.min(prev + 1, array[i]); prev = (int)2e9; for(int i = n - 1; i >= 0; i--) prev = post[i] = Math.min(prev + 1, array[i]); for(int i = 0; i < n; i++) array[i] = Math.min(pre[i], post[i]); for(int i = 0; i < n; i++) pw.print(array[i] + (i == n - 1 ? ""\n"" : "" "")); } pw.flush(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.StringTokenizer; public class AirConditioners {     static FastReader read  =new FastReader();     static int INF = (int)(2e9);     static int mxn = (int)(3e5 + 10);     public static void main(String[] args) {         int t = read.nextInt();         while (t-- > 0)             solve();     }     private static void solve() {         int n = read.nextInt(), k = read.nextInt();         int[] a = new int[n];         int[] t = new int[n];         Arrays.fill(t, Integer.MAX_VALUE);         for (int i=0;i<k;++i){             a[i] = read.nextInt();         }         for (int i=0;i<k;++i){             t[--a[i]] = read.nextInt();         }         int[] L = new int[n];         int[] R = new int[n];         int tmp = INF;         for (int i=0;i<n;++i){             tmp = Math.min(tmp+1, t[i]);             L[i] = tmp;         }         tmp = INF;         for (int i=n-1;i>=0;--i){             tmp = Math.min(tmp+1, t[i]);             R[i] = tmp;         }         for (int i=0;i<n;++i){             int ans = Math.min(L[i], R[i]);             System.out.print(ans + "" "");         }         System.out.println();     }      } ",0
857,"import java.util.*; import java.io.*; public class E_1547 { public static void main(String[] args) throws Exception { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int T = sc.nextInt(); while(T-->0) { int n = sc.nextInt(), k = sc.nextInt(); int[] a = sc.nextIntArray(k); int[] t = sc.nextIntArray(k); int[] array = new int[n]; Arrays.fill(array, Integer.MAX_VALUE); for(int i = 0; i < k; i++) array[a[i] - 1] = t[i]; int[] pre = new int[n]; int[] post = new int[n]; int prev = (int)2e9; for(int i = 0; i < n; i++) prev = pre[i] = Math.min(prev + 1, array[i]); prev = (int)2e9; for(int i = n - 1; i >= 0; i--) prev = post[i] = Math.min(prev + 1, array[i]); for(int i = 0; i < n; i++) array[i] = Math.min(pre[i], post[i]); for(int i = 0; i < n; i++) pw.print(array[i] + (i == n - 1 ? ""\n"" : "" "")); } pw.flush(); } } ","import java.util.*; public class file {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t!=0)         {             sc.nextLine();             int n = sc.nextInt();             int k = sc.nextInt();             int[] position = new int[k];             for(int i = 0;i < k;i++)             {                 position[i] = sc.nextInt();             }             int[] temprature = new int[k];             for(int i = 0;i < k;i++)             {                 temprature[i] = sc.nextInt();             }             int[] left = new int[n];             int[] right = new int[n];             int c[] = new int[n];             Arrays.fill(c, Integer.MAX_VALUE);             for(int i = 0;i < k;i++)             {                 c[position[i]-1] = temprature[i];             }             long min = Integer.MAX_VALUE - 1;             for(int i = 0;i < n;i++)             {                 min = Math.min(min+1, c[i]);                 left[i] = (int)min;             }             min = Integer.MAX_VALUE - 1;             for(int i = n-1;i >= 0;i--)             {                 min = Math.min(min+1, c[i]);                 right[i] = (int)min;             }             for(int i = 0;i < n;i++)             {                 System.out.print(Math.min(left[i], right[i])+"" "");             }             System.out.println();             t--;         }     } } ",0
858,"import java.util.*; import java.io.*; public class E_Air_Conditioners{     public static void main(String[] args) {         FastScanner s= new FastScanner();         StringBuilder res = new StringBuilder();         int t=s.nextInt();         int p=0;         while(p<t){         int n=s.nextInt();         int k=s.nextInt();         int pos[]= new int[k];         int temp[]= new int[k];         int min=Integer.MAX_VALUE;         int ans[]= new int[n];         HashMap<Integer,ArrayList<Integer>> map = new HashMap<Integer,ArrayList<Integer>>();             HashMap<Integer,Integer> count1 = new  HashMap<Integer,Integer> ();         for(int i=0;i<k;i++){             pos[i]=s.nextInt();         }         for(int i=0;i<k;i++){             temp[i]=s.nextInt();             ans[pos[i]-1]=temp[i];             min=Math.min(temp[i],min);             if(map.containsKey(temp[i])){                 map.get(temp[i]).add(pos[i]-1);                 int a=count1.get(temp[i]);                 a++;                 count1.remove(temp[i]);                 count1.put(temp[i],a);             }             else{                 ArrayList<Integer> obj = new ArrayList<Integer>();                 obj.add(pos[i]-1);                 map.put(temp[i],obj);                 count1.put(temp[i],1);             }         }               int num=min;                 while(true){                                 if(!map.containsKey(num)){                break;            }           ArrayList<Integer> obj2 = map.get(num);                      for(int i=0;i<obj2.size();i++){               int index=obj2.get(i);               if(ans[index]!=0){                   if(ans[index]<num){                                           if(index+1<n && (ans[index+1]>(num+1)|| ans[index+1]==0)){                         ans[index+1]=num+1;                                                 if(map.containsKey(num+1)){                             map.get(num+1).add(index+1);                         }                         else{                             ArrayList<Integer> object = new  ArrayList<Integer>();                             object.add(index+1);                             map.put(num+1,object);                         }                     }                     if(index-1>=0 && (ans[index-1]>(num+1)|| ans[index-1]==0)){                         ans[index-1]=num+1;                                               if(map.containsKey(num+1)){                             map.get(num+1).add(index-1);                         }                         else{                             ArrayList<Integer> object = new  ArrayList<Integer>();                             object.add(index-1);                             map.put(num+1,object);                         }                     }                   }                   else if(ans[index]==num){                                           if(index+1<n && (ans[index+1]>(num+1)|| ans[index+1]==0)){                         ans[index+1]=num+1;                                             if(map.containsKey(num+1)){                             map.get(num+1).add(index+1);                         }                         else{                             ArrayList<Integer> object = new  ArrayList<Integer>();                             object.add(index+1);                             map.put(num+1,object);                         }                     }                     if(index-1>=0 && (ans[index-1]>(num+1)|| ans[index-1]==0)){                         ans[index-1]=num+1;                                              if(map.containsKey(num+1)){                             map.get(num+1).add(index-1);                         }                         else{                             ArrayList<Integer> object = new  ArrayList<Integer>();                             object.add(index-1);                             map.put(num+1,object);                         }                     }                   }               }                          }            num++;         }         for(int i=0;i<ans.length;i++){             res.append(ans[i]+"" "");         }         res.append(""\n"");         p++;     }     System.out.println(res);     }      } ","import java.io.*; import java.util.*; public class codefor { public static void main(String[] args)  { FastReader sc=new FastReader(); int T=sc.nextInt(); while(T-->0) { int n=sc.nextInt(),k=sc.nextInt(),i=0; long t[]=new long[n]; int a[]=new int[k]; for(i=0;i<k;i++) a[i]=sc.nextInt()-1; for(i=0;i<k;i++) t[a[i]]=sc.nextLong(); long ans[]=new long[n]; PriorityQueue<Long> pq=new PriorityQueue<>(); for(i=0;i<n;i++) { if(t[i]!=0) pq.add(t[i]-i); if(pq.size()!=0) { ans[i]=pq.peek()+i; } } pq.clear(); for(i=n-1;i>=0;i--) { if(t[i]!=0) pq.add(t[i]+i); if(pq.size()!=0) { long val=pq.peek()-i; if(ans[i]==0) ans[i]=val; else  ans[i]=Math.min(val, ans[i]); } } pq.clear(); for(i=0;i<n;i++) System.out.print(ans[i]+"" ""); System.out.println(); } } } ",0
859,"import java.util.*; import java.io.*; public class EdD { public static void main(String[] args) throws Exception{ int num = 998244353;  BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));  PrintWriter out = new PrintWriter(System.out);  int n = Integer.parseInt(bf.readLine());  int[] array = new int[n];  StringTokenizer st = new StringTokenizer(bf.readLine());  for(int j = 0;j<n;j++){  array[j] = Integer.parseInt(st.nextToken());  }  Map<Integer, Set<Integer>> mp = new HashMap<Integer, Set<Integer>>();  for(int j =0;j<n;j++)  mp.put(j, new HashSet<Integer>());  int[] nextge = new int[n];  int[] nextle = new int[n];  int[] prevge = new int[n];  int[] prevle = new int[n];  nextge[n-1] = -1;  nextle[n-1] = -1;  prevge[0] = -1;  prevle[0] = -1;  for(int j = n-2;j>=0;j--){  if (array[j+1] < array[j]){  nextle[j] = j+1;  mp.get(j).add(j+1);  int temp = j+1;  while(temp!= -1 && array[temp] < array[j])  temp = nextge[temp];  nextge[j] = temp;  if (temp!= -1)  mp.get(j).add(temp);  }  else if (array[j+1] > array[j]){  nextge[j] = j+1;  mp.get(j).add(j+1);  int temp = j+1;  while(temp!= -1 && array[temp] > array[j])  temp = nextle[temp];  nextle[j] = temp;  if (temp!= -1)  mp.get(j).add(temp);  }  else{  nextge[j] = j+1;  mp.get(j).add(j+1);  nextle[j] = j+1;  mp.get(j).add(j+1);  }  }  for(int j = 1;j<n;j++){  if (array[j] < array[j-1]){    prevge[j] = j-1;  mp.get(j-1).add(j);  int temp = j-1;  while(temp!= -1 && array[temp] > array[j])  temp = prevle[temp];  prevle[j] = temp;  if (temp!= -1)  mp.get(temp).add(j);  }  else if (array[j] > array[j-1]){  prevle[j] = j-1;  mp.get(j-1).add(j);  int temp = j-1;  while(temp!= -1 && array[temp] < array[j])  temp = prevge[temp];  prevge[j] = temp;  if (temp!= -1)  mp.get(temp).add(j);  }  else{  prevge[j] = j-1;  prevle[j] = j-1;  mp.get(j-1).add(j);  }  }  int[] depth = new int[n+1];  Set<Integer> seen = new HashSet<Integer>();  Queue<Integer> bfs = new LinkedList<Integer>();  bfs.add(0);  seen.add(0);  while(!bfs.isEmpty()){  int v = bfs.remove();  for(int child : mp.get(v)){  if (!seen.contains(child)){  bfs.add(child);  seen.add(child);  depth[child] = depth[v]+1;  }  }  }      out.println(depth[n-1]);    out.close();        } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Arrays; import java.util.HashMap; import java.io.IOException; import java.io.InputStreamReader; import java.util.TreeSet; import java.util.ArrayList; import java.util.StringTokenizer; import java.io.BufferedReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskD solver = new TaskD();         solver.solve(1, in, out);         out.close();     }     static class TaskD {         public void solve(int testNumber, InputReader in, PrintWriter out) {             int N = in.nextInt();             int[] h = new int[N];             int[] hsort = new int[N];             HashMap<Integer, Integer> condense = new HashMap<>();             for (int i = 0; i < N; i++) {                 h[i] = in.nextInt();                 hsort[i] = h[i];             }             ArrayUtils.sort(hsort);             int timer = 0;             int[] t = new int[N];             for (int i = 0; i < N; i++) {                 if (!condense.containsKey(hsort[i])) {                     condense.put(hsort[i], timer++);                     t[timer - 1]++;                 } else {                     t[condense.get(hsort[i])]++;                 }             }             int[][] heights = new int[timer][];             for (int i = 0; i < timer; i++) {                 heights[i] = new int[t[i]];                 t[i] = 0;             }             for (int i = 0; i < N; i++) {                 h[i] = condense.get(h[i]);                 heights[h[i]][t[h[i]]++] = i;             }             TreeSet<Integer> cur = new TreeSet<>();             ArrayList<Integer>[] to = new ArrayList[N];             for (int i = 0; i < N; i++) {                 to[i] = new ArrayList<>();                 if (i != N - 1) {                     to[i].add(i + 1);                 }             }             int low = N + 1;             int high = -1;             for (int i = 0; i < timer; i++) {                 for (int e : heights[i]) {                     cur.add(e);                     low = Math.min(low, e);                     high = Math.max(high, e);                 }                 for (int e : heights[i]) {                     if (low < e) {                         to[cur.lower(e)].add(e);                     }                     if (high > e) {                         to[e].add(cur.higher(e));                     }                 }             }             cur.clear();             low = N + 1;             high = -1;             for (int i = timer - 1; i >= 0; i--) {                 for (int e : heights[i]) {                     cur.add(e);                     low = Math.min(low, e);                     high = Math.max(high, e);                 }                 for (int e : heights[i]) {                     if (low < e) {                         to[cur.lower(e)].add(e);                     }                     if (high > e) {                         to[e].add(cur.higher(e));                     }                 }             }             long[] dp = new long[N];             Arrays.fill(dp, (int) (1e8));             dp[0] = 0;             for (int i = 0; i < N; i++) {                 for (int toa : to[i]) {                     dp[toa] = Math.min(dp[toa], dp[i] + 1);                 }             }             out.println(dp[N - 1]);         }     }          static class ArrayUtils {         public static void shuffle(int[] arr) {             for (int i = 0; i < arr.length; i++) {                 int rand = (int) (Math.random() * (i + 1));                 swap(arr, i, rand);             }         }         public static void swap(int[] arr, int i, int j) {             int temp = arr[i];             arr[i] = arr[j];             arr[j] = temp;         }         public static void sort(int[] arr) {             shuffle(arr);             Arrays.sort(arr);                      }     } } ",0
860,"import java.util.*; import java.io.*; public class JavaTract { static class Pair implements Comparable<Pair>{     int first;     int second;     Pair(int x,int y){         this.first=x;         this.second=y;     }         }     public static void main (String[] args)      {         Scanner scan=new Scanner(System.in);         int t=scan.nextInt();         while(t-->0){             int n=scan.nextInt();             int m=scan.nextInt();             int x=scan.nextInt();             int[]arr=new int[n];             for(int i=0;i<n;i++){                 arr[i]=scan.nextInt();             }                          Queue<Pair> set = new PriorityQueue<>();             for(int i=1;i<=m;i++){                                set.add(new Pair(0,i));             }                          System.out.println(""YES"");             for(int i=0;i<n;i++){                 Pair temp=set.poll();                                  int first = temp.first;                 int second = temp.second;                 System.out.print(second+"" "");                                  set.add(new Pair(first+arr[i],second));                              }             System.out.println();         }     }         } ","import java.io.*; import java.util.*; public class Asd {     static PrintWriter w = new PrintWriter(System.out);     static FastScanner s = new FastScanner();     static boolean sd = false;        public static void main(String[] args) {        int t = s.nextInt();                  while (t-- > 0) {             solve();         }         w.close();     }   public static class Student {     public int i1;     public int value;                     public Student(int i1,int i2) {                this.i1 = i1;         this.value=i2;     }            public int getkey() {         return i1;     }      public int getValue() {         return value;     }  }    static class StudentComparator implements Comparator<Student>{                                                                       }               public static void solve() {         int n=s.nextInt();         int m=s.nextInt();         int x=s.nextInt();         int arr[]=new int[n];int res[]=new int[n];         for(int i=0;i<n;i++)             arr[i]=s.nextInt();                  PriorityQueue<Student> pq=new PriorityQueue<Student>(new StudentComparator());         for(int i=0;i<m;i++){             pq.add(new Student(arr[i],i));res[i]=i;}         for(int i=m;i<n;i++)         {             Student s1=pq.poll();             int k2=s1.getkey()+arr[i];             int v2=s1.getValue();res[i]=v2;             pq.add(new Student(k2,v2));         }         w.println(""YES"");         for(int i=0;i<n;i++)             w.print(res[i]+1+"" "");         w.println();             }                               } ",0
861,"import java.util.*; import java.io.*; public class JavaTract { static class Pair implements Comparable<Pair>{     int first;     int second;     Pair(int x,int y){         this.first=x;         this.second=y;     }         }     public static void main (String[] args)      {         Scanner scan=new Scanner(System.in);         int t=scan.nextInt();         while(t-->0){             int n=scan.nextInt();             int m=scan.nextInt();             int x=scan.nextInt();             int[]arr=new int[n];             for(int i=0;i<n;i++){                 arr[i]=scan.nextInt();             }                          Queue<Pair> set = new PriorityQueue<>();             for(int i=1;i<=m;i++){                                set.add(new Pair(0,i));             }                          System.out.println(""YES"");             for(int i=0;i<n;i++){                 Pair temp=set.poll();                                  int first = temp.first;                 int second = temp.second;                 System.out.print(second+"" "");                                  set.add(new Pair(first+arr[i],second));                              }             System.out.println();         }     }         } ","import java.util.*; public class Main{     public static void main(String[] args){         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         while(t--!=0){             int n=sc.nextInt();             int m=sc.nextInt();             int x=sc.nextInt();             int[] a=new int[n];             int[] c=new int[n];             Map<Integer,Stack<Integer>> mp=new HashMap<>();             for(int i=0;i<n;i++){                 a[i]=sc.nextInt();                                  if(mp.containsKey(a[i])){                     Stack<Integer> l=mp.get(a[i]);                     l.push(i);                     mp.put(a[i],l);                 }                 else{                     Stack<Integer> l=new Stack<>();                     l.push(i);                     mp.put(a[i],l);                 }             }             Arrays.sort(a);             int[] b=new int[n];                         int cn=1;             for(int i=0;i<n;i++){                 cn=cn%m;                 Stack<Integer> li=mp.get(a[i]);                 if(!li.isEmpty()){                     int val=li.peek();                     b[val]=cn+1;                     c[i]+=a[i];                     li.pop();                     mp.put(a[i],li);                 }                 cn++;             }             int mv=c[0]-c[n-1];             if(Math.abs(mv)>x) System.out.println(""NO"");             else {                 System.out.println(""YES"");                 for(int i=0;i<n;i++){                     System.out.print(b[i]+"" "");                 }                 System.out.println();             }         }     }      } ",0
862,"import java.util.*; import java.io.*; public class Main  {     public static void main(String args[]) {       FastScanner fs=new FastScanner();           PrintWriter out=new PrintWriter(System.out);              int t=fs.nextInt();       while(t-->0)       {           int n=fs.nextInt();           int c[]=fs.readArray(n);           int i;                                 long mn0=c[0];           long mn1=c[1];           long s0=c[0];           long s1=c[1];                                 long ans;           ans=(mn0+mn1)*n*1L;                      for(i=2;i<n;i++)           {               if(i%2==0)               {                   s0+=c[i];                   mn0=Math.min(mn0,c[i]);               }               else               {                   s1+=c[i];                   mn1=Math.min(mn1,c[i]);               }               ans=Math.min(ans,s0+mn0*(n-i/2-1)+s1+mn1*(n-(i+1)/2));           }                      out.println(ans);                                                   }                  out.flush();         out.close();     } }          ","import java.io.*; import java.util.*; public class E { public static void main(String[] args) { FastScanner sc = new FastScanner(); int t = sc.nextInt(); while(t-- > 0) { int n = sc.nextInt(); int[] a = new int[n]; for(int i = 0 ; i< n ; i++) { a[i] = sc.nextInt(); } long oddMin = a[1]; long evenMin = a[0]; long res = (n * oddMin) + (n * evenMin); long oddSum = a[1]; long evenSum = a[0]; for(int i = 2 ;i < n ; i++) { if(i % 2 == 1) { oddSum += a[i]; oddMin = Math.min(oddMin, a[i]); } else { evenSum += a[i]; evenMin = Math.min(evenMin, a[i]); } int odd = (i + 1) / 2; int even = (i / 2) + 1; long minCostOdd = oddSum + oddMin*(n - odd); long minCostEven = evenSum + evenMin*(n - even); res = Math.min(res, minCostOdd + minCostEven); } System.out.println(res); } } } ",0
863,"import java.util.*; import java.io.*; public class Main {                    public static void main(String[] args) {         FastReader reader = new FastReader();         StringBuilder sb = new StringBuilder("""");         int t = reader.nextInt();         int ans = 0;                 while (t-- > 0) {             int n = reader.nextInt();             int nodes[] = new int[n];             int edges[][] = new int[n-1][2];             ArrayList<Pair> graph[] = new ArrayList[n];             for(int i=0; i<n; i++){                 graph[i] = new ArrayList<>();             }             for(int i=0; i<n-1; i++){                 int a = reader.nextInt()-1;                 int b = reader.nextInt()-1;                 graph[a].add(new Pair(b, i));                 graph[b].add(new Pair(a, i));                 nodes[a]++;                 nodes[b]++;             }             boolean possible = true;             for(int i=0; i<n; i++){                 if(nodes[i]>2){                     possible = false;                 }             }             Arrays.fill(nodes, 0);             int first = 2;             int second = 5;                          if(possible){                 int fill_ans[] = new int[n-1];                 find(0, -1, graph, fill_ans, n, first, second, true);                 for(int i=0; i<n-1; i++){                     sb.append(fill_ans[i]+"" "");                 }             }else{                 sb.append(""-1"");             }             sb.append(""\n"");         }         System.out.println(sb);     }     static void find(int node, int par, ArrayList<Pair> graph[], int fill_ans[], int n, int first, int second, boolean first_fill){         for(Pair p: graph[node]){             if(p.a==par){                 continue;             }             if(first_fill){                 fill_ans[p.b] = first;             }else{                 fill_ans[p.b] = second;             }             find(p.a, node, graph, fill_ans, n, first, second, !first_fill);             first_fill = !first_fill;         }     }     static class Pair{         int a, b;         Pair(int x, int y){             a = x;             b = y;         }     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef{     public static class Edge{         int node;         int index;         Edge(int node, int index){             this.node = node;             this.index = index;         }     }     static Scanner scn = new Scanner(System.in); public static void main (String[] args) throws java.lang.Exception{ int t = scn.nextInt(); while(t-->0){     solve(); } } public static void solve(){     int n = scn.nextInt();     ArrayList<Edge>[]graph = new ArrayList[n];     for(int i = 0; i < n; i++){         graph[i] = new ArrayList<>();     }     for(int i = 0; i < n - 1; i++){         int u = scn.nextInt() - 1;         int v = scn.nextInt() - 1;         graph[u].add(new Edge(v, i));         graph[v].add(new Edge(u, i));     }     int start = 0;     for(int i = 0; i < n; i++){         if(graph[i].size() > 2){             System.out.println(""-1"");             return;         }else if(graph[i].size() == 1){             start = i;         }     }     int[]weight = new int[n - 1];     int prevNode = -1, curNode = start, curWeight = 2;     while(true){         ArrayList<Edge>edges = graph[curNode];         Edge next = edges.get(0);         if(next.node == prevNode){             if(edges.size() == 1){                 break;             }else{                 next = edges.get(1);             }         }         weight[next.index] = curWeight;         prevNode = curNode;         curNode = next.node;         curWeight = 5 - curWeight;     }     for(int i = 0; i < n - 1; i++){         System.out.print(weight[i]);         System.out.print("" "");     }     System.out.println(); } } ",0
864,"import java.util.*; import java.io.*; public class Main {               public static void main(String args[])     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);         int tc=fs.nextInt();         while(tc-->0)         {             int n=fs.nextInt();             long a[]=new long[n];             for(int i=0;i<n;i++)             a[i]=fs.nextLong();             long minans=a[0]*n+a[1]*n;             long sum=a[0]+a[1];             long min1=a[0],min2=a[1];             for(int i=2;i<n;i++)             {                 sum+=a[i];                 if(i%2==0)                 min1=Math.min(min1,a[i]);                 else                 min2=Math.min(min2,a[i]);                 long tsum=sum-min1-min2;                 if(i%2==0)                 tsum=tsum+(n-i/2+1)*min2+(n-i/2)*min1;                 else                 tsum=tsum+(min1+min2)*(n-((i+1)/2)+1);                                  minans=Math.min(minans,tsum);                              }             pw.println(minans);         }         pw.flush();         pw.close();     } } ","import java.io.*; import java.lang.*; import java.util.*; public class MinGridPath { public static void main(String[] args) { Scanner s=new Scanner(System.in); int t=s.nextInt(); while(t-->0){ int n = s.nextInt(); long[] aa =new long[n]; for(int i=0;i<n;i++) aa[i]=s.nextLong();   long minEven = aa[0]; long minOdd = aa[1]; long sum = aa[0]+aa[1]; long best = n*minEven + n*minOdd; int numOdd = 1; int numEven = 1; for(int i=2; i<n; ++i) { if(i%2 == 0) { minEven = Math.min(aa[i], minEven); numEven++; }else { minOdd = Math.min(aa[i], minOdd); numOdd++; } sum += aa[i]; long score = sum; score += minEven*(n-numEven); score += minOdd*(n-numOdd); best = Math.min(best, score); } System.out.println(best); } } } ",0
865,"import java.util.*; import java.io.*; public class Main {               public static void main(String args[])     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);         int tc=fs.nextInt();         while(tc-->0)         {             int n=fs.nextInt();             long a[]=new long[n];             for(int i=0;i<n;i++)             a[i]=fs.nextLong();             long minans=a[0]*n+a[1]*n;             long sum=a[0]+a[1];             long min1=a[0],min2=a[1];             for(int i=2;i<n;i++)             {                 sum+=a[i];                 if(i%2==0)                 min1=Math.min(min1,a[i]);                 else                 min2=Math.min(min2,a[i]);                 long tsum=sum-min1-min2;                 if(i%2==0)                 tsum=tsum+(n-i/2+1)*min2+(n-i/2)*min1;                 else                 tsum=tsum+(min1+min2)*(n-((i+1)/2)+1);                                  minans=Math.min(minans,tsum);                              }             pw.println(minans);         }         pw.flush();         pw.close();     } } ","import java.util.*; import java.io.*; import java.math.*; public class C1499 {     public static void main(String[] args) throws IOException {         PrintWriter out = new PrintWriter(System.out);         Reader s = new Reader();         int t = s.i();         while (t-- > 0) {             int n = s.i();             long [] arr = s.arrLong(n);             long odd = arr[1] , even = arr[0];             long [] a = new long[n];             a[0] = arr[0]*n;             a[1] = arr[1]*n;             int in1 = 0 , in2 = 1;             long ans = a[0]+a[1];             for (int i=2;i<n;i++) {                 if (i%2 == 0) {                     long val = even + (n-i/2)*arr[i];                     long val2 = a[i-2] - arr[in1] + arr[i];                     if (val < val2) in1 = i;                     a[i] = Math.min(val2,val);                     even += arr[i];                 } else {                     long val = odd + (n-i/2)*arr[i];                     long val2 = a[i-2] - arr[in2] + arr[i];                     if (val < val2) in2 = i;                     a[i] = Math.min(val2,val);                     odd += arr[i];                 }                 ans = Math.min(ans,a[i]+a[i-1]);             }             out.println(ans);         }         out.flush();     }                                                   } ",0
866,"import java.util.*; import java.io.*; public class Main {               public static void main(String args[])     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);         int tc=fs.nextInt();         while(tc-->0)         {             int n=fs.nextInt();             long a[]=new long[n];             for(int i=0;i<n;i++)             a[i]=fs.nextLong();             long minans=a[0]*n+a[1]*n;             long sum=a[0]+a[1];             long min1=a[0],min2=a[1];             for(int i=2;i<n;i++)             {                 sum+=a[i];                 if(i%2==0)                 min1=Math.min(min1,a[i]);                 else                 min2=Math.min(min2,a[i]);                 long tsum=sum-min1-min2;                 if(i%2==0)                 tsum=tsum+(n-i/2+1)*min2+(n-i/2)*min1;                 else                 tsum=tsum+(min1+min2)*(n-((i+1)/2)+1);                                  minans=Math.min(minans,tsum);                              }             pw.println(minans);         }         pw.flush();         pw.close();     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { static PrintWriter out; static FastReader scan;      public static int ni(){return scan.nextInt();} public static long nl(){return scan.nextLong();}                 static void lIA(long arr[]){      for(int i=0; i<arr.length; i++)arr[i] = nl();  }                                       public static void main (String[] args) throws java.lang.Exception { OutputStream outputStream =System.out;         out =new PrintWriter(outputStream);         scan =new FastReader(); StringBuilder sb = new StringBuilder(); int t = ni(); while(t-->0){ int n = ni(); long arr[] = new long[n]; lIA(arr); long ans = (long)(n*(arr[0] + arr[1])); long sum = arr[0] + arr[1]; long emin = arr[0], omin = arr[1]; for(int i=2; i<n; i++){ sum += arr[i]; if(i%2==0){ emin = Math.min(arr[i], emin); } else{ omin = Math.min(arr[i], omin); } long temp = sum - emin - omin; if(i%2==0) temp += (n-i/2)*emin + (n-i/2+1)*omin; else temp += (n-(i-1)/2)*(emin + omin); ans = Math.min(ans, temp); } System.out.println(ans);         }         out.flush(); out.close(); } } ",1
867,"import java.util.*; import java.io.*; public class Main {      public static void main(final String[] args) {     FastScanner sc = new FastScanner(); int t = sc.nextInt(); while(t-- > 0) { int n = sc.nextInt(); int[][] arr = new int[5][n]; for(int i = 0; i < n; i++) { char[] s = sc.next().toCharArray(); int[] cnt = new int[5]; for(int j = 0; j < s.length; j++) { cnt[s[j]-'a']++; } for(int j = 0; j < 5; j++) arr[j][i] = cnt[j]-(s.length-cnt[j]); } int ans = 0; for(int i = 0; i < 5; i++) { Arrays.sort(arr[i]); int maxSum = 0; int words = 0; for(int j = arr[i].length-1; j >=0; j--) { maxSum += arr[i][j]; if(maxSum > 0) words++; } ans = Math.max(ans, words); } System.out.println(ans); }   }     } ","import java.io.BufferedReader; import java.io.IOException; import java.io.*; import java.util.*; import javax.management.Query; public class Test{     public static void main(String[] args) throws IOException, InterruptedException{       Scanner sc = new Scanner(System.in);      int t = sc.nextInt();           while(t-->0){       int n = sc.nextInt();       String [] words = new String[n];       int [] occ = new int[5];       int [] occWord = new int [5];       boolean []  found ;       for(int i =0;i<n;i++){         words[i] = sc.nextLine();         found = new boolean[5];         for(int j=0 ; j<words[i].length();j++){           occ[words[i].charAt(j)-'a']++;           if(!found[words[i].charAt(j)-'a']){             found[words[i].charAt(j)-'a']=true;             occWord[words[i].charAt(j)-'a'] ++;           }         }       }       int maxRes =0;       for(int i =0;i<5;i++){       int maxChar = 'a' +i;              PriorityQueue<Pair> pq = new PriorityQueue<>();       for (String word : words){           pq.add(new Pair(word,occOfMaxChar(word, maxChar)-occOfOtherChar(word, maxChar)));       }       int res = 0;       int curr = 0;       int maxCharCount = 0;       int otherCharCount =0;       while(!pq.isEmpty()){         String word = pq.poll().x;         maxCharCount +=occOfMaxChar(word, maxChar);          otherCharCount += occOfOtherChar(word, maxChar);          curr ++;          if(maxCharCount >otherCharCount){            res = curr;          }                  }       maxRes = Math.max(maxRes, res);     }     System.out.println(maxRes);}       }   public static int occOfMaxChar (String s, int maxChar){      int occ = 0;      for(int i =0 ;i<s.length();i++){        if(s.charAt(i)==maxChar){          occ++;        }       }       return occ;   }   public static int occOfOtherChar (String s, int maxChar){     int occ = 0;     for(int i =0 ;i<s.length();i++){       if(s.charAt(i)!=maxChar){         occ++;       }      }      return occ;  }     static int w;     static int n;     static long [][] memo;     static int [] depth ;     static long[] values;     static ArrayList<Pair> gold ;          static class Pair implements Comparable {       String x;       int y;       public Pair (String x, int y) {         this.x = x;         this.y = y;       }            }           } ",0
868,"import java.util.*; import java.io.*; public class Main {      public static void main(final String[] args) {     FastScanner sc = new FastScanner(); int t = sc.nextInt(); while(t-- > 0) { int n = sc.nextInt(); int[][] arr = new int[5][n]; for(int i = 0; i < n; i++) { char[] s = sc.next().toCharArray(); int[] cnt = new int[5]; for(int j = 0; j < s.length; j++) { cnt[s[j]-'a']++; } for(int j = 0; j < 5; j++) arr[j][i] = cnt[j]-(s.length-cnt[j]); } int ans = 0; for(int i = 0; i < 5; i++) { Arrays.sort(arr[i]); int maxSum = 0; int words = 0; for(int j = arr[i].length-1; j >=0; j--) { maxSum += arr[i][j]; if(maxSum > 0) words++; } ans = Math.max(ans, words); } System.out.println(ans); }   }     } ","import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; public class Practice {     static HashMap<String, Integer> map = new HashMap<>();     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-->0) {             int n = sc.nextInt();             int[][] occurances = new int[5][n];             for(int i=0;i<n;i++){                 String s = sc.next();                 int[] count = new int[5];                 int len = s.length();                 for(int j=0;j<s.length();j++){                     count[s.charAt(j)-'a']++;                 }                 for(int j=0;j<5;j++){                     occurances[j][i] = count[j] - (len-count[j]);                 }             }             int ans = 0;             for(int i=0;i<5;i++){                 Arrays.sort(occurances[i]);                 int tmpAns = 0; int tmpSum=0;                 for(int j=n-1;j>=0;j--){                     tmpSum+=occurances[i][j];                     if(tmpSum>0) tmpAns++;                     else break;                 }                 ans = Math.max(ans, tmpAns);             }             System.out.println(ans);         }     } } ",1
869,"import java.util.*; import java.io.*; public class Main {      static void printLine(String s) {     System.out.println(s);   }      static int parseInt(String s) {     return Integer.parseInt(s.trim());   }   static String[] split(String s) {     return s.split(""\\s+"");   }      public static void main(String[] args) throws Exception {     BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     String line;     StringTokenizer st;     int test = parseInt(br.readLine());     for (int t = 0; t < test; t++) {       int n = parseInt(br.readLine());       ArrayList<Integer> blue = new ArrayList<Integer>();       ArrayList<Integer> red = new ArrayList<Integer>();       String[] toks = split(br.readLine());       String color = br.readLine();       for (int i = 0; i < n; i++) {         if (color.charAt(i) == 'B') {           blue.add(parseInt(toks[i]));         } else {           red.add(parseInt(toks[i]));         }       }       int[] blueArr = new int[blue.size()];       int[] redArr = new int[red.size()];       for (int i = 0; i < blue.size(); i++) {         blueArr[i] = blue.get(i);       }       for (int i = 0; i < red.size(); i++) {         redArr[i] = red.get(i);       }       Arrays.sort(blueArr);       Arrays.sort(redArr);       int blueP = 0;        int redP = 0;                      int start = 1;       boolean unable = false;       while (start <= n) {         if (blueP < blueArr.length) {           if (blueArr[blueP] < start) {             unable = true;             printLine(""NO"");             break;             } else {             blueP++;             start++;           }         } else {           if (redArr[redP] > start) {             unable = true;             printLine(""NO"");             break;             } else {             redP++;             start++;           }         }               }       if (!unable) {         printLine(""YES"");       }           }   } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main {     static void sort(int a[]){         ArrayList<Integer> arr=new ArrayList<>();         for(int i=0;i<a.length;i++)arr.add(a[i]);         Collections.sort(arr);         for(int i=0;i<a.length;i++)a[i]=arr.get(i);     } public static void main (String[] args) throws java.lang.Exception {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));              int t=Integer.parseInt(br.readLine());     while(--t>=0){         int n=Integer.parseInt(br.readLine());          int a[]=new int[n];          StringTokenizer st=new StringTokenizer(br.readLine());         for(int i=0;i<n;i++)a[i]=Integer.parseInt(st.nextToken());        String s=br.readLine();         ArrayList<Integer> inc=new ArrayList<>();         ArrayList<Integer> dec=new ArrayList<>();                  for(int i=0;i<n;i++){             if(s.charAt(i)=='R')inc.add(a[i]);             else dec.add(a[i]);         }         Collections.sort(dec);         Collections.sort(inc,Collections.reverseOrder());         int p=n;         boolean flag=false;         for(int i=0;i<inc.size();i++){             if(inc.get(i)>p)flag=true;             p--;         }         p=1;         for(int i=0;i<dec.size();i++){             if(dec.get(i)<p)flag=true;             p++;         }         if(flag)System.out.println(""NO"");         else System.out.println(""YES"");     }      } } ",0
870,"import java.util.*; import java.io.*; public class Main {     public static int ask(int i){         FastReader sc = new FastReader();         System.out.println(""? "" + (i+1));         System.out.flush();         int x = sc.nextInt();         return x - 1;     } public static void main(String[] args) { FastReader sc = new FastReader(); int t = sc.nextInt(); int inf = 1000000007; while(t-->0){     int n = sc.nextInt();     int ans[] = new int[n];     for(int i=0;i<n;i++){         if(ans[i] == 0){             ArrayList<Integer> cycle = new ArrayList<Integer>();             int x = ask(i), y = ask(i);             cycle.add(y);             while(y != x){                 y = ask(i);                 cycle.add(y);             }               for(int j=0;j<cycle.size();j++){                 ans[cycle.get(j)] = cycle.get((j+1)%cycle.size()) + 1;             }         }     }          System.out.print(""! "");     for(int i=0;i<n;i++) System.out.print(ans[i] + "" "");     System.out.println(); } } } ","import java.util.*; import java.lang.*; import java.io.*; public class Solution {     public static void main(String[] args) throws java.lang.Exception {         out = new PrintWriter(new BufferedOutputStream(System.out));         sc = new FastReader();         int test = sc.nextInt();         for (int t = 0; t < test; t++) {             solve();         }         out.close();     }     private static void solve() {         int n = sc.nextInt();         int[] permutation = new int[n];         Arrays.fill(permutation, -1);                  for (int i = 0; i < n; i++) {             if (permutation[i] == -1) {                                                    List<Integer> cycle = new ArrayList<>();                 int startCycleValue = ask(i + 1);                 int currValueAt = ask(i + 1);                 cycle.add(currValueAt);                 while (currValueAt != startCycleValue) {                     currValueAt = ask(i + 1);                     cycle.add(currValueAt);                 }                 int m = cycle.size();                 for (int j = 0; j < m; j++) {                     permutation[cycle.get(j)] = cycle.get((j + 1) % m);                 }             }         }         out.println(""! "");         for (int i = 0; i < n; i++) {             out.print((permutation[i] + 1) + "" "");         }         out.println();         out.flush();     }     private static int ask(int i) {         out.println(""? "" + i + "" "");         out.flush();         int value = sc.nextInt();         return value - 1;     }     public static FastReader sc;     public static PrintWriter out;      } ",0
871,"import java.util.*; import java.io.*; public class Main {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             String[] s = new String[n];             for(int i=0; i<n; i++)                 s[i] = sc.next();             int MAX = 0;             for(char c = 'a'; c <= 'e'; c++){                 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());                  for(int i=0; i<n; ++i) {                     int curChar = 0;                     int otherChar = 0;                     for(int j=0; j<s[i].length(); j++) {                         if(s[i].charAt(j) == c)                             curChar++;                         else                             otherChar++;                     }                     int diff = curChar - otherChar;                     pq.add(diff);                 }                 int cur = 0;                 int numberOfWords = 0;                 while(!pq.isEmpty()){                     if(cur + pq.peek() > 0){                         cur += pq.poll();                         numberOfWords++;                     }else{                         break;                     }                 }                 MAX = Math.max(MAX, numberOfWords);             }             pw.println(MAX);         }         pw.close();     }      } ","import java.io.*; import java.util.*; import java.lang.*; public class C {   public static void main(String[] args) {     InputStream inputStream = System.in;     OutputStream outputStream = System.out;     InputReader in = new InputReader(inputStream);     PrintWriter out = new PrintWriter(outputStream);     Solver solver = new Solver();     solver.Main(in, out);     out.close();   }   static class Solver {     public void Main(InputReader in, PrintWriter out) {       int T = in.nextInt();       for (int t = 0; t < T; t++) {         int n = in.nextInt();         String[] A = new String[n];         for (int i = 0; i < n; i++) {           A[i] = in.next();         }         int ans = 0;         for (char c = 'a'; c <= 'e'; c++) {           int[] ls = new int[n];           for (int i = 0; i < n; i++) {             int delta = 0;             for (int j = 0; j < A[i].length(); j++) {               if (A[i].charAt(j) == c) {                 delta += 1;               } else {                 delta -= 1;               }             }             ls[i] = delta;           }           Arrays.sort(ls, 0, n);           int cur = 0;           int score = 0;           for (int i = n - 1; i >= 0; i--) {             if (cur + ls[i] >= 1) {               cur += ls[i];               score += 1;             }           }           ans = Math.max(ans, score);         }         out.println(ans);       }     }   }    } ",0
872,"import java.util.*; import java.io.*; public class Main {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             String[] s = new String[n];             for(int i=0; i<n; i++)                 s[i] = sc.next();             int MAX = 0;             for(char c = 'a'; c <= 'e'; c++){                 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());                  for(int i=0; i<n; ++i) {                     int curChar = 0;                     int otherChar = 0;                     for(int j=0; j<s[i].length(); j++) {                         if(s[i].charAt(j) == c)                             curChar++;                         else                             otherChar++;                     }                     int diff = curChar - otherChar;                     pq.add(diff);                 }                 int cur = 0;                 int numberOfWords = 0;                 while(!pq.isEmpty()){                     if(cur + pq.peek() > 0){                         cur += pq.poll();                         numberOfWords++;                     }else{                         break;                     }                 }                 MAX = Math.max(MAX, numberOfWords);             }             pw.println(MAX);         }         pw.close();     }      } ","import java.io.*; import java.util.*; public class Aqueous { static MyScanner sc = new MyScanner(); public static void main(String[] args) { int t = sc.nextInt(); while(t-->0) { int n = sc.nextInt(); String s[] = new String[n]; for(int i = 0; i<n; i++) { s[i] = sc.next(); } int ans = Integer.MIN_VALUE; for(char c = 'a'; c<='e'; c++) { int ls[] = new int[n]; for(int i = 0; i<n; i++) { String temp = s[i]; int delta = 0; for(int j = 0; j<temp.length(); j++) { if(temp.charAt(j)==c) { delta++; } else { delta--; } } ls[i] = delta; } Arrays.sort(ls); int cur = 0; int score= 0; for(int k = n-1; k>=0; k--) { if(cur+ls[k]>=1) { cur+=ls[k]; score++; } } ans = Math.max(ans, score); } System.out.println(ans); } }      } ",0
873,"import java.util.*; import java.io.*; public class Main {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             String[] s = new String[n];             for(int i=0; i<n; i++)                 s[i] = sc.next();             int MAX = 0;             for(char c = 'a'; c <= 'e'; c++){                 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());                  for(int i=0; i<n; ++i) {                     int curChar = 0;                     int otherChar = 0;                     for(int j=0; j<s[i].length(); j++) {                         if(s[i].charAt(j) == c)                             curChar++;                         else                             otherChar++;                     }                     int diff = curChar - otherChar;                     pq.add(diff);                 }                 int cur = 0;                 int numberOfWords = 0;                 while(!pq.isEmpty()){                     if(cur + pq.peek() > 0){                         cur += pq.poll();                         numberOfWords++;                     }else{                         break;                     }                 }                 MAX = Math.max(MAX, numberOfWords);             }             pw.println(MAX);         }         pw.close();     }      } ","import java.io.BufferedReader;     import java.io.IOException;     import java.io.InputStreamReader;     import java.io.PrintWriter; import java.lang.reflect.Array; import java.util.*; public class Main{               static int MOD=1000003;     public static void main(String[] args) throws IOException {         FastScanner in = new FastScanner();         FastWriter out = new FastWriter();         int t=in.nextInt();                  while (t-->0){             int n=in.nextInt();             String[] ar=new String[n];             for (int i = 0; i < n; i++) {                 ar[i]=in.next();             }             int ans=0;             for(char ch='a';ch<='e';ch++){                 int[] res=new int[n];                 for (int i = 0; i < n; i++) {                     String ss=ar[i];                     for (int j = 0; j < ss.length(); j++) {                         if(ss.charAt(j)==ch){                             res[i]++;                         }else {                             res[i]--;                         }                     }                 }                 Arrays.sort(res);int max=0,nn=0;                 for (int i = n-1; i>=0; i--) {                     max+=res[i];                     if(max>0){                         nn++;                     }else {                         break;                     }                 }                 ans=Math.max(ans,nn);             }             out.println(ans);         }         out.close();     }                                                                                                                                             } ",0
874,"import java.util.*; import java.io.*; public class Main {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             String[] s = new String[n];             for(int i=0; i<n; i++)                 s[i] = sc.next();             int MAX = 0;             for(char c = 'a'; c <= 'e'; c++){                 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());                  for(int i=0; i<n; ++i) {                     int curChar = 0;                     int otherChar = 0;                     for(int j=0; j<s[i].length(); j++) {                         if(s[i].charAt(j) == c)                             curChar++;                         else                             otherChar++;                     }                     int diff = curChar - otherChar;                     pq.add(diff);                 }                 int cur = 0;                 int numberOfWords = 0;                 while(!pq.isEmpty()){                     if(cur + pq.peek() > 0){                         cur += pq.poll();                         numberOfWords++;                     }else{                         break;                     }                 }                 MAX = Math.max(MAX, numberOfWords);             }             pw.println(MAX);         }         pw.close();     }      } ","import java.util.*; import java.io.*; import java.lang.*; import static java.lang.Math.*; public class cp{     static BufferedReader br;     static StringTokenizer st;     public static void main(String[] args)throws IOException{         br = new BufferedReader(new InputStreamReader(System.in));         List<Integer> answer = new ArrayList<Integer>();         for(int t=Integer.parseInt(br.readLine()); t>0; t--){             st = readLine();             int n = tokenInt();             String[] words = new String[n];             int i=0;             while(n-- >0){                 words[i] = br.readLine();                 i++;             }             answer.add(new Solver().solve(words));         }         for (int ans : answer ) System.out.println(ans);     }     static StringTokenizer readLine() throws IOException { return new StringTokenizer(br.readLine()); }     static int tokenInt() { return Integer.parseInt(st.nextToken()); }                                         } class Solver{     public int solve(String[] words) throws IOException{         char[] alphabets = {'a', 'b', 'c', 'd', 'e'};         int[][] arr = new int[5][words.length];         int i=0;         for(String s : words) {             char[] wordArr = s.toCharArray();             int j=0;             for (char alpha : alphabets) {                 int counter = 0;                 for(char letter : wordArr){                     if(alpha == letter)                         counter++;                 }                 arr[j][i] = 2*counter - s.length();                 j++;             }             i++;         }         int[] ans = new int[5];         int m=0;         for (int[] ar : arr) {             Arrays.sort(ar);             int val=0;             int counter=0;             for(i=ar.length-1; i>=0; i--){                 val += ar[i];                 if(val>0) counter++;                 else break;             }             ans[m] = counter;             m++;         }         return Arrays.stream(ans).max().getAsInt();     } } ",0
875,"import java.util.*; import java.io.*; public class Main {     static FastScanner sc = new FastScanner(System.in);     static PrintWriter pw = new PrintWriter(System.out);     static StringBuilder sb = new StringBuilder();     static long mod = (long) 1e9 + 7;     public static void main(String[] args) throws Exception {         int n = sc.nextInt();         for(int i = 0; i < n; i++) solve();         pw.flush();     }     public static void solve() {         int n = sc.nextInt();         char[] a = sc.next().toCharArray();         char[] b = sc.next().toCharArray();         boolean isFirst = false;         boolean allOk = true;         int a1 = 0;         int a0 = 0;         int b1 = 0;         int b0 = 0;         int[][] cnt1 = new int[2][2];         for(int i = 0; i < n; i++){             if(a[i] != b[i]){                 allOk = false;             }             if(a[i] == '1'){                 a1++;                 isFirst = true;             }else{                 a0++;             }             if(b[i] == '1'){                 b1++;             }else{                 b0++;             }             cnt1[a[i]-'0'][b[i]-'0']++;         }         if(allOk){             pw.println(0);             return;         }else if(!isFirst){             pw.println(-1);             return;         }else if(a1 != b1 && (a0+1) != b1){             pw.println(-1);             return;         }else{             int same = cnt1[1][1] - cnt1[0][0] == 1 ? cnt1[1][1] + cnt1[0][0] : Integer.MAX_VALUE;             int odd = cnt1[1][0] - cnt1[0][1] == 0 ? cnt1[1][0] + cnt1[0][1] : Integer.MAX_VALUE;             int min = Math.min(same,odd);             pw.println(min == Integer.MAX_VALUE ? -1 : min);         }     }           } ","import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class Cgr18A {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader sc = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Solver solver = new Solver();         int t = sc.nextInt();         while (t-- != 0) {             solver.solve(sc, out);         }         out.close();     }     static class Solver {         final int INF = (int) 1e9;         public void solve(InputReader sc, PrintWriter out) {             int n = sc.nextInt();             char[] a = sc.next().toCharArray();             char[] b = sc.next().toCharArray();             boolean isAllZeroA = isAllZero(a);             boolean isAllZeroB = isAllZero(b);             if(isAllZeroA && isAllZeroB) {                 out.println(0);                 return;             }             if(isAllZeroA || isAllZeroB) {                 out.println(-1);                 return;             }             int eq = 0;             for(int i = 0; i< n;i++) if(a[i]==b[i]) eq++;             int eqHasOne = 0;             int notEqHasOne = 0;             int noteq = n-eq;             for (int i = 0; i < n; i++) {                 if(a[i]==b[i] && a[i]=='1') eqHasOne++;                 if(a[i]!=b[i] && a[i]=='1') notEqHasOne++;             }             int l = solveIt(new int[] {eq,noteq},new int[] {eqHasOne,notEqHasOne},0);             int r = solveIt(new int[] {eq,noteq},new int[] {eqHasOne,notEqHasOne},1);             if(l==INF && r==INF) {                 out.println(-1);             } else {                 out.println(Math.min(l,r));             }         }         private boolean isAllZero(char[] a) {             for(char c : a) if(c=='1') return false;             return true;         }         private int solveIt(int[] arr,int[] hasOne, int minusPointer) {             if(arr[0]==0 && arr[1]==0) throw new RuntimeException();             int cnt = 0;             int max = arr[0] + arr[1];             while(arr[1]!=0) {                 int minus = minusPointer;                 int plus = 1-minus;                 if(hasOne[minusPointer]<1) return INF;                 int eqHasOne = hasOne[0];                 int notEqHasOne = hasOne[1];                 int eqHasZero = arr[0] - eqHasOne;                 int notEqHasZero = arr[1] - notEqHasOne;                 if(minusPointer==0) {                     int newNotEqHasOne = eqHasZero;                     int newEqHasOne = notEqHasZero + 1;                     hasOne[0] = newEqHasOne;                     hasOne[1] = newNotEqHasOne;                 } else {                     int newEqHasOne = notEqHasZero;                     int newNotEqHasOne = eqHasZero + 1;                     hasOne[0] = newEqHasOne;                     hasOne[1] = newNotEqHasOne;                 }                 int minusValue = arr[minus]-1;                 int plusValue = arr[plus]+1;                 arr[minus] = plusValue;                 arr[plus] = minusValue;                 minusPointer = 1-minusPointer;                 cnt++;                 if(cnt>max+10) break;             }             if(arr[1]!=0) return INF;             return cnt;         }     }                          } ",0
876,"import java.util.*; import java.io.*; public class Main {     static FastScanner sc = new FastScanner(System.in);     static PrintWriter pw = new PrintWriter(System.out);     static StringBuilder sb = new StringBuilder();     static long mod = (long) 1e9 + 7;     public static void main(String[] args) throws Exception {         int n = sc.nextInt();         for(int i = 0; i < n; i++) solve();         pw.flush();     }     public static void solve() {         int n = sc.nextInt();         long[] a = sc.nextLongArray(n);         long left = 1;         long right = (long)1e9;         long[] dec = new long[2];         while(right-left > 1){             long mid = (right+left)/2L;             dec[0] = dec[1] = 0;             boolean ok = true;             for(int i = n-1; i >= 2; i--){                 long a1 = a[i] + dec[1];                 if(a1 < mid){                     ok = false;                     break;                 }                 long d = (Math.min(a[i],a1-mid))/3L;                 dec[1] = dec[0]+d;                 dec[0] = d*2;                              }             if(ok && a[0]+dec[0] >= mid && a[1]+dec[1] >= mid){                 left = mid;             }else{                 right = mid;             }                      }         pw.println(left);     }      } ","import java.util.*; import java.io.*; public class C { public static void main(String[] args) throws IOException { FastScanner in = new FastScanner(System.in); PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out))); int bruh = in.nextInt(); for (int cases = 0; cases < bruh; cases++) { int n = in.nextInt(); long lo = (int) 1e9, hi = 0; long [] a = new long[n]; for (int i = 0; i < n; i++) { a[i] = in.nextInt(); lo = Math.min(lo, a[i]); hi = Math.max(hi, a[i]); } long m = 0; while (lo <= hi) { m = (lo + hi) / 2; if (works(a, m)) { lo = m + 1; } else { hi = m - 1; } } out.println(hi); } out.close(); } static boolean works(long[] a, long m) { long[] d = Arrays.copyOf(a, a.length); for (int i = a.length - 1; i > 1; i--) { if (d[i] < m) { return false; } long canGive = (d[i] - m) / 3 * 3; canGive = Math.min(canGive, a[i]); d[i - 1] += canGive / 3; d[i - 2] += canGive / 3 * 2; d[i] -= canGive; } if (d[0] < m || d[1] < m) return false; return true; } } ",0
877,"import java.util.*; import java.io.*; public class Main {     static MyScanner sc;     static PrintWriter out;     static {         sc = new MyScanner();         out = new PrintWriter(System.out);     }     public static void bfs(Node[] g, int[] ans) {         Arrays.fill(ans, -1);         boolean[] visited = new boolean[g.length];         Queue<Integer> q = new LinkedList<>();         int s = 0;         for(int i = 0; i < g.length; i++) {             if(g[i].l.size() == 1) {                 s = i;                 break;             }         }         q.add(s);         int curr = 2;         while(!q.isEmpty()) {             int u = q.poll();             if(visited[u])                 continue;             visited[u] = true;             for(Edge edge : g[u].l) {                 if(!visited[edge.v]) {                     ans[edge.id] = curr;                     q.add(edge.v);                     if(curr == 2) curr = 3;                     else curr = 2;                 }             }         }     }     public static void solve() {         int n = sc.nextInt();         Node[] a = new Node[n];         for(int i = 0; i < n; i++)             a[i] = new Node();         for(int i = 0; i < n - 1; i++) {             int u = sc.nextInt() - 1;             int v = sc.nextInt() - 1;             a[u].l.add(new Edge(v, i));             a[v].l.add(new Edge(u, i));         }         for(Node node : a) {             if(node.l.size() > 2) {                 out.println(-1);                 return;             }         }         int[] ans = new int[n - 1];         bfs(a, ans);         for(int i = 0; i < n - 1; i++)             out.print(ans[i] + "" "");         out.println();     }     public static void main(String[] args) {         int t = sc.nextInt();         while(t-- > 0)             solve();         out.flush();     } } class Edge {     int v, id;     Edge(int a, int b) {         v = a;         id = b;     } } class Node {     ArrayList<Edge> l;     Node() {         l = new ArrayList<>();     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { static { try { System.setIn(new FileInputStream(""input.txt"")); System.setOut(new PrintStream(new FileOutputStream(""output.txt""))); } catch (Exception e) {} } void solve() { int n = in.nextInt(); ArrayList<Edge>[] graph = new ArrayList[n + 1]; for (int i = 0; i < n; i++) { graph[i] = new ArrayList<Edge>(); } for (int i = 0; i < n - 1; i++) { int u = in.nextInt(); int v = in.nextInt(); v--; u--; graph[u].add(new Edge(v, i)); graph[v].add(new Edge(u, i)); } int[] res = new int[n - 1]; for (int i = 0; i < n; i++) { if (graph[i].size() > 2) { out.append(""-1\n""); return; } } int start = -1; for (int i = 0; i < n; i++) { if (graph[i].size() == 1) { start  = i; break; } } int currNode = start; int prevNode = -1; int weight = 2; while (true) { ArrayList<Edge> edges = graph[currNode]; Edge next = edges.get(0); if (next.node == prevNode) { if (edges.size() == 1) { break; } next = edges.get(1); } res[next.index] = weight; weight = 5 - weight; prevNode = currNode; currNode = next.node; } for (int i = 0; i < n - 1; i++) { out.append(res[i] + "" ""); } out.append(""\n""); } public static void main (String[] args) { Main sol = new Main(); int t = 1; t = in.nextInt(); while (t-- != 0) { sol.solve(); } System.out.print(out); } void print(int s) { System.out.print(s); } static FastReader in; static StringBuffer out; final int MAX; final int MIN; int mod ; Main() { in = new FastReader(); out = new StringBuffer(); MAX = Integer.MAX_VALUE; MIN = Integer.MIN_VALUE; mod = (int)1e9 + 7; } } class Edge { int node, index; Edge(int node, int index) { this.node = node; this.index = index; } } ",0
878,"import java.util.*; import java.io.*; public class Main {   public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(System.out); StringTokenizer st; int t = Integer.parseInt(br.readLine()); while (t --> 0) { int n = Integer.parseInt(br.readLine()); String a = br.readLine(); String b = br.readLine(); int alit = 0; int blit = 0; int ans = Integer.MAX_VALUE; for (int i = 0; i < n; i++) { if (a.charAt(i) == '1') alit++; if (b.charAt(i) == '1') blit++; } if (alit == blit) { int count = 0; for (int i = 0; i < n; i++) if (a.charAt(i) != b.charAt(i)) count++; ans = Math.min(count, ans); } if (alit == n - blit + 1) { int count = 0; for (int i = 0; i < n; i++) if (a.charAt(i) == b.charAt(i)) count++; ans = Math.min(ans, count); } if (ans == Integer.MAX_VALUE) { pw.println(""-1""); } else { pw.println(ans); } } pw.close();   } } ","import java.util.*; public class Main{     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         int t=Integer.valueOf(sc.nextLine());         while (t-->0){             int n=Integer.valueOf(sc.nextLine());             int ans=100001;             String a=sc.nextLine();             String b=sc.nextLine();             HashSet<Integer> listb=new HashSet<>();             ArrayList<Integer> lista=new ArrayList<>();             for (int i=0;i<n;i++){                 if(a.charAt(i)=='1') lista.add(i);                 if(b.charAt(i)=='1') listb.add(i);             }             int num=0;             for (int i=0;i<lista.size();i++){                 if(listb.contains(lista.get(i))) num++;             }                          if(lista.size()==listb.size()){                 ans=Math.min(ans,(listb.size()-num)*2);             }                          if(listb.size()-(n-lista.size())==1){                 ans=Math.min(ans,(num-1)*2+1);             }             System.out.println((ans==100001)?-1:ans);         }     } } ",0
879,"import java.util.*; import java.io.*; public class Main { public static void main(String[] args) {   FastReader reader = new FastReader();   int Q = reader.nextInt();   outer: for (int q = 0; q < Q; q++) {     int N = reader.nextInt();     int[][] scores = new int[5][N];     for (int i = 0; i < N; i++) {       int[] occurs = new int[5];       String word = reader.next();       for (int j = 0; j < word.length(); j++) {         occurs[word.charAt(j) - 'a']++;       }       for (int j = 0; j < 5; j++) {         scores[j][i] = occurs[j] - (word.length() - occurs[j]) ;       }     }     int bestCount = 0;     for (int i = 0; i < 5; i++) {       int[] curr = scores[i];       Arrays.sort(curr);       int currentCount = 1;       int currentScore = curr[curr.length - 1];       for (int j = curr.length - 2; j >= 0 && currentScore > 0; j--) {         currentScore += curr[j];         currentCount++;       }       if (currentScore <= 0) currentCount--;       bestCount = Math.max(currentCount, bestCount);     }     System.out.println(bestCount);   } } } ","import java.util.*; import java.io.*; public class C1551 { public static void main(String[] args) throws IOException { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[][] arr = new char[n][]; for (int i = 0; i < arr.length; i++) { arr[i] = sc.next().toCharArray(); } int[][] cnt = new int[n][5]; for (int i = 0; i < cnt.length; i++) { for (char c : arr[i]) { cnt[i][c - 'a']++; } } int fans = 0; for (int letter = 0; letter < 5; letter++) { ArrayList<Integer> al = new ArrayList<Integer>(); for (int i = 0; i < n; i++) { al.add(2 * cnt[i][letter] - arr[i].length); } Collections.sort(al, Collections.reverseOrder()); int sum = 0; int ans = 0; for (int x : al) { sum += x; if (sum > 0) { ans++; } else { break; } } fans = Math.max(ans, fans); } pw.println(fans); } pw.close(); } } ",0
880,"import java.util.*; import java.io.*; public class Main { public static void main(String[] args) {   FastReader reader = new FastReader();   int Q = reader.nextInt();   outer: for (int q = 0; q < Q; q++) {     int N = reader.nextInt();     int[][] scores = new int[5][N];     for (int i = 0; i < N; i++) {       int[] occurs = new int[5];       String word = reader.next();       for (int j = 0; j < word.length(); j++) {         occurs[word.charAt(j) - 'a']++;       }       for (int j = 0; j < 5; j++) {         scores[j][i] = occurs[j] - (word.length() - occurs[j]) ;       }     }     int bestCount = 0;     for (int i = 0; i < 5; i++) {       int[] curr = scores[i];       Arrays.sort(curr);       int currentCount = 1;       int currentScore = curr[curr.length - 1];       for (int j = curr.length - 2; j >= 0 && currentScore > 0; j--) {         currentScore += curr[j];         currentCount++;       }       if (currentScore <= 0) currentCount--;       bestCount = Math.max(currentCount, bestCount);     }     System.out.println(bestCount);   } } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ",0
881,"import java.util.*; import java.io.*; public class Main2 { static long mod = 998244353; static FastReader sc = new FastReader(); static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { int t = 1;     z : while(t-->0) {     int n = sc.nextInt();     int a[] = new int[n];     for(int i=0;i<n;i++) a[i] = sc.nextInt();     List<Integer> a1 = new ArrayList<>();     ArrayList<Integer> a2 = new ArrayList<>();     for (int i = 0; i < n; i++) {     if(a[i] == 0) a1.add(i);     else a2.add(i); }     long dp[][] = new long[n+1][n+1];     for (int i = 0; i <= n; i++) {     Arrays.fill(dp[i],-1); }     out.write(find(0,0,a1,a2,dp)+""\n"");     } out.close(); } private static long find(int i, int j, List<Integer> a1, ArrayList<Integer> a2, long[][] dp) { if(j == a2.size()) return 0; int req = a2.size()-j; int ava = a1.size()-i; if(ava<req) return Integer.MAX_VALUE/2; if(dp[i][j] != -1) return dp[i][j]; long ans1 = find(i+1,j,a1,a2,dp); long ans2 = Math.abs(a1.get(i)-a2.get(j)) + find(i+1,j+1,a1,a2,dp); return dp[i][j] = Math.min(ans1, ans2); } } ","import java.io.*;     import java.util.*;     import java.lang.Math;     public class Main {           static Scanner sc;           static StringBuilder ans;                      static int ni()     { return sc.nextInt();       }                                                                                                                             static void runIo() throws Exception  {                sc = new Scanner(System.in);           }                                                                                                                                                           public static void main(String[] args)  throws Exception {                                runIo();                              int t;                t = 1;                                                             ans = new StringBuilder();                           while( t-- > 0 ) {                        solve();                }                                           System.out.println(ans+"""");              }                static int N ;            static int M ;            static ArrayList<Integer> f;           static ArrayList<Integer> e;           static long dp[][];           static long find(int i, int j ) {                                if( i == N )   return 0;                if( j == M )   return Integer.MAX_VALUE;                if (dp[i][j] != -1 )                     return dp[i][j];                return dp[i][j] = Math.min( find(i, j+1), Math.abs(f.get(i)-e.get(j)) +  find(i+1, j+1) );           }                  public static void solve() {                                     int n = ni();                f = new ArrayList();                e = new ArrayList();                               for(int i = 0; i<n; i++) {                     int v = ni();                     if( v == 0 ) {                          e.add(i);                     }                     else                          f.add(i);                }                N = f.size();                M = e.size();                               dp = new long[N][M];                for(int i = 0; i<N; i++)                     Arrays.fill(dp[i], -1);                ans.append(find(0, 0)+""\n"");           }        } ",0
882,"import java.util.*; import java.io.*; public class Main{        public static void main(String[] args) throws IOException{ BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); int n = pint(in); Stack<Integer> min = new Stack<Integer>(); Stack<Integer> max = new Stack<Integer>(); int[] a = new int[n]; int[] dp = new int[n]; StringTokenizer st = new StringTokenizer(in.readLine()); a[0] = pint(st); min.add(0); max.add(0); for(int i = 1; i < n; i++) { a[i] = pint(st); int h = dp[i - 1] + 1; while(!max.isEmpty() && a[i] > a[max.peek()]) { int k = a[max.peek()]; h = Math.min(h, dp[max.pop()] + 1); while(!max.isEmpty() && a[max.peek()] == k) {max.pop();} } if(!max.isEmpty()) { h = Math.min(h, dp[max.peek()] + 1); } while(!min.isEmpty() && a[i] < a[min.peek()]) { int k = a[min.peek()]; h = Math.min(h, dp[min.pop()] + 1); while(!min.isEmpty() && a[min.peek()] == k) {min.pop();} } if(!min.isEmpty()) { h = Math.min(h, dp[min.peek()] + 1); } dp[i] = h; min.add(i); max.add(i); } System.out.println(dp[n - 1]); }     static int pint(BufferedReader in) throws IOException {return Integer.parseInt(in.readLine());}     static int pint(StringTokenizer st) {return Integer.parseInt(st.nextToken());} } ","import java.util.*;     import java.io.*;     public class D{                                     static int mod = (int)(1e9+7);                  public static void main(String[] args) {             InputReader in = new InputReader(System.in);             OutputWriter out = new OutputWriter(System.out);             int n = in.nextInt();             int[] arr = in.nextIntArray(n);             Stack<Integer> min = new Stack<>();             Stack<Integer> max = new Stack<>();             int[] dp = new int[n];                          dp[0] = 0;             min.push(0);             max.push(0);             for(int i=1;i<n;i++)             {                 int h=dp[i-1]+1;                 while(!max.isEmpty() && arr[i]>arr[max.peek()])                 {                     int x = arr[max.peek()];                     h = Math.min(h,1+dp[max.pop()]);                     while(!max.isEmpty() && arr[max.peek()]==x)                     {                         max.pop();                     }                 }                 if(!max.isEmpty())                 {                     h = Math.min(h,1+dp[max.peek()]);                 }                 while(!min.isEmpty() && arr[i]<arr[min.peek()])                 {                     int x = arr[min.peek()];                     h = Math.min(h,1+dp[min.pop()]);                     while(!min.isEmpty() && arr[min.peek()]==x)                     {                         min.pop();                     }                 }                 if(!min.isEmpty())                 {                     h = Math.min(h,1+dp[min.peek()]);                 }                 dp[i] = h;                 min.push(i);                 max.push(i);             }             out.printLine(dp[n-1]);             out.flush();             out.close();         }     } ",1
883,"import java.util.*; import java.io.*; public class Main{        public static void main(String[] args) throws IOException{ BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); int n = pint(in); Stack<Integer> min = new Stack<Integer>(); Stack<Integer> max = new Stack<Integer>(); int[] a = new int[n]; int[] dp = new int[n]; StringTokenizer st = new StringTokenizer(in.readLine()); a[0] = pint(st); min.add(0); max.add(0); for(int i = 1; i < n; i++) { a[i] = pint(st); int h = dp[i - 1] + 1; while(!max.isEmpty() && a[i] > a[max.peek()]) { int k = a[max.peek()]; h = Math.min(h, dp[max.pop()] + 1); while(!max.isEmpty() && a[max.peek()] == k) {max.pop();} } if(!max.isEmpty()) { h = Math.min(h, dp[max.peek()] + 1); } while(!min.isEmpty() && a[i] < a[min.peek()]) { int k = a[min.peek()]; h = Math.min(h, dp[min.pop()] + 1); while(!min.isEmpty() && a[min.peek()] == k) {min.pop();} } if(!min.isEmpty()) { h = Math.min(h, dp[min.peek()] + 1); } dp[i] = h; min.add(i); max.add(i); } System.out.println(dp[n - 1]); }     static int pint(BufferedReader in) throws IOException {return Integer.parseInt(in.readLine());}     static int pint(StringTokenizer st) {return Integer.parseInt(st.nextToken());} } ","import java.util.ArrayList; import java.util.Scanner; import java.util.Stack; public class D {     static Scanner sc = new Scanner(System.in);     static int[] height;     static int[] dp;     public static void main(String[] args) {         int n = sc.nextInt();         height = new int[n];         dp = new int[n];         dp[0] = 0;         for (int i = 0; i < n; i++) {             height[i] = sc.nextInt();         }         Stack<Integer> rise = new Stack<Integer>();         Stack<Integer> fail = new Stack<Integer>();         rise.push(0);         fail.push(0);         for (int i = 1; i < n; i++) {             dp[i] = dp[i-1]+1;             if (rise.isEmpty()) {                 rise.push(i);             } else if (height[rise.peek()] < height[i]) {                 rise.push(i);             } else {                 while (!rise.isEmpty() && height[rise.peek()] > height[i]) {                     rise.pop();                     if (!rise.isEmpty()) {                         dp[i] = Math.min(dp[i], dp[rise.peek()] + 1);                     }                 }                 while (!rise.isEmpty() && height[rise.peek()] == height[i]) {                     rise.pop();                 }                 rise.push(i);             }             if (fail.isEmpty()) {                 fail.push(i);             } else if (height[fail.peek()] > height[i]) {                 fail.push(i);             } else {                 while (!fail.isEmpty() && height[fail.peek()] < height[i]) {                     fail.pop();                     if (!fail.isEmpty()){                         dp[i] = Math.min(dp[i], dp[fail.peek()] + 1);                     }                 }                 while (!fail.isEmpty() && height[fail.peek()] == height[i]) {                     fail.pop();                 }                 fail.push(i);             }         }         System.out.println(dp[n - 1]);     } } ",0
884,"import java.util.*; import java.io.*; public class Main{     public static class Element implements Comparable<Element>{         public int key;         public int value;         Element(int k, int v)         {             key=k;             value=v;         }              }     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         while(t-->0)         {             int n=sc.nextInt();             int m=sc.nextInt();             int x=sc.nextInt();             int[] arr=new int[n];             for(int i=0;i<n;++i)                 arr[i]=sc.nextInt();             PriorityQueue<Element> pq=new PriorityQueue<>();             for(int i=1;i<=m;++i)             {                 pq.add(new Element(i,0));             }             System.out.println(""YES"");             for(int j=0;j<n;j++)             {                 Element cur = pq.poll();                 System.out.print(cur.key+"" "");                 cur.value+= arr[j];                 pq.add(cur);             }             System.out.println();         }     } } ","import java.io.*; import java.util.*; public class C {  static class Pair{ int h,in; Pair(){} Pair(int in,int h){ this.in=in; this.h=h; } } static class customSort implements Comparator<Pair>{ }     public static void main(String[] args)  {  FastReader sc=new FastReader();  StringBuffer ans=new StringBuffer(); int test=sc.nextInt(); while(test-->0) { int n=sc.nextInt(),m=sc.nextInt(),x=sc.nextInt(); int arr[]=new int[n]; int res[]=new int[n]; int sum =0; for(int i=0;i<n;i++) { arr[i]=sc.nextInt();sum+=arr[i]; } PriorityQueue<Pair> pq=new PriorityQueue<>(new customSort()); for(int i=1;i<=m;i++) { pq.add(new Pair(i,0)); } ans.append(""YES\n""); for(int a:arr) { Pair xx=pq.poll(); ans.append(xx.in+"" ""); xx.h+=a; pq.add(xx); } ans.append(""\n""); }     System.out.print(ans); }                       static final Random random=new Random();        } ",1
885,"import java.util.*; import java.io.*; public class Main{     public static class Element implements Comparable<Element>{         public int key;         public int value;         Element(int k, int v)         {             key=k;             value=v;         }              }     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         while(t-->0)         {             int n=sc.nextInt();             int m=sc.nextInt();             int x=sc.nextInt();             int[] arr=new int[n];             for(int i=0;i<n;++i)                 arr[i]=sc.nextInt();             PriorityQueue<Element> pq=new PriorityQueue<>();             for(int i=1;i<=m;++i)             {                 pq.add(new Element(i,0));             }             System.out.println(""YES"");             for(int j=0;j<n;j++)             {                 Element cur = pq.poll();                 System.out.print(cur.key+"" "");                 cur.value+= arr[j];                 pq.add(cur);             }             System.out.println();         }     } } ","import java.io.BufferedReader; import java.io.DataInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     static int modulo=998244353;     public static void main(String[] args) {                 FastScanner in = new FastScanner();         int test=in.nextInt();         while(test-->0){             int n=in.nextInt();             int m=in.nextInt();             int x=in.nextInt();              PriorityQueue<pair> pq=new PriorityQueue<>();             int arr[]=new int[n];             for(int i=1;i<=m;i++){                 pq.add(new pair(i,0));             }             System.out.println(""YES"");             for(int i=0;i<n;i++){                 pair p=pq.poll();                 int a=in.nextInt();                 p.y+=a;                 pq.add(p);                 System.out.print(p.x+"" "");             }                                                    System.out.println();         }                                                 }                                                                  } class pair implements Comparable<pair>     {         int x;         int y;           pair(int x, int y) {             this.x = x;             this.y = y;         }          } ",1
886,import java.util.*; import java.io.*; public class Main{     public static void main(String[] args) throws java.io.IOException {         Scanner sc = new Scanner(System.in);         int n=sc.nextInt();         int[] arr=new int[n];         int[][] dp=new int[n][n];         int[][] min=new int[n][n];         ArrayList<Integer> ones=new ArrayList<>();         ArrayList<Integer> zero=new ArrayList<>();         for(int i=0;i<n;++i) {             arr[i] = sc.nextInt();             if(arr[i]==1)                 ones.add(i);             else                 zero.add(i);         }         for(int i=0;i<n;++i)             for(int j=0;j<n;++j) {                 min[i][j] = Integer.MAX_VALUE;                 dp[i][j] = Integer.MAX_VALUE;             }         int len=ones.size();         int zlen=zero.size();         int minn=0;         for(int i=0;i<len;++i)         {             int cur = ones.get(i);             for(int j=i;j<zlen;j++)             {                 int curz = zero.get(j);                 int cost = Math.abs(cur-curz);                 if(i!=0 && curz-1>=0)                 {                     cost+=min[i-1][curz-1];                 }                 dp[i][curz]=cost;             }             minn=Integer.MAX_VALUE;             for(int j=0;j<n;++j)             {                 if(dp[i][j]<minn)                     minn=dp[i][j];                 min[i][j]=minn;             }         }         System.out.println(minn);     } } ,"import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
887,"import java.util.*; import java.io.*; public class Main{     static final Random random=new Random();     static long mod=1000000007L;     static HashMap<String,Integer>map=new HashMap<>();               public static void main(String[] args) {         try {             FastReader in=new FastReader();             FastWriter out = new FastWriter();             int testCases=in.nextInt();                          while(testCases-- > 0){                 solve(in);             }             out.close();         } catch (Exception e) {             return;         }     }     public static void solve( FastReader in){         int n=in.nextInt();         String s=in.next();         String t=in.next();                                                      StringBuilder res=new StringBuilder();         char[] s1=s.toCharArray();         char[] t1=t.toCharArray();         int ans=n+2;         int[] cnt={0,0};         for(int i=0;i<n;i++){             if(s1[i]=='0' && t1[i]=='1'){                 cnt[0]++;             }             if(s1[i]=='1' && t1[i]=='0'){                 cnt[1]++;             }         }         if(cnt[0]==cnt[1])ans=Math.min(ans,cnt[0]+cnt[1]);         cnt[0]=cnt[1]=0;         for(int i=0;i<n;i++){             if(s1[i]=='0' && t1[i]=='0'){                 cnt[0]++;             }             if(s1[i]=='1' && t1[i]=='1'){                 cnt[1]++;             }         }         if(cnt[1]==cnt[0]+1){             ans=Math.min(ans,cnt[0]+cnt[1]);         }         if(ans>n){             res.append(""-1"");         }         else{             res.append(""""+ans);         }                                    System.out.println(res.toString());     }                                   static < E > void print(E res)     {         System.out.println(res);     }      } ","import java.io.BufferedReader; import java.io.IOException; import java.lang.*; import java.io.InputStreamReader; import static java.lang.Math.*; import static java.lang.System.out; import java.util.*; import java.io.File; import java.io.PrintStream; import java.io.PrintWriter; import java.math.BigInteger; public class Main {   static final int mod = 1000000007; static final long temp = 998244353; static final long MOD = 1000000007; static final long M = (long)1e9+7;                                                                                                                 public static void main(String[] args) throws Exception  { Reader sc = new Reader(); PrintWriter fout = new PrintWriter(System.out);  int tt = sc.nextInt(); while(tt-- > 0) {        int n = sc.nextInt();        char[] a = sc.next().toCharArray(), b = sc.next().toCharArray();                int c00 = 0, c01 = 0, c10 = 0, c11 = 0;        for(int i = 0;i<n;i++)        {        if(a[i] == '0' && b[i] == '0')        {        c00++;        }        else if(a[i] == '0' && b[i] == '1')        {        c01++;        }        else if(a[i] == '1' && b[i] == '0')        {        c10++;        }        else if(a[i] == '1' && b[i] == '1')        {        c11++;        }        }                int ans = mod;        if(c01 == c10) ans = min(ans, c01 + c10);        if(c11 == c00 + 1) ans = min(ans, c11 + c00);                fout.println((ans == mod) ? -1 : ans); } fout.close(); } } ",0
888,"import java.util.*; import java.io.*; public class Main{     static final Random random=new Random();     static long mod=1000000007L;     static HashMap<String,Integer>map=new HashMap<>();               public static void main(String[] args) {         try {             FastReader in=new FastReader();             FastWriter out = new FastWriter();             int testCases=in.nextInt();                          while(testCases-- > 0){                 solve(in);             }             out.close();         } catch (Exception e) {             return;         }     }     public static void solve( FastReader in){         int n=in.nextInt();         String s=in.next();         String t=in.next();                                                      StringBuilder res=new StringBuilder();         char[] s1=s.toCharArray();         char[] t1=t.toCharArray();         int ans=n+2;         int[] cnt={0,0};         for(int i=0;i<n;i++){             if(s1[i]=='0' && t1[i]=='1'){                 cnt[0]++;             }             if(s1[i]=='1' && t1[i]=='0'){                 cnt[1]++;             }         }         if(cnt[0]==cnt[1])ans=Math.min(ans,cnt[0]+cnt[1]);         cnt[0]=cnt[1]=0;         for(int i=0;i<n;i++){             if(s1[i]=='0' && t1[i]=='0'){                 cnt[0]++;             }             if(s1[i]=='1' && t1[i]=='1'){                 cnt[1]++;             }         }         if(cnt[1]==cnt[0]+1){             ans=Math.min(ans,cnt[0]+cnt[1]);         }         if(ans>n){             res.append(""-1"");         }         else{             res.append(""""+ans);         }                                    System.out.println(res.toString());     }                                   static < E > void print(E res)     {         System.out.println(res);     }      } ","import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);                 public static void main(String [] args)     {                  int testcases = i();         while(testcases-->0)         {                          solve();         }         out.flush();         out.close();     }     static void solve()     {          int n = i();         char c[] = inputC();         char d[] = inputC();         int x01=0,x10=0,x00=0,x11=0;         for(int i=0;i<n;i++)         {             if(c[i]=='0'&&d[i]=='0')x00++;             if(c[i]=='0'&&d[i]=='1')x01++;             if(c[i]=='1'&&d[i]=='0')x10++;             if(c[i]=='1'&&d[i]=='1')x11++;         }         int ans = Integer.MAX_VALUE;         if(x01==0 && x10==0)         {             System.out.println(0);             return ;         }         if(x11==x00+1)         {             ans = Math.min(x11+x00,ans);         }       if(x01==x10)         {             ans = Math.min(x01+x10,ans);         }         if(ans == Integer.MAX_VALUE){             ans = -1;         }         System.out.println(ans);     }                     static int i() {         return sc.nextInt();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }                                                                                                                                                        } ",0
889,"import java.util.*; import java.io.*; public class Menorah { public static void main(String[] args) throws IOException { BufferedReader f = new BufferedReader(new InputStreamReader(System.in)); int t=Integer.parseInt(f.readLine()); while(t-->0) { int n=Integer.parseInt(f.readLine()); String s=f.readLine(); String s2=f.readLine(); int[] arr=new int[4]; for(int i=0;i<n;i++) { if(s.charAt(i)=='0') { if(s2.charAt(i)=='0') { arr[0]++; } else { arr[1]++; } } else { if(s2.charAt(i)=='0') { arr[2]++; } else { arr[3]++; } } } int min=Integer.MAX_VALUE; if(arr[1]==arr[2]) { min=arr[1]*2; } int temp=arr[1]; arr[1]=arr[3]; arr[3]=temp; temp=arr[0]; arr[0]=arr[2]; arr[2]=temp; arr[3]++; arr[1]--; if(arr[1]==arr[2]) { min=Math.min(min, arr[1]*2+1); } System.out.println(min!=Integer.MAX_VALUE?min:-1); } } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main {     static int func(char a[],char b[]){         int n=a.length;         int a1=0,b1=0;         for(int i=0;i<n;i++){             if(a[i]=='1')a1++;             if(b[i]=='1')b1++;         }         if(a1!=b1)return 100000000;         int cnt=0;         for(int i=0;i<n;i++){             if(a[i]=='1'&&b[i]!='1')cnt++;         }         return cnt*2;     } public static void main (String[] args) throws java.lang.Exception {     BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int t=Integer.parseInt(br.readLine());     while(--t>=0){            int n=Integer.parseInt(br.readLine());            char a[]=br.readLine().toCharArray();           char b[]=br.readLine().toCharArray();          int x=func(a,b);          int ind=-1;          for(int i=0;i<n;i++){              if(a[i]==b[i]&&a[i]=='1'){                  ind=i;                  break;              }          }          int y=100000000;          if(ind>=0){              for(int i=0;i<n;i++){                  if(i==ind)continue;                  if(a[i]=='1')a[i]='0';                  else a[i]='1';              }              y=func(a,b)+1;          }          if(x>=1000000&&y>=1000000){              System.out.println(-1);          }          else         System.out.println(Math.min(x,y));                    }      } } ",0
890,"import java.util.*; import java.io.*; public class MyClass {               static ArrayList<Integer> edge[];     public static void main(String args[])     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);         int tc=fs.nextInt();         while(tc-->0)         {             int n=fs.nextInt();             int a=fs.nextInt();             int b=fs.nextInt();             int da=fs.nextInt();             int db=fs.nextInt();             edge=new ArrayList[n+1];             for(int i=1;i<=n;i++)             edge[i]=new ArrayList<>();             for(int i=1;i<n;i++)             {                 int u=fs.nextInt();                 int v=fs.nextInt();                 edge[u].add(v);                 edge[v].add(u);             }             int dist[]=new int[n+1];             Arrays.fill(dist,-1);             dist[a]=0;             Queue<Integer> queue=new LinkedList<>();             queue.add(a);             while(!queue.isEmpty())             {                 int node=queue.poll();                 for(int v:edge[node])                 {                     if(dist[v]==-1)                     {                         dist[v]=dist[node]+1;                         queue.add(v);                     }                 }             }             if(dist[b]<=da)             {                 pw.println(""Alice"");                 continue;             }             int mx=0,mxvert=1;             for(int i=1;i<=n;i++)             {                 if(dist[i]>mx)                 {                     mx=dist[i];                     mxvert=i;                 }             }             Arrays.fill(dist,-1);             dist[mxvert]=0;             queue.add(mxvert);             while(!queue.isEmpty())             {                 int node=queue.poll();                 for(int v:edge[node])                 {                     if(dist[v]==-1)                     {                         dist[v]=dist[node]+1;                         queue.add(v);                     }                 }             }             for(int i=1;i<=n;i++)             mx=Math.max(mx,dist[i]);             db=Math.min(db,mx);             if(db>2*da)             pw.println(""Bob"");             else             pw.println(""Alice"");         }         pw.flush();         pw.close();     } } ","import java.util.*; import java.io.*; import java.math.*; public class D { static int visited[]; static int distance[]; private static ArrayList<Integer>[] adj;   private static void BFS(int node) { visited[node] = 1; Queue<Integer> q = new LinkedList<Integer>(); q.offer(node); distance[node] = 0; while(!q.isEmpty()) { int curr = q.poll(); for(int child : adj[curr]) { if(visited[child] == 0) { q.offer(child); distance[child] = distance[curr] + 1; visited[child] = 1; } } } } public static void process() throws IOException { int n = sc.nextInt(),a = sc.nextInt(),b = sc.nextInt(), da = sc.nextInt(),db = sc.nextInt(); adj = new ArrayList[n+1]; distance = new int[n+1]; visited = new int[n+1]; for(int i = 0; i<=n; i++)adj[i] = new ArrayList<Integer>(); for(int i =1; i<n; i++) { int u = sc.nextInt(),v = sc.nextInt(); adj[u].add(v); adj[v].add(u); } BFS(a); if(distance[b] <= da || db-da<=da) { System.out.println(""Alice""); return; } ArrayList<Pair> lis = new ArrayList<D.Pair>(); for(int i = 1; i<=n; i++)lis.add(new Pair(distance[i], i)); Collections.sort(lis); Pair e = lis.get(n-1); distance = new int[n+1]; visited = new int[n+1]; BFS(e.y); int max = 0; for(int i = 1; i<=n; i++)max = Math.max(max,distance[i]); if(max-da<=da) { System.out.println(""Alice""); return; } System.out.println(""Bob""); } static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; t = sc.nextInt(); int TTT = 1; while (t-- > 0) { process(); } out.flush(); out.close(); } static class Pair implements Comparable<Pair> { int x, y; Pair(int x, int y) { this.x = x; this.y = y; } } } ",0
891,"import java.util.*; import java.io.*; public class MyClass {     public static void main(String args[]) {      Scanner sc = new Scanner(System.in);      int t = sc.nextInt();      while(t>0)      {          int n = sc.nextInt();          sc.nextLine();          String [] str = new String[n];          int res = 0;          for(int i=0;i<n;i++)          {              str[i]=sc.nextLine();          }          int [][] freq = new int [n][5];          for(int i=0;i<n;i++)          {              for(int j=0;j<str[i].length();j++)              {                  int k = str[i].charAt(j)-'a';                  freq[i][k]++;              }          }          for(int i=0;i<5;i++)          {              int [] arr = new int[n];              for(int j=0;j<n;j++)              {                  int pos = freq[j][i];                  int sum=0;                  for(int k = 0;k<5;k++)                  {                      sum+=freq[j][k];                  }                  sum-=pos;                  arr[j]=(pos-sum);              }              Arrays.sort(arr);                           int count=0;              int sum=0;              for(int p=n-1;p>=0;p--)              {                  sum+=arr[p];                  if(sum>0)                  {                      count++;                  }                  else                  {                      break;                  }              }              res=Math.max(count , res);          }                    System.out.println(res);          t--;                }     } } ","import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ",1
892,"import java.util.*; import java.io.*; public class MyClass {     public static void main(String args[]) {      Scanner sc = new Scanner(System.in);      int t = sc.nextInt();      while(t>0)      {          int n = sc.nextInt();          sc.nextLine();          String [] str = new String[n];          int res = 0;          for(int i=0;i<n;i++)          {              str[i]=sc.nextLine();          }          int [][] freq = new int [n][5];          for(int i=0;i<n;i++)          {              for(int j=0;j<str[i].length();j++)              {                  int k = str[i].charAt(j)-'a';                  freq[i][k]++;              }          }          for(int i=0;i<5;i++)          {              int [] arr = new int[n];              for(int j=0;j<n;j++)              {                  int pos = freq[j][i];                  int sum=0;                  for(int k = 0;k<5;k++)                  {                      sum+=freq[j][k];                  }                  sum-=pos;                  arr[j]=(pos-sum);              }              Arrays.sort(arr);                           int count=0;              int sum=0;              for(int p=n-1;p>=0;p--)              {                  sum+=arr[p];                  if(sum>0)                  {                      count++;                  }                  else                  {                      break;                  }              }              res=Math.max(count , res);          }                    System.out.println(res);          t--;                }     } } ","import java.io.*; import java.util.*; public class C {     public static void main(String[] args) throws Exception{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));         try{             int t = Integer.parseInt(br.readLine());             while(t-->0){                 int n = Integer.parseInt(br.readLine());                 int lst[][] = new int[n][5];                 for(int i=0; i<n; i++){                     String s = br.readLine();                     for(int j=0; j<s.length(); j++){                         lst[i][s.charAt(j)-'a']++;                     }                 }                 int fans = Integer.MIN_VALUE;                 for(int i=0; i<5; i++){                     int val[] = new int[n];                     for(int k=0; k<n; k++){                         int sum = 0;                         for(int j=0; j<5; j++){                             if(i==j){                                 sum += lst[k][j];                             }else{                                 sum -= lst[k][j];                             }                         }                         val[k] = sum;                     }                     Arrays.sort(val);                     int sum = 0;                     int ans = 0;                     for(int x = n-1; x>=0; x--){                         sum+=val[x];                         if(sum>0){                             ans++;                         }else{                             break;                         }                     }                     fans = Math.max(fans, ans);                 }                 bw.write(fans+""\n"");             }             bw.flush();         }catch(Exception e){             return;         }     }      } ",1
893,"import java.util.*; import java.io.*; public class MyClass {     public static void main(String args[]) {      Scanner sc = new Scanner(System.in);      int t = sc.nextInt();      while(t>0)      {          int n = sc.nextInt();          sc.nextLine();          String [] str = new String[n];          int res = 0;          for(int i=0;i<n;i++)          {              str[i]=sc.nextLine();          }          int [][] freq = new int [n][5];          for(int i=0;i<n;i++)          {              for(int j=0;j<str[i].length();j++)              {                  int k = str[i].charAt(j)-'a';                  freq[i][k]++;              }          }          for(int i=0;i<5;i++)          {              int [] arr = new int[n];              for(int j=0;j<n;j++)              {                  int pos = freq[j][i];                  int sum=0;                  for(int k = 0;k<5;k++)                  {                      sum+=freq[j][k];                  }                  sum-=pos;                  arr[j]=(pos-sum);              }              Arrays.sort(arr);                           int count=0;              int sum=0;              for(int p=n-1;p>=0;p--)              {                  sum+=arr[p];                  if(sum>0)                  {                      count++;                  }                  else                  {                      break;                  }              }              res=Math.max(count , res);          }                    System.out.println(res);          t--;                }     } } ","import java.util.*; import java.io.*;  public class Solution { static FastScanner scr=new FastScanner(); static PrintStream out=new PrintStream(System.out); static StringBuilder sb=new StringBuilder(); static HashMap<Character,ArrayList<Integer>>hm=new HashMap<>(); static void solve() { int n=scr.nextInt(); int count[]=new int[5]; int store[][]=new int[n][5]; int max=MIN; int length[]=new int[n]; for(int i=0;i<n;i++) { String s=scr.next(); length[i]=s.length(); for(int j=0;j<s.length();j++) { store[i][s.charAt(j)-'a']++; count[s.charAt(j)-'a']++; } } for(int j=0;j<5;j++) { ArrayList<Integer>a=new ArrayList<>(); for(int i=0;i<n;i++) { a.add((store[i][j]*2)-length[i]); } Collections.sort(a,Collections.reverseOrder()); long sum=0; int ans=0; for(int i=0;i<a.size();i++) { sum+=a.get(i); if(sum>0) { ans++; }else { break; } } max=Math.max(max, ans); } out.println(max); } static int  MAX = Integer.MAX_VALUE; static int  MIN = Integer.MIN_VALUE; public static void main(String []args) { int t=scr.nextInt(); while(t-->0) { solve(); } } } ",0
894,"import java.util.*; import java.io.*; public class MyClass {     public static void main(String args[]) {      Scanner sc = new Scanner(System.in);      int t = sc.nextInt();      while(t>0)      {          int n = sc.nextInt();          sc.nextLine();          String [] str = new String[n];          int res = 0;          for(int i=0;i<n;i++)          {              str[i]=sc.nextLine();          }          int [][] freq = new int [n][5];          for(int i=0;i<n;i++)          {              for(int j=0;j<str[i].length();j++)              {                  int k = str[i].charAt(j)-'a';                  freq[i][k]++;              }          }          for(int i=0;i<5;i++)          {              int [] arr = new int[n];              for(int j=0;j<n;j++)              {                  int pos = freq[j][i];                  int sum=0;                  for(int k = 0;k<5;k++)                  {                      sum+=freq[j][k];                  }                  sum-=pos;                  arr[j]=(pos-sum);              }              Arrays.sort(arr);                           int count=0;              int sum=0;              for(int p=n-1;p>=0;p--)              {                  sum+=arr[p];                  if(sum>0)                  {                      count++;                  }                  else                  {                      break;                  }              }              res=Math.max(count , res);          }                    System.out.println(res);          t--;                }     } } ","import java.util.*; import javax.sql.rowset.serial.SerialArray; import javax.swing.text.html.HTMLDocument.HTMLReader.PreAction; import java.io.*; import java.math.*; import java.sql.Array;; public class Main { static long mod = (long) (1e9 + 7); static int parent[]; static int rank[]; static FR sc = new FR(); static StringBuilder sb = new StringBuilder(); public static void main(String args[]) throws IOException { int tc = sc.nextInt(); while (tc-- > 0) { TEST_CASE(); } sb.setLength(sb.length() - 1); System.out.println(sb); } static void TEST_CASE() throws IOException { int n = sc.nextInt(); String[] strs = new String[n]; for(int i = 0; i < n; i++) { strs[i] = sc.next(); } int max = -1; for(int i = 0; i < 5; i++) { ArrayList<Integer> arr = new ArrayList<>(); for(int j = 0; j < n; j++) { String s = strs[j]; char letter = (char)(97+i); int val = 0; for(int k = 0; k < s.length(); k++) { if(s.charAt(k) == letter) val++; else val--; } arr.add(val); } Collections.sort(arr, Collections.reverseOrder()); int val = 0; int ans = 0; for(int x : arr) { val += x; if(val <= 0) break; else ans++; } max = Math.max(ans, max); } sb.append(max + ""\n""); } } ",0
895,"import java.util.*; import java.io.*; public class PhoenixAndTowers {     public static void main(String [] args) throws IOException{         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));         int t = Integer.parseInt(in.readLine());         for (int test = 0; test < t; test++){             String [] data = in.readLine().split("" "");             int n = Integer.parseInt(data[0]);             int m = Integer.parseInt(data[1]);             int x = Integer.parseInt(data[2]);             data = in.readLine().split("" "");             intPair [] blocks = new intPair[n];             for (int i = 0; i < n; i++){                 blocks[i] = new intPair(i, Integer.parseInt(data[i]));             }             Arrays.sort(blocks);             TreeSet<intPair> towers = new TreeSet<>();                          for (int i = 0; i < m; i++){                                  towers.add(new intPair(i+1, 0));             }             int [] newIdx = new int[n];             for (int i = n - 1; i >= 0; i--){                                  intPair low = towers.pollFirst();                                  low.value += blocks[i].value;                 newIdx[blocks[i].idx] = low.idx;                 towers.add(low);             }             int min = n*x;             int max = 0;             for (intPair tower : towers){                 if (tower.value < min){                     min = tower.value;                 }                 if (tower.value > max){                     max = tower.value;                 }             }             if (max - min <= x){                 out.write(""YES\n"");                 for (int i = 0; i < n; i++){                     if (i != 0){                         out.write("" "" + newIdx[i]);                     }else {                         out.write("""" + newIdx[i]);                     }                 }                 out.write(""\n"");             } else {                 out.write(""NO\n"");             }         }         out.close();     }      static class intPair implements Comparable<intPair>{         int idx;         int value;         intPair(int idx, int value){             this.idx = idx;             this.value = value;         }              } } ","import java.io.*; import java.util.*;   public class Codeforces { public static class Tower implements Comparable<Tower>{ int val; int index; public Tower(int ind, int v) { val = v; index = ind; } } public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int cases = Integer.parseInt(br.readLine()); while(cases-- > 0) { String[] str = br.readLine().split("" ""); int n = Integer.parseInt(str[0]); int m = Integer.parseInt(str[1]); int x = Integer.parseInt(str[2]); int[] h = new int[n]; str = br.readLine().split("" ""); for(int i=0; i<n; i++) { h[i] = Integer.parseInt(str[i]); } PriorityQueue<Tower> q = new PriorityQueue<>(m); int[] ans = new int[n]; for(int i=0; i<m; i++) { q.add(new Tower(i, h[i])); ans[i] = i; } for(int i=m; i<n; i++) { Tower lowest = q.poll(); lowest.val += h[i]; ans[i] = lowest.index; q.add(lowest); } System.out.println(""YES""); for(int i=0; i<n; i++) { System.out.print((ans[i]+1) + "" ""); } System.out.println(); } } } ",0
896,"import java.util.*; import java.io.*; public class Solution {                                                                                static int dp[][];     public static void main(String []args) throws IOException     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-- > 0)         {             int n = sc.nextInt();             sc.nextLine();             String a = sc.nextLine();             String b = sc.nextLine();             int same = 0 , zo = 0 , oz = 0 , oo = 0 , zz = 0;             for(int i = 0 ; i < n ; i++)             {                 if(a.charAt(i) == '0' && b.charAt(i) == '1')                 oz++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '0')                 zo++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '1')                 oo++;                                  else                 zz++;             }                          if(oz == zo || (zz == oo-1))             {                 int mx = Integer.MAX_VALUE;                 if(oz == zo)                 mx = Math.min(mx,2*oz);                                  if(oo-1 == zz)                 mx = Math.min(mx,zz+oo);                                  System.out.println(mx);             }                          else             {                 System.out.println(-1);             }         }     } } ","import java.io.*; import java.util.*;   public class _1615c {     FastScanner scn;     PrintWriter w;     PrintStream fs;     long MOD = 1000000007;     int MAX = 200005;                         boolean LOCAL;                    void solve(){                  int t=scn.nextInt();             while(t-->0)             {                 int n=scn.nextInt();                 String s1= scn.next();                 String s2 = scn.next();                 int op1=0,op0=0,one=0,zr=0;                 for(int i=0;i<n;i++){                     char ch1 = s1.charAt(i);                     char ch2 = s2.charAt(i);                                          if(ch1=='1'&&ch2=='0'){                         op1++;                     }else if(ch1=='0'&&ch2=='1'){                         op0++;                     }else if(ch1==ch2){                         if(ch1=='0'){                             zr++;                         }else{                             one++;                         }                     }                 }                                  if((one-zr)==1&&op1==op0){                     w.println(Math.min(2*op1,one+zr));                 }else if((one-zr)==1){                     w.println(one+zr);                 }else if(op1==op0){                     w.println(2*op1);                 }else{                     w.println(-1);                 }                                       }              }       void run() {         try {             long ct = System.currentTimeMillis();             scn = new FastScanner(new File(""input.txt""));             w = new PrintWriter(new File(""output.txt""));             fs=new PrintStream(""error.txt"");             System.setErr(fs);             LOCAL=true;               solve();               w.close();             System.err.println(System.currentTimeMillis() - ct);         } catch (FileNotFoundException e) {             e.printStackTrace();         }     }       void runIO() {           scn = new FastScanner(System.in);         w = new PrintWriter(System.out);         LOCAL=false;           solve();           w.close();     }                                                    public static void main(String[] args) {         new _1615c().runIO();     } } ",0
897,"import java.util.*; import java.io.*; public class Solution {                                                                                static int dp[][];     public static void main(String []args) throws IOException     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-- > 0)         {             int n = sc.nextInt();             sc.nextLine();             String a = sc.nextLine();             String b = sc.nextLine();             int same = 0 , zo = 0 , oz = 0 , oo = 0 , zz = 0;             for(int i = 0 ; i < n ; i++)             {                 if(a.charAt(i) == '0' && b.charAt(i) == '1')                 oz++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '0')                 zo++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '1')                 oo++;                                  else                 zz++;             }                          if(oz == zo || (zz == oo-1))             {                 int mx = Integer.MAX_VALUE;                 if(oz == zo)                 mx = Math.min(mx,2*oz);                                  if(oo-1 == zz)                 mx = Math.min(mx,zz+oo);                                  System.out.println(mx);             }                          else             {                 System.out.println(-1);             }         }     } } ","import java.util.*; import java.io.*; public class C1615{ static FastScanner fs = null; public static void main(String[] args) { fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); while (t-->0) { int n = fs.nextInt(); String a = fs.next(); String b = fs.next(); char ch1[] = a.toCharArray(); char ch2[] = b.toCharArray(); int c00 = 0; int c01 = 0; int c10 = 0; int c11 = 0; for(int i=0;i<n;i++){ if(ch1[i]=='0'){ if(ch2[i]=='0'){ c00+=1; } else{ c01+=1; } } else{ if(ch2[i]=='0'){ c10+=1; } else{ c11+=1; } } } int ans = -1; if((c11-c00)==1 || c10==c01){ int s1 = (int)1e7;  int s2 = (int)1e7; if((c11-c00)==1){ s1 = c11+c00; } if(c10==c01) s2 = c10+c01; ans = Math.min(s1,s2);  } out.println(ans); } out.close(); } } ",0
898,"import java.util.*; import java.io.*; public class Solution {                                                                                static int dp[][];     public static void main(String []args) throws IOException     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-- > 0)         {             int n = sc.nextInt();             sc.nextLine();             String a = sc.nextLine();             String b = sc.nextLine();             int same = 0 , zo = 0 , oz = 0 , oo = 0 , zz = 0;             for(int i = 0 ; i < n ; i++)             {                 if(a.charAt(i) == '0' && b.charAt(i) == '1')                 oz++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '0')                 zo++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '1')                 oo++;                                  else                 zz++;             }                          if(oz == zo || (zz == oo-1))             {                 int mx = Integer.MAX_VALUE;                 if(oz == zo)                 mx = Math.min(mx,2*oz);                                  if(oo-1 == zz)                 mx = Math.min(mx,zz+oo);                                  System.out.println(mx);             }                          else             {                 System.out.println(-1);             }         }     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         int sm, n;         while(t > 0) {             t--;             n = sc.nextInt();             String s1,s2;             s1 = sc.next();             s2 = sc.next();             int a[] = new int[4];             a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0;             for(int i = 0 ; i < n ; i++) {                 if(s1.charAt(i) == '0'&& s2.charAt(i) == '1') a[0]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '0') a[1]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '1') a[2]++;                 else a[3]++;             }                          int n1 = Integer.MAX_VALUE, n2 = Integer.MAX_VALUE, n3 = Integer.MAX_VALUE;                          if (a[0] == a[1]) {                 n1 = 2*a[0];             }             if((a[2] - 1) == a[3]) {                                  n2 = 2*a[3] + 1;             }              if((a[3] + 1) == a[2]) {                                  n3 = 2*a[2] + 1;             }              int ans = Math.min(n1, Math.min(n2,n3));             if(ans == Integer.MAX_VALUE) {                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         } } } ",0
899,"import java.util.*; import java.io.*; public class Solution {                                                                                static int dp[][];     public static void main(String []args) throws IOException     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-- > 0)         {             int n = sc.nextInt();             sc.nextLine();             String a = sc.nextLine();             String b = sc.nextLine();             int same = 0 , zo = 0 , oz = 0 , oo = 0 , zz = 0;             for(int i = 0 ; i < n ; i++)             {                 if(a.charAt(i) == '0' && b.charAt(i) == '1')                 oz++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '0')                 zo++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '1')                 oo++;                                  else                 zz++;             }                          if(oz == zo || (zz == oo-1))             {                 int mx = Integer.MAX_VALUE;                 if(oz == zo)                 mx = Math.min(mx,2*oz);                                  if(oo-1 == zz)                 mx = Math.min(mx,zz+oo);                                  System.out.println(mx);             }                          else             {                 System.out.println(-1);             }         }     } } ","import java.util.Arrays; import java.util.Scanner; public class First {     static Scanner sc = new Scanner(System.in);     public static void main(String[] args) {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             String a = sc.next();             String b = sc.next();             char ch1[] = a.toCharArray();             char ch2[] = b.toCharArray();             int zz = 0;             int oz = 0;             int zo = 0;             int oo = 0;             for (int i = 0; i < n; i++) {                 if (ch1[i] == '0') {                     if (ch2[i] == '0') {                         zz += 1;                     } else {                         oz += 1;                     }                 } else {                     if (ch2[i] == '0') {                         zo += 1;                     } else {                         oo += 1;                     }                 }             }             int ans = -1;             if ((oo - zz) == 1 || zo == oz) {                 int s1 = (int) 1e7;                 int s2 = (int) 1e7;                 if ((oo - zz) == 1) {                     s1 = oo + zz;                 }                 if (zo == oz)                     s2 = zo + oz;                 ans = Math.min(s1, s2);             }             System.out.println(ans);         }     } } ",0
900,"import java.util.*; import java.io.*; public class Solution {                                                                                static int dp[][];     public static void main(String []args) throws IOException     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-- > 0)         {             int n = sc.nextInt();             sc.nextLine();             String a = sc.nextLine();             String b = sc.nextLine();             int same = 0 , zo = 0 , oz = 0 , oo = 0 , zz = 0;             for(int i = 0 ; i < n ; i++)             {                 if(a.charAt(i) == '0' && b.charAt(i) == '1')                 oz++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '0')                 zo++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '1')                 oo++;                                  else                 zz++;             }                          if(oz == zo || (zz == oo-1))             {                 int mx = Integer.MAX_VALUE;                 if(oz == zo)                 mx = Math.min(mx,2*oz);                                  if(oo-1 == zz)                 mx = Math.min(mx,zz+oo);                                  System.out.println(mx);             }                          else             {                 System.out.println(-1);             }         }     } } ","import java.util.Scanner; public class Menorah {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         k:         while (t-- > 0) {             int n = scan.nextInt();             String a = scan.next();             String b = scan.next();             int zo = 0;             int oz = 0;             int ind = -1;             for (int i = 0; i < n; i++) {                 if (a.charAt(i) == '0' && b.charAt(i) == '1') {                     ++zo;                 } else if (a.charAt(i) == '1' && b.charAt(i) == '0') {                     ++oz;                 } else if (a.charAt(i) == '1' && b.charAt(i) == '1') {                     ind = i;                 }             }             int res = 1000000000;             int res2 = 1000000000;             if (zo == oz) {                 res = zo + oz;             }             if (ind != -1) {                 char[] s = a.toCharArray();                 for (int i = 0; i < n; i++) {                     if (i == ind) {                         continue;                     }                     if (s[i] == '0') {                         s[i] = '1';                     } else {                         s[i] = '0';                     }                 }                 zo = 0;                 oz = 0;                 for (int i = 0; i < n; i++) {                     if (s[i] == '0' && b.charAt(i) == '1') {                         ++zo;                     } else if (s[i] == '1' && b.charAt(i) == '0') {                         ++oz;                     }                 }                 if (zo == oz) {                     res2 = zo + oz + 1;                 }             }             if (res == 1000000000 && res2 == 1000000000) {                 System.out.println(""-1"");             } else {                 System.out.println(Math.min(res, res2));             }         }     } } ",0
901,"import java.util.*; import java.io.*; public class Solution {                                                                                static int dp[][];     public static void main(String []args) throws IOException     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-- > 0)         {             int n = sc.nextInt();             sc.nextLine();             String a = sc.nextLine();             String b = sc.nextLine();             int same = 0 , zo = 0 , oz = 0 , oo = 0 , zz = 0;             for(int i = 0 ; i < n ; i++)             {                 if(a.charAt(i) == '0' && b.charAt(i) == '1')                 oz++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '0')                 zo++;                                  else if(a.charAt(i) == '1' && b.charAt(i) == '1')                 oo++;                                  else                 zz++;             }                          if(oz == zo || (zz == oo-1))             {                 int mx = Integer.MAX_VALUE;                 if(oz == zo)                 mx = Math.min(mx,2*oz);                                  if(oo-1 == zz)                 mx = Math.min(mx,zz+oo);                                  System.out.println(mx);             }                          else             {                 System.out.println(-1);             }         }     } } ","import javax.swing.plaf.IconUIResource; import java.lang.reflect.Array; import java.text.CollationElementIterator; import java.util.*; import java.io.*;       public class Main {                           public static int mod = (int) (1e9 + 7);     static int ans = Integer.MAX_VALUE;       public static void main(String hi[]) throws Exception {         FastReader sc = new FastReader();         int t =sc.nextInt();         while(t-->0)         {             int n =sc.nextInt();             String a = sc.nextLine(),b=sc.nextLine();               int count1=0,count2=0,count3=0,count4=0;               for(int i=0;i<n;i++)             {                 if(a.charAt(i)=='0'&&b.charAt(i)=='0')                     count1++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='1')                     count2++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='0')                     count3++;                 else  if(a.charAt(i)=='0'&&b.charAt(i)=='1')                     count4++;             }             int ans=Integer.MAX_VALUE;               if(count3==count4)                 ans=Math.min(count3*2,ans);               if(count2==count1+1)                 ans=Math.min(ans,2*count1+1);                           if(ans==Integer.MAX_VALUE)                 System.out.println(-1);             else System.out.println(ans);           }       }                                                                 } ",0
902,"import java.util.*; import java.io.*; public class Solution {                              static int mod = (int)1e9+7;     static int INF = Integer.MAX_VALUE;     static PrintWriter out;     static FastReader sc ;     public static void main(String[] args) throws IOException {         sc = new FastReader();         out = new PrintWriter(System.out);                           int test = sc.nextInt();         while (test-- > 0) {             int n = sc.nextInt();             String s = sc.nextLine();             String t = sc.nextLine();             solver(s,t, n);         }                                             out.flush();     }     public static void solver(String s, String t, int n) {         int diff = 0;         int one = 0;         int zero = 0;         for(int i=0;i<n;i++){             if(s.charAt(i)!=t.charAt(i)){                 diff++;                 if(s.charAt(i)=='1')one++;             }             else{                 if(s.charAt(i)=='1')zero++;             }         }         if(diff==0){             out.println(0);             return;         }         int res = INF;         if(diff%2==0 && one==(diff-one)){             res = diff;         }         if(n-diff-1>=0 && (n-diff-1)%2==0 && zero>0 && (n-diff-zero)==zero-1){             res = Math.min(res, (n-diff-1)+1);         }         out.println(res==INF?-1:res);     } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=input.nextInt();         while(T-->0)         {             int n=input.nextInt();             String a=input.next();             String b=input.next();             int same1=0,same0=0,opp1=0,opp0=0;             for(int i=0;i<n;i++)             {                 if(a.charAt(i)==b.charAt(i))                 {                     if(a.charAt(i)=='1') same1++;                     else same0++;                 }                 else                 {                     if(a.charAt(i)=='1') opp1++;                     else opp0++;                 }             }             if(same0+same1==n)             {                 out.println(0);             }             else             {                 int x=same1+opp1;                 int y=same1+opp0;                 int z=same0+opp0;                 if(x==y || (z+1)==y)                 {                     int min=Integer.MAX_VALUE;                     if((same0+same1)%2!=0 && same0==(same0+same1)/2)                     {                         min=Math.min(min,same0+same1);                     }                     if((opp0+opp1)%2==0 && opp0==(opp0+opp1)/2)                     {                         min=Math.min(min,opp0+opp1);                     }                     out.println(min);                 }                 else                 {                     out.println(-1);                 }             }         }         out.close();     }      } ",0
903,"import java.util.*; import java.io.*; public class Solution {                              static int mod = (int)1e9+7;     static int INF = Integer.MAX_VALUE;     static PrintWriter out;     static FastReader sc ;     public static void main(String[] args) throws IOException {         sc = new FastReader();         out = new PrintWriter(System.out);                           int test = sc.nextInt();         while (test-- > 0) {             int n = sc.nextInt();             String s = sc.nextLine();             String t = sc.nextLine();             solver(s,t, n);         }                                             out.flush();     }     public static void solver(String s, String t, int n) {         int diff = 0;         int one = 0;         int zero = 0;         for(int i=0;i<n;i++){             if(s.charAt(i)!=t.charAt(i)){                 diff++;                 if(s.charAt(i)=='1')one++;             }             else{                 if(s.charAt(i)=='1')zero++;             }         }         if(diff==0){             out.println(0);             return;         }         int res = INF;         if(diff%2==0 && one==(diff-one)){             res = diff;         }         if(n-diff-1>=0 && (n-diff-1)%2==0 && zero>0 && (n-diff-zero)==zero-1){             res = Math.min(res, (n-diff-1)+1);         }         out.println(res==INF?-1:res);     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class CF1 {     public static void main(String[] args) {         FastScanner sc=new FastScanner();         int T=sc.nextInt();         for (int tt=0; tt<T; tt++){            int n =sc.nextInt();            String a = sc.next();            String b= sc.next();            int candles1=0;            int candles2=0;            int inPlace=0;            for (int i=0; i<n; i++){                if (a.charAt(i)=='1'){                    candles1++;                }                if (b.charAt(i)=='1') candles2++;                if (b.charAt(i)=='1' && a.charAt(i)=='1') inPlace++;            }            if (candles1==candles2 || n+1-candles2==candles1){              int ans=Math.min(help(candles1-inPlace, inPlace,n+1,candles2,0,0), help(candles1-inPlace, inPlace,n+1,candles2,0,1));              if (ans==Integer.MAX_VALUE) System.out.println(-1);              else System.out.println(ans);            }            else System.out.println(-1);         }     }     static int help(int i, int j, int max, int cands, int moves, int flip){         if (j==cands && i==0) return moves;         else if (j==0 && flip==0 || flip==1 && i==0 ) return Integer.MAX_VALUE;             if (flip==0){                 int x=0;                 int y=cands-j+1;                 if (i+j==max-cands){                     x=cands-y;                 }                 else x=max-cands-y;                 return help(x,y,max,cands,moves+1,1);             }             else {                 int x=0;                 int y=cands-j;                 if (i+j==max-cands){                     x=cands-y;                 }                 else x=max-cands-y;                 return help(x,y,max,cands,moves+1,0);             }              }     static long mod =998244353L;                                    } ",0
904,"import java.util.*; import java.io.*; public class Solution {               static final long mod=998244353L;                                                  public static void main(String args[])throws Exception     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);         int tc=fs.nextInt();         while(tc-->0)         {             int n=fs.nextInt();             char[][] c=new char[n][];             for(int i=0;i<n;i++)             c[i]=fs.nextLine().toCharArray();             ArrayList<Integer> list[]=new ArrayList[5];             for(int i=0;i<5;i++)             list[i]=new ArrayList<>();             for(int i=0;i<n;i++)             {                 int cnt[]=new int[5];                 for(int j=0;j<c[i].length;j++)                 cnt[c[i][j]-'a']++;                 for(int j=0;j<5;j++)                 list[j].add(2*cnt[j]-c[i].length);             }             for(int i=0;i<5;i++)             Collections.sort(list[i]);             int ans=0;             for(int i=0;i<5;i++)             {                 int s=0;                 for(int j=n-1;j>=0;j--)                 {                     ans=Math.max(ans,n-1-j);                     s+=list[i].get(j);                     if(s<=0)                     break;                 }                 if(s>0)                 ans=n;             }             pw.println(ans);         }         pw.flush();         pw.close();     } } ","import  java.math.*; import java.util.*; import java.lang.*; import java.io.*; public final class Main {     FastReader s;     public static void main (String[] args) throws java.lang.Exception     {         new Main().run();     }     void run()     {         s = new FastReader();         solve();     }    StringBuffer sb;         void solve()     {          sb = new StringBuffer();         for(int T = s.nextInt();T > 0;T--)         {             start();         }             }     void start()     {         int n = s.nextInt();          int mat[][] = new int[n][5];         for(int i = 0; i<n; i++)         {             char [] x = s.nextLine().toCharArray();             for(char c : x)             {                 mat[i][c-'a']++;             }             int p[] = new int[5];             int to = 0;             for(int j : mat[i])                 to+=j;             for(int j = 0; j<5; j++)             {                 mat[i][j]=2*mat[i][j]-to;             }         }         int ans  = 0;         for(int i = 0; i<5; i++)         {             int g = check(i,mat, n);             ans = Math.max(g,ans);         }         System.out.println(ans);     }     int check(int i, int mat[][], int n)     {         ArrayList<Integer> x = new ArrayList<>();         for(int j = 0; j<n; j++)         {             x.add(mat[j][i]);         }         Collections.sort(x);         int s = 0;         int cnt = 0;         int l = n-1;         while(l>=0)         {             int u = x.get(l);             if(s+u>0)             {                 s+=u;                 cnt++;             }             else                 break;             l--;         }         return cnt;     }                         static void sort(int[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             int tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);     }     static void sort(long[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             long tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);     }     static String sort(String s) {         Character ch[]=new Character[s.length()];         for(int i=0;i<s.length();i++) {             ch[i]=s.charAt(i);         }         Arrays.sort(ch);         StringBuffer st=new StringBuffer("""");         for(int i=0;i<s.length();i++) {             st.append(ch[i]);         }         return st.toString();     }                          } ",0
905,"import java.util.*; import java.io.*; public class Solution {               static final long mod=998244353L;                                                  public static void main(String args[])throws Exception     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);         int tc=fs.nextInt();         while(tc-->0)         {             int n=fs.nextInt();             char[][] c=new char[n][];             for(int i=0;i<n;i++)             c[i]=fs.nextLine().toCharArray();             ArrayList<Integer> list[]=new ArrayList[5];             for(int i=0;i<5;i++)             list[i]=new ArrayList<>();             for(int i=0;i<n;i++)             {                 int cnt[]=new int[5];                 for(int j=0;j<c[i].length;j++)                 cnt[c[i][j]-'a']++;                 for(int j=0;j<5;j++)                 list[j].add(2*cnt[j]-c[i].length);             }             for(int i=0;i<5;i++)             Collections.sort(list[i]);             int ans=0;             for(int i=0;i<5;i++)             {                 int s=0;                 for(int j=n-1;j>=0;j--)                 {                     ans=Math.max(ans,n-1-j);                     s+=list[i].get(j);                     if(s<=0)                     break;                 }                 if(s>0)                 ans=n;             }             pw.println(ans);         }         pw.flush();         pw.close();     } } ","import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.*; import static java.lang.Math.*; import static java.lang.System.out; import static java.lang.Long.MAX_VALUE; public final class Main {     FastReader in;     StringBuffer sb;     public static void main(String[] args) {         new Main().run();     }     void run(){         in= new FastReader();         start();     }     void start(){         sb= new StringBuffer();         for(int t=in.nextInt();t>0;t--)             solve();         out.print(sb);     }     void solve(){         int n = in.nextInt();         int[][] mat = new int[n][5];         for(int i = 0; i<n; i++) {             char[] pp =in.nextLine().toCharArray();             for(char c : pp) {                 mat[i][c-'a']++;             }             int[] p = new int[5];             int tt = 0;             for(int j : mat[i])                 tt +=j;             for(int j = 0; j<5; j++) {                 mat[i][j]=2*mat[i][j]-tt;             }         }         int ans  = 0;         for(int i = 0; i<5; i++) {             int g = check(i,mat, n);             ans = Math.max(g,ans);         }         sb.append(ans).append(""\n"");     }     int check(int i, int[][] mat, int n) {         ArrayList<Integer> x = new ArrayList<>();         for(int j = 0; j<n; j++) {             x.add(mat[j][i]);         }         Collections.sort(x);         int s = 0;         int cnt = 0;         int l = n-1;         while(l>=0) {             int u = x.get(l);             if(s+u>0) {                 s+=u;                 cnt++;             }             else                 break;             l--;         }         return cnt;     }               void sort(long[] A){         int n = A.length;         Random rnd = new Random();         for(int i=0; i<n; ++i){             long tmp = A[i];             int randomPos = i + rnd.nextInt(n-i);             A[i] = A[randomPos];             A[randomPos] = tmp;         }         Arrays.sort(A);     }          long MAX= MAX_VALUE;     int[] precomp= new int[(int) (MAX+1)];                                              } ",0
906,"import java.util.*; import java.io.*; public class Solution {               static void dfs(int n , LinkedList<Integer> g[] , int arr[][] , int p , long dp[][])     {         for(Integer i : g[n])         {             if(i != p)             {                 dfs(i,g,arr,n,dp);             dp[n][0] += Math.max(dp[i][0]+Math.abs(arr[n][0]-arr[i][0]) ,                         dp[i][1]+Math.abs(arr[n][0]-arr[i][1]));                                                       dp[n][1] += Math.max(dp[i][0]+Math.abs(arr[n][1]-arr[i][0]) ,                         dp[i][1]+Math.abs(arr[n][1]-arr[i][1]));             }                         }     }     public static void main(String []args) throws IOException     {         Reader sc = new Reader();         StringBuffer str = new StringBuffer("""");         int t  = sc.nextInt();         while(t-- > 0)         {             int n = sc.nextInt();             int arr[][] = new int[n][2];             for(int i = 0 ; i < n;  i++)             {                 arr[i][0] = sc.nextInt();                 arr[i][1] = sc.nextInt();             }             LinkedList<Integer> g[] = new LinkedList[n];             for(int i = 0 ; i < n ; i++)             {                 g[i] = new LinkedList<Integer>();             }             for(int i = 0 ; i < n-1 ; i++)             {                 int x = sc.nextInt()-1;                 int y = sc.nextInt()-1;                 g[x].add(y);                 g[y].add(x);             }             long dp[][] = new long[n][2];             dfs(0,g,arr,-1 , dp);             str.append(Math.max(dp[0][0] , dp[0][1]));             str.append(System.lineSeparator());         }         System.out.println(str);     } } ","import java.util.*; import java.io.*; public class Main {     static long[][]dp;     static ArrayList<Integer>[]adj;     static int[][]arr;          public static void main(String[] args) {         FastScanner sc=new FastScanner();         int t=sc.nextInt();         while(t-->0){             int n=sc.nextInt();             arr=new int[n][2];             adj=new ArrayList[n];             for(int i=0;i<n;i++){                 arr[i][0]=sc.nextInt();                 arr[i][1]=sc.nextInt();                 adj[i]=new ArrayList<>();             }             for(int i=0;i<n-1;i++){                 int a=sc.nextInt()-1;                 int b=sc.nextInt()-1;                    adj[a].add(b);                 adj[b].add(a);             }             dp=new long[n][2];             dfs(0,-1);             System.out.println(Math.max(dp[0][0],dp[0][1]));         }     }     public static void dfs(int v,int parent){         for(int u:adj[v]){             if(u!=parent){                 dfs(u,v);             }         }         long ans1=0;         long ans2=0;         for(int u:adj[v]){             if(u!=parent){                 long a=Math.abs(arr[v][0]-arr[u][0])+dp[u][0];                 long b=Math.abs(arr[v][0]-arr[u][1])+dp[u][1];                 long a1=Math.abs(arr[v][1]-arr[u][0])+dp[u][0];                 long b1=Math.abs(arr[v][1]-arr[u][1])+dp[u][1];                 ans1+=Math.max(a,b);                 ans2+=Math.max(a1,b1);             }         }         dp[v][0]=ans1;         dp[v][1]=ans2;     } } ",0
907,"import java.util.*; import java.io.*; public class Solution {          private static boolean[] isPrime;                    static ArrayList<Integer>[] adj;     static void getAdj(int n,int q, FastReader sc){         adj = new ArrayList[n+1];         for(int i=1;i<=n;i++){             adj[i] = new ArrayList<>();         }         for(int i=0;i<q;i++){             int a = sc.nextInt();             int b = sc.nextInt();             adj[a].add(b);             adj[b].add(a);         }     }     static PrintWriter out;     public static void main(String[] args) throws IOException {         FastReader sc = new FastReader();         out = new PrintWriter(System.out);                           int t = sc.nextInt();         StringBuilder output = new StringBuilder();         while (t-- > 0) {             int n = sc.nextInt();             pair = new int[n+1][2];             dp = new long[n+1][2];             for(int i=1;i<=n;i++){                 pair[i][0]=sc.nextInt();                 pair[i][1]=sc.nextInt();             }             getAdj(n, n-1, sc);             output.append(solver(n)).append(""\n"");         }         out.println(output);                                             out.flush();     }     static int[][] pair;     static long[][] dp;     public static long solver(int n) {         dfs(1,  0);         return Math.max(dp[1][0], dp[1][1]);     }     static void dfs(int node, int parent){         for(Integer child: adj[node]){             if(child!=parent){                 dfs(child,  node);                 long left1 = Math.abs(pair[node][0]-pair[child][0]) + dp[child][0];                 long right1 = Math.abs(pair[node][0]-pair[child][1]) + dp[child][1];                 long left2 = Math.abs(pair[node][1]-pair[child][0]) + dp[child][0];                 long right2 = Math.abs(pair[node][1]-pair[child][1]) + dp[child][1];                 dp[node][0] += Math.max(left1, right1);                 dp[node][1] += Math.max(left2, right2);             }         }     } } ","import java.io.*; import java.util.*; public class E {  static long dp[][]; static long val[][]; static ArrayList<Integer> arr[];     public static void main(String[] args)  {  FastReader sc=new FastReader();  StringBuffer ans=new StringBuffer(); int test=sc.nextInt(); while(test-->0) { int n=sc.nextInt(); arr=new ArrayList[n+1]; val=new long[n+1][2]; dp=new long[n+1][2]; for(int i=0;i<=n;i++) Arrays.fill(dp[i], -1); for(int i=1;i<=n;i++) { val[i][0]=sc.nextLong();val[i][1]=sc.nextLong(); } for(int i=0;i<=n;i++) arr[i]=new ArrayList<>(); for(int i=0;i<n-1;i++) { int a=sc.nextInt(),b=sc.nextInt(); arr[a].add(b);arr[b].add(a); } long max1=0,max2=0; for(int ch:arr[1]) { max1+=solve(ch,0,1); max2+=solve(ch,1,1); } ans.append(Math.max(max1, max2)+""\n""); }     System.out.print(ans); }           static long solve(int nd,int prv,int par) {                    if(dp[nd][prv] != -1) return dp[nd][prv];          long l=Math.abs(val[par][prv]-val[nd][0]);long r=Math.abs(val[par][prv]-val[nd][1]);          for(int ch:arr[nd]) {     if(ch != par) {     l+=solve(ch,0,nd);     r+=solve(ch,1,nd);     }     }          return dp[nd][prv] =Math.max(l, r);     }                 static final Random random=new Random();        } ",0
908,"import java.util.*; import java.io.*; public class Solution {          static final long mod=(long)1e9+7;                              public static void main(String args[])throws Exception     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);                  int n=fs.nextInt();         int a[]=new int[n];         for(int i=0;i<n;i++)         a[i]=fs.nextInt();         ArrayList<Integer> o=new ArrayList<>();         ArrayList<Integer> z=new ArrayList<>();         for(int i=0;i<n;i++)         {             if(a[i]==1)o.add(i);             else z.add(i);         }         int ans[][]=new int[o.size()+1][z.size()+1];         for(int i=1;i<=o.size();i++)         {             for(int j=i;j<=z.size();j++)             {                 if(i==j)ans[i][j]=ans[i-1][j-1]+(int)Math.abs(o.get(i-1)-z.get(j-1));                 else                  ans[i][j]=Math.min(ans[i][j-1],ans[i-1][j-1]+(int)Math.abs(o.get(i-1)-z.get(j-1)));             }         }         pw.println(ans[o.size()][z.size()]);         pw.flush();         pw.close();     } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
909,"import java.util.*; import java.io.*; public class Solution {          static final long mod=(long)1e9+7;                              public static void main(String args[])throws Exception     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);                  int n=fs.nextInt();         int a[]=new int[n];         for(int i=0;i<n;i++)         a[i]=fs.nextInt();         ArrayList<Integer> o=new ArrayList<>();         ArrayList<Integer> z=new ArrayList<>();         for(int i=0;i<n;i++)         {             if(a[i]==1)o.add(i);             else z.add(i);         }         int ans[][]=new int[o.size()+1][z.size()+1];         for(int i=1;i<=o.size();i++)         {             for(int j=i;j<=z.size();j++)             {                 if(i==j)ans[i][j]=ans[i-1][j-1]+(int)Math.abs(o.get(i-1)-z.get(j-1));                 else                  ans[i][j]=Math.min(ans[i][j-1],ans[i-1][j-1]+(int)Math.abs(o.get(i-1)-z.get(j-1)));             }         }         pw.println(ans[o.size()][z.size()]);         pw.flush();         pw.close();     } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
910,"import java.util.*; import java.io.*; public class Solution {          static final long mod=(long)1e9+7;                              public static void main(String args[])throws Exception     {         FastReader fs=new FastReader();         PrintWriter pw=new PrintWriter(System.out);                  int n=fs.nextInt();         int a[]=new int[n];         for(int i=0;i<n;i++)         a[i]=fs.nextInt();         ArrayList<Integer> o=new ArrayList<>();         ArrayList<Integer> z=new ArrayList<>();         for(int i=0;i<n;i++)         {             if(a[i]==1)o.add(i);             else z.add(i);         }         int ans[][]=new int[o.size()+1][z.size()+1];         for(int i=1;i<=o.size();i++)         {             for(int j=i;j<=z.size();j++)             {                 if(i==j)ans[i][j]=ans[i-1][j-1]+(int)Math.abs(o.get(i-1)-z.get(j-1));                 else                  ans[i][j]=Math.min(ans[i][j-1],ans[i-1][j-1]+(int)Math.abs(o.get(i-1)-z.get(j-1)));             }         }         pw.println(ans[o.size()][z.size()]);         pw.flush();         pw.close();     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef {  public static void main (String[] args) throws java.lang.Exception { FastReader scan = new FastReader(); PrintWriter pw = new PrintWriter(System.out);         int n = scan.nextInt();         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i=0;i<n;i++){             int x = scan.nextInt();             if(x==1)             a.add(i);             else             b.add(i);           }         int x = a.size();         if(x==0){             pw.println(0);             pw.flush();             return;         }         int y = b.size();         int dp[][] = new int[x][y];         int min = Integer.MAX_VALUE;         for(int i=0;i<y;i++){             min = Math.min(Math.abs(a.get(0) - b.get(i)),min);             dp[0][i] = min;         }         for(int i=1;i<x;i++){             min = Integer.MAX_VALUE;             for(int j=i;j<y;j++){                 min = Math.min(Math.abs(a.get(i)-b.get(j))+dp[i-1][j-1],min);                 dp[i][j] = min;             }         }         pw.println(dp[x-1][y-1]);         pw.flush(); }     } ",0
911,"import java.util.*; import java.io.*; public class Solution {     private static ArrayList<Integer> prime = new ArrayList<>();     public static void main(String[] args) throws IOException {         Scanner in=new Scanner(System.in);         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         StringBuffer out = new StringBuffer();         int T = in.nextInt();         OUTER:         while(T-->0) {             int n=in.nextInt(), k=in.nextInt();             int a[]=new int[k];             for(int i=0; i<k; i++) {                 a[i]=in.nextInt()-1;             }             int t[]=new int[k];             long ans[]=new long[n];             for(int i=0; i<k; i++) {                 t[i]=in.nextInt();                 ans[a[i]]=t[i];             }             long temp=Integer.MAX_VALUE;             long left[]=new long[n];             for(int i=0; i<n; i++) {                 if(ans[i]!=0) {                     temp=Math.min(temp, ans[i]);                 }                 left[i]=temp;                 temp+=1;             }             temp=Integer.MAX_VALUE;             long right[]=new long[n];             for(int i=n-1; i>=0; i--) {                 if(ans[i]!=0) {                     temp=Math.min(temp, ans[i]);                 }                 right[i]=temp;                 temp+=1;             }             for(int i=0; i<n; i++) {                 ans[i]=Math.min(left[i], right[i]);                 out.append(ans[i]+"" "");             }             out.append(""\n"");         }         System.out.print(out);     }                     } ","import java.util.*; import java.io.*; import java.lang.*; public class Main{     public static void main(String args[]){         InputReader in=new InputReader(System.in);         TASK solver = new TASK();         int t=1;         t = in.nextInt();         for(int i=1;i<=t;i++)         {             solver.solve(in,i);         }     }     static class TASK {         static int dp[] = new int[31];         static {             dp[0]=1;             for(int i=1;i<31;i++)             {                 dp[i]=dp[i-1]*2;             }         }         void solve(InputReader in, int testNumber) {             int n = in.nextInt();             int k = in.nextInt();             int a[] = new int[k];             int l[] = new int[n+1];             long pre[] = new long[n+2];             long suff[] = new long[n+2];             Arrays.fill(pre,Long.MAX_VALUE/2);             Arrays.fill(suff,Long.MAX_VALUE/2);             for(int i=0;i<k;i++)             {                 a[i]=in.nextInt();             }             for(int i=0;i<k;i++)             {                 int x = in.nextInt();                 l[a[i]]=x;             }             for(int i=1;i<=n;i++)             {                 pre[i]=pre[i-1];                 if(l[i]!=0)                 {                     pre[i]=Math.min(pre[i],l[i]-i);                 }             }             for(int i=n;i>=1;i--)             {                 suff[i]=suff[i+1];                 if(l[i]!=0)                 {                     suff[i]=Math.min(suff[i],l[i]+i);                 }             }             for(int i=1;i<=n;i++)             {                 System.out.print(Math.min(pre[i]+i,suff[i]-i)+"" "");             }             System.out.println();         }     }                } ",0
912,"import java.util.*; import java.io.*; public class Solution {     public static void main(String str[]) throws IOException{         Reader sc = new Reader();         int t = sc.nextInt();         while(t-->0) {             int n = sc.nextInt();             ArrayList<Tree> tt = new ArrayList<>();             for(int i=0;i<n;i++){                 Tree temp = new Tree(sc.nextInt(), sc.nextInt(), i);                 tt.add(temp);             }             for(int i=0;i<n-1;i++){                 int x = sc.nextInt()-1;                 int y = sc.nextInt()-1;                 tt.get(x).al.add(tt.get(y));                 tt.get(y).al.add(tt.get(x));             }             Pair p = traversal(tt.get(0), null);             System.out.println(Math.max(p.av, p.bv));         }     }     static Pair traversal(Tree node, Tree Parent){         if(node.al.size()==1 && Parent!=null){             Pair p = new Pair(0,0);             return p;         }         long lt = 0;         long rt = 0;         for(Tree t: node.al){             if(t!=Parent){                 Pair p = traversal(t, node);                 long ll = Math.abs(node.l- t.l) + p.av;                 ll = Math.max(ll, Math.abs(node.l-t.r)+p.bv);                 long rr = Math.abs(node.r- t.l) + p.av;                 rr = Math.max(rr, Math.abs(node.r-t.r)+p.bv);                 lt+=ll;                 rt+=rr;             }         }         Pair p = new Pair(lt, rt);         return p;     }      } class Pair{     long av;     long bv;     Pair(long av, long bv){         this.av = av;         this.bv = bv;     } } class Tree{     int l;     int r;     int i;     ArrayList<Tree> al = new ArrayList<>();     Tree(int l, int r, int i){         this.l = l;         this.r = r;         this.i = i;     } } ","import java.io.BufferedReader; import java.util.StringTokenizer; import java.io.InputStreamReader; import java.io.IOException; import java.io.PrintWriter; import java.util.ArrayList; public class C {     static int[][] lr = new int[2][(int)2e5+10];     static long[][] dp = new long[2][(int)2e5+10];     static ArrayList<ArrayList<Integer>> g;     public static void main(String[] args) {                  FastReader fr = new FastReader();         PrintWriter out = new PrintWriter(System.out, true);         int cases = fr.nextInt();         for(int c = 0; c < cases; c++) {             int nodes = fr.nextInt();             g = new ArrayList<ArrayList<Integer>>();                          for(int i = 1; i <= nodes; i++) {                 lr[0][i] = fr.nextInt();                 lr[1][i] = fr.nextInt();             }             for(int i = 0; i <= nodes; i++) {                 g.add(new ArrayList<Integer>());             }             for(int i = 0; i < nodes-1; i++) {                 int f = fr.nextInt();                 int t = fr.nextInt();                 g.get(f).add(t);                 g.get(t).add(f);             }             DFS(1, -1);             out.write(Math.max(dp[0][1], dp[1][1]) + ""\n"");         }         out.close();     }     static void DFS(int v, int p) {         dp[0][v] = dp[1][v] = 0;         for(Integer u : g.get(v)) {             if (u == p) continue;             DFS(u, v);             dp[0][v] += Math.max(Math.abs(lr[0][v] - lr[1][u]) + dp[1][u], dp[0][u] + Math.abs(lr[0][v] - lr[0][u]));             dp[1][v] += Math.max(Math.abs(lr[1][v] - lr[1][u]) + dp[1][u], dp[0][u] + Math.abs(lr[1][v] - lr[0][u]));         }     }      } ",0
913,"import java.util.*; import java.io.*; public class Solution {     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));         StringTokenizer st;         while (t-- > 0) {                          st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             long k = Long.parseLong(st.nextToken());             st = new StringTokenizer(br.readLine());             long arr[] = new long[n];             long tot_sum = 0;             for(int i = 0; i < n; i++)             {             long e = Long.parseLong(st.nextToken());             arr[i] = e;             tot_sum+=e;             }             if(tot_sum <= k)             {                 output.write(""0\n"");                 continue;             }             Arrays.sort(arr);             long psum = 0;             long res = tot_sum - k;             for(int p = 0; p < n - 1; p++)             {                 int ind = n - p - 1;                 psum+=arr[ind];                 long sum = arr[0] + psum - tot_sum + k;                 double d = sum / (double)(p + 2);                 long x = (long)Math.floor(d);                                  long numsteps = Math.max(arr[0] - x, 0) + p + 1;                 if(numsteps < 0)                     continue;                                  res = Math.min(res, numsteps);             }             output.write(res + ""\n"");                                                                                                                                                                                                                         }         output.flush();     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*;   public class Main {     public static long floor(long a, long b) {         long res = a / b;         while(res * b > a) res--;         return res;     }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-- > 0) {             StringTokenizer st = new StringTokenizer(br.readLine());             int n = Integer.parseInt(st.nextToken());             long k = Long.parseLong(st.nextToken());             st = new StringTokenizer(br.readLine());             Long[] p = new Long[n];             for(int i = 0 ;i<n;i++) {                 p[i] = Long.parseLong(st.nextToken());             }             Arrays.sort(p);             long[] sums = new long[n+1];             for(int i=0;i<n;i++) sums[i+1] = sums[i] + p[i];             long ans = Long.MAX_VALUE;             for(int y=0;y<n;y++) {                 long x = p[0] - floor(k - sums[n-y] + p[0], y+1);                 ans = Math.min(Math.max(x, 0) + y, ans);             }             System.out.println(ans);         }     } } ",0
914,"import java.util.*; import java.io.*; public class Solution {     static class Pair {         int x;         int y;         Pair(int x, int y) {             this.x = x;             this.y = y;         }                       }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));         StringTokenizer st;         while (t-- > 0) {             int n = Integer.parseInt(br.readLine());             ArrayList<ArrayList<Integer>> adj = new ArrayList<>();             for (int i = 0; i <= n; i++)                 adj.add(new ArrayList<>());             ArrayList<Pair> list2 = new ArrayList<>();             HashMap<Pair, Integer> map = new HashMap<>();             for (int i = 0; i < n - 1; i++) {                 st = new StringTokenizer(br.readLine());                 int k1 = Integer.parseInt(st.nextToken());                 int k2 = Integer.parseInt(st.nextToken());                 if (k1 > k2) {                     int temp4 = k2;                     k2 = k1;                     k1 = temp4;                 }                 Pair temp = new Pair(k1, k2);                 list2.add(temp);                 adj.get(k1).add(k2);                 adj.get(k2).add(k1);             }             int endp = -1;             for(int i = 1; i <=n; i++)             {                 if(adj.get(i).size() == 1)                 {                     endp = i;                     break;                 }             }             int flag = 0;             if(endp == -1)                 flag = 1;             Queue<Integer> q = new LinkedList<>();             q.add(endp);             int a = 2;             int vis[] = new int[n+1];             vis[endp] = 1;             while(!q.isEmpty())             {                 int node = q.poll();                 ArrayList<Integer> temp = adj.get(node);                 if(temp.size() > 2)                 {                     flag = 1;                     break;                 }                 for(int i = 0; i < temp.size(); i++)                 {                     if(vis[temp.get(i)] == 0)                     {                         vis[temp.get(i)] = 1;                         q.add(temp.get(i));                         int res = 7 - a;                         a = res;                         Pair p = new Pair(Math.min(node, temp.get(i)), Math.max(temp.get(i), node));                         map.put(p, res);                     }                 }             }             if(flag == 1)             {                 output.write(""-1\n"");                 continue;             }             for(Pair p : list2)                 output.write(map.get(p) + "" "");             output.write(""\n"");         }         output.flush();     } } ","import java.io.*; import java.util.*; public class C {     public static void main(String[] args) {         FastReader in = new FastReader();         PrintWriter out = new PrintWriter(System.out);         int T = in.nextInt();         for(int ttt = 1; ttt <= T; ttt++) {             int n = in.nextInt();             int[][] edges = new int[n-1][2];             Map<Integer, List<int[]>> map = new HashMap<>();             int max = 0;             for(int i = 0; i < n-1; i++) {                 edges[i][0] = in.nextInt();                 edges[i][1] = in.nextInt();                 if(!map.containsKey(edges[i][0])) map.put(edges[i][0], new ArrayList<>());                 if(!map.containsKey(edges[i][1])) map.put(edges[i][1], new ArrayList<>());                 map.get(edges[i][0]).add(new int[]{edges[i][1], 0});                 map.get(edges[i][1]).add(new int[]{edges[i][0], 0});                 max = Math.max(max, Math.max(map.get(edges[i][0]).size(), map.get(edges[i][1]).size()));             }             if(max > 2) out.println(-1);             else {                 int start = 1;                 for(int key : map.keySet()) {                     if(map.get(key).size()==1) {                         start = key;                     }                 }                 dfs(start, 0, map, 2);                 for(int[] e : edges) {                     for(int[] u : map.get(e[0])) {                         if(u[0]==e[1]) {                             out.print(u[1] + "" "");                         }                     }                 }                 out.println();             }         }         out.close();     }     static void dfs(int v, int p, Map<Integer, List<int[]>> map, int val) {         for(int[] u : map.get(v)) {             if(u[0]!=p) {                 dfs(u[0], v, map, (val==2 ? 3: 2));             }         }         for(int[] e : map.get(v)) {             if(e[0]==p) {                 e[1] = val;             }         }         if(map.containsKey(p)) {             for(int[] e : map.get(p)) {                 if(e[0]==v) {                     e[1] = val;                 }             }         }     }      } ",0
915,"import java.util.*; import java.io.*; public class Solution { static Scanner scn = new Scanner(System.in); static PrintWriter out = new PrintWriter(System.out); static StringBuilder sb = new StringBuilder(); public static void main(String[] HastaLaVistaLa) { int t = scn.nextInt(); while(t-- > 0) solve(); out.println(sb); out.close(); } public static void solve() { int n = scn.nextInt(), m = scn.nextInt(), x = scn.nextInt(); int[] a = new int[n], ans = new int[n]; for(int i = 0; i < n; i++) a[i] = scn.nextInt(); PriorityQueue<Pair> pq = new PriorityQueue<>(); for(int i = 0; i < m; i++) pq.add(new Pair(0L, i)); for(int i = 0; i < n; i++) { int e = a[i]; Pair p = pq.poll(); p.value += e; pq.add(p); ans[i] = p.id + 1; } boolean check = false; long prev = pq.poll().value; while(!pq.isEmpty()) { long cur = pq.poll().value; if(Math.abs(cur - prev) > x) check = true; prev = cur; } if(check) sb.append(""NO""); else { sb.append(""YES\n""); for(int i : ans) sb.append(i + "" ""); } sb.append(""\n""); } static class Pair implements Comparable<Pair> { int id; long value; public Pair(long value, int id) { this.id = id; this.value = value; } } } ","import java.io.*; import java.util.*; public class C14G {     public static void main(String[] args) throws IOException {         init_io();         int t = nint();         while(t-- > 0) {             int N = nint(), M = nint(), X = nint();             int[] ans = new int[N];             TreeSet<Tower> pq = new TreeSet<>();             Block[] blocks = new Block[N];             for (int i = 0; i < N; i++) {                 blocks[i] = new Block(i, nint());             }             Arrays.sort(blocks);             for (int i = 0; i < M; i++) {                 pq.add(new Tower(i));             }             for (int i = 0; i < N; i++) {                 Tower ct = pq.pollFirst();                 ans[blocks[i].idx] = ct.idx;                 ct.sum += blocks[i].height;                 pq.add(ct);             }             if (pq.last().sum - pq.first().sum > X) {                 out.println(""NO"");             }             else {                 out.println(""YES"");                 for (int i = 0; i < N; i++) {                     out.print(ans[i]+1);                     out.print("" "");                 }                 out.println();             }         }         out.close();     }     static class Block implements Comparable<Block> {         int idx, height;         public Block(int idx, int height) {             this.idx = idx; this.height = height;         }              }     static class Tower implements Comparable<Tower> {         int idx;         int sum;         public Tower(int idx) {             this.idx = idx;         }              }     static StreamTokenizer in;     static PrintWriter out;     static BufferedReader br;     static int nint() throws IOException {         in.nextToken();         return (int) in.nval;     }     static void init_io() throws IOException {         br = new BufferedReader(new InputStreamReader(System.in));         in = new StreamTokenizer(br);         out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));     } } ",0
916,"import java.util.*; import java.io.*; public class Solution { static Scanner scn = new Scanner(System.in); static PrintWriter out = new PrintWriter(System.out); static StringBuilder sb = new StringBuilder(); public static void main(String[] HastaLaVistaLa) { int t = scn.nextInt(); while(t-- > 0) solve(); out.println(sb); out.close(); } public static void solve() { int n = scn.nextInt(), m = scn.nextInt(), x = scn.nextInt(); int[] a = new int[n], ans = new int[n]; for(int i = 0; i < n; i++) a[i] = scn.nextInt(); PriorityQueue<Pair> pq = new PriorityQueue<>(); for(int i = 0; i < m; i++) pq.add(new Pair(0L, i)); for(int i = 0; i < n; i++) { int e = a[i]; Pair p = pq.poll(); p.value += e; pq.add(p); ans[i] = p.id + 1; } boolean check = false; long prev = pq.poll().value; while(!pq.isEmpty()) { long cur = pq.poll().value; if(Math.abs(cur - prev) > x) check = true; prev = cur; } if(check) sb.append(""NO""); else { sb.append(""YES\n""); for(int i : ans) sb.append(i + "" ""); } sb.append(""\n""); } static class Pair implements Comparable<Pair> { int id; long value; public Pair(long value, int id) { this.id = id; this.value = value; } } } ","import java.io.*; import java.util.*; public class three{ public static class Pair implements Comparable<Pair>{ int min; int idx; } public static void main(String[] args) throws Exception {         MyScanner scn = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));                        int t = scn.nextInt();       while(t-- > 0){       int n = scn.nextInt();       int m = scn.nextInt();       int x = scn.nextInt();       int arr[] = scn.nextIntArray(n);       PriorityQueue<Pair> pq = new PriorityQueue<>();             System.out.println(""YES"");       for(int i=0;i<m;i++){       Pair p = new Pair();       p.min = arr[i];       p.idx = i+1;       pq.add(p);       System.out.print(p.idx + "" "");       }       for(int i=m;i<n;i++){       Pair p = pq.peek();       int mini = p.min;       int index = p.idx;       System.out.print(index + "" "");       pq.remove();       Pair np = new Pair();       np.min = arr[i] + mini;       np.idx = index;       pq.add(np);       }       System.out.println();              }                out.close();            }         public static PrintWriter out;                                                                                                                                                          } ",0
917,"import java.util.*; import java.io.*; public class Solution{ static long abs(long a){return Math.abs(a);} static long max(long a, long b){return Math.max(a, b);} static class Graph{ int l[], r[], v; ArrayList<Integer> adj[]; Graph(int v){ this.v = v; this.l = new int[v]; this.r = new int[v]; adj = new ArrayList[v]; for(int i = 0 ; i < v ; i++){ adj[i] = new ArrayList<>(); } } void addEdge(int u, int v){ this.adj[u].add(v); this.adj[v].add(u); } long[] dfs(int u, int parent){ long left = 0, right = 0; int n = adj[u].size(); for (int i = 0 ; i < n; i ++ ) { int child = adj[u].get(i); if ( child == parent ) continue; long val[] = dfs(child, u); left += max(abs(l[child]- l[u])+val[0], abs(r[child] - l[u])+val[1]); right += max(abs(l[child]- r[u])+val[0], abs(r[child] - r[u])+val[1]); } return new long[]{left, right}; } } public static void main(String args[])throws IOException{ BufferedReader br = new  BufferedReader(new InputStreamReader(System.in)); int tests = Integer.parseInt(br.readLine()); while( tests --> 0 ){ int n = Integer.parseInt(br.readLine()); Graph g = new Graph(n); for(int i = 0 ; i < n ; i++ ){ String line[] = br.readLine().split("" ""); g.l[i] = Integer.parseInt(line[0]); g.r[i] = Integer.parseInt(line[1]); } for(int i = 0 ; i < n - 1 ; i++ ){ String line[] = br.readLine().split("" ""); int u = Integer.parseInt(line[0]) - 1; int v = Integer.parseInt(line[1]) - 1; g.addEdge(u, v); } long res[] = g.dfs(0, -1); System.out.println(max(res[0], res[1])); } } } ","import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int t=Integer.parseInt(bu.readLine());         while(t-->0)         {             int n=Integer.parseInt(bu.readLine());             g=new ArrayList[n];             int i;             for(i=0;i<n;i++)             {                 g[i]=new ArrayList<>();                 String st[]=bu.readLine().split("" "");                 a[i][0]=Integer.parseInt(st[0]); a[i][1]=Integer.parseInt(st[1]);                 s[i][0]=s[i][1]=0;             }             for(i=0;i<n-1;i++)             {                 String st[]=bu.readLine().split("" "");                 int u=Integer.parseInt(st[0])-1,v=Integer.parseInt(st[1])-1;                 g[u].add(v); g[v].add(u);             }             dfs(0,-1);             sb.append(Math.max(s[0][0],s[0][1])+""\n"");         }         System.out.print(sb);     }     static ArrayList<Integer> g[];     static int N=100000,a[][]=new int[N][2];     static long s[][]=new long[N][2];     static void dfs(int n,int p)     {         for(int x:g[n])         if(x!=p)         {             dfs(x,n);             s[n][0]+=Math.max(s[x][0]+Math.abs(a[x][0]-a[n][0]),s[x][1]+Math.abs(a[x][1]-a[n][0]));             s[n][1]+=Math.max(s[x][0]+Math.abs(a[x][0]-a[n][1]),s[x][1]+Math.abs(a[x][1]-a[n][1]));         }     } } ",0
918,"import java.util.*; import java.io.*; public class Sol{     public static void main (String []args) {   int times=ni();while(times-->0){solve();}out.close();} static void solve(){  int n=ni();  int sum[]=new int[5];   PriorityQueue<Integer> p[]=new PriorityQueue[5];for(int i=0;i<5;i++)p[i]=new PriorityQueue<Integer>();  for(int i=0;i<n;i++){    char c[]=ns().toCharArray();    int len=c.length;    int csum[]=new int[5];    for(int j=0;j<len;j++){csum[c[j]-'a']++;}    for(int j=0;j<5;j++){csum[j]=2*csum[j]-len;p[j].offer(csum[j]);sum[j]+=csum[j];}  }  int max=0;  for(int i=0;i<5;i++){    int cmax=n;    while(p[i].size()>0 && sum[i]<=0){cmax--;sum[i]-=p[i].poll();}    max=Math.max(max,cmax);  }  out.println(max);  return; }           static InputStream inputStream = System.in; static OutputStream outputStream = System.out; static FastReader in=new FastReader(inputStream); static PrintWriter out=new PrintWriter(outputStream);   static int ni(){return in.nextInt();} static String ns(){return in.nextLine();} } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[6]; for(int i=0; i<5; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[5]; for(char x:X)f[x-'a']++; for(int j=0; j<5; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<5; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ",0
919,"import java.util.*; import java.io.*; public class Sol{     public static void main (String []args) {   int times=ni();while(times-->0){solve();}out.close();} static void solve(){  int n=ni();  int sum[]=new int[5];   PriorityQueue<Integer> p[]=new PriorityQueue[5];for(int i=0;i<5;i++)p[i]=new PriorityQueue<Integer>();  for(int i=0;i<n;i++){    char c[]=ns().toCharArray();    int len=c.length;    int csum[]=new int[5];    for(int j=0;j<len;j++){csum[c[j]-'a']++;}    for(int j=0;j<5;j++){csum[j]=2*csum[j]-len;p[j].offer(csum[j]);sum[j]+=csum[j];}  }  int max=0;  for(int i=0;i<5;i++){    int cmax=n;    while(p[i].size()>0 && sum[i]<=0){cmax--;sum[i]-=p[i].poll();}    max=Math.max(max,cmax);  }  out.println(max);  return; }           static InputStream inputStream = System.in; static OutputStream outputStream = System.out; static FastReader in=new FastReader(inputStream); static PrintWriter out=new PrintWriter(outputStream);   static int ni(){return in.nextInt();} static String ns(){return in.nextLine();} } ","import javax.swing.text.html.parser.Entity; import java.io.*; import java.util.*; import java.math.BigInteger; public class Main{     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Task solver = new Task();         solver.solve(in, out);         out.close();     }          static class Task{         double eps= 0.00000001;         static final int MAXN = 1010;         static final int MOD= 1000000007;                  static int spf[] = new int[MAXN];         static boolean[] prime;                                                                                                                                       public int add(int a, int b){             a+=b;             if(a>=MOD) a-=MOD;             else if(a<0) a+=MOD;             return a;         }                           int[] fact= new int[MAXN];         int[] inv= new int[MAXN];                                                                                          InputReader in; PrintWriter out;         static int mod = 1000000007;         int ans = 0;         ArrayList<Integer>g[] = new ArrayList[101];         int cnt[][] = new int[101][101];         int dp[][] = new int[101][101];                                    public void solve(InputReader in, PrintWriter out) {            int t = in.nextInt();            while (t-- > 0){                int n = in.nextInt();                String[] str = new String[n];                ArrayList<Integer> diff[] = new ArrayList[5];                for (int i = 0; i < 5; i++) diff[i] = new ArrayList<>();                for (int i = 0; i < n; i++){                    str[i] = in.nextToken();                    int[] cnt = new int[5];                    for (int j = 0; j < str[i].length(); j++){                        cnt[str[i].charAt(j) - 'a']++;                    }                    for (int j = 0; j < 5; j++){                        diff[j].add(cnt[j] * 2 - str[i].length());                    }                }                int ans = 0;                for (int i = 0; i < 5; i++){                    Collections.sort(diff[i]);                    Collections.reverse(diff[i]);                    int cur = 0, x = 0;                    for (int j = 0; j < diff[i].size(); j++){                        cur+=diff[i].get(j);                        if (cur <= 0){                            break;                        }                        x++;                    }                    ans = Math.max(ans, x);                }                out.println(ans);            }         }              }                                                        } ",0
920,"import java.util.*; import java.io.*; public class Test {          static final long INF = 1000000000000000000L;          static FastReader s;     public static void main(String[] args)             throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             PrintStream ps = new PrintStream(new File(""output.txt""));             InputStream is = new FileInputStream(""input.txt"");             System.setIn(is);             System.setOut(ps);         }         long t = 1;         s = new FastReader();         t = s.nextLong();         for (int i = 1; i <= t; i++)             solve();     }     public static void solve() throws IOException {         long n = s.nextLong();         ArrayList<Long> k = new ArrayList<Long>((int)n + 1);         k.add(0L);         ArrayList<Long> h = new ArrayList<Long>((int) n + 1);         h.add(0L);         ArrayList<Long> dp = new ArrayList<Long>((int) n + 1);         dp.add(0L);         for (int i = 1; i <= n; i++) {             long k_ = s.nextLong();             k.add(k_);         }         for (int i = 1; i <= n; i++) {             long h_ = s.nextLong();             h.add(h_);             dp.add(0L);         }         for (int i = 1; i <= n; i++) {             long var = k.get(i) - h.get(i) + 1;             for (int j = i - 1; (j > 0 && k.get(j) >= var); j--) {                 long var2 = k.get(j) - h.get(j) + 1;                 if (var2 <= var) {                     var = var2;                 }             }             int j = i - 1;             for (; j > 0; j--) {                 if (k.get(j) < var) {                     break;                 }             }             long var3 = k.get(i) - var + 1;             if (j != 0) {                 dp.set(i, (dp.get(j) + (var3 * (var3 + 1)) / 2));             } else             {                 dp.set(i, ((var3 * (var3 + 1)) / 2));             }         }         System.out.println(dp.get((int) n));     } } ","import java.util.*; import java.io.*; public class Test {          static final long INF = 1000000000000000000L;          static FastReader s;     public static void main(String[] args)             throws IOException {         if (System.getProperty(""ONLINE_JUDGE"") == null) {             PrintStream ps = new PrintStream(new File(""output.txt""));             InputStream is = new FileInputStream(""input.txt"");             System.setIn(is);             System.setOut(ps);         }         long t = 1;         s = new FastReader();         t = s.nextLong();         for (int i = 1; i <= t; i++)             solve();     }     public static void solve() throws IOException {         long n = s.nextLong();         ArrayList<Long> k = new ArrayList<Long>((int)n + 1);         k.add(0L);         ArrayList<Long> h = new ArrayList<Long>((int) n + 1);         h.add(0L);         ArrayList<Long> dp = new ArrayList<Long>((int) n + 1);         dp.add(0L);         for (int i = 1; i <= n; i++) {             long k_ = s.nextLong();             k.add(k_);         }         for (int i = 1; i <= n; i++) {             long h_ = s.nextLong();             h.add(h_);             dp.add(0L);         }         for (int i = 1; i <= n; i++) {             long var = k.get(i) - h.get(i) + 1;             for (int j = i - 1; (j > 0 && k.get(j) >= var); j--) {                 long var2 = k.get(j) - h.get(j) + 1;                 if (var2 <= var) {                     var = var2;                 }             }             int j = i - 1;             for (; j > 0; j--) {                 if (k.get(j) < var) {                     break;                 }             }             long var3 = k.get(i) - var + 1;             if (j != 0) {                 dp.set(i, (dp.get(j) + (var3 * (var3 + 1)) / 2));             } else             {                 dp.set(i, ((var3 * (var3 + 1)) / 2));             }         }         System.out.println(dp.get((int) n));     } } ",1
921,"import java.util.*; import java.io.*; public class Test {         static FastReader sc = new FastReader();   static PrintWriter out = new PrintWriter(System.out);   public static void main(String[] args) {     int t = sc.nextInt();     while (t-- > 0) {       int n = sc.nextInt();       int k = sc.nextInt();       int[] a = new int[k];       int[] temp = new int[n];       for (int i = 0; i < k; i++) a[i] = sc.nextInt();       for (int i = 0; i < k; i++) temp[a[i] - 1] = sc.nextInt();       int[] left = new int[n];       int[] right = new int[n];       Arrays.fill(left, Integer.MAX_VALUE - 1);       Arrays.fill(right, Integer.MAX_VALUE - 1);       if (temp[0] > 0) left[0] = temp[0];       for (int i = 1; i < n; i++) {         left[i] = Math.min(left[i - 1] + 1, left[i]);         if (temp[i] > 0) left[i] = Math.min(left[i], temp[i]);       }       if (temp[n - 1] > 0) right[n - 1] = temp[n - 1];       for (int i = n - 2; i >= 0; i--) {         right[i] = Math.min(right[i + 1] + 1, right[i]);         if (temp[i] > 0) right[i] = Math.min(right[i], temp[i]);       }       for (int i = 0; i < n; i++) out.print(Math.min(left[i], right[i]) + "" "");       out.println();     }     out.flush();     out.close();   } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.time.LocalDateTime; import java.util.*; public class B { static int tree[]; static int up[]; static int n; static int mod =1000000007;  public static void main(String[] args) throws Exception { PrintWriter out=new PrintWriter(System.out);     FastScanner fs=new FastScanner();     int t=fs.nextInt();    outer: while(t-->0) {     n=fs.nextInt();     int k=fs.nextInt();    int ac[]=fs.readArray(k);    int temp[]=fs.readArray(k);    int arr[]=new int[n];    Arrays.fill(arr, Integer.MAX_VALUE/2);    for(int i=0;i<k;i++) {    int ind = ac[i]-1;    arr[ind]=temp[i];    }    int ans[]=new int[n];    int left[]=new int[n];    Arrays.fill(left, Integer.MAX_VALUE/2);    left[0]=arr[0];        for(int i=1;i<n;i++) {    left[i]=Math.min(arr[i], left[i-1]+1);    }    ans[n-1]=Math.min(left[n-1],arr[n-1]);    for(int i=n-2;i>=0;i--) {    ans[i]=Math.min(Math.min(arr[i],left[i]),ans[i+1]+1);    }    for(int i=0;i<n;i++) out.print(ans[i]+"" "");    out.println();    }     out.close(); }   } ",0
922,"import java.util.*; import java.io.*; public class Test {     static class Scan     {         private byte[] buf=new byte[1024];         private int index;         private InputStream in;         private int total;         public Scan()         {             in=System.in;         }         public int scan()throws IOException         {             if(total<0)             throw new InputMismatchException();             if(index>=total)             {                 index=0;                 total=in.read(buf);                 if(total<=0)                 return -1;             }             return buf[index++];         }         public int scanInt()throws IOException         {             int integer=0;             int n=scan();             while(isWhiteSpace(n))             n=scan();             int neg=1;             if(n=='-')             {                 neg=-1;                 n=scan();             }             while(!isWhiteSpace(n))             {                 if(n>='0'&&n<='9')                 {                     integer*=10;                     integer+=n-'0';                     n=scan();                 }                 else throw new InputMismatchException();             }             return neg*integer;         }                           private boolean isWhiteSpace(int n)         {             if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)             return true;             return false;         }     }          public static void main(String[] args) throws IOException{         Scan scan = new Scan();         Print print = new Print();         int testcases = scan.scanInt();         while(testcases-->0){             int n = scan.scanInt();             ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();             long range[][] = new long[n][2];             for(int i=0; i<n; i++){                                  range[i][0] = scan.scanInt();                 range[i][1] = scan.scanInt();                 list.add(new ArrayList<Integer>());             }             for(int i=0; i<n-1; i++){                 int a = scan.scanInt()-1;                 int b = scan.scanInt()-1;                 list.get(a).add(b);                 list.get(b).add(a);             }             long dp[][] = new long[n][2];                                                    boolean vis[] = new boolean[n];             dfs(list, vis, 0, dp, range);             print.println(Math.max(dp[0][0], dp[0][1]));                      }         print.close();     }     public static void dfs(ArrayList<ArrayList<Integer>> list, boolean[] vis, int parent, long dp[][] , long range[][]){         vis[parent] = true;         ArrayList<Integer> l = list.get(parent);         for(int i=0; i<l.size(); i++){             int next = l.get(i);             if(vis[next] == false){                 dfs(list, vis, next, dp, range);                 dp[parent][0] += Math.max(Math.abs(range[parent][0]-range[next][0])+dp[next][0], Math.abs(range[parent][0]-range[next][1])+dp[next][1]);                  dp[parent][1] += Math.max(Math.abs(range[parent][1]-range[next][0])+dp[next][0], Math.abs(range[parent][1]-range[next][1])+dp[next][1]);              }         }     }                          } ","import java.util.*; import java.io.*; public class C {     static class Scan {         private byte[] buf=new byte[1024];         private int index;         private InputStream in;         private int total;         public Scan()         {             in=System.in;         }         public int scan()throws IOException         {             if(total<0)             throw new InputMismatchException();             if(index>=total)             {                 index=0;                 total=in.read(buf);                 if(total<=0)                 return -1;             }             return buf[index++];         }         public int scanInt()throws IOException         {             int integer=0;             int n=scan();             while(isWhiteSpace(n))             n=scan();             int neg=1;             if(n=='-')             {                 neg=-1;                 n=scan();             }             while(!isWhiteSpace(n))             {                 if(n>='0'&&n<='9')                 {                     integer*=10;                     integer+=n-'0';                     n=scan();                 }                 else throw new InputMismatchException();             }             return neg*integer;         }                           private boolean isWhiteSpace(int n)         {             if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)             return true;             return false;         }     }                                             static int n,l[],r[];     static ArrayList<Integer> adj_lst[];     static long dp[][];               public static void main(String args[]) throws IOException {         Scan input=new Scan();         StringBuilder ans=new StringBuilder("""");         int test=input.scanInt();         for(int tt=1;tt<=test;tt++) {             n=input.scanInt();             l=new int[n];             r=new int[n];             adj_lst=new ArrayList[n];             for(int i=0;i<n;i++) {                 adj_lst[i]=new ArrayList<>();                 l[i]=input.scanInt();                 r[i]=input.scanInt();             }             for(int i=0;i<n-1;i++) {                 int u=input.scanInt()-1;                 int v=input.scanInt()-1;                 adj_lst[u].add(v);                 adj_lst[v].add(u);             }                          dp=new long[n+5][5];                          for(int i=0;i<dp.length;i++) {                 for(int j=0;j<dp[0].length;j++) {                     dp[i][j]=-1;                 }             }                          ans.append(solve(0,-1,0)+""\n"");                      }         System.out.println(ans);     }     public static long solve(int root,int par,int state) {                  if(dp[root+1][state]!=-1) {             return dp[root+1][state];         }                  long sum1=0,sum2=0;                  if(par!=-1 && state==0) {             sum1+=Math.abs(l[root]-l[par]);             sum2+=Math.abs(r[root]-l[par]);         }         else if(par!=-1) {             sum1+=Math.abs(l[root]-r[par]);             sum2+=Math.abs(r[root]-r[par]);         }                  for(int i=0;i<adj_lst[root].size();i++) {             if(adj_lst[root].get(i)==par) {                 continue;             }             sum1+=solve(adj_lst[root].get(i),root,0);             sum2+=solve(adj_lst[root].get(i),root,1);         }                  long sum=Math.max(sum1,sum2);                  dp[root+1][state]=sum;                  return sum;              } } ",0
923,"import java.util.*; import java.io.*; public class Transform_the_experssion  { static Scanner sc=new Scanner(System.in); static PrintWriter pw=new PrintWriter(System.out); static ArrayList<Integer> []arr; public static void main(String[] args) throws IOException, InterruptedException {        int t=sc.nextInt();        while(t-->0) {            int n=sc.nextInt();            String [] strings=new String [n];            int [][]arr=new int [5][n];            int [] total=new int [5];            for(int i=0;i<n;i++)            strings[i]=sc.next();            for(int i=0;i<5;i++) {            char x=(char)('a'+i);            for(int j=0;j<n;j++) {            int sum=0;            int end=strings[j].length();            for(int k=0;k<end;k++) {            if(strings[j].charAt(k)==x) {            sum++;            }            }            arr[i][j]=sum-(end-sum);            total[i]+=sum-(end-sum);            }            }            boolean f=false;            for(int i=0;i<5 && !f;i++) {            if(total[i]>0) {            pw.println(n);            f=true;            }            }                        if(!f) {            int [] MaxS=new int [5];            for(int i=0;i<5;i++) {         Arrays.sort(arr[i]);         if(arr[i][n-1]<=0)   {          MaxS[i]=0;          }         else { int sum=arr[i][n-1],countWords=1; for(int j=n-2;j>-1 && sum+arr[i][j]>0;j--) { sum+=arr[i][j]; countWords++; }  MaxS[i]=countWords; }            }            int ans=0;                            for(int i=0;i<5;i++)                ans=Math.max(ans, MaxS[i]);                pw.println(ans);            }                 }               pw.flush(); }   } ","import java.io.*; import java.util.*; public class Solution{     public static int in = 0, count=0;     static class comparator implements Comparator<int[]>{              }     public static int solve(ArrayList<int[]> al, int[] total){         ArrayList<int[]> c = (ArrayList<int[]>) al.clone();         java.util.Collections.sort(c, new comparator());         int i= al.size()-1;         int sum=0; for(int ii:total) sum+=ii;         int check = total[in];         sum-=check;         for(; i>=0; i--){             if(check>sum) return i+1;             else{                 int newSum=0; for(int ii:c.get(i)) newSum+=ii;                 newSum-=c.get(i)[in];                 sum-=newSum;                 check-=c.get(i)[in];             }         }         return 0;     }     public static void main (String[] args) throws java.lang.Exception {         FastReader sc = new FastReader();         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));         int testCase = sc.nextInt();         while (testCase-->0){             int n = sc.nextInt();             String[] strArr = new String[n];             for(int i=0; i<n; i++) {                 strArr[i]=sc.nextLine();             }             int[] total = new int[5];             ArrayList<int[]> al = new ArrayList<>();             for(int i=0; i<n; i++){                 int[] arr= new int[5];                 for(int j=0; j<strArr[i].length(); j++){                     arr[strArr[i].charAt(j)-'a']++;                 }                 for(int j=0; j<5; j++){                     total[j]+=arr[j];                 }                 al.add(arr);             }             int ans = Integer.MIN_VALUE;             for(int i=0; i<5; i++) {                 in = i;                 ans = Math.max(solve(al, total), ans);                 count=0;             }             System.out.println(ans);         }     }           } ",0
924,"import java.util.*; import java.io.*; public class Transform_the_experssion  { static Scanner sc=new Scanner(System.in); static PrintWriter pw=new PrintWriter(System.out); static ArrayList<Integer> []arr; public static void main(String[] args) throws IOException, InterruptedException {        int t=sc.nextInt();        while(t-->0) {            int n=sc.nextInt();            String [] strings=new String [n];            int [][]arr=new int [5][n];            int [] total=new int [5];            for(int i=0;i<n;i++)            strings[i]=sc.next();            for(int i=0;i<5;i++) {            char x=(char)('a'+i);            for(int j=0;j<n;j++) {            int sum=0;            int end=strings[j].length();            for(int k=0;k<end;k++) {            if(strings[j].charAt(k)==x) {            sum++;            }            }            arr[i][j]=sum-(end-sum);            total[i]+=sum-(end-sum);            }            }            boolean f=false;            for(int i=0;i<5 && !f;i++) {            if(total[i]>0) {            pw.println(n);            f=true;            }            }                        if(!f) {            int [] MaxS=new int [5];            for(int i=0;i<5;i++) {         Arrays.sort(arr[i]);         if(arr[i][n-1]<=0)   {          MaxS[i]=0;          }         else { int sum=arr[i][n-1],countWords=1; for(int j=n-2;j>-1 && sum+arr[i][j]>0;j--) { sum+=arr[i][j]; countWords++; }  MaxS[i]=countWords; }            }            int ans=0;                            for(int i=0;i<5;i++)                ans=Math.max(ans, MaxS[i]);                pw.println(ans);            }                 }               pw.flush(); }   } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.HashSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.Vector; public class Main{ static InputStream inputStream = System.in; static OutputStream outputStream = System.out; static InputReader in = new InputReader(inputStream); static PrintWriter out = new PrintWriter(outputStream); public static void main(String[] args) { int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); String[] v = new String[n]; for (int i = 0; i < n; i++) { v[i] = in.next(); } ArrayList<ArrayList<Integer>> v1 = new ArrayList<>(); for (int i = 0; i < n; i++) { ArrayList<Integer> list = new ArrayList<>(); for (int j = 0; j < 5; j++) { list.add(0); } v1.add(list); } for (int i = 0; i < n; i++) { String s = v[i]; for (int j = 0; j < s.length(); j++) { int val = v1.get(i).get(s.charAt(j) - 'a'); val++; v1.get(i).set(s.charAt(j) - 'a', val); } } int ret = 0; for (int i = 0; i < 5; i++) { ArrayList<Integer> v3 = new ArrayList<>(); for (int j = 0; j < n; j++) { String s1 = v[j]; int n2 = s1.length(); int cnt = v1.get(j).get(i); int diff = cnt - (n2 - cnt); v3.add(diff); } Collections.sort(v3); Collections.reverse(v3); int till = 0; for (int k = 0; k < n; k++) { till += v3.get(k); if (till > 0) { ret = Math.max(ret, k + 1); } } } out.println(ret); } out.close(); } } ",0
925,"import java.util.*; import java.io.*; public class _109 {     public static void main(String[] args) {         MyScanner sc = new MyScanner();         PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         int t = 1;         while (t-- > 0) {             int n = sc.nextInt();             int [] a = new int[n];             ArrayList<Integer> one = new ArrayList<>();             ArrayList<Integer> zero = new ArrayList<>();             for (int i = 0; i < n; i++) {                 a[i] = sc.nextInt();                 if (a[i] == 0) zero.add(i);                 else one.add(i);             }             if (one.size() == 0) {                 out.println(0);                 continue;             }             int zeros = zero.size();             int ones = one.size();             long [][] dp = new long[zeros + 1][ones + 1];             for (long [] arr: dp) Arrays.fill(arr, Integer.MAX_VALUE);             for (int i = 0; i <= zeros; i++) dp[i][0] = 0;             long res = Long.MAX_VALUE;             for (int i = 1; i <= zeros; i++) {                 for (int j = 1; j <= ones; j++) {                     int zeroIndex = zero.get(i - 1);                     int oneIndex = one.get(j - 1);                     dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);                     dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1] + Math.abs(zeroIndex - oneIndex));                     if (j == ones) res = Math.min(res, dp[i][j]);                 }             }             out.println(res);         }         out.close();     }                     } ","import java.util.*; import java.io.*; public class Solution {          private static boolean[] isPrime;                                                                                     public static void main(String[] args) throws IOException {         FastReader sc = new FastReader();         PrintWriter out = new PrintWriter(System.out);                                                                                          int n = sc.nextInt();         int arr[] = new int[n];         for(int i=0;i<n;i++){             arr[i] = sc.nextInt();         }         out.println(solver(n, arr));                  out.flush();     }     public static long solver(int n, int[] arr) {         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i=0;i<n;i++){             if(arr[i] ==1){                 a.add(i);             }             else{                 b.add(i);             }         }                           long inf = (long)1e10;         int aLen = a.size(), bLen = b.size();         long[][] dp = new long[bLen+1][aLen+1];         for(int i=0;i<bLen+1;i++)Arrays.fill(dp[i],inf);                  for(int i=0;i<=bLen;i++){             dp[i][0] = 0;         }         for(int i=1;i<=bLen;i++){             for(int j=1;j<=i && j<=aLen;j++){                 int aa = a.get(j-1);                 int bb = b.get(i-1);                                  dp[i][j] = Math.min(                     Math.abs(aa-bb)+dp[i-1][j-1],                     dp[i-1][j]                 );                              }         }                                                               return dp[bLen][aLen]==inf?0:dp[bLen][aLen];     } } ",0
926,"import java.util.*; import java.io.*; public class _1615_C {     public static void main(String[] args) throws IOException {         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int t = Integer.parseInt(in.readLine());         while(t-- > 0) {             int n = Integer.parseInt(in.readLine());             String a = in.readLine();             String b = in.readLine();             int x = 0;             int y = 0;             int match = 0;             for(int i = 0; i < n; i++) {                 if(a.charAt(i) == '1') {                     x++;                 }                 if(b.charAt(i) == '1') {                     y++;                 }                 if(a.charAt(i) == b.charAt(i)) {                     match++;                 }             }             if(x != y && n - x + 1 != y) {                 out.println(-1);             }else {                 int moves = Integer.MAX_VALUE;                 if(x == y) {                     int mismatch = n - match;                     moves = Math.min(moves, mismatch);                 }                 if(n - x + 1 == y) {                     moves = Math.min(moves, match);                 }                 out.println(moves);             }         }         in.close();         out.close();     } } ","import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ",0
927,"import java.util.*; import java.io.*; public class codeforces {          static FastReader fr;     static StringBuilder res;          public static void main(String[] args) throws java.lang.Exception {         fr = new FastReader();         boolean fixed = false;         int t = !fixed ? fr.nextInt() : 1;         res = new StringBuilder();         while (t-- > 0) {             solve();         }         fr.write(res.toString());         fr.close();     }     static int M = 1000008;     static boolean[] primes = new boolean[M];     static int[] dp = new int[M];          public static void solve() {         int n = fr.nextInt();         String[] arr = new String[n];         for (int i = 0; i < n; i++) {             arr[i] = fr.nextLine();         }         char[] chars = { 'a', 'b', 'c', 'd', 'e' };         int ans = 0;         for (int i = 0; i < 5; i++) {             char ch = chars[i];             List<Integer> a = new ArrayList<>();             for (int j = 0; j < n; j++) {                 String s = arr[j];                 int c = 0;                 for (int k = 0; k < s.length(); k++) {                     if (s.charAt(k) == ch)                         c++;                 }                 a.add(2 * c - s.length());             }                          Collections.sort(a, Collections.reverseOrder());             int sum = 0, len = 0;             for (int k = 0; k < a.size(); k++) {                 if (sum + a.get(k) <= 0) {                     break;                 } else {                     len++;                     sum += a.get(k);                 }             }             ans = Math.max(ans, len);         }         res.append(ans + ""\n"");     }                } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[26]; for(int i=0; i<26; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[26]; for(char x:X)f[x-'a']++; for(int j=0; j<26; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<26; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ",0
928,"import java.util.*; import java.io.*; public class codeforces {          static FastReader fr;     static StringBuilder res;          public static void main(String[] args) throws java.lang.Exception {         fr = new FastReader();         boolean fixed = false;         int t = !fixed ? fr.nextInt() : 1;         res = new StringBuilder();         while (t-- > 0) {             solve();         }         fr.write(res.toString());         fr.close();     }     static int M = 1000008;     static boolean[] primes = new boolean[M];     static int[] dp = new int[M];          public static void solve() {         int n = fr.nextInt();         String[] arr = new String[n];         for (int i = 0; i < n; i++) {             arr[i] = fr.nextLine();         }         char[] chars = { 'a', 'b', 'c', 'd', 'e' };         int ans = 0;         for (int i = 0; i < 5; i++) {             char ch = chars[i];             List<Integer> a = new ArrayList<>();             for (int j = 0; j < n; j++) {                 String s = arr[j];                 int c = 0;                 for (int k = 0; k < s.length(); k++) {                     if (s.charAt(k) == ch)                         c++;                 }                 a.add(2 * c - s.length());             }                          Collections.sort(a, Collections.reverseOrder());             int sum = 0, len = 0;             for (int k = 0; k < a.size(); k++) {                 if (sum + a.get(k) <= 0) {                     break;                 } else {                     len++;                     sum += a.get(k);                 }             }             ans = Math.max(ans, len);         }         res.append(ans + ""\n"");     }                } ","import java.util.*; import java.io.*; public class C_1551 { public static void main(String[] args) throws Exception { Scanner sc = new Scanner(System.in); PrintWriter pw = new PrintWriter(System.out); int t = sc.nextInt(); while(t-->0) { int n = sc.nextInt(); int[] a = new int[n]; int[] b = new int[n]; int[] c = new int[n]; int[] d = new int[n]; int[] e = new int[n]; for(int i = 0; i < n; i++) { String s = sc.next(); int[] cnt = new int[5]; for(int j = 0; j < s.length(); j++) cnt[s.charAt(j) - 'a']++; a[i] = 2 * cnt[0] - s.length(); b[i] = 2 * cnt[1] - s.length(); c[i] = 2 * cnt[2] - s.length(); d[i] = 2 * cnt[3] - s.length(); e[i] = 2 * cnt[4] - s.length(); } Arrays.sort(a); Arrays.sort(b); Arrays.sort(c); Arrays.sort(d); Arrays.sort(e); int max = 0; int sum = 0; for(int i = n - 1; i >= 0; i--) { sum += a[i]; if(sum <= 0) break; max = n - i; } sum = 0; for(int i = n - 1; i >= 0; i--) { sum += b[i]; if(sum <= 0) break; max = Math.max(max, n - i); } sum = 0; for(int i = n - 1; i >= 0; i--) { sum += c[i]; if(sum <= 0) break; max = Math.max(max, n - i); } sum = 0; for(int i = n - 1; i >= 0; i--) { sum += d[i]; if(sum <= 0) break; max = Math.max(max, n - i); } sum = 0; for(int i = n - 1; i >= 0; i--) { sum += e[i]; if(sum <= 0) break; max = Math.max(max, n - i); } pw.println(max); } pw.flush(); } } ",0
929,"import java.util.*; import java.io.*; public class codeforces {     public static void main(String []args){         FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-->0)   {             int n = sc.nextInt();             String s[] = new String[n];             for(int i=0;i<n;i++)                 s[i] = sc.next();             int a[][] = new int[n][6];             for(int i=0;i<n;i++)                 for(int j=0;j<s[i].length();j++){                     a[i][s[i].charAt(j)-'a']++;                 }             for(int i=0;i<n;i++)                 a[i][5] = s[i].length();             int ans=0;            for(int i=0;i<5;i++)            {              ans = Math.max(ans,help(a,i,n));            }            System.out.println(ans);         }     }     public static int help(int a[][],int i,int n){         int total=0,count=0,count1=0;         PriorityQueue<Integer> pq = new PriorityQueue<>();         for(int j=0;j<n;j++)         {             if(2*a[j][i]-a[j][5]>0)             {                 total+=(2*a[j][i]-a[j][5]);                 count++;             }             else if(2*a[j][i]-a[j][5]==0)                 count1++;             else                 pq.add(a[j][5]-2*a[j][i]);         }         if(count>0)         {             count+=count1;             int value=0;             while(!pq.isEmpty()&&value<total){                 value+=pq.peek();                 pq.remove();                 count++;             }             if(value>=total)                 count--;         }         return count;     }           } ","import java.util.*; public class Solution { private static Scanner in = new Scanner(System.in); public static void main(String args[]) { int t = in.nextInt(); while(t-->0) { solution(); } } private static void solution() { int ans=0; int n = in.nextInt(); String s[] = new String[n]; int occurance[][] = new int[n][5]; for(int i=0;i<n;i++) { s[i] = in.next(); for(int j=0;j<s[i].length();j++) { occurance[i][s[i].charAt(j)-'a']++; } } for(int i=0;i<5;i++) { int arr[] = new int[n]; for(int j=0;j<n;j++) { arr[j] = s[j].length() - (2 * occurance[j][i]); } Arrays.sort(arr); int temp=0; int count=0; for(int j=0;j<n;j++) { if(temp+arr[j] < 0) { count++; temp += arr[j]; } else  break; } ans = Math.max(ans, count); } System.out.println(ans); } } ",0
930,"import java.util.*; import java.io.*; public class codeforces { public static void main(String[] args) throws Exception { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); char[] a=sc.next().toCharArray(); char[] b=sc.next().toCharArray(); int e0=0; int e1=0; int o0=0; int o1=0; for(int i=0;i<n;i++) { if(a[i]!=b[i]) { if(a[i]=='1') { e1++; }else { e0++; } }else { if(a[i]=='1') { o1++; }else { o0++; } } } int ans=Integer.MAX_VALUE; if(e1==e0) { ans=Math.min(ans, e1+e0); } if(o1==o0+1) { ans=Math.min(ans, o1+o0); } pw.println(ans==Integer.MAX_VALUE?-1:ans); } pw.close(); } static long mod = 1000000007; static Random rn = new Random(); static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out); } ","import java.io.*; import java.util.*; public class qC { public static void main(String[] args)throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int T = Integer.parseInt(br.readLine()); while(T-- > 0) { int N = Integer.parseInt(br.readLine()); char[] curr = br.readLine().toCharArray(); char[] sol = br.readLine().toCharArray(); int curr1 = 0; int sol1 = 0; int mismatch = 0; for(int i = 0;i < N;i++) { if(curr[i] == '1') curr1++; if(sol[i] == '1') sol1++; if(curr[i] != sol[i]) mismatch++; } int minAns = Integer.MAX_VALUE; if(curr1 == sol1 && mismatch % 2 == 0) { minAns = Math.min(mismatch, minAns); } for(int i = 0;i < N;i++) { if(curr[i] == '1') { int tempcurr1 = N - curr1 + 1; int tempmismatch; if(sol[i] == '0') { tempmismatch = N - mismatch; } else { tempmismatch = N - mismatch - 1; } if(tempcurr1 == sol1 && tempmismatch % 2 == 0) { minAns = Math.min(minAns, tempmismatch + 1); } } } System.out.println((minAns == Integer.MAX_VALUE) ? -1 : minAns); } } } ",0
931,"import java.util.*; import java.io.*; public class codeforces { public static void main(String[] args) throws Exception { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); char[] a=sc.next().toCharArray(); char[] b=sc.next().toCharArray(); int e0=0; int e1=0; int o0=0; int o1=0; for(int i=0;i<n;i++) { if(a[i]!=b[i]) { if(a[i]=='1') { e1++; }else { e0++; } }else { if(a[i]=='1') { o1++; }else { o0++; } } } int ans=Integer.MAX_VALUE; if(e1==e0) { ans=Math.min(ans, e1+e0); } if(o1==o0+1) { ans=Math.min(ans, o1+o0); } pw.println(ans==Integer.MAX_VALUE?-1:ans); } pw.close(); } static long mod = 1000000007; static Random rn = new Random(); static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out); } ","import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ",0
932,"import java.util.*; import java.io.*; public class codeforces { public static void main(String[] args) throws Exception { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); char[] a=sc.next().toCharArray(); char[] b=sc.next().toCharArray(); int e0=0; int e1=0; int o0=0; int o1=0; for(int i=0;i<n;i++) { if(a[i]!=b[i]) { if(a[i]=='1') { e1++; }else { e0++; } }else { if(a[i]=='1') { o1++; }else { o0++; } } } int ans=Integer.MAX_VALUE; if(e1==e0) { ans=Math.min(ans, e1+e0); } if(o1==o0+1) { ans=Math.min(ans, o1+o0); } pw.println(ans==Integer.MAX_VALUE?-1:ans); } pw.close(); } static long mod = 1000000007; static Random rn = new Random(); static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out); } ","import java.util.*; import java.io.*; public class C1615{ static FastScanner fs = null; public static void main(String[] args) { fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); while (t-->0) { int n = fs.nextInt(); String a = fs.next(); String b = fs.next(); char ch1[] = a.toCharArray(); char ch2[] = b.toCharArray(); int c00 = 0; int c01 = 0; int c10 = 0; int c11 = 0; for(int i=0;i<n;i++){ if(ch1[i]=='0'){ if(ch2[i]=='0'){ c00+=1; } else{ c01+=1; } } else{ if(ch2[i]=='0'){ c10+=1; } else{ c11+=1; } } } int ans = -1; if((c11-c00)==1 || c10==c01){ int s1 = (int)1e7;  int s2 = (int)1e7; if((c11-c00)==1){ s1 = c11+c00; } if(c10==c01) s2 = c10+c01; ans = Math.min(s1,s2);  } out.println(ans); } out.close(); } } ",0
933,"import java.util.*; import java.io.*; public class code{ public static void main(String[] arg) throws IOException{ Scanner in=new Scanner(System.in);    int n=in.nextInt();  int[] arr=new int[n];  ArrayList<Integer> zero=new ArrayList<Integer>();  ArrayList<Integer> one=new ArrayList<Integer>();  for(int i=0;i<n;i++){  arr[i]=in.nextInt();  if(arr[i]==0) zero.add(i);  else one.add(i);  }    if(one.size()==0) {  System.out.println(0);  }  else{  int[][] dp=new int[one.size()][zero.size()];    for(int i=0;i<one.size();i++){  for(int j=0;j<zero.size();j++){  if(i==0 && j==0) dp[i][j]=Math.abs(one.get(i)-zero.get(j));  else if(j==0) dp[i][j]=Integer.MAX_VALUE/2;  else if(i==0) dp[i][j]=Math.min(dp[i][j-1],Math.abs(one.get(i)-zero.get(j)));  else{  dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(one.get(i)-zero.get(j)));  }  }  }   System.out.println(dp[one.size()-1][zero.size()-1]); } } } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
934,"import java.util.*; import java.io.*; public class code{ public static void main(String[] arg) throws IOException{ Scanner in=new Scanner(System.in);    int n=in.nextInt();  int[] arr=new int[n];  ArrayList<Integer> zero=new ArrayList<Integer>();  ArrayList<Integer> one=new ArrayList<Integer>();  for(int i=0;i<n;i++){  arr[i]=in.nextInt();  if(arr[i]==0) zero.add(i);  else one.add(i);  }    if(one.size()==0) {  System.out.println(0);  }  else{  int[][] dp=new int[one.size()][zero.size()];    for(int i=0;i<one.size();i++){  for(int j=0;j<zero.size();j++){  if(i==0 && j==0) dp[i][j]=Math.abs(one.get(i)-zero.get(j));  else if(j==0) dp[i][j]=Integer.MAX_VALUE/2;  else if(i==0) dp[i][j]=Math.min(dp[i][j-1],Math.abs(one.get(i)-zero.get(j)));  else{  dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(one.get(i)-zero.get(j)));  }  }  }   System.out.println(dp[one.size()-1][zero.size()-1]); } } } ",import java.util.*; import java.io.*; public class Main{     public static void main(String[] args) throws java.io.IOException {         Scanner sc = new Scanner(System.in);         int n=sc.nextInt();         int[] arr=new int[n];         int[][] dp=new int[n][n];         int[][] min=new int[n][n];         ArrayList<Integer> ones=new ArrayList<>();         ArrayList<Integer> zero=new ArrayList<>();         for(int i=0;i<n;++i) {             arr[i] = sc.nextInt();             if(arr[i]==1)                 ones.add(i);             else                 zero.add(i);         }         for(int i=0;i<n;++i)             for(int j=0;j<n;++j) {                 min[i][j] = Integer.MAX_VALUE;                 dp[i][j] = Integer.MAX_VALUE;             }         int len=ones.size();         int zlen=zero.size();         int minn=0;         for(int i=0;i<len;++i)         {             int cur = ones.get(i);             for(int j=i;j<zlen;j++)             {                 int curz = zero.get(j);                 int cost = Math.abs(cur-curz);                 if(i!=0 && curz-1>=0)                 {                     cost+=min[i-1][curz-1];                 }                 dp[i][curz]=cost;             }             minn=Integer.MAX_VALUE;             for(int j=0;j<n;++j)             {                 if(dp[i][j]<minn)                     minn=dp[i][j];                 min[i][j]=minn;             }         }         System.out.println(minn);     } } ,0
935,"import java.util.*; import java.io.*; public class experiment {    public static void main(String[] args) throws IOException  { FastReader sc = new FastReader(); PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out)); int t = sc.nextInt(); while( t-- > 0) { char arr[] = new char[5]; for( int i = 0 ;i< 5 ;i++) { arr[i] = (char)(i + 97); } int n =sc.nextInt(); ArrayList<String> input = new ArrayList<>(); for( int i = 0 ;i< n;i++) { input.add( sc.next()); } int max = 0; for( int i = 0 ; i< 5 ;i++) { int test = 0; int sum = 0; char now = arr[i]; ArrayList<Integer> temp = new ArrayList<>(); for( int j = 0 ; j < input.size(); j++) { int local = 0; for( int k = 0 ; k < input.get(j).length(); k++) { if( input.get(j).charAt(k) == now) { local++; } } temp.add( local - (input.get(j).length() - local)); } Collections.sort(temp , Collections.reverseOrder()); for( int j = 0 ; j < n ; j++) { sum+=temp.get(j); if( sum<=0) { break; } test++; } max = Math.max(max, test); } out.println( max); } out.flush();  } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Main {     public static void main(String args[])     {      FastReader s=new FastReader();      int t=s.nextInt();      while(t>0)      {       Solve solve=new Solve();       t--;       int n=s.nextInt();       String str[]=new String[n];       for(int i=0;i<n;i++)       str[i]=s.nextLine();       char array[]=new char[]{'a','b','c','d','e'};       int arr[]=new int[n];       int ans=0;       for(int i=0;i<5;i++)       {         Arrays.fill(arr,0);           for(int j=0;j<n;j++)           {                  for(int k=0;k<str[j].length();k++)                  {                      if(str[j].charAt(k)==array[i])                      arr[j]++;                      else                      arr[j]--;                  }           }           ans=(ans>solve.solve(arr,n))?ans:solve.solve(arr,n);       }       System.out.println(ans);      }     } } class Solve{     public int solve(int arr[],int n)     {         int ans=0;         int sum=0;         Arrays.sort(arr);         for(int i=n-1;i>=0;i--)         {             if(sum+arr[i]>0)             {                 sum+=arr[i];                 ans++;             }             else             break;         }         return ans;     } } ",0
936,"import java.util.*; import java.io.*; public class monstersandspells { public static void main(String args[]) throws IOException { FastScanner in = new FastScanner(System.in); PrintWriter out = new PrintWriter(System.out); int t = in.nextInt(); for ( ; t > 0; t--) { int n = in.nextInt(); long[] times = new long[n]; long[] health = new long[n]; for (int i = 0; i < n; i++) times[i] = in.nextLong(); for (int i = 0; i < n; i++) health[i] = in.nextLong(); long small = 0; long prev = 0; long lastDamage = 0; for (int i = 0; i < n; i++) { long diff = times[i] - prev; boolean use = true; long delta = 0; if (diff >= health[i]) { delta += health[i]; long curr = health[i]; long lastTime = times[i]; for (int j = i + 1; j < n; j++) { long increase = times[j] - lastTime; if (curr + increase >= health[j]) { curr += increase; lastTime = times[j]; } else { delta += (health[j] - (curr + increase)); curr = health[j]; lastTime = times[j]; } } if (delta <= diff) { use = true; } else use = false; } else use = false; if (use) { small += damageOverTime(delta, 1); lastDamage = delta; } else { small += damageOverTime((times[i] - prev) + lastDamage, lastDamage + 1); lastDamage+=(times[i] - prev); } prev = times[i]; } out.println(small); } out.close(); } public static long damageOverTime(long endPower, long startPower) { return triangleSum(endPower) - triangleSum(startPower - 1); } public static long triangleSum(long a) { return a * (a + 1) / 2; } } ","import java.util.*; import java.util.Scanner; public class Solution { static int mod=1000000007;; public static void main(String[] args) { Scanner sc=new Scanner(System.in); int tt=sc.nextInt(); while(tt-->0){ int n=sc.nextInt(); int k[]=new int[n]; int h[]=new int[n]; for(int i=0;i<n;i++) { k[i]=sc.nextInt(); } for(int i=0;i<n;i++) { h[i]=sc.nextInt(); } long ans=0; int start=k[0]-h[0]-1; int end=k[0]; int last=0; for(int j=0;j<n;j++) {  start=k[j]-h[j]+1;  end=k[j];  last=j; for(int i=j+1;i<n;i++) { int temp=k[i]-h[i]+1; if(temp<=end) { start=Math.min(start, temp); end=Math.max(end, k[i]); last=i; } } j=last; long va=end-start+1; ans+=(va*(va+1))/2; } System.out.println(ans); } } } ",0
937,"import java.util.*; import java.io.*; public class notassigning { public static void main(String[] args) throws IOException { BufferedReader fin = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(fin.readLine()); StringBuilder fout = new StringBuilder(); while(t-- > 0) { int n = Integer.parseInt(fin.readLine()); boolean isValid = true; int start = -1; ArrayList<ArrayList<Integer>> c = new ArrayList<ArrayList<Integer>>(); for(int i = 0; i < n; i++) { c.add(new ArrayList<Integer>()); } HashMap<ArrayList<Integer>, Integer> order = new HashMap<ArrayList<Integer>, Integer>(); for(int i = 0; i < n - 1; i++) { StringTokenizer st = new StringTokenizer(fin.readLine()); int a = Integer.parseInt(st.nextToken()) - 1; int b = Integer.parseInt(st.nextToken()) - 1; order.put(new ArrayList<Integer>(Arrays.asList(a, b)), i); c.get(a).add(b); c.get(b).add(a); if((c.get(a).size() == 3 || c.get(b).size() == 3) && isValid) { isValid = false; } } if(!isValid) { fout.append(""-1\n""); continue; } for(int i = 0; i < n; i++) { if(c.get(i).size() == 1) { start = i; break; } } int[] ans = new int[n - 1]; int cur = start; int next = c.get(start).get(0); int prime = 2; while(true) { int index = 0; if(order.containsKey(new ArrayList<Integer>(Arrays.asList(cur, next)))) { index = order.get(new ArrayList<Integer>(Arrays.asList(cur, next))); } else { index = order.get(new ArrayList<Integer>(Arrays.asList(next, cur))); } ans[index] = prime; if(c.get(next).size() == 1) { break; } prime = prime == 3? 2 : 3; int prev = cur; cur = next; next = c.get(cur).get(0) == prev? c.get(cur).get(1) : c.get(cur).get(0); } for(int i : ans) { fout.append(i).append("" ""); } fout.append(""\n""); } System.out.print(fout); } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.BufferedReader; import java.io.InputStreamReader; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();                  int t;         t = in.nextInt();                  while (t > 0) {                          solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         Map<Integer, ArrayList<Integer>> ans;         Map<Integer,Boolean> visited;         Map<Integer, List<Integer>> map;         public void call(InputReader in, PrintWriter out) {             int n = in.nextInt();             answer[] arr = new answer[n];             visited = new HashMap<>();             ans = new HashMap<>();             int u, v;             map = new HashMap<>();             for (int i = 0; i < n - 1; i++) {                 arr[i] = new answer(in.nextInt(), in.nextInt());                 u = arr[i].a;                 v = arr[i].b;                 map.putIfAbsent(u, new ArrayList<>());                 map.get(u).add(v);                 map.putIfAbsent(v, new ArrayList<>());                 map.get(v).add(u);             }             int a = 0;             for(Integer i : map.keySet()){                 if(map.get(i).size() > 2){                     out.println(-1);                     return;                 }                 if(map.get(i).size()==1){                     a = i;                 }             }             dfs(a, -1, 0);             int[] ans1 = new int[n - 1];             for(int i = 0; i < n-1; i++){                 u = arr[i].a;                 v = arr[i].b;                 if(ans.getOrDefault(u, null)!=null && ans.get(u).get(0)==v){                     if(ans.get(u).get(1)==0){                         ans1[i] = 2;                     }                     else{                         ans1[i] = 5;                     }                 }                 else{                     if(ans.get(v).get(1)==0){                         ans1[i] = 2;                     }                     else{                         ans1[i] = 5;                     }                 }             }             for(Integer i : ans1){                 out.print(i+"" "");             }             out.println();         }         public void dfs(int child, int par, int c){             if(par!=-1){                 ans.putIfAbsent(par, new ArrayList<>());                 ans.get(par).add(child);                 ans.get(par).add(c);             }             visited.put(child, true);             for(Integer i : map.get(child)){                 if(!visited.getOrDefault(i, false)){                     dfs(i, child, c^1);                 }             }         }     }               static class answer implements Comparable<answer>{         int a, b;         public answer(int a, int b) {             this.a = a;             this.b = b;         }              }                    static final Random random=new Random();           } ",0
938,"import java.util.*; import java.io.*; public class q3{     static FastScanner fs = new FastScanner();     static PrintWriter pw = new PrintWriter(System.out);     static List<List<Edge>> list;     public static void main(String[] args){         int tt = fs.nextInt();         for (int t=0;t<tt;t++){             solve();         }         pw.close();     }     static void solve(){         int n = fs.nextInt();         list = new ArrayList<>();         for (int i=0;i<n;i++) list.add(new ArrayList<>());                  for (int i=0;i<n-1;i++){             int from = fs.nextInt()-1, to = fs.nextInt()-1;             list.get(from).add(new Edge(to, i));             list.get(to).add(new Edge(from, i));         }         int start = -1;         for (int i=0;i<n;i++){             if (list.get(i).size() > 2){                 pw.println(-1);                 return;             }             else if (list.get(i).size() == 1){                 start = i;             }         }            int[] ans = new int[n-1];         int prev = -1;         int cur = start;         int curWeight = 2;         while (true){             Edge now = list.get(cur).get(0);             if (now.node == prev){                 if (list.get(cur).size() == 1){                     break;                 }                 now = list.get(cur).get(1);             }             ans[now.index] = 5 - curWeight;             curWeight = ans[now.index];             prev = cur;             cur = now.node;         }         for (int i : ans){             pw.printf(""%d "", i);         }         pw.println();     }     static class Edge {         int node;         int index;         public Edge(int node, int index){             this.node = node;             this.index = index;         }     }           } ","import java.util.*; public class Main {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         for (int i = 0; i < t; i++) {             int n = scan.nextInt();             ArrayList<ArrayList<Pair>> graph = new ArrayList<>();             for (int j = 0; j < n; j++) {                 graph.add(new ArrayList<>());             }             for (int j = 0; j < n - 1; j++) {                 int u;                 int v;                 u = scan.nextInt();                 v = scan.nextInt();                 u--;                 v--;                 graph.get(u).add(new Pair(v, j));                 graph.get(v).add(new Pair(u, j));             }             boolean soluble = true;             int curV = 0;             int prevV = -1;             int[] ans = new int[n];             int prime = 2;             for (int j = 0; j < n; j++) {                 ArrayList<Pair> list = graph.get(j);                 if (list.size() > 2) {                     soluble = false;                 } else if (list.size() == 1) {                     curV = j;                 }             }             if (soluble) {                 for (int j = 0; j < n - 1; j++) {                     ArrayList<Pair> list = graph.get(curV);                     for (int z = 0; z < list.size(); z++) {                         if (list.get(z).vertex != prevV) {                             ans[list.get(z).numberOfEdge] = prime;                             prime = changePrime(prime);                             prevV = curV;                             curV = list.get(z).vertex;                             break;                         }                     }                 }                 for (int j = 0; j < n - 1; j++) {                     System.out.print(ans[j] + "" "");                 }                 System.out.println();             } else {                 System.out.println(-1);             }         }     }     public static int changePrime(int prime) {         if (prime == 2) {             prime = 3;         } else {             prime = 2;         }         return prime;     } } class Pair {     int vertex;     int numberOfEdge;     public Pair(int vertex, int numberOfEdge) {         this.vertex = vertex;         this.numberOfEdge = numberOfEdge;     } } ",0
939,"import java.util.*; import java.io.*; public class stoneheaps { public static void main(String[] args) throws Exception{ BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); for(int i = 0; i < t; i ++) { int n = Integer.parseInt(br.readLine()); String[] tokens = br.readLine().split("" ""); int[] arr = new int[n]; for(int j = 0; j < n; j++) { arr[j] = Integer.parseInt(tokens[j]); } int l = 1; int r = 1000000000; while(l < r) { int mid  = l + (r-l+1)/2; if(check(arr, mid)) { l = mid; } else { r = mid-1; } } System.out.println(l); } } static boolean check(int[] arr, int x) { int[] changed = new int[arr.length]; for(int i = 0; i < arr.length; i ++) { changed[i] = arr[i]; } int n = arr.length; for(int i = n-1; i >= 0; i--) { if(changed[i] < x) { return false; } else if(i > 1){ int change = Math.min(changed[i]-x, arr[i])/3; changed[i-1] = changed[i-1]+change; changed[i-2] = changed[i-2] +change*2; } } return true; } } ","import java.io.*; import java.util.*; public class c {     public static void main(String[] args) throws Exception {         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int numCases = Integer.parseInt(in.readLine());         for (int casenum = 0; casenum < numCases; casenum++) {             int n = Integer.parseInt(in.readLine());             long[] arr = new long[n];             StringTokenizer tokenizer = new StringTokenizer(in.readLine());             for (int i = 0; i < n; i++) {                 arr[i] = Long.parseLong(tokenizer.nextToken());             }             long low = 0;             long high = 1000000000;             low--;             while (low < high) {                 long mid = low + (high - low + 1) / 2;                 boolean works = test(arr, mid);                 if (works) {                     low = mid;                 } else {                     high = mid - 1;                 }                              }             System.out.println(low);         }         in.close();         out.close();     }     public static boolean test(long[] arr, long k) {         long[] h = new long[arr.length];         for (int i = 0; i < arr.length; i++) {             h[i] = arr[i];         }         for (int i = h.length - 1; i - 2 >= 0; i--) {             if (h[i] < k)                 break;             long d = Math.min((h[i]-k) / 3, arr[i]/3);             h[i] -= 3 * d;             h[i - 1] += d;             h[i-+ 2] += 2 * d;         }         for (int i = 0; i < h.length; i++) {             if (h[i] < k)                 return false;         }                  return true;     } } ",0
940,"import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.Map; import java.util.PriorityQueue; import java.util.Queue; import java.util.SortedSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.io.BufferedWriter; import java.io.Writer; import java.io.OutputStreamWriter; import java.util.InputMismatchException; import java.io.IOException; import java.io.InputStream; public class Main {                static class obj{            long a1;            long a2;                        obj(long a1,long a2){                this.a1=a1;                this.a2=a2;                           }        }        static  class sortby implements Comparator<obj>{                    }                                         static int[] m;         static long[][] dis;             public static void main(String[] args) {         FastReader s = new FastReader();                  OutputStream outputStream = System.out;         PrintWriter out = new PrintWriter(outputStream);                   int t = s.nextInt();         while(t-->0) {             int n = s.nextInt();             int m = s.nextInt();             int x=s.nextInt();             long[] a = new long[n];             for(int i=0;i<n;i++){                 a[i]=s.nextInt();             }            out.println(""YES"");             PriorityQueue<obj> p = new PriorityQueue<>(new sortby());             for (int i = 0; i <m; i++) {              p.add(new obj(a[i],i+1));              out.print(i+1+"" "");             }             for(int i=m;i<n;i++){                 obj o=p.poll();                 p.add(new obj(o.a1+a[i],o.a2));                 out.print(o.a2+"" "");             }             out.println();         }        out.close(); }} ","import java.util.*; public class CP {               public static void printArr(int[] a){         for(int i=0; i<a.length; i++){             System.out.print(a[i]+1+"" "");         }         System.out.println();     }     public static class Pair implements Comparable<Pair> {         int val;         int idx;         Pair(int a, int b){             this.val = a;             this.idx = b;         }              }     public static void main(String[] args) {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         for (int i = 0; i < t; i++) {             int n = sc.nextInt();             int m=sc.nextInt();             int x = sc.nextInt();             int[] arr = new int[n];             int[] ans = new int[n];             for (int j = 0; j < n; j++) {                         arr[j] = sc.nextInt();             }             PriorityQueue<Pair> pq=new PriorityQueue<>();             for (int j = 0; j < m; j++) {                 pq.add(new Pair(arr[j],j));                 ans[j]=j;     }     for (int j = m; j < n; j++) {         Pair p=pq.remove();         pq.add(new Pair(p.val+arr[j],p.idx));         ans[j]=p.idx;         }         System.out.println(""YES"");         printArr(ans);      } } } ",1
941,"import java.util.*; import java.lang.*; import java.io.*;    import java.math.*; public class Prac{                                        static PrintWriter w = new PrintWriter(System.out);          static int[] nextG(int arr[]){         int n = arr.length;         Stack<Integer> s = new Stack<>();         int ng[] = new int[n];         for(int i = 0 ; i < n ; i++){             while(!s.isEmpty() && arr[s.peek()] <= arr[i]){                 ng[s.pop()] = i;             }             s.add(i);         }         while(!s.isEmpty()){             ng[s.pop()] = n;         }         return ng;     }     static int[] nextS(int arr[]){         int n = arr.length;         Stack<Integer> s = new Stack<>();         int ns[] = new int[n];         for(int i = 0 ; i < n ; i++){             while(!s.isEmpty() && arr[s.peek()] >= arr[i]){                 ns[s.pop()] = i;             }             s.add(i);         }         while(!s.isEmpty()){             ns[s.pop()] = n;         }         return ns;     }     static int[] prevG(int arr[]){         int n = arr.length;         Stack<Integer> s = new Stack<>();         int pg[] = new int[n];         for(int i = n-1 ; i >= 0 ; i--){             while(!s.isEmpty() && arr[s.peek()] <= arr[i]){                 pg[s.pop()] = i;             }             s.add(i);         }         while(!s.isEmpty()){             pg[s.pop()] = -1;         }         return pg;     }     static int[] prevS(int arr[]){         int n = arr.length;         Stack<Integer> s = new Stack<>();         int ps[] = new int[n];         for(int i = n-1 ; i >= 0 ; i--){             while(!s.isEmpty() && arr[s.peek()] >= arr[i]){                 ps[s.pop()] = i;             }             s.add(i);         }         while(!s.isEmpty()){             ps[s.pop()] = -1;         }         return ps;     }     public static void main(String [] args){         InputReader sc=new InputReader(System.in);                   int n = sc.ni();         int arr [] = sc.nia(n);         int ng[] = nextG(arr);         int ns [] = nextS(arr);         int pg[] = prevG(arr);         int ps[] = prevS(arr);         int ans[]=new int[n];                  Arrays.fill(ans,10000000);         ans[n-1] = 0;         for(int i = n -1 ; i >= 0 ; i --){             if(ns[i] != n){                 ans[i] = Math.min(ans[i] , ans[ns[i]]+1);             }             if(ng[i] != n){                 ans[i] = Math.min(ans[i] , ans[ng[i]]+1);             }             if(pg[i] != -1){                 ans[pg[i]] = Math.min(ans[pg[i]] , ans[i]+1);             }             if(ps[i] != -1){                 ans[ps[i]] = Math.min(ans[ps[i]] , ans[i]+1);             }         }                  w.println(ans[0]);         w.close();     } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Vector; import java.util.InputMismatchException; import java.io.IOException; import java.util.Stack; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DDiscreteCentrifugalJumps solver = new DDiscreteCentrifugalJumps();         solver.solve(1, in, out);         out.close();     }     static class DDiscreteCentrifugalJumps {         public void solve(int testNumber, InputReader s, PrintWriter w) {             int n = s.nextInt();             int[] a = new int[n];             for (int i = 0; i < n; i++)                 a[i] = s.nextInt();             int[] dp = new int[n];             for (int i = 0; i < n; i++)                 dp[i] = i;             Stack<Integer> dec = new Stack<>();             dec.push(0);             Stack<Integer> inc = new Stack<>();             inc.push(0);             for (int i = 1; i < n; i++) {                 while (!dec.isEmpty() && a[dec.peek()] < a[i]) {                     dp[i] = Math.min(dp[i], dp[dec.peek()] + 1);                     dec.pop();                 }                 if (!dec.isEmpty()) {                     dp[i] = Math.min(dp[i], dp[dec.peek()] + 1);                     if (a[dec.peek()] == a[i])                         dec.pop();                 }                 dec.push(i);                 while (!inc.isEmpty() && a[inc.peek()] > a[i]) {                     dp[i] = Math.min(dp[i], dp[inc.peek()] + 1);                     inc.pop();                 }                 if (!inc.isEmpty()) {                     dp[i] = Math.min(dp[i], dp[inc.peek()] + 1);                     if (a[inc.peek()] == a[i])                         inc.pop();                 }                 inc.push(i);             }             w.println(dp[n - 1]);         }     }      } ",0
942,"import java.util.*; import java.lang.*; import java.io.*;   public class Codeforces {     public static void main(String[] args) throws java.lang.Exception {                  BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));        int t = Integer.parseInt(buf.readLine());         StringBuilder sb = new StringBuilder();        for (int i = 0; i < t; i++) {            String st=buf.readLine();           String st1[]=(buf.readLine()).split("" "");           int n=Integer.parseInt(st1[0]);           int k=Integer.parseInt(st1[1]);           int a[]=new int[k];           int temp[]=new int[k];           long arr[]=new long[n];           String st2[]=(buf.readLine()).split("" "");            String st3[]=(buf.readLine()).split("" "");            for(int j=0;j<k;j++)            {                a[j]=Integer.parseInt(st2[j]);                temp[j]=Integer.parseInt(st3[j]);            }           for(int j=0;j<k;j++)           {               arr[a[j]-1]=temp[j];           }           long min=Integer.MAX_VALUE;           long left[]=new long[n];           long right[]=new long[n];           if(arr[0]==0)               left[0]=min;           else               left[0]=arr[0];           for(int j=1;j<n;j++)           {               if(arr[j]==0)               {                   left[j]=left[j-1]+1;               }               else               {                   left[j]=Math.min(left[j-1]+1,arr[j]);               }           }           if(arr[n-1]==0)               right[n-1]=min;           else               right[n-1]=arr[n-1];           for(int j=n-2;j>=0;j--)           {               if(arr[j]==0)               {                   right[j]=right[j+1]+1;               }               else               {                   right[j]=Math.min(right[j+1]+1,arr[j]);               }           }           for(int j=0;j<n;j++)           {               arr[j]=Math.min(left[j],right[j]);               sb.append(arr[j]+"" "");           }           sb.append(""\n"");         }         System.out.println(sb);     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); for(int q=0;q<t;q++){            String s = br.readLine();                   String s1[] = br.readLine().split("" "");                   int n = Integer.parseInt(s1[0]);                   int k = Integer.parseInt(s1[1]);                   String s2[] = br.readLine().split("" "");                   int a[] = new int[k];                   for(int i=0;i<k;i++){                         a[i] = Integer.parseInt(s2[i]);                   }                   String s3[] = br.readLine().split("" "");                   int b[] = new int[k];                   for(int i=0;i<k;i++){                         b[i] = Integer.parseInt(s3[i]);                   }                   long ans[] = new long[n];                   for(int i=0;i<n;i++){                         ans[i] = Integer.MAX_VALUE;                   }                   for(int i=0;i<k;i++){                         ans[a[i]-1] = b[i];                   }                   for(int i=1;i<n;i++){                         ans[i] = Math.min(ans[i],ans[i-1]+1);                   }                   for(int i=n-2;i>=0;i--){                         ans[i] = Math.min(ans[i],ans[i+1]+1);                   }                                      for(int i=0;i<n;i++){                         System.out.print(ans[i]+"" "");                   }                   System.out.println(); } } } ",0
943,"import java.util.*; import java.lang.*; import java.io.*;   public class Codeforces {     public static void main(String[] args) throws java.lang.Exception {                  BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));        int t = Integer.parseInt(buf.readLine());         StringBuilder sb = new StringBuilder();        for (int i = 0; i < t; i++) {            String st=buf.readLine();           String st1[]=(buf.readLine()).split("" "");           int n=Integer.parseInt(st1[0]);           int k=Integer.parseInt(st1[1]);           int a[]=new int[k];           int temp[]=new int[k];           long arr[]=new long[n];           String st2[]=(buf.readLine()).split("" "");            String st3[]=(buf.readLine()).split("" "");            for(int j=0;j<k;j++)            {                a[j]=Integer.parseInt(st2[j]);                temp[j]=Integer.parseInt(st3[j]);            }           for(int j=0;j<k;j++)           {               arr[a[j]-1]=temp[j];           }           long min=Integer.MAX_VALUE;           long left[]=new long[n];           long right[]=new long[n];           if(arr[0]==0)               left[0]=min;           else               left[0]=arr[0];           for(int j=1;j<n;j++)           {               if(arr[j]==0)               {                   left[j]=left[j-1]+1;               }               else               {                   left[j]=Math.min(left[j-1]+1,arr[j]);               }           }           if(arr[n-1]==0)               right[n-1]=min;           else               right[n-1]=arr[n-1];           for(int j=n-2;j>=0;j--)           {               if(arr[j]==0)               {                   right[j]=right[j+1]+1;               }               else               {                   right[j]=Math.min(right[j+1]+1,arr[j]);               }           }           for(int j=0;j<n;j++)           {               arr[j]=Math.min(left[j],right[j]);               sb.append(arr[j]+"" "");           }           sb.append(""\n"");         }         System.out.println(sb);     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codeforces {     public static void main(String[] args) throws java.lang.Exception {                  BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));        int t = Integer.parseInt(buf.readLine());         StringBuilder sb = new StringBuilder();        for (int i = 0; i < t; i++) {            String st=buf.readLine();           String st1[]=(buf.readLine()).split("" "");           int n=Integer.parseInt(st1[0]);           int k=Integer.parseInt(st1[1]);           int a[]=new int[k];           int temp[]=new int[k];           long arr[]=new long[n];           String st2[]=(buf.readLine()).split("" "");            String st3[]=(buf.readLine()).split("" "");            for(int j=0;j<k;j++)            {                a[j]=Integer.parseInt(st2[j]);                temp[j]=Integer.parseInt(st3[j]);            }           for(int j=0;j<k;j++)           {               arr[a[j]-1]=temp[j];           }           long min=Integer.MAX_VALUE;           long left[]=new long[n];           long right[]=new long[n];           if(arr[0]==0)               left[0]=min;           else               left[0]=arr[0];           for(int j=1;j<n;j++)           {               if(arr[j]==0)               {                   left[j]=left[j-1]+1;               }               else               {                   left[j]=Math.min(left[j-1]+1,arr[j]);               }           }           if(arr[n-1]==0)               right[n-1]=min;           else               right[n-1]=arr[n-1];           for(int j=n-2;j>=0;j--)           {               if(arr[j]==0)               {                   right[j]=right[j+1]+1;               }               else               {                   right[j]=Math.min(right[j+1]+1,arr[j]);               }           }           for(int j=0;j<n;j++)           {               arr[j]=Math.min(left[j],right[j]);               sb.append(arr[j]+"" "");           }           sb.append(""\n"");         }         System.out.println(sb);     } } ",1
944,"import java.util.*; import java.lang.*; import java.io.*; public class Armchairs { public static void main (String[] args) throws java.lang.Exception { Scanner sc = new Scanner(System.in); PrintWriter out = new PrintWriter(System.out); int n = sc.nextInt(); Vector<Integer> a = new Vector(); Vector<Integer> b = new Vector();      for (int i=0; i<n; ++i){     int input = sc.nextInt();     if(input==1) a.add(i);     else b.add(i); } n = a.size(); int m = b.size(); if(n==0) out.print(0); else{     int [][]dp = new int [n][m];     for (int i=0; i<n; ++i) for (int j=0; j<m; ++j) dp[i][j] = 25000000;     dp[0][0] = Math.abs(a.get(0) - b.get(0));     for (int i=0; i<n; ++i) for (int j=1; j<m; ++j){         if(i==0) dp[i][j] = Math.min(Math.abs(a.get(i) - b.get(j)),dp[i][j-1]);         else dp[i][j] = Math.min(Math.abs(a.get(i) - b.get(j)) + dp[i-1][j-1],dp[i][j-1]);     }     out.print(dp[n-1][m-1]); } out.close(); }                          } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
945,import java.util.*; import java.lang.*; import java.io.*; public class Codechef {                        public static void main (String[] args) throws java.lang.Exception     {          try{         FastReader sc=new FastReader();         BufferedWriter out = new BufferedWriter(             new OutputStreamWriter(System.out));         int t=sc.nextInt();         while(t-->0)         {                          int n = sc.nextInt();                          int k[] = new int[n];             for(int i=0;i<n;i++)             {                 k[i] = sc.nextInt();             }             int h[] = new int[n];             for(int i=0;i<n;i++)             {                 h[i] = sc.nextInt();             }                                   long tail = k[n-1];         long span = h[n-1];                          long ans = 0;                          for(int i=n-2;i>=0;i--)             {                 if((tail-span)+1>k[i])                 {                     ans+=(span*(span+1))/2;                     tail=k[i];                     span=h[i];                 }                 else if((tail-span)+1<=((k[i]-h[i])+1))                 {                     continue;                 }                 else                 {                     span+=(((tail-span)+1) - ((k[i]-h[i])+1));                 }             }                          ans+=(span*(span+1))/2;                          System.out.println(ans);                      }     }catch(Exception e){             return;         }     } } ,"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.util.StringTokenizer;   public class Solution {     public static void main(String[] args) { FastReader sc = new FastReader();                 int t=sc.nextInt();        while(t-->0) {        int n=sc.nextInt();        int r[]=new int[n];        int l[]=new int[n];        for(int i=0;i<n;i++) {        r[i]=sc.nextInt();        }        for(int i=0;i<n;i++) l[i]=r[i]-sc.nextInt()+1;        long ans=0,min=l[n-1],max=r[n-1];                for(int i=n-2;i>=0;i--) {        if(r[i]>=min) min=Math.min(min,l[i]);        else {        ans+=(max-min+1)*(max-min+2)/2;        max=r[i];        min=l[i];        }                }        ans+=(max-min+1)*(max-min+2)/2;        System.out.println(ans);                        } } } ",0
946,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef {  public static void main (String[] args) throws java.lang.Exception { FastReader scan = new FastReader(); PrintWriter pw = new PrintWriter(System.out);         int n = scan.nextInt();         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i=0;i<n;i++){             int x = scan.nextInt();             if(x==1)             a.add(i);             else             b.add(i);           }         int x = a.size();         if(x==0){             pw.println(0);             pw.flush();             return;         }         int y = b.size();         int dp[][] = new int[x][y];         int min = Integer.MAX_VALUE;         for(int i=0;i<y;i++){             min = Math.min(Math.abs(a.get(0) - b.get(i)),min);             dp[0][i] = min;         }         for(int i=1;i<x;i++){             min = Integer.MAX_VALUE;             for(int j=i;j<y;j++){                 min = Math.min(Math.abs(a.get(i)-b.get(j))+dp[i-1][j-1],min);                 dp[i][j] = min;             }         }         pw.println(dp[x-1][y-1]);         pw.flush(); }     } ","import java.io.*; import java.util.*; public class E { public static void main(String[] args) throws NumberFormatException, IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(br.readLine()); int cnt = n; boolean[] non = new boolean[n]; StringTokenizer st = new StringTokenizer(br.readLine()); for(int i = 0; i < n; i++) { if(Integer.parseInt(st.nextToken()) == 0) { non[i] = true; cnt--; } } int x = 0; int y = 0; int[] location = new int[cnt]; int[] rlocation = new int[n-cnt]; for(int i = 0; i < n; i++) { if(!non[i]) { location[x] = i; x++; }else{ rlocation[y] = i; y++; } } int[][] dp = new int[(n-cnt)+1][cnt+1]; Arrays.fill(dp[0], 100000000); dp[0][0] = 0; for(int i = 0; i < n-cnt; i++) { if(i < (n-cnt)) Arrays.fill(dp[i+1], 100000000); for(int j = 0; j < cnt; j++) { if(i < (n-cnt)) { dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]); dp[i+1][j+1] = Math.min(dp[i+1][j+1], dp[i][j] + Math.abs(rlocation[i] - location[j])); } } } int min = Integer.MAX_VALUE; for(int i = 0; i < (n-cnt)+1; i++) { min = Math.min(dp[i][cnt], min); } System.out.println(min); } } ",0
947,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef {  public static void main (String[] args) throws java.lang.Exception { FastReader scan = new FastReader(); PrintWriter pw = new PrintWriter(System.out);         int n = scan.nextInt();         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i=0;i<n;i++){             int x = scan.nextInt();             if(x==1)             a.add(i);             else             b.add(i);           }         int x = a.size();         if(x==0){             pw.println(0);             pw.flush();             return;         }         int y = b.size();         int dp[][] = new int[x][y];         int min = Integer.MAX_VALUE;         for(int i=0;i<y;i++){             min = Math.min(Math.abs(a.get(0) - b.get(i)),min);             dp[0][i] = min;         }         for(int i=1;i<x;i++){             min = Integer.MAX_VALUE;             for(int j=i;j<y;j++){                 min = Math.min(Math.abs(a.get(i)-b.get(j))+dp[i-1][j-1],min);                 dp[i][j] = min;             }         }         pw.println(dp[x-1][y-1]);         pw.flush(); }     } ","import java.io.*; import java.util.*; public class Main {     public static void main(String args[])     {         FastReader input=new FastReader();         PrintWriter out=new PrintWriter(System.out);         int T=1;         while(T-->0)         {             int n=input.nextInt();             int a[]=new int[n];             ArrayList<Integer> list=new ArrayList<>();             ArrayList<Integer> space=new ArrayList<>();             for(int i=0;i<n;i++)             {                 a[i]=input.nextInt();                 if(a[i]==1)                 {                     list.add(i);                 }                 else                 {                     space.add(i);                 }             }             int pre[]=new int[space.size()];             for(int i=0;i<list.size();i++)             {                 if(i==0)                 {                     int min=Integer.MAX_VALUE;                     for(int j=0;j<space.size();j++)                     {                         pre[j]=Math.abs(list.get(i)-space.get(j));                         min=Math.min(min,pre[j]);                         pre[j]=min;                     }                 }                 else                 {                     int arr[]=new int[space.size()];                     for(int j=0;j<i;j++)                     {                         arr[j]=Integer.MAX_VALUE;                     }                     int min=Integer.MAX_VALUE;                     for(int j=i;j<space.size();j++)                     {                         int v=Math.abs(list.get(i)-space.get(j));                         v+=pre[j-1];                         arr[j]=v;                         min=Math.min(min,v);                         arr[j]=min;                     }                     for(int j=0;j<space.size();j++)                     {                         pre[j]=arr[j];                     }                 }             }             out.println(pre[space.size()-1]);         }         out.close();     }      } ",0
948,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef {  public static void main (String[] args) throws java.lang.Exception { FastReader scan = new FastReader(); PrintWriter pw = new PrintWriter(System.out);         int n = scan.nextInt();         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for(int i=0;i<n;i++){             int x = scan.nextInt();             if(x==1)             a.add(i);             else             b.add(i);           }         int x = a.size();         if(x==0){             pw.println(0);             pw.flush();             return;         }         int y = b.size();         int dp[][] = new int[x][y];         int min = Integer.MAX_VALUE;         for(int i=0;i<y;i++){             min = Math.min(Math.abs(a.get(0) - b.get(i)),min);             dp[0][i] = min;         }         for(int i=1;i<x;i++){             min = Integer.MAX_VALUE;             for(int j=i;j<y;j++){                 min = Math.min(Math.abs(a.get(i)-b.get(j))+dp[i-1][j-1],min);                 dp[i][j] = min;             }         }         pw.println(dp[x-1][y-1]);         pw.flush(); }     } ","import java.util.*; public class D {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int n = scanner.nextInt();         ArrayList<Integer> occupied = new ArrayList<>();         ArrayList<Integer> vacant = new ArrayList<>();         for (int i = 0; i < n; i++) {             int x = scanner.nextInt();             if (x == 1)                 occupied.add(i);             else                 vacant.add(i);         }         Solution Solution = new Solution(occupied, vacant);         System.out.println(Solution.memoization());     } } class Solution {     ArrayList<Integer> occupied, vacant;     int x, y;     public Solution(ArrayList<Integer> occupied, ArrayList<Integer> vacant) {         this.occupied = occupied;         this.vacant = vacant;         x = occupied.size(); y = vacant.size();     }               int memoization() {         int[][] dp = new int[x][y];         for (int i = 0; i < x; i++) {             Arrays.fill(dp[i], -1);         }         return memoization(dp, x-1, y-1);     }     int memoization(int[][] dp, int n, int m) {         if(n < 0) {             return 0;         }         if(m < n) {             return Integer.MAX_VALUE;         }         if(dp[n][m] != -1) {             return dp[n][m];         }         int first = memoization(dp, n, m-1);         int second = memoization(dp, n-1, m-1) + Math.abs(occupied.get(n) - vacant.get(m));         dp[n][m] = Math.min(first, second);         return dp[n][m];     } } ",0
949,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         int sm, n;         while(t > 0) {             t--;             n = sc.nextInt();             String s1,s2;             s1 = sc.next();             s2 = sc.next();             int a[] = new int[4];             a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0;             for(int i = 0 ; i < n ; i++) {                 if(s1.charAt(i) == '0'&& s2.charAt(i) == '1') a[0]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '0') a[1]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '1') a[2]++;                 else a[3]++;             }                          int n1 = Integer.MAX_VALUE, n2 = Integer.MAX_VALUE, n3 = Integer.MAX_VALUE;                          if (a[0] == a[1]) {                 n1 = 2*a[0];             }             if((a[2] - 1) == a[3]) {                                  n2 = 2*a[3] + 1;             }              if((a[3] + 1) == a[2]) {                                  n3 = 2*a[2] + 1;             }              int ans = Math.min(n1, Math.min(n2,n3));             if(ans == Integer.MAX_VALUE) {                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         } } } ","import java.io.*; import java.util.*; public class new1{          public static int count(int[] arr, int[] dest) {     int n = arr.length;     int count = 0;     for(int i = 0; i < n; i++) {     if(arr[i] != dest[i]) count++;     }     return count;     }                public static void main(String[] args)  throws IOException{     BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out)); FastReader s = new FastReader(); int t = s.nextInt();     for(int z = 0; z < t; z++) {     int n = s.nextInt();     String str1 = s.next();     String str2 = s.next();     int count1  = 0; int count2 = 0;     for(int i = 0; i < n; i++) {     if(str1.charAt(i) == '1') count1++;     if(str2.charAt(i) == '1') count2++;     }     if(!(count1 == count2 || n - count1 + 1 == count2)) {     System.out.println(-1);     continue;     }          int[] arr = new int[n];     int[] dest = new int[n];     for(int i = 0; i < n; i++) {     arr[i] = str1.charAt(i) - '0';     dest[i] = str2.charAt(i) - '0';     }     int ans1 = count(arr, dest);     int ans2 = Integer.MAX_VALUE;     int flag = 0;     for(int i = 0; i < n; i++) {     if(flag == 0 && arr[i] == 1 && dest[i] == 1) {     flag = 1;     }     else {     arr[i] = 1 - arr[i];     }     }          if(flag == 1) {     ans2 = Math.min(ans2, count(arr, dest) + 1);     }     else {     for(int i = 0; i < n; i++) {     if(str1.charAt(i) == '1' && flag == 0) {     flag = 1; arr[i] = 1;     break;     }     }          }     if(flag == 1) ans2 = Math.min(ans2, count(arr, dest) + 1);     int ans = Integer.MAX_VALUE;     if(count1 == count2) ans = Math.min(ans, ans1);     if(n - count1 + 1 == count2) ans = Math.min(ans, ans2);     System.out.println(ans);                    }          } } ",0
950,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         int sm, n;         while(t > 0) {             t--;             n = sc.nextInt();             String s1,s2;             s1 = sc.next();             s2 = sc.next();             int a[] = new int[4];             a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0;             for(int i = 0 ; i < n ; i++) {                 if(s1.charAt(i) == '0'&& s2.charAt(i) == '1') a[0]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '0') a[1]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '1') a[2]++;                 else a[3]++;             }                          int n1 = Integer.MAX_VALUE, n2 = Integer.MAX_VALUE, n3 = Integer.MAX_VALUE;                          if (a[0] == a[1]) {                 n1 = 2*a[0];             }             if((a[2] - 1) == a[3]) {                                  n2 = 2*a[3] + 1;             }              if((a[3] + 1) == a[2]) {                                  n3 = 2*a[2] + 1;             }              int ans = Math.min(n1, Math.min(n2,n3));             if(ans == Integer.MAX_VALUE) {                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         } } } ","import java.util.*; import java.io.*; public class C {     static PrintWriter pw;     void solve(int n, char[] a, char[] b) {         int same = 0, diff = 0;         int[] sameCnt = {0, 0}, diffCnt = {0, 0};         for (int i = 0; i < n; i++) {             if (a[i] == b[i]) {                 same++;                 sameCnt[a[i] - '0']++;             } else {                 diff++;                 diffCnt[a[i] - '0']++;             }         }                  int res = Integer.MAX_VALUE;         if (same % 2 != 0 && sameCnt[1] - sameCnt[0] == 1) res = Math.min(res, same);         if (diff % 2 == 0 && diffCnt[1] == diffCnt[0]) res = Math.min(res, diff);         pr(res == Integer.MAX_VALUE ? -1 : res);     }     private void run() {                  FastScanner fs = new FastScanner();         int t = fs.nextInt();         while (t-- > 0) {             int n = fs.nextInt();             char[] a = fs.next().toCharArray(), b = fs.next().toCharArray();             solve(n, a, b);         }     }     private final String INPUT = ""input.txt"";     private final String OUTPUT = ""output.txt"";          public static void main(String[] args) {         pw = new PrintWriter(System.out);         new C().run();         pw.close();     }     void pr(int num) {         pw.println(num);     }     void pr(long num) {         pw.println(num);     }     void pr(double num) {         pw.println(num);     }     void pr(String s) {         pw.println(s);     }     void pr(char c) {         pw.println(c);     }           } ",0
951,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         int sm, n;         while(t > 0) {             t--;             n = sc.nextInt();             String s1,s2;             s1 = sc.next();             s2 = sc.next();             int a[] = new int[4];             a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0;             for(int i = 0 ; i < n ; i++) {                 if(s1.charAt(i) == '0'&& s2.charAt(i) == '1') a[0]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '0') a[1]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '1') a[2]++;                 else a[3]++;             }                          int n1 = Integer.MAX_VALUE, n2 = Integer.MAX_VALUE, n3 = Integer.MAX_VALUE;                          if (a[0] == a[1]) {                 n1 = 2*a[0];             }             if((a[2] - 1) == a[3]) {                                  n2 = 2*a[3] + 1;             }              if((a[3] + 1) == a[2]) {                                  n3 = 2*a[2] + 1;             }              int ans = Math.min(n1, Math.min(n2,n3));             if(ans == Integer.MAX_VALUE) {                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         } } } ","import java.util.Arrays; import java.util.Scanner; public class First {     static Scanner sc = new Scanner(System.in);     public static void main(String[] args) {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             String a = sc.next();             String b = sc.next();             char ch1[] = a.toCharArray();             char ch2[] = b.toCharArray();             int zz = 0;             int oz = 0;             int zo = 0;             int oo = 0;             for (int i = 0; i < n; i++) {                 if (ch1[i] == '0') {                     if (ch2[i] == '0') {                         zz += 1;                     } else {                         oz += 1;                     }                 } else {                     if (ch2[i] == '0') {                         zo += 1;                     } else {                         oo += 1;                     }                 }             }             int ans = -1;             if ((oo - zz) == 1 || zo == oz) {                 int s1 = (int) 1e7;                 int s2 = (int) 1e7;                 if ((oo - zz) == 1) {                     s1 = oo + zz;                 }                 if (zo == oz)                     s2 = zo + oz;                 ans = Math.min(s1, s2);             }             System.out.println(ans);         }     } } ",0
952,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception { Scanner sc = new Scanner(System.in); PrintWriter out = new PrintWriter(System.out); int T = sc.nextInt(); for(int t = 0; t<T; t++){     int n = sc.nextInt(), aS = sc.nextInt() - 1, bS = sc.nextInt() - 1, aDis = sc.nextInt(), bDis = sc.nextInt();     Node nodes[] = new Node[n];     for(int i = 0; i<n; i++)nodes[i] = new Node();     for(int i = 0; i<n - 1; i++){         int g = sc.nextInt() - 1, h = sc.nextInt() - 1;         nodes[g].adj.add(nodes[h]); nodes[h].adj.add(nodes[g]);     }     if(aDis * 2 >= bDis){         out.println(""Alice""); continue;     }     BFS(nodes, nodes[bS]);     if (nodes[aS].dis<=aDis) { out.println(""Alice""); continue; } Node farthest=farthest(nodes); BFS(nodes, farthest); farthest=farthest(nodes); int farDist = farthest.dis;     if(farDist <= aDis * 2)out.println(""Alice"");     else out.println(""Bob""); } out.flush(); } static Node farthest(Node[] nodes){     Node ans = nodes[0];     for(Node nn: nodes){         if(nn.dis > ans.dis)ans = nn;     }     return ans; } static void BFS(Node nodes[], Node prev){     for (Node nn:nodes) nn.dis=-1;     Queue<Node> queue = new LinkedList();     queue.add(prev);     prev.dis = 0;     while(!queue.isEmpty()){         Node par = queue.poll();         for(Node c: par.adj){             if(c.dis == -1){                 c.dis = par.dis + 1;                 queue.add(c);             }         }     } } static class Node{     List<Node> adj = new ArrayList();     int dis = -1; } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayDeque; import java.util.Arrays; import java.util.HashMap; import java.util.LinkedList; import java.util.StringTokenizer; public class Solution{ public static void main(String[] args) throws Exception{ FastScanner fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int tt = fs.nextInt(); while(tt-->0) { int n = fs.nextInt(), aStart = fs.nextInt()-1, bStart = fs.nextInt()-1, aMove = fs.nextInt(), bMove = fs.nextInt(); Node[] nodes = new Node[n]; for(int i=0;i<n;i++) { nodes[i] = new Node(); } for(int i=0;i<n-1;i++) { int u = fs.nextInt()-1, v = fs.nextInt()-1; nodes[u].adjList.add(nodes[v]); nodes[v].adjList.add(nodes[u]); } if(2*aMove>=bMove) { out.println(""Alice""); continue; } bfs(nodes,nodes[aStart]); if(nodes[bStart].dis<=aMove) { out.println(""Alice""); continue; } Node fNode = farthest(nodes); bfs(nodes, fNode); fNode = farthest(nodes); if(fNode.dis>=2*aMove+1) { out.println(""Bob""); } else { out.println(""Alice""); } } out.close(); } static Node farthest(Node[] nodes) { Node fNode = nodes[0]; for(Node n: nodes) { if(n.dis>fNode.dis) { fNode = n; } } return fNode; } static void bfs(Node[] nodes, Node start) { for(Node n: nodes) n.dis = -1; start.dis = 0; ArrayDeque<Node> queue = new ArrayDeque<Node>(); queue.add(start); while(!queue.isEmpty()) { Node n = queue.remove(); for(Node node: n.adjList) { if(node.dis==-1) { node.dis = n.dis + 1; queue.add(node); } } } } static class Node{ LinkedList<Node> adjList = new LinkedList<Node>(); int dis = -1; } } ",1
953,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while(t-- > 0) {     int n = sc.nextInt();     sc.nextLine();     int a[][] = new int[26][26];     int b[][][] = new int[26][26][26];          boolean bl = false;     String arr[] = new String[n];     for(int i = 0 ; i < n ; i++)     {         arr[i] = sc.nextLine();                  if(arr[i].length() == 1)         {             bl = true;         }                  else if(arr[i].length() == 2)         {                          if(arr[i].charAt(0)==arr[i].charAt(1))             bl = true;         }                  else         {                        if(arr[i].charAt(0) == arr[i].charAt(2))            bl = true;         }     }          if(bl)     System.out.println(""YES"");          else     {         for(int i = 0; i < n ; i++)         {             if(arr[i].length() == 2)             {                 int p1 = arr[i].charAt(0)-'a';                 int p2 = arr[i].charAt(1)-'a';                                  if(a[p2][p1] == 1)                 bl = true;                                  for(int j = 0;  j < 26 ; j++)                 {                     if(b[p2][p1][j] == 1)                     bl = true;                 }                 a[p1][p2] = 1;             }                          else             {                  int p1 = arr[i].charAt(0)-'a';                 int p2 = arr[i].charAt(1)-'a';                 int p3 = arr[i].charAt(2)-'a';                                  if(a[p3][p2] == 1)                 bl = true;                                  if(b[p3][p2][p1] == 1)                 bl = true;                                  b[p1][p2][p3] = 1;             }         }         if(bl)         System.out.println(""YES"");                  else         System.out.println(""NO"");     } } } } ","import java.io.*; import java.util.*; public class Ishu {     static Scanner scan = new Scanner(System.in);     static BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));      static void tc() throws Exception     {     int n = scan.nextInt();     String[] str = new String[n];     int i, j;          for(i=0;i<n;++i)         str[i] = scan.next();              String ans = ""NO"";     for(i=0;i<n;++i)         {         String cur = str[i];         int len = cur.length();         if(cur.charAt(0) == cur.charAt(len - 1))             {             output.write(""YES\n"");             output.flush();             return;             }         }              Map<String, Integer> map = new HashMap<String, Integer>();     Map<String, Integer> par = new HashMap<String, Integer>();          for(i=0;i<n;++i)        {        String cur = str[i];        int len = cur.length();        if(len == 2)             {             if(!map.containsKey(cur))                 map.put(cur, 0);                              int value = map.get(cur);             ++value;             map.remove(cur);             map.put(cur, value);             }        else              {             String pre = cur.substring(0, 2);             if(!par.containsKey(pre))                 par.put(pre, 0);             int value = par.get(pre);             ++value;             par.remove(pre);             par.put(pre, value);                          if(!map.containsKey(cur))                 map.put(cur, 0);             value = map.get(cur);             ++value;             map.remove(cur);             map.put(cur, value);             }             }             for(i=n-1;i>=0;--i)         {         String cur = str[i];         int len = cur.length();         if(len == 2)             {             int value = map.get(cur);             --value;             map.remove(cur);             if(value > 0)                 map.put(cur, value);             }         else             {             String pre = cur.substring(0, 2);             int value = par.get(pre);             --value;             par.remove(pre);             if(value > 0)                 par.put(pre, value);                              value = map.get(cur);             --value;             map.remove(cur);             if(value > 0)                 map.put(cur, value);             }                      if(len == 2)             {             StringBuffer buffer = new StringBuffer(cur);             buffer.reverse();             String rev = String.valueOf(buffer);                          if(map.containsKey(rev) || par.containsKey(rev))                 {                 ans = ""YES"";                 break;                 }                 }         else             {             String suf = cur.substring(1, 3);             StringBuffer buffer = new StringBuffer(suf);             buffer.reverse();             String rev = String.valueOf(buffer);                          if(map.containsKey(rev))                 {                 ans = ""YES"";                 break;                 }                          buffer = new StringBuffer(cur);             buffer.reverse();             rev = String.valueOf(buffer);                          if(map.containsKey(rev))                 {                 ans = ""YES"";                 break;                 }             }         }              output.write(ans + ""\n"");     output.flush();     }          public static void main(String[] args) throws Exception     {     int t = 1;     t = scan.nextInt();     while(t-- > 0)         tc();     } } ",0
954,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while(t-- > 0) {     int n = sc.nextInt();     sc.nextLine();     int a[][] = new int[26][26];     int b[][][] = new int[26][26][26];          boolean bl = false;     String arr[] = new String[n];     for(int i = 0 ; i < n ; i++)     {         arr[i] = sc.nextLine();                  if(arr[i].length() == 1)         {             bl = true;         }                  else if(arr[i].length() == 2)         {                          if(arr[i].charAt(0)==arr[i].charAt(1))             bl = true;         }                  else         {                        if(arr[i].charAt(0) == arr[i].charAt(2))            bl = true;         }     }          if(bl)     System.out.println(""YES"");          else     {         for(int i = 0; i < n ; i++)         {             if(arr[i].length() == 2)             {                 int p1 = arr[i].charAt(0)-'a';                 int p2 = arr[i].charAt(1)-'a';                                  if(a[p2][p1] == 1)                 bl = true;                                  for(int j = 0;  j < 26 ; j++)                 {                     if(b[p2][p1][j] == 1)                     bl = true;                 }                 a[p1][p2] = 1;             }                          else             {                  int p1 = arr[i].charAt(0)-'a';                 int p2 = arr[i].charAt(1)-'a';                 int p3 = arr[i].charAt(2)-'a';                                  if(a[p3][p2] == 1)                 bl = true;                                  if(b[p3][p2][p1] == 1)                 bl = true;                                  b[p1][p2][p3] = 1;             }         }         if(bl)         System.out.println(""YES"");                  else         System.out.println(""NO"");     } } } } ","import java.io.*; import java.util.*; public class new1{           public static void main(String[] args)  throws IOException{ BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out)); FastReader s = new FastReader(); int t = s.nextInt(); for(int z = 0; z < t; z++) { int n = s.nextInt(); Set<String> st = new HashSet<String>(); String[] arr = new String[n]; boolean pos = false; for(int i = 0; i < n; i++) { String str = s.next(); st.add(str); arr[i] = str; if(str.length() == 1) pos = true; } if(pos) { System.out.println(""YES""); continue; } for(int i = 0; i < n; i++) { String str = arr[i]; st.remove(str); if(str.charAt(0) == str.charAt(str.length() - 1)) pos = true; if(str.length() == 3) { String str1 = Character.toString(str.charAt(1)) + Character.toString(str.charAt(0)); if(st.contains(str1)) pos = true; String str2 = Character.toString(str.charAt(2)) + str1; if(st.contains(str2)) pos = true; } else { String str1 = Character.toString(str.charAt(1)) + Character.toString(str.charAt(0)); if(st.contains(str1)) pos = true;; for(int j = 0; j < 26; j++) { char ch = (char) ((int)'a' + j); String str2 = Character.toString(ch) + str1; if(st.contains(str2)) pos = true;; } } } if(pos) System.out.println(""YES""); else System.out.println(""NO""); }   } }   ",0
955,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { static long fans[] = new long[200001]; static long inv[] = new long[200001]; static long mod = 1000000007; public static void main(String[] args) throws java.lang.Exception { FastReader in = new FastReader(System.in); StringBuilder sb = new StringBuilder(); int t = 1; t = in.nextInt(); while (t > 0) { --t; int n = in.nextInt(); long time[] = generateArray(in, n); long hp[] = generateArray(in, n); int s = 0; long ans = 0; while(s<time.length) { long l = time[s] - hp[s]; long r = time[s]; for(int i = s+1;i<n;i++) { if(time[i]-hp[i]<=l) { l = time[i]-hp[i]; r = time[i]; } else if(time[i]-hp[i]<r) { r = time[i]; } } while(s<n && time[s]>=l && time[s]<=r) { ++s; } long temp = r - l; ans += (temp*(temp+1))/2; } sb.append(ans+""\n""); } System.out.print(sb); } static long[] generateArray(FastReader in, int n) throws IOException { long arr[] = new long[n]; for (int i = 0; i < n; i++) arr[i] = in.nextLong(); return arr; } } ",import java.io.*; import java.util.*; public class c {     public static void main(String[] args) throws Exception {         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));         PrintWriter out = new PrintWriter(System.out);         int numcases = Integer.parseInt(in.readLine());         for(int casenum = 0; casenum < numcases; casenum++){             int n = Integer.parseInt(in.readLine());             long[] t = new long[n];             long[] h = new long[n];             StringTokenizer tokenizer = new StringTokenizer(in.readLine());             for(int i = 0; i < n; i++){                 t[i] = Integer.parseInt(tokenizer.nextToken());             }             tokenizer = new StringTokenizer(in.readLine());             for(int i = 0; i < n; i++){                 h[i] = Integer.parseInt(tokenizer.nextToken());             }             long mana = 0;             int index = 0;             while(index < n){                 long start = t[index] - h[index];                 long end = t[index];                 for(int i = index+1; i < n; i++){                     if(t[i] - h[i] < start){                         start = t[i] - h[i];                         end = t[i];                         index = i;                     }                     else if(t[i] - end < h[i]){                         end = t[i];                         index = i;                     }                 }                 mana += (end - start + 1) * (end - start) / 2;                 index++;             }             System.out.println(mana);         }         in.close();         out.close();     } } ,0
956,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { static long fans[] = new long[200001]; static long inv[] = new long[200001]; static long mod = 1000000007; public static void main(String[] args) throws java.lang.Exception { FastReader in = new FastReader(System.in); StringBuilder sb = new StringBuilder(); int t = 1; t = in.nextInt(); while (t > 0) { --t; int n = in.nextInt(); long time[] = generateArray(in, n); long hp[] = generateArray(in, n); int s = 0; long ans = 0; while(s<time.length) { long l = time[s] - hp[s]; long r = time[s]; for(int i = s+1;i<n;i++) { if(time[i]-hp[i]<=l) { l = time[i]-hp[i]; r = time[i]; } else if(time[i]-hp[i]<r) { r = time[i]; } } while(s<n && time[s]>=l && time[s]<=r) { ++s; } long temp = r - l; ans += (temp*(temp+1))/2; } sb.append(ans+""\n""); } System.out.print(sb); } static long[] generateArray(FastReader in, int n) throws IOException { long arr[] = new long[n]; for (int i = 0; i < n; i++) arr[i] = in.nextLong(); return arr; } } ","import java.io.*; import java.util.Arrays; import java.util.StringTokenizer; public class C_MonstersAndSpells_1700 {     public static void main(String[] args) {         MyScanner sc = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));         int t = sc.nextInt();         while(t-->0) {             int n = sc.nextInt();             int[] times = new int[n];             int[] health = new int[n];             for(int i = 0; i < n; i++) {                 times[i] = sc.nextInt();             }             for(int i = 0; i < n; i++) {                 health[i] = sc.nextInt();             }             Point[] points = new Point[n];             for(int i = 0; i < n; i++) {                 points[i] = new Point(times[i]-health[i], times[i]);             }             Arrays.sort(points);             long ans = 0;             for(int i = 0; i < n; i++) {                 int j = i+1;                 int latestTime = points[i].time;                 while(j < n && points[j].startBy < latestTime) {                     latestTime = Math.max(latestTime, times[j]);                     j++;                 }                 long length = latestTime-points[i].startBy;                 ans += (length*(length + 1))/2;                 i = j - 1;             }             System.out.println(ans);         }         out.close();     }     static class Point implements Comparable<Point> {         Integer startBy;         Integer time;         Point(int startBy, int time) {             this.startBy = startBy;             this.time = time;         }              }     public static PrintWriter out;           } ",0
957,"import java.util.*; import java.lang.*; import java.io.*; public class Codechef { static long fans[] = new long[200001]; static long inv[] = new long[200001]; static long mod = 1000000007; public static void main(String[] args) throws java.lang.Exception { FastReader in = new FastReader(System.in); StringBuilder sb = new StringBuilder(); int t = 1; t = in.nextInt(); while (t > 0) { --t; int n = in.nextInt(); long time[] = generateArray(in, n); long hp[] = generateArray(in, n); int s = 0; long ans = 0; while(s<time.length) { long l = time[s] - hp[s]; long r = time[s]; for(int i = s+1;i<n;i++) { if(time[i]-hp[i]<=l) { l = time[i]-hp[i]; r = time[i]; } else if(time[i]-hp[i]<r) { r = time[i]; } } while(s<n && time[s]>=l && time[s]<=r) { ++s; } long temp = r - l; ans += (temp*(temp+1))/2; } sb.append(ans+""\n""); } System.out.print(sb); } static long[] generateArray(FastReader in, int n) throws IOException { long arr[] = new long[n]; for (int i = 0; i < n; i++) arr[i] = in.nextLong(); return arr; } } ","import java.io.IOException; import java.io.InputStream; import java.util.Arrays; import java.util.InputMismatchException; public class Main {    static InputReader sc=new InputReader(System.in);    public static void main(String[] args) {              int t=sc.nextInt();       while(t-->0){          solve();       }    }    private static void solve() {       int n=sc.nextInt();       Node left[]=new Node[n];       int index=0;       Node ini[]=new Node[n];       int tmp[]=new int[n];       for(int i=0;i<n;i++){          tmp[i]=sc.nextInt();       }       for(int i=0;i<n;i++){          ini[i]=new Node(tmp[i],tmp[i]-sc.nextInt()+1);       }       Arrays.sort(ini);       left[0]=ini[0];       for(int i=1;i<n;i++){                    if(ini[i].s<=left[index].k&&ini[i].k>left[index].k){             left[index].k=ini[i].k;          }else if(ini[i].s>left[index].k){             index++;             left[index]=ini[i];          }       }       long ans=0;       for(int i=0;i<=index;i++){                    ans+=(long)(left[i].k-left[i].s+2)*(left[i].k-left[i].s+1)/2;       }       System.out.println(ans);    } } class Node implements Comparable<Node>{    int k,s;    Node(int k,int s){       this.s=s;       this.k=k;    }     } ",0
958,"import java.util.*; import java.lang.*; import java.io.*; public class Codeforces { public static void main (String[] args) throws java.lang.Exception { FastReader sc=new FastReader(); int n=sc.nextInt(); int a[]=new int[n]; ArrayList<Integer> arr0=new ArrayList<>(); ArrayList<Integer> arr1=new ArrayList<>(); for(int i=0;i<n;i++) {     a[i]=sc.nextInt();     if(a[i]==0)     arr0.add(i);     else     arr1.add(i); } n=arr0.size(); int m=arr1.size(); int dp[][]=new int[m+1][n+1]; for(int i=0;i<=n;i++) {     dp[0][i]=0; } for(int i=1;i<=m;i++) {     dp[i][i]=dp[i-1][i-1]+Math.abs(arr0.get(i-1)-arr1.get(i-1));     for(int j=i+1;j<=n;j++)     {         dp[i][j]=Math.min(dp[i-1][j-1]+Math.abs(arr0.get(j-1)-arr1.get(i-1)),dp[i][j-1]);     } } System.out.println(dp[m][n]); } } ","import java.io.*; import java.util.*; public class ArmChairs {          public static int solution(int n, int[] arr) {         ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }         int[][] dp = new int[one.size() + 1][zero.size() + 1];         for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }         return dp[one.size()][zero.size()];     }     public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));         int n = Integer.parseInt(br.readLine());         String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }          log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              } } ",1
959,"import java.util.*; import java.lang.*; import java.io.*; public class Codeforces { public static void main (String[] args) throws java.lang.Exception { FastReader sc=new FastReader(); int n=sc.nextInt(); int a[]=new int[n]; ArrayList<Integer> arr0=new ArrayList<>(); ArrayList<Integer> arr1=new ArrayList<>(); for(int i=0;i<n;i++) {     a[i]=sc.nextInt();     if(a[i]==0)     arr0.add(i);     else     arr1.add(i); } n=arr0.size(); int m=arr1.size(); int dp[][]=new int[m+1][n+1]; for(int i=0;i<=n;i++) {     dp[0][i]=0; } for(int i=1;i<=m;i++) {     dp[i][i]=dp[i-1][i-1]+Math.abs(arr0.get(i-1)-arr1.get(i-1));     for(int j=i+1;j<=n;j++)     {         dp[i][j]=Math.min(dp[i-1][j-1]+Math.abs(arr0.get(j-1)-arr1.get(i-1)),dp[i][j-1]);     } } System.out.println(dp[m][n]); } } ","import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Scanner; public class D {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = 1;         for (int i = 0; i < t; i++) {             solve(sc, pw);         }         pw.close();     }     static void solve(Scanner in, PrintWriter out){         int n = in.nextInt();         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = in.nextInt();         }         int[] pre = new int[n + 1];         List<Integer> z = new ArrayList<>();         List<Integer> o = new ArrayList<>();         int cnt = 0;         for (int i = 0; i < n; i++) {             if (arr[i] == 0) {                 cnt++;                 z.add(i);             }else{                 o.add(i);             }         }         int[][] dp = new int[cnt + 1][(n - cnt) + 1];         int one = n - cnt;         Arrays.fill(dp[0], 100000000);         dp[0][0] = 0;         int min = 100000000;         for (int i = 1; i <= cnt; i++) {             Arrays.fill(dp[i], 100000000);             dp[i][0] = 0;             for (int j = 1; j <= Math.min(one, i); j++) {                 if (cnt - i < one - j){                     dp[i][j] = 100000000;                 }else{                     dp[i][j] = Math.min(dp[i - 1][j - 1] + Math.abs(o.get(j - 1) - z.get(i - 1)), dp[i - 1][j]);                 }                 if (j == one){                     min = Math.min(min, dp[i][j]);                 }             }         }         min = Math.min(min, dp[0][n - cnt]);         out.println(min);     }                                                   } ",0
960,"import java.util.*; import java.lang.*; import java.io.*; public class D753 {     public static void main(String[] args) throws java.lang.Exception {                  try {                          FastReader sc = new FastReader();             int t = sc.nextInt();             while (t-- > 0) {                 int n=sc.nextInt();                 int[] arr=new int[n];                 for(int i=0;i<n;i++){                     arr[i]=sc.nextInt();                 }                                  char[] color=sc.next().toCharArray();                 ArrayList<Integer> b=new ArrayList<>();                 ArrayList<Integer> r=new ArrayList<>();                 for(int i=0;i<n;i++){                     if(color[i]=='B')b.add(arr[i]);                     else r.add(arr[i]);                 }                 Collections.sort(b);                 Collections.sort(r);                 boolean ok=true;                 int cur=1;                 for(int i:b){                     if(i>=cur)cur++;                     else{                         ok=false;                         break;                     }                                      }                 for(int i:r){                     if(i<=cur)cur++;                     else{                         ok=false;                         break;                     }                 }                 if(ok)System.out.println(""YES"");                 else System.out.println(""NO"");             }         } catch (Exception e) {             return;         }     }                                                        } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Codeforces {     public static void main(String[] args) {         FastReader fastReader = new FastReader();         int t = fastReader.nextInt();         while (t-- > 0) {             int n = fastReader.nextInt();             int a[] = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = fastReader.nextInt();             }             ArrayList<Integer> b = new ArrayList<>();             ArrayList<Integer> r = new ArrayList<>();             char c[] = fastReader.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (c[i] == 'B') {                     b.add(a[i]);                 } else {                     r.add(a[i]);                 }             }             Collections.sort(b);             Collections.sort(r);             int sizeb = b.size();             boolean isValid = true;             for (int i = 1 , j = 0; i <=sizeb; i++ , j++){                 if (b.get(j) <  i){                     isValid =false;                 }             }             for (int i = sizeb+1 , j = 0; i <=n && j < r.size(); i++ , j++){                 if (r.get(j) >  i){                     isValid =false;                 }             }             if (isValid){                 System.out.println(""YES"");             }else{                 System.out.println(""NO"");             }         }     }      } ",0
961,"import java.util.*; import java.lang.*; import java.io.*; public class E { public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); br.readLine(); StringBuilder sb = new StringBuilder(); while (t-- > 0) { String[] scn = (br.readLine()).trim().split("" ""); int n = Integer.parseInt(scn[0]); int m = Integer.parseInt(scn[1]); long[] land = new long[n + 1]; scn = (br.readLine()).trim().split("" ""); String[] scn1 = (br.readLine()).trim().split("" ""); for (int i = 0; i < m; i++) { int idx = (int) Long.parseLong(scn[i]); long temp = Long.parseLong(scn1[i]); land[idx] = temp; } long[] ans = new long[n + 1]; long min = (long) (1e15); for (int i = 1; i <= n; i++) { if (land[i] != 0) { min = Math.min(min, land[i]); } ans[i] = min; min += 1; } min = (long) (1e15); for (int i = n; i >= 1; i--) { if (land[i] != 0) { min = Math.min(min, land[i]); } ans[i] = Math.min(min, ans[i]); min += 1; } for (int i = 1; i <= n; i++) { sb.append(ans[i] + "" ""); } sb.append(""\n""); if (t != 0) { br.readLine(); } } System.out.println(sb); return; } } ","import java.util.*; import java.lang.*; import java.io.*; public class E { public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); br.readLine(); StringBuilder sb = new StringBuilder(); while (t-- > 0) { String[] scn = (br.readLine()).trim().split("" ""); int n = Integer.parseInt(scn[0]); int m = Integer.parseInt(scn[1]); long[] land = new long[n + 1]; scn = (br.readLine()).trim().split("" ""); String[] scn1 = (br.readLine()).trim().split("" ""); for (int i = 0; i < m; i++) { int idx = (int) Long.parseLong(scn[i]); long temp = Long.parseLong(scn1[i]); land[idx] = temp; } long[] ans = new long[n + 1]; long min = (long) (1e15); for (int i = 1; i <= n; i++) { if (land[i] != 0) { min = Math.min(min, land[i]); } ans[i] = min; min += 1; } min = (long) (1e15); for (int i = n; i >= 1; i--) { if (land[i] != 0) { min = Math.min(min, land[i]); } ans[i] = Math.min(min, ans[i]); min += 1; } for (int i = 1; i <= n; i++) { sb.append(ans[i] + "" ""); } sb.append(""\n""); if (t != 0) { br.readLine(); } } System.out.println(sb); return; } } ",1
962,"import java.util.*; import java.lang.*; import java.io.*; public class Ideone { public static void main (String[] args) throws java.lang.Exception { Scanner scn = new Scanner(System.in); int t = scn.nextInt(); while(t>0){ int n = scn.nextInt(); String a = scn.next(); String b = scn.next(); int ob=0,oa=0,za=0; for(int i=0;i<a.length();i++){ if(a.charAt(i)=='1'){ oa++; }else{ za++; } } for(int i=0;i<b.length();i++){ if(b.charAt(i)=='1'){ ob++; } } int min = Integer.MAX_VALUE; if(ob==oa){ int op=0; for(int i=0;i<a.length();i++){ if(a.charAt(i)!=b.charAt(i)){ op++; } } min = Math.min(min,op); } if(ob==za+1){ int op=0; for(int i=0;i<n;i++){ if(a.charAt(i)==b.charAt(i)){ op++; } } min = Math.min(min,op); } if(min!=Integer.MAX_VALUE){ System.out.println(min); }else{ System.out.println(-1); } t--; } } } ","import java.util.*; import java.io.*; import java.math.*; public class Coder {   static int n;   static char a[];   static char b[];   static StringBuffer str=new StringBuffer();   static void solve(){     boolean flag=true;     for(int i=0;i<n;i++) if(a[i]!=b[i]) flag=false;     if(flag){str.append(""0\n""); return;}     int tot=0;     int tot1=0;     for(int i=0;i<n;i++) if(a[i]=='1') tot++;     for(int i=0;i<n;i++) if(b[i]=='1') tot1++;     if(tot==0){       if(tot1!=0) str.append(""-1\n"");       else str.append(""0\n"");     }else{       int x=tot-1;       int ul=n-tot;       if(tot!=tot1 && (ul+1)!=tot1) str.append(""-1\n"");       else{         int same=0, nsame=0;         int zs, os;         int zd, od;         zs=os=zd=od=0;         for(int i=0;i<n;i++){           if(a[i]==b[i]){             same++;             if(a[i]=='0') zs++;             else os++;           }           else{             nsame++;             if(a[i]=='0') zd++;             else od++;           }         }                                                      if(same==1 && nsame==n-1 && os==1) str.append(""1\n"");         else if(zd==od && od>0 && os>0 && os-zs==1) str.append(Math.min(nsame, same)).append(""\n"");         else if(zd==od && od>0) str.append(nsame).append(""\n"");         else if(os>0 && os-zs==1) str.append(same).append(""\n"");         else str.append(""-1\n"");       }     }    }   public static void main(String[] args) throws java.lang.Exception {     BufferedReader bf;     PrintWriter pw;     boolean lenv=false;     if(lenv){       bf = new BufferedReader(                           new FileReader(""input.txt""));       pw=new PrintWriter(new             BufferedWriter(new FileWriter(""output.txt"")));     }else{       bf = new BufferedReader(new InputStreamReader(System.in));       pw = new PrintWriter(new OutputStreamWriter(System.out));     }          int t = Integer.parseInt(bf.readLine().trim());     while (t-- > 0) {       String st[]=bf.readLine().trim().split(""\\s+"");       n=Integer.parseInt(st[0]);       a=bf.readLine().trim().toCharArray();       b=bf.readLine().trim().toCharArray();       solve();     }     pw.println(str);     pw.flush();        } } ",0
963,"import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);     static int mod=10000007;    static StringBuilder sb=new StringBuilder();             public static void main(String [] args)     {             int t = i();             while(t-->0)             {                 int n = i();                 int a[] = input(n);                 char c[] = inputC();                 ArrayList<Integer> b = new ArrayList<>();                 ArrayList<Integer> r = new ArrayList<>();                 for(int i=0;i<n;i++)                 {                     if(c[i]=='R')                     r.add(a[i]);                     else                      b.add(a[i]);                 }                 Collections.sort(b);                 Collections.sort(r,Collections.reverseOrder());                 boolean is = true;                 int cnt = 1;                 for(int i=0;i<b.size();i++)                 {                     if(b.get(i)<cnt)                     {                         is = false;                         break;                     }                     cnt++;                 }                 for(int i=0;i<r.size();i++)                 {                     if(r.get(i)>n-i)                     {                         is = false;                         break;                     }                 }                 out.println(is==true?""YES"":""NO"");             }             out.close();     }                          static int i() {         return sc.nextInt();     }     static String s() {         return sc.next();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }     static int[] input(int n) {         int A[]=new int[n];            for(int i=0;i<n;i++) {                A[i]=sc.nextInt();            }         return A;     }                                                                                                                                                                               } ","import java.io.*; import java.util.*; public class Main {          public static void main(String[] args) {         FastReader obj = new FastReader();         PrintWriter out = new PrintWriter(System.out);         int l = obj.nextInt();         while (l-- != 0) {             int n = obj.nextInt();             int[] num = new int[n];             for (int i = 0; i < n; i++) num[i] = obj.nextInt();             Vector<Integer> red = new Vector<>();             Vector<Integer> blue = new Vector<>();             String s = obj.next();             for (int i = 0; i < s.length(); i++) {                 if (s.charAt(i) == 'R') red.add(num[i]);                 else blue.add(num[i]);             }             Collections.sort(blue);             Collections.sort(red);             int c = 1, f = 0;             for (int i = 0; i < blue.size(); i++) {                 if (blue.get(i) < c) {                     f = 1;                     break;                 }                 c++;             }             for (int i = 0; i < red.size(); i++) {                 if (red.get(i) > c) {                     f = 1;                     break;                 }                 c++;             }             if (f == 0) out.println(""YES"");             else out.println(""NO"");         }         out.flush();     } } ",1
964,"import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);     static int mod=10000007;    static StringBuilder sb=new StringBuilder();             public static void main(String [] args)     {             int t = i();             while(t-->0)             {                 int n = i();                 int a[] = input(n);                 char c[] = inputC();                 ArrayList<Integer> b = new ArrayList<>();                 ArrayList<Integer> r = new ArrayList<>();                 for(int i=0;i<n;i++)                 {                     if(c[i]=='R')                     r.add(a[i]);                     else                      b.add(a[i]);                 }                 Collections.sort(b);                 Collections.sort(r,Collections.reverseOrder());                 boolean is = true;                 int cnt = 1;                 for(int i=0;i<b.size();i++)                 {                     if(b.get(i)<cnt)                     {                         is = false;                         break;                     }                     cnt++;                 }                 for(int i=0;i<r.size();i++)                 {                     if(r.get(i)>n-i)                     {                         is = false;                         break;                     }                 }                 out.println(is==true?""YES"":""NO"");             }             out.close();     }                          static int i() {         return sc.nextInt();     }     static String s() {         return sc.next();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }     static int[] input(int n) {         int A[]=new int[n];            for(int i=0;i<n;i++) {                A[i]=sc.nextInt();            }         return A;     }                                                                                                                                                                               } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.StringTokenizer; public class PC3C { static PrintWriter out = new PrintWriter(System.out); static MyFastReaderPC3C in = new MyFastReaderPC3C(); static long mod = (long) (1e9 + 7); public static void main(String[] args) throws Exception { int test = i(); while (test-- > 0) {                int n=i();              int[] arr=arrI(n);              String s=string();                            ArrayList<Integer> lR=new ArrayList<>();              ArrayList<Integer> lB=new ArrayList<>();              for(int i=0;i<n;i++) {                          if(s.charAt(i)=='R') lR.add(arr[i]);             else lB.add(arr[i]);                            }                                          Collections.sort(lB);              Collections.sort(lR,Collections.reverseOrder());                                          int k=1;              boolean st=true;              for(int i=0;i<lB.size();i++) {                            if(lB.get(i)>=k) {             k+=1;               }              else {             st=false;             break;              }                            }              boolean st2=true;                k=n;                for(int i=0;i<lR.size();i++) {                            if(lR.get(i)>k) {                st2=false;                break;              }              else {             k-=1;               }                            }                                if(st && st2) out.print(""YES"");                else out.print(""NO"");                             out.print(""\n""); out.flush(); } out.close(); } static void sort(long[] a)  { ArrayList<Long> l = new ArrayList<>(); for (long i : a) l.add(i); Collections.sort(l); for (int i = 0; i < a.length; i++) a[i] = l.get(i); } static void sort(int[] a) { ArrayList<Integer> l = new ArrayList<>(); for (int i : a) l.add(i); Collections.sort(l); for (int i = 0; i < a.length; i++) a[i] = l.get(i); } static void print(char A[]) { for (char c : A) System.out.print(c + "" ""); System.out.println(); } static void print(boolean A[]) { for (boolean c : A) System.out.print(c + "" ""); System.out.println(); } static void print(int A[]) { for (int a : A) System.out.print(a + "" ""); System.out.println(); } static void print(long A[]) { for (long i : A) System.out.print(i + "" ""); System.out.println(); } static void print(ArrayList<Integer> A) { for (int a : A) System.out.print(a + "" ""); System.out.println(); } public static Map<Character, Integer> mapSortByValue(Map<Character, Integer> hm) { List<Map.Entry<Character, Integer>> list = new LinkedList<Map.Entry<Character, Integer>>(hm.entrySet()); Collections.sort(list, new Comparator<Map.Entry<Character, Integer>>() { }); Map<Character, Integer> temp = new LinkedHashMap<Character, Integer>(); for (Map.Entry<Character, Integer> aa : list) { temp.put(aa.getKey(), aa.getValue()); } return temp; } static String string() { return in.nextLine(); } static int i() { return in.nextInt(); } static long l() { return in.nextLong(); } static int[] arrI(int N) { int A[] = new int[N]; for (int i = 0; i < N; i++) { A[i] = in.nextInt(); } return A; } } ",0
965,"import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);     static int mod=10000007;    static StringBuilder sb=new StringBuilder();             public static void main(String [] args)     {             int t = i();             while(t-->0)             {                 int n = i();                 int a[] = input(n);                 char c[] = inputC();                 ArrayList<Integer> b = new ArrayList<>();                 ArrayList<Integer> r = new ArrayList<>();                 for(int i=0;i<n;i++)                 {                     if(c[i]=='R')                     r.add(a[i]);                     else                      b.add(a[i]);                 }                 Collections.sort(b);                 Collections.sort(r,Collections.reverseOrder());                 boolean is = true;                 int cnt = 1;                 for(int i=0;i<b.size();i++)                 {                     if(b.get(i)<cnt)                     {                         is = false;                         break;                     }                     cnt++;                 }                 for(int i=0;i<r.size();i++)                 {                     if(r.get(i)>n-i)                     {                         is = false;                         break;                     }                 }                 out.println(is==true?""YES"":""NO"");             }             out.close();     }                          static int i() {         return sc.nextInt();     }     static String s() {         return sc.next();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }     static int[] input(int n) {         int A[]=new int[n];            for(int i=0;i<n;i++) {                A[i]=sc.nextInt();            }         return A;     }                                                                                                                                                                               } ","import java.util.*; public class Soltion{        public static void main(String []args){         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                  while(t-->0){             int n = sc.nextInt();             Integer[] arr = new Integer[n];             for(int i=0;i<n;i++){                 arr[i] = sc.nextInt();             }             String s = sc.next();                          List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();                          for(int i=0;i<s.length();i++){                 if(s.charAt(i)=='B'){                     blue.add(arr[i]);                 }                 else{                     red.add(arr[i]);                 }             }                          Collections.sort(blue);             Collections.sort(red);             int p=1,q=n;                          boolean flag = true;             for(int i=red.size()-1;i>=0;i--){                 if(red.get(i)>q){                     flag = false;                     break;                 }                 q--;             }                          for(int i=0;i<blue.size();i++){                 if(blue.get(i)<p){                     flag = false;                     break;                 }                 p++;             }                          System.out.println(flag? ""Yes"" : ""No"");         }      } } ",1
966,"import java.util.*; import java.lang.*; import java.io.*; public class Main   {     static FastReader sc =new FastReader();     static PrintWriter out=new PrintWriter(System.out);     static int mod=10000007;    static StringBuilder sb=new StringBuilder();             public static void main(String [] args)     {             int t = i();             while(t-->0)             {                 int n = i();                 int a[] = input(n);                 char c[] = inputC();                 ArrayList<Integer> b = new ArrayList<>();                 ArrayList<Integer> r = new ArrayList<>();                 for(int i=0;i<n;i++)                 {                     if(c[i]=='R')                     r.add(a[i]);                     else                      b.add(a[i]);                 }                 Collections.sort(b);                 Collections.sort(r,Collections.reverseOrder());                 boolean is = true;                 int cnt = 1;                 for(int i=0;i<b.size();i++)                 {                     if(b.get(i)<cnt)                     {                         is = false;                         break;                     }                     cnt++;                 }                 for(int i=0;i<r.size();i++)                 {                     if(r.get(i)>n-i)                     {                         is = false;                         break;                     }                 }                 out.println(is==true?""YES"":""NO"");             }             out.close();     }                          static int i() {         return sc.nextInt();     }     static String s() {         return sc.next();     }          static char[] inputC()     {         String s = sc.nextLine();         return s.toCharArray();     }     static int[] input(int n) {         int A[]=new int[n];            for(int i=0;i<n;i++) {                A[i]=sc.nextInt();            }         return A;     }                                                                                                                                                                               } ","import java.util.*; public class Solution{     public static void main(String[] args){     Scanner sc=new Scanner(System.in);     int t=sc.nextInt();     while(t-->0) {         int n=sc.nextInt();         int[] a=new int[n];         for(int i=0;i<n;i++)              a[i]=sc.nextInt();      char[] c=sc.next().toCharArray();         Vector<Integer> l=new Vector<>(), r=new Vector<>();         for(int i=0;i<n;i++)             (c[i] == 'B' ? l : r).add(a[i]);         Collections.sort(l);         Collections.sort(r,Collections.reverseOrder());         boolean ok = true;         for(int i=0;i<l.size();i++)             if (l.get(i) < i + 1)                 ok = false;         for(int i=0;i<r.size();i++)             if (r.get(i) > n - i)                 ok = false;          System.out.print((ok ? ""YES"" : ""NO"")+'\n');     }     } } ",1
967,"import java.util.*; import java.lang.*; import java.io.*; public class Main {              public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int T = sc.nextInt();         for(int t=0;t<T;t++){             solve(sc);                }           }          static class Edge{         public int node;         public int index;         Edge(int node, int index){             this.node = node;             this.index = index;         }     }     public static void solve(Scanner sc){         int V = sc.nextInt();         Boolean[] visited = new Boolean[V];         LinkedList<Edge>[] adj = new LinkedList[V];                 for(int v=0;v<V;v++){             visited[v] = false;         }                           for(int v=0;v<V;v++){             adj[v] = new LinkedList();         }                  for(int i=0;i<V-1;i++){             int u = sc.nextInt()-1;             int v = sc.nextInt()-1;             adj[u].add(new Edge(v,i));              adj[v].add(new Edge(u,i));         }                                   int start = -1;         for(int v=0;v<V;v++){             if(adj[v].size() == 1){                 start = v;             }else if(adj[v].size() > 2){                 System.out.println(""-1"");                 return;             }         }                  int[] weight = new int[V-1];                          int curNode = start;         int prevNode = -1;                           visited[start] = true;                   for(int v=0;v<V;v++){             for(Edge e : adj[start]){                 if(!visited[e.node]){                     if(v % 2 == 0){                        weight[e.index] = 2;                     }else{                                                 weight[e.index] = 5;                     }                     visited[e.node] = true;                     start = e.node;                 }               }                                   }                  for(int w : weight){             System.out.print(w + "" "");         }         System.out.println("""");                                         } } ","import java.util.*; import java.io.*; import java.math.*; public class A { static FastReadersc= new FastReader(); static PrintWriterout= new PrintWriter(System.out); static intmod= (int) 1000000007; public static void main(String[] args) throws Exception { int t = sc.nextInt(); while (t-- > 0) A.go(); out.flush(); } static class pair { int x, y; pair(int x, int y) { this.x = x; this.y = y; } } static void go() throws Exception { int n=sc.nextInt(); ArrayList<ArrayList<Integer>> aa=new ArrayList<>(); for(int i=0;i<n;i++) { aa.add(new ArrayList<>()); } LinkedHashMap<pair,Integer> map=new LinkedHashMap<>(); for(int i=0;i<n-1;i++) { int u=sc.nextInt()-1,v=sc.nextInt()-1; aa.get(u).add(v); aa.get(v).add(u); if(u>v) { int temp=v; v=u;u=temp; } map.put(new pair(u,v),0); } for(ArrayList<Integer> i : aa) { if(i.size()>2) { out.println(-1); return; } } boolean vis[]=new boolean[n]; dfs(aa,0,vis,2,map); for(pair i : map.keySet()) { out.print(map.get(i)+"" ""); } out.println(); } static void dfs(ArrayList<ArrayList<Integer>> aa,int src,boolean vis[],int see,LinkedHashMap<pair,Integer> map) { vis[src]=true; for(int i: aa.get(src)) { if(vis[i]==false) { int x=src,y=i; if(x>y) { int temp=x; x=y; y=temp; } pair temp=new pair(x,y); if(see==2) { map.put(temp,5); see=5; }else { map.put(temp,2); see=2; } dfs(aa,i,vis,see,map); } } } static longfact[]; static longinvfact[]; static int prime[] = new int[1000006]; } ",0
968,"import java.util.*; import java.lang.*; import java.io.*; public class Main {      static long min;     static FastReader sc=new FastReader();  public static void main (String[] args) throws java.lang.Exception {         PrintWriter w=new PrintWriter(System.out);         int t=sc.nextInt();         while(t-->0){                      int n=sc.nextInt();         long[] c=new long[n];         for(int i=0;i<n;i++) {         c[i]=sc.nextLong();         }         min=c[0]*n+c[1]*n;                  long x=Long.MAX_VALUE-1,y=Long.MAX_VALUE-1,sumx=0,sumy=0,cx=0,cy=0,min1=Long.MAX_VALUE-1,min2=Long.MAX_VALUE-1;             for(int i=0;i<n;i++) {         if(i%2==0){             x=Math.min(x,c[i]);sumx+=c[i];cx=i/2+1;             min1=sumx+x*(n-cx);         }         else {y=Math.min(y,c[i]);sumy+=c[i];cy=(i+1)/2;             min2=sumy+y*(n-cy);         }         if(i>=1)min=Math.min(min,min1+min2);         }         System.out.println(min);         } w.flush(); w.close(); } } ","import java.util.*; import java.io.*; import java.math.*;   public final class Main{ public static void main(String[] args) throws IOException{ FastReader sc=new FastReader(); PrintWriter writer=new PrintWriter(System.out); int tc=sc.nextInt(); while(tc-->0) {   int n=sc.nextInt();           long[] c=new long[n];           for(int i=0;i<n;i++) c[i]=sc.nextInt();              long ans=c[0]*n+c[1]*n;           long x=Long.MAX_VALUE-1,y=Long.MAX_VALUE-1,sumx=0,sumy=0,cx=0,cy=0,min1=Long.MAX_VALUE-1,min2=Long.MAX_VALUE-1;           for(int i=0;i<n;i++) {           if(i%2==0){               x=Math.min(x,c[i]);               sumx+=c[i];               cx=i/2+1;               min1=sumx+x*(n-cx);           }           else {           y=Math.min(y,c[i]);           sumy+=c[i];cy=(i+1)/2;               min2=sumy+y*(n-cy);           }           if(i>=1) ans=Math.min(ans,min1+min2);          }                     System.out.println(ans); } writer.flush(); writer.close();   }             } ",1
969,"import java.util.*; import java.lang.*; import java.io.*; public class Main {     static void sort(int a[]){         ArrayList<Integer> arr=new ArrayList<>();         for(int i=0;i<a.length;i++)arr.add(a[i]);         Collections.sort(arr);         for(int i=0;i<a.length;i++)a[i]=arr.get(i);     } public static void main (String[] args) throws java.lang.Exception {         BufferedReader br=new BufferedReader(new InputStreamReader(System.in));              int t=Integer.parseInt(br.readLine());     while(--t>=0){         int n=Integer.parseInt(br.readLine());          int a[]=new int[n];          StringTokenizer st=new StringTokenizer(br.readLine());         for(int i=0;i<n;i++)a[i]=Integer.parseInt(st.nextToken());        String s=br.readLine();         ArrayList<Integer> inc=new ArrayList<>();         ArrayList<Integer> dec=new ArrayList<>();                  for(int i=0;i<n;i++){             if(s.charAt(i)=='R')inc.add(a[i]);             else dec.add(a[i]);         }         Collections.sort(dec);         Collections.sort(inc,Collections.reverseOrder());         int p=n;         boolean flag=false;         for(int i=0;i<inc.size();i++){             if(inc.get(i)>p)flag=true;             p--;         }         p=1;         for(int i=0;i<dec.size();i++){             if(dec.get(i)<p)flag=true;             p++;         }         if(flag)System.out.println(""NO"");         else System.out.println(""YES"");     }      } } ","import java.util.*; public class Soltion{        public static void main(String []args){         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                  while(t-->0){             int n = sc.nextInt();             Integer[] arr = new Integer[n];             for(int i=0;i<n;i++){                 arr[i] = sc.nextInt();             }             String s = sc.next();                          List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();                          for(int i=0;i<s.length();i++){                 if(s.charAt(i)=='B'){                     blue.add(arr[i]);                 }                 else{                     red.add(arr[i]);                 }             }                          Collections.sort(blue);             Collections.sort(red);             int p=1,q=n;                          boolean flag = true;             for(int i=red.size()-1;i>=0;i--){                 if(red.get(i)>q){                     flag = false;                     break;                 }                 q--;             }                          for(int i=0;i<blue.size();i++){                 if(blue.get(i)<p){                     flag = false;                     break;                 }                 p++;             }                          System.out.println(flag? ""Yes"" : ""No"");         }      } } ",0
970,"import java.util.*; import java.lang.*; import java.io.*; public class Main {     void solve() {         int n = in.nextInt();         char[] a = in.nextLine().toCharArray();         char[] b = in.nextLine().toCharArray();         int ans = MAX;         ans = Math.min(ans, operations(a, b));         ans = Math.min(ans, change(a, b, '1'));         ans = Math.min(ans, change(a, b, '0'));         if (ans == MAX)ans = -1;         out.append(ans + ""\n"");     }     int operations(char[] a, char[] b) {         int count01 = 0 , count10 = 0;         int n = a.length;         for (int i = 0 ; i < n; i++) {             if (a[i] != b[i]) {                 if (a[i] == '0')count01++;                 else count10++;             }         }         if (count01 != count10)return MAX;         return count01 + count10;     }     int change(char[] a, char[] b , char ch) {         int n = a.length;         char[] c = new char[n];         for (int i = 0 ; i < n; i++)c[i] = a[i];         int index = -1;         for (int i = 0; i < n; i++) {             if (c[i] == '1' && b[i] == ch) {                 index = i;                 break;             }         }         if (index == -1)return MAX;         for (int i = 0 ; i < n; i++) {             if (i == index)continue;             c[i] = (char)( '0' + ('1' - c[i]) );         }         int  local = operations(c, b);         if (local == MAX)return MAX;         return 1 + local;     }     public static void main (String[] args) {                  Main sol = new Main();         int t = 1;         t = in.nextInt();         while (t-- != 0) {             sol.solve();         }         System.out.print(out);     }                                                  static {         try {             System.setIn(new FileInputStream(""input.txt""));             System.setOut(new PrintStream(new FileOutputStream(""output.txt"")));             err = new PrintStream(new FileOutputStream(""error.txt""));         } catch (Exception e) {}     }     static FastReader in;     static StringBuilder out;     static PrintStream err;     final int MAX;     final int MIN;     int mod ;     Main() {         in = new FastReader();         out = new StringBuilder();         MAX = Integer.MAX_VALUE;         MIN = Integer.MIN_VALUE;         mod = (int)1e9 + 7;     }           } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CMenorah solver = new CMenorah();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CMenorah {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt();             char[] a = in.next().toCharArray();             char[] b = in.next().toCharArray();             int ans = checkPairs(a, b, -1);             ans = Math.min(ans, changePair(a, b, '1'));             ans = Math.min(ans, changePair(a, b, '0'));             if (ans == Integer.MAX_VALUE) ans = -1;             out.println(ans);         }         int changePair(char[] a, char[] b, char t) {             int index = -1;             int n = a.length;             for (int i = 0; i < n; ++i) {                 if (a[i] == '1' && b[i] == t) {                     index = i;                     break;                 }             }             return checkPairs(a, b, index);         }         int checkPairs(char[] a, char[] b, int changeStringIndex) {             int n = a.length;             int val = 0;             char[] tmp = new char[n];             System.arraycopy(a, 0, tmp, 0, n);             if (changeStringIndex != -1) {                 val = 1;                 for (int i = 0; i < n; ++i) {                     if (i == changeStringIndex) continue;                     tmp[i] = a[i] == '0' ? '1' : '0';                 }             }             int _10 = 0, _01 = 0;             for (int i = 0; i < n; ++i) {                 if (tmp[i] != b[i]) {                     if (tmp[i] == '0') _01++;                     else _10++;                 }             }             return _01 == _10 ? 2 * _01 + val : Integer.MAX_VALUE;         }     }      } ",1
971,"import java.util.*; import java.lang.*; import java.io.*; public class Main { PrintWriter out = new PrintWriter(System.out); BufferedReader in = new BufferedReader(new InputStreamReader(System.in));     StringTokenizer tok = new StringTokenizer("""");     String next() throws IOException {         if (!tok.hasMoreTokens()) { tok = new StringTokenizer(in.readLine()); }         return tok.nextToken();     }     int ni() throws IOException { return Integer.parseInt(next()); }               int n,a,b,da,db,dist,vert;     ArrayList<Integer>A[];          void solve() throws IOException {         for (int tc=ni();tc>0;tc--) {             n=ni(); a=ni(); b=ni(); da=ni(); db=ni();             A=new ArrayList[n+1];             for (int i=1;i<=n;i++) A[i]=new ArrayList();             for (int i=1;i<n;i++) {                 int u=ni(),v=ni();                 A[u].add(v);                 A[v].add(u);             }                          dist=0;             dfs1(a,0,0);             if (dist<=da || db<=2*da) {                 out.println(""Alice"");                 continue;             }                          dist=0;             vert=0;             dfs2(1,0,0);             dist=0;             dfs2(vert,0,0);                          if (dist<=2*da) out.println(""Alice"");             else out.println(""Bob"");         }         out.flush();     }          void dfs2(int u,int p,int d) {         if (d>dist) {             dist=d;             vert=u;         }                  for (Integer v:A[u]) {             if (v==p) continue;             dfs2(v,u,d+1);         }     }          void dfs1(int u,int p,int d) {         if (u==b) dist=d;         for (Integer v:A[u]) {             if (v==p) continue;             dfs1(v,u,d+1);         }     }          public static void main(String[] args) throws IOException {         new Main().solve();     } } ","import java.io.*; import java.math.BigInteger; import java.util.*; import static java.lang.Math.PI; import static java.lang.System.in; import static java.lang.System.out; public class B {     static ArrayList<ArrayList<Integer>> adj;     static int dis[];     static void dfs(int s, int p, int l)     {         dis[s] = l;         for(int i : adj.get(s))         {             if(i==p)    continue;             dfs(i, s, l+1);         }     }     public static void main(String[] args) throws Exception      {         FastReader sc = new FastReader();         PrintWriter p = new PrintWriter(out);         int t = sc.nextInt();         while(t--!=0)         {             int n = sc.nextInt(), a = sc.nextInt(), b = sc.nextInt(), da = sc.nextInt(), db = sc.nextInt();             adj = new ArrayList<>();             for(int i = 0; i <= n; i++)             {                 adj.add(new ArrayList<>());             }             for(int i = 1; i < n; i++)             {                 int u = sc.nextInt(), v = sc.nextInt();                 adj.get(u).add(v);                 adj.get(v).add(u);             }             dis = new int[n+1];             dfs(a, 0, 0);             if(dis[b] <= da)                 {                 p.println(""Alice"");                 continue;             }             int farthest = 0, maxDis = 0;             for(int i = 1; i <= n; i++)             {                 if(maxDis < dis[i])                 {                     maxDis = dis[i];                     farthest = i;                 }             }             dfs(farthest, 0, 0);             int diameter = 0;             for(int i = 1; i <= n; i++)             {                 diameter = Math.max(diameter, dis[i]);             }             if(db > 2*da && diameter > 2*da)             {                 p.println(""Bob"");             }             else             {                 p.println(""Alice"");             }         }         p.close();     }      } ",0
972,"import java.util.*; import java.lang.*; import java.io.*; public class Main { PrintWriter out = new PrintWriter(System.out); BufferedReader in = new BufferedReader(new InputStreamReader(System.in));     StringTokenizer tok = new StringTokenizer("""");     String next() throws IOException {         if (!tok.hasMoreTokens()) { tok = new StringTokenizer(in.readLine()); }         return tok.nextToken();     }     int ni() throws IOException { return Integer.parseInt(next()); }               void solve() throws IOException {         for (int tc=ni();tc>0;tc--) {             int n=ni();             int[]A=new int[n];             long[]T=new long[n];             A[0]=ni();             T[0]=A[0];             long total=0;             for (int i=1;i<n;i++) { A[i]=ni(); T[i]=T[i-1]+A[i]; }                           long[]B=new long[n];             long lefteven=n-1;             long leftodd=n;             int mineven=A[0];             int minodd=A[1];             long ans=Long.MAX_VALUE;                          for (int i=1;i<n;i++) {                 if (i%2==1) {                     leftodd--;                     minodd=Math.min(minodd,A[i]);                     B[i]=T[i]+lefteven*mineven+leftodd*minodd;                 }                 else {                     lefteven--;                     mineven=Math.min(mineven,A[i]);                     B[i]=T[i]+lefteven*mineven+leftodd*minodd;                 }                 ans=Math.min(ans,B[i]);             }                          out.println(ans);         }         out.flush();     }                              public static void main(String[] args) throws IOException {         new Main().solve();     } } ","import java.util.*; import java.io.*; import java.math.*; import java.text.*; public class C{ public static void main(String[] omkar) throws Exception {    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));    StringTokenizer st = new StringTokenizer(in.readLine());    StringBuilder sb = new StringBuilder();    int cases = Integer.parseInt(st.nextToken());    for(int i = 0; i < cases; i++)    {       solve(in, st, sb);    }      System.out.println(sb);         }  public static void solve(BufferedReader in, StringTokenizer st, StringBuilder sb) throws Exception  {       st = new StringTokenizer(in.readLine());       int n = Integer.parseInt(st.nextToken());       int[] arr = readArr(n, in, st);       int[] mins = new int[n];       mins[0] = arr[0];       mins[1] = arr[1];        for(int i = 2; i < n; i++)       {          mins[i] = Math.min(arr[i], mins[i-2]);       }       long[] sums = new long[n];       sums[0] = (long)(arr[0]);       for(int i = 1; i < n; i++)       {          sums[i] = sums[i-1]+(long)(arr[i]);       }       long minc = Long.MAX_VALUE;       long temp;       for(int i = 1; i < n; i++)       {          temp = sums[i];          temp += (long)(mins[i])*(long)(n-(i+2)/2);          temp += (long)(mins[i-1])*(long)(n-(i+1)/2);          minc = Math.min(minc, temp);       }       sb.append(minc+""\n"");  }  public static int[] readArr(int N, BufferedReader in, StringTokenizer st) throws Exception       {          int[] arr = new int[N];          st = new StringTokenizer(in.readLine());          for(int i=0; i < N; i++)             arr[i] = Integer.parseInt(st.nextToken());          return arr;       } } ",0
973,"import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in);     int t=sc.nextInt(); while(t-->0) {                                                 int n=sc.nextInt();       long a[]=new long[n];       for(int i=0;i<n;i++)       {           a[i]=sc.nextLong();       }              long ans=Long.MAX_VALUE;       int count1=1;       int count2=1;       boolean san=true;       long sum1=a[0];       long sum2=a[1];       long min1=a[0];       long min2=a[1];       ans=((n*1L*sum1)+(n*1L*sum2));             for(int i=2;i<n;i++)       {           if(san)           {               count1++;               san=false;               sum1+=a[i];               min1=Math.min(min1,a[i]);               long z1=sum1+(n-count1)*min1;               long z2= sum2+(n-count2)*min2;               ans=Math.min(ans,z1+z2);                          }           else           {               count2++;               san=true;               sum2+=a[i];               min2=Math.min(min2,a[i]);               long z1=sum1+(n-count1)*min1;               long z2= sum2+(n-count2)*min2;               ans=Math.min(ans,z1+z2);                                         }               }       System.out.println(ans);                                  } } } ","import java.io.*; import java.lang.*; import java.util.*; public class MinGridPath { public static void main(String[] args) { Scanner s=new Scanner(System.in); int t=s.nextInt(); while(t-->0){ int n = s.nextInt(); long[] aa =new long[n]; for(int i=0;i<n;i++) aa[i]=s.nextLong();   long minEven = aa[0]; long minOdd = aa[1]; long sum = aa[0]+aa[1]; long best = n*minEven + n*minOdd; int numOdd = 1; int numEven = 1; for(int i=2; i<n; ++i) { if(i%2 == 0) { minEven = Math.min(aa[i], minEven); numEven++; }else { minOdd = Math.min(aa[i], minOdd); numOdd++; } sum += aa[i]; long score = sum; score += minEven*(n-numEven); score += minOdd*(n-numOdd); best = Math.min(best, score); } System.out.println(best); } } } ",0
974,"import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ","import java.util.*; import java.io.*; import java.math.*; public class A {   static FastReader sc=new FastReader();   static long ans;  static HashMap<Integer,Integer> map;      public static void main(String[] args)     {                 PrintWriter out=new PrintWriter(System.out);   StringBuffer sb=new StringBuffer("""");     int ttt=1;      ttt =i();         outer :while (ttt-- > 0)  {     int n=i();     String A[]=inputS(n);     Pair P[]=new Pair[n];     int B[][]=new int[n][5];     for(int i=0;i<n;i++) {     for(int j=0;j<A[i].length();j++) {     B[i][A[i].charAt(j)-'a']++;     }     }     int ans=Integer.MAX_VALUE;     for(int k=0;k<5;k++) {     int s1=0;     int s2=0;     for(int i=0;i<n;i++) {     int a=B[i][k];     int b=A[i].length()-a;     s1+=a;     s2+=b;     P[i]=new Pair(a, b);     }     Arrays.sort(P);     int res=go(P,s1,s2);     ans=Math.min(ans,res);          }     System.out.println(n-ans);                     }    out.close();                             }  static int go(Pair P[],int a,int b) {  int i=0;  int ans=0;  while(a<=b&& i<P.length) {  a-=P[i].x;  b-=P[i].y;  ans++;  i++;  }  return ans;  } static class Pair implements Comparable<Pair>      {      int x;      int y;      Pair(int x,int y){      this.x=x;      this.y=y;            }      } static String[] inputS(int n) { String A[]=new String[n];    for(int i=0;i<n;i++) {    A[i]=sc.next();    }    return A;    }      static int i() {      return sc.nextInt();      }                                                           } ",0
975,"import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ",0
976,"import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); PrintWriter out=new PrintWriter(System.out); while(t-->0) {     int n=sc.nextInt();     int freq[][]=new int[n][5];     int rem[][]=new int[n][5];     for(int i=0;i<n;i++) {         String str=sc.next();                  for(int j=0;j<str.length();j++) {             freq[i][str.charAt(j)-'a']++;         }         for(int k=0;k<5;k++) {             rem[i][k]=str.length()-freq[i][k];         }     }          int ans=0;     for(int i=0;i<5;i++) {         int arr[]=new int[n];         for(int j=0;j<n;j++)         arr[j]=freq[j][i]-rem[j][i];                  Arrays.sort(arr);         int total=0;         int sum=0;         for(int k=n-1;k>=0;k--) {             if(sum+arr[k]>0) {                 sum=sum+arr[k];                 total++;             }             else {                 break;             }         }         ans=Math.max(ans,total);     }     out.println(ans);      } out.flush(); out.close(); } } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ",0
977,"import java.util.*; import java.lang.*; import java.io.*; public class Main { public static void main (String[] args) throws java.lang.Exception { Scanner scan=new Scanner(System.in); int t=scan.nextInt(); while(t>0){     int n=scan.nextInt();     int[] a=new int[n];     for(int i=0;i<n;i++){         a[i]=scan.nextInt();     }     TreeSet<Integer>set=new TreeSet<>();     set.add(a[0]);     boolean flag=false;     for(int i=1;i<n;i++){         set.add(a[i]);                  if(a[i-1]==a[i]) { continue; }         Integer find = set.lower(a[i]); if(find!=null && find==a[i-1]) { continue; } find = set.higher(a[i]); if(find!=null && find==a[i-1]) { continue; }                                                            flag=true;         break;     }     if(flag){         System.out.println(""No"");     }else{         System.out.println(""Yes"");     }     t--; } } } ","import java.io.*; import java.util.*; public class Main { public static void main(String[] args) { FastScanner sc = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t=sc.nextInt(); while(t-- >0) { int n = sc.nextInt(); int b[] = sc.readArray(n); TreeSet<Integer> set = new TreeSet<>(); boolean f = true; set.add(b[0]); for(int i=1 ; i<n ; i++) { set.add(b[i]); if(b[i-1]==b[i]) { continue; } Integer find = set.lower(b[i]); if(find!=null && find==b[i-1]) { continue; } find = set.higher(b[i]); if(find!=null && find==b[i-1]) { continue; } f = false; break; } if(f == false) { out.println(""NO""); } else out.println(""YES""); } out.flush(); out.close(); } } ",1
978,"import java.util.*; import java.lang.*; import java.io.*; public class Main { static PrintWriter out; static FastReader scan;      public static int ni(){return scan.nextInt();} public static long nl(){return scan.nextLong();}                 static void lIA(long arr[]){      for(int i=0; i<arr.length; i++)arr[i] = nl();  }                                       public static void main (String[] args) throws java.lang.Exception { OutputStream outputStream =System.out;         out =new PrintWriter(outputStream);         scan =new FastReader(); StringBuilder sb = new StringBuilder(); int t = ni(); while(t-->0){ int n = ni(); long arr[] = new long[n]; lIA(arr); long ans = (long)(n*(arr[0] + arr[1])); long sum = arr[0] + arr[1]; long emin = arr[0], omin = arr[1]; for(int i=2; i<n; i++){ sum += arr[i]; if(i%2==0){ emin = Math.min(arr[i], emin); } else{ omin = Math.min(arr[i], omin); } long temp = sum - emin - omin; if(i%2==0) temp += (n-i/2)*emin + (n-i/2+1)*omin; else temp += (n-(i-1)/2)*(emin + omin); ans = Math.min(ans, temp); } System.out.println(ans);         }         out.flush(); out.close(); } } ","import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; public class Solution {     static PrintWriter fop = new PrintWriter(System.out);     public static void main(String[] args) {         FastScanner fsca = new FastScanner();         int i, j = 0;         int t = fsca.nextInt();         u: while (t-- > 0) {             int n = fsca.nextInt();             int a[] = new int[n];             for(i=0;i<n;i++){                 a[i] = fsca.nextInt();             }             int y = Integer.MAX_VALUE;             long sum[] = new long[n];             long min1[] = new long[n];             sum[0] = a[0];             sum[1] = a[1];             min1[0] = a[0];             min1[1] = a[1];             for(i=2;i<n;i++){                 sum[i] = sum[i-2] + a[i];                 min1[i] = Math.min(min1[i-2],a[i]);             }             long val = sum[0]*n + sum[1]*n;             long min = sum[0]*n + sum[1]*n;             for(i=2;i<n;i++){                 val = sum[i] + min1[i]*(n-(i+2)/2) + sum[i-1] + min1[i-1]*(n-(i+1)/2);                 min = Math.min(min,val);             }             fop.println(min);         }         fop.flush();         fop.close();     }                         static final Random random = new Random();                          } ",0
979,"import java.util.*; import java.lang.*; import java.io.*; public class Main { static PrintWriter out; static FastReader scan;      public static int ni(){return scan.nextInt();} public static long nl(){return scan.nextLong();} public static void pn(Object o){out.println(o);}                                                           static long[] l, r; public static void main (String[] args) throws java.lang.Exception { OutputStream outputStream =System.out;         out =new PrintWriter(outputStream);         scan =new FastReader(); StringBuilder sb = new StringBuilder(); int t = ni(); while(t-->0){ int n = ni(); l = new long[n]; r = new long[n]; for(int i=0; i<n; i++){ l[i] = nl(); r[i] = nl(); } ArrayList<Integer> adj[] = new ArrayList[n]; for(int i=0; i<n; i++) adj[i] = new ArrayList<Integer>(); for(int i=0; i<n-1; i++){ int u = ni()-1, v = ni()-1; adj[u].add(v); adj[v].add(u); } dp = new Long[n][2]; visited = new boolean[n]; long ans = Math.max(solve(adj, 0, 0, visited), solve(adj, 0, 1, visited)); pn(ans);         }         out.flush(); out.close(); } static Long dp[][]; static boolean visited[]; static long solve(ArrayList<Integer> adj[], int vertex, int prev, boolean visited[]){ visited[vertex] = true; if(dp[vertex][prev] != null) return dp[vertex][prev]; long ans = 0; for(int x : adj[vertex]){ if(!visited[x]){ if(prev == 0){ ans += Math.max(Math.abs(l[vertex] - l[x]) + solve(adj, x, 0, visited), Math.abs(l[vertex] - r[x]) + solve(adj, x, 1, visited)); }else{ ans += Math.max(Math.abs(r[vertex] - l[x]) + solve(adj, x, 0, visited), Math.abs(r[vertex] - r[x]) + solve(adj, x, 1, visited)); } } } visited[vertex] = false; return dp[vertex][prev] = ans; } } ","import java.io.*; import java.util.*; public class Codeforces {     public static void main(String args[])throws Exception     {         BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));         StringBuilder sb=new StringBuilder();         int t=Integer.parseInt(bu.readLine());         while(t-->0)         {             int n=Integer.parseInt(bu.readLine());             g=new ArrayList[n];             int i;             for(i=0;i<n;i++)             {                 g[i]=new ArrayList<>();                 String st[]=bu.readLine().split("" "");                 a[i][0]=Integer.parseInt(st[0]); a[i][1]=Integer.parseInt(st[1]);                 s[i][0]=s[i][1]=0;             }             for(i=0;i<n-1;i++)             {                 String st[]=bu.readLine().split("" "");                 int u=Integer.parseInt(st[0])-1,v=Integer.parseInt(st[1])-1;                 g[u].add(v); g[v].add(u);             }             dfs(0,-1);             sb.append(Math.max(s[0][0],s[0][1])+""\n"");         }         System.out.print(sb);     }     static ArrayList<Integer> g[];     static int N=100000,a[][]=new int[N][2];     static long s[][]=new long[N][2];     static void dfs(int n,int p)     {         for(int x:g[n])         if(x!=p)         {             dfs(x,n);             s[n][0]+=Math.max(s[x][0]+Math.abs(a[x][0]-a[n][0]),s[x][1]+Math.abs(a[x][1]-a[n][0]));             s[n][1]+=Math.max(s[x][0]+Math.abs(a[x][0]-a[n][1]),s[x][1]+Math.abs(a[x][1]-a[n][1]));         }     } } ",0
980,"import java.util.*; import java.lang.*; import java.io.*; public class Main { static PrintWriter out; static FastReader scan;      public static int ni(){return scan.nextInt();} public static long nl(){return scan.nextLong();} public static void pn(Object o){out.println(o);}                                                           static long[] l, r; public static void main (String[] args) throws java.lang.Exception { OutputStream outputStream =System.out;         out =new PrintWriter(outputStream);         scan =new FastReader(); StringBuilder sb = new StringBuilder(); int t = ni(); while(t-->0){ int n = ni(); l = new long[n]; r = new long[n]; for(int i=0; i<n; i++){ l[i] = nl(); r[i] = nl(); } ArrayList<Integer> adj[] = new ArrayList[n]; for(int i=0; i<n; i++) adj[i] = new ArrayList<Integer>(); for(int i=0; i<n-1; i++){ int u = ni()-1, v = ni()-1; adj[u].add(v); adj[v].add(u); } dp = new Long[n][2]; visited = new boolean[n]; long ans = Math.max(solve(adj, 0, 0, visited), solve(adj, 0, 1, visited)); pn(ans);         }         out.flush(); out.close(); } static Long dp[][]; static boolean visited[]; static long solve(ArrayList<Integer> adj[], int vertex, int prev, boolean visited[]){ visited[vertex] = true; if(dp[vertex][prev] != null) return dp[vertex][prev]; long ans = 0; for(int x : adj[vertex]){ if(!visited[x]){ if(prev == 0){ ans += Math.max(Math.abs(l[vertex] - l[x]) + solve(adj, x, 0, visited), Math.abs(l[vertex] - r[x]) + solve(adj, x, 1, visited)); }else{ ans += Math.max(Math.abs(r[vertex] - l[x]) + solve(adj, x, 0, visited), Math.abs(r[vertex] - r[x]) + solve(adj, x, 1, visited)); } } } visited[vertex] = false; return dp[vertex][prev] = ans; } } ","import java.util.*; import java.io.*; public class Parsas_Humongous_Tree { public static void main(String[] args) { FastReader t = new FastReader(); PrintWriter o = new PrintWriter(System.out); int test = t.nextInt(); while (test-- > 0) { int n = t.nextInt(); long[][] cost = new long[n][2]; List<Integer>[] graph = new ArrayList[n]; dp = new long[n][2]; for (int i = 0; i < n; ++i) { cost[i][0] = t.nextLong(); cost[i][1] = t.nextLong(); graph[i] = new ArrayList<>(); } for (int i = 0; i < n - 1; ++i) { int x = t.nextInt() - 1; int y = t.nextInt() - 1; graph[x].add(y); graph[y].add(x); } o.println(Math.max(dfs(graph, cost, 0, 0, -1), dfs(graph, cost, 0, 1, -1))); } o.flush(); o.close(); } private static long[][] dp; private static long dfs(List<Integer>[] graph, long[][] cost, int u, int j, int par) { if (dp[u][j] != 0) return dp[u][j]; for (int v : graph[u]) if (v != par) { long c1 = Math.abs(cost[u][j] - cost[v][0]) + dfs(graph, cost, v, 0, u); long c2 = Math.abs(cost[u][j] - cost[v][1]) + dfs(graph, cost, v, 1, u); dp[u][j] += Math.max(c1, c2); } return dp[u][j]; } } ",0
981,"import java.util.*; import java.lang.*; import java.io.*; public class Main { static { try { System.setIn(new FileInputStream(""input.txt"")); System.setOut(new PrintStream(new FileOutputStream(""output.txt""))); } catch (Exception e) {} } void solve() { int n = in.nextInt(); ArrayList<Edge>[] graph = new ArrayList[n + 1]; for (int i = 0; i < n; i++) { graph[i] = new ArrayList<Edge>(); } for (int i = 0; i < n - 1; i++) { int u = in.nextInt(); int v = in.nextInt(); v--; u--; graph[u].add(new Edge(v, i)); graph[v].add(new Edge(u, i)); } int[] res = new int[n - 1]; for (int i = 0; i < n; i++) { if (graph[i].size() > 2) { out.append(""-1\n""); return; } } int start = -1; for (int i = 0; i < n; i++) { if (graph[i].size() == 1) { start  = i; break; } } int currNode = start; int prevNode = -1; int weight = 2; while (true) { ArrayList<Edge> edges = graph[currNode]; Edge next = edges.get(0); if (next.node == prevNode) { if (edges.size() == 1) { break; } next = edges.get(1); } res[next.index] = weight; weight = 5 - weight; prevNode = currNode; currNode = next.node; } for (int i = 0; i < n - 1; i++) { out.append(res[i] + "" ""); } out.append(""\n""); } public static void main (String[] args) { Main sol = new Main(); int t = 1; t = in.nextInt(); while (t-- != 0) { sol.solve(); } System.out.print(out); } void print(int s) { System.out.print(s); } static FastReader in; static StringBuffer out; final int MAX; final int MIN; int mod ; Main() { in = new FastReader(); out = new StringBuffer(); MAX = Integer.MAX_VALUE; MIN = Integer.MIN_VALUE; mod = (int)1e9 + 7; } } class Edge { int node, index; Edge(int node, int index) { this.node = node; this.index = index; } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef{     public static class Edge{         int node;         int index;         Edge(int node, int index){             this.node = node;             this.index = index;         }     }     static Scanner scn = new Scanner(System.in); public static void main (String[] args) throws java.lang.Exception{ int t = scn.nextInt(); while(t-->0){     solve(); } } public static void solve(){     int n = scn.nextInt();     ArrayList<Edge>[]graph = new ArrayList[n];     for(int i = 0; i < n; i++){         graph[i] = new ArrayList<>();     }     for(int i = 0; i < n - 1; i++){         int u = scn.nextInt() - 1;         int v = scn.nextInt() - 1;         graph[u].add(new Edge(v, i));         graph[v].add(new Edge(u, i));     }     int start = 0;     for(int i = 0; i < n; i++){         if(graph[i].size() > 2){             System.out.println(""-1"");             return;         }else if(graph[i].size() == 1){             start = i;         }     }     int[]weight = new int[n - 1];     int prevNode = -1, curNode = start, curWeight = 2;     while(true){         ArrayList<Edge>edges = graph[curNode];         Edge next = edges.get(0);         if(next.node == prevNode){             if(edges.size() == 1){                 break;             }else{                 next = edges.get(1);             }         }         weight[next.index] = curWeight;         prevNode = curNode;         curNode = next.node;         curWeight = 5 - curWeight;     }     for(int i = 0; i < n - 1; i++){         System.out.print(weight[i]);         System.out.print("" "");     }     System.out.println(); } } ",1
982,"import java.util.*; import java.lang.*; import java.io.*; public class MyAnswer {      public static void main(String[] args)throws IOException{           FastScanner scan = new FastScanner();                      PrintWriter out = new PrintWriter(System.out);           StringBuilder result = new StringBuilder();                 int t = scan.nextInt();           while (t-- > 0){                int n = scan.nextInt();                int arr[] = scan.nextIntArray(n);                if(n%2==0){                     int j = n/2;                     for(int i = j;i<n;i++){                          int val = arr[i] * -1;                          result.append(val + "" "");                     }                     for(int i = 0;i<j;i++){                          int val = arr[i] ;                          result.append(val + "" "");                     }                }else{                     int j = (n-3)/2;                     for(int i = j;i<n-3;i++){                          int val = arr[i] * -1;                          result.append(val + "" "");                     }                     for(int i = 0;i<j;i++){                          int val = arr[i] ;                          result.append(val + "" "");                     }                                          if(arr[n-3]+arr[n-2] !=0 ){                          int sum = arr[n-3] + arr[n-2];                          sum *=-1;                          result.append(arr[n-1] + "" "");                          result.append(arr[n-1] + "" "");                          result.append(sum+ "" "");                                               }else if(arr[n-1]+arr[n-2] !=0 ){                          int sum = arr[n-1] + arr[n-2];                          sum *=-1;                          result.append(sum+ "" "");                          result.append(arr[n-3] + "" "");                          result.append(arr[n-3]+"" "");                                               }else{                          int sum = arr[n-1] + arr[n-3];                          sum *=-1;                          result.append(arr[n-2] + "" "");                          result.append(sum+ "" "");                          result.append(arr[n-2]+ "" "");                     }                                          }                result.append(""\n"");                           }           out.println(result);           out.flush();      }                   } ","import java.io.*; public class Main {     static BufferedReader BR = new BufferedReader(new InputStreamReader(System.in));     static StreamTokenizer IN = new StreamTokenizer(BR);     static PrintWriter OUT = new PrintWriter(new BufferedOutputStream(System.out));     static int nextInt() throws IOException {         IN.nextToken();         return (int) IN.nval;     }                              public static void main(String[] args) throws IOException {         int T = nextInt();         while(T-- > 0) {             int N = nextInt();             int[] a = new int[N];             for (int i = 0; i < N; i++) {                 a[i] = nextInt();             }             if (N % 2 == 0) {                for (int i = 0; i < N; i+=2) {                    OUT.print(a[i+1] + "" "");                    OUT.print(-1 * a[i] + "" "");                }             } else{                 for (int i = 0; i < N-3; i+=2) {                     OUT.print(a[i+1] + "" "");                     OUT.print(-1 * a[i] + "" "");                 }                 if(a[N-3] + a[N-2] != 0) {                     OUT.print(-a[N-1] + "" "" + -a[N-1] + "" "" + (a[N-3] + a[N-2]));                 } else if(a[N-2] + a[N-1] != 0) {                     OUT.print((a[N-2] + a[N-1]) + "" "" + -a[N-3] + "" "" + -a[N-3]);                 } else {                     OUT.print(-a[N-2] + "" "" + (a[N-1] + a[N-3]) + "" "" + -a[N-2]);                 }             }             OUT.println();         }         OUT.flush();     } } ",0
983,"import java.util.*; import java.lang.*; import java.io.*; public class Solution {          static class SortbyHeight implements Comparator<Struct>         {                      }     static class Struct{         int h,ind;         Struct(int h,int ind){             this.h=h;             this.ind=ind;         }     }     public static void main(String[] args) throws java.lang.Exception {                  FastReader scn = new FastReader();         int t, k, i, j, l, f, max=0;         t=scn.nextInt();         while(t-->0){             int n=scn.nextInt();             int m=scn.nextInt();             int x=scn.nextInt();             Struct a[]=new Struct[n];             for (i=0;i<n;i++){                 a[i]=new Struct(scn.nextInt(),i);             }             Arrays.sort(a,new SortbyHeight());             int b[]=new int[n];             int ms=1;             for (i=0;i<n;i++){                 if (ms>m){                     ms=1;                 }                 b[a[i].ind]=ms;                 ms++;             }             System.out.println(""YES"");             for (i=0;i<n;i++){                 System.out.print(b[i]+"" "");             }             System.out.println();         }        } } ","import java.util.*; import java.io.*; public class Solution { static Scanner scn = new Scanner(System.in); static PrintWriter out = new PrintWriter(System.out); static StringBuilder sb = new StringBuilder(); public static void main(String[] HastaLaVistaLa) { int t = scn.nextInt(); while(t-- > 0) solve(); out.println(sb); out.close(); } public static void solve() { int n = scn.nextInt(), m = scn.nextInt(), x = scn.nextInt(); int[] a = new int[n], ans = new int[n]; for(int i = 0; i < n; i++) a[i] = scn.nextInt(); PriorityQueue<Pair> pq = new PriorityQueue<>(); for(int i = 0; i < m; i++) pq.add(new Pair(0L, i)); for(int i = 0; i < n; i++) { int e = a[i]; Pair p = pq.poll(); p.value += e; pq.add(p); ans[i] = p.id + 1; } boolean check = false; long prev = pq.poll().value; while(!pq.isEmpty()) { long cur = pq.poll().value; if(Math.abs(cur - prev) > x) check = true; prev = cur; } if(check) sb.append(""NO""); else { sb.append(""YES\n""); for(int i : ans) sb.append(i + "" ""); } sb.append(""\n""); } static class Pair implements Comparable<Pair> { int id; long value; public Pair(long value, int id) { this.id = id; this.value = value; } } } ",0
984,"import java.util.*; import java.lang.*; import java.io.*; public class Solution {     public static void main(String[] args) throws java.lang.Exception {         out = new PrintWriter(new BufferedOutputStream(System.out));         sc = new FastReader();         int test = sc.nextInt();         for (int t = 0; t < test; t++) {             solve();         }         out.close();     }     private static void solve() {         int n = sc.nextInt();         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = sc.nextInt();         }         int[] res = new int[n];         if (n % 2 == 0) {             for (int i = 1; i < n; i += 2) {                 res[i] = arr[i - 1];                 res[i - 1] = -arr[i];             }         }else {             for (int i = 4; i < n; i += 2) {                 res[i] = arr[i - 1];                 res[i - 1] = -arr[i];             }             if (arr[0] + arr[1] != 0) {                 res[0] = -arr[2];                 res[1] = -arr[2];                 res[2] = arr[0] + arr[1];             }else if (arr[0] + arr[2] != 0) {                 res[0] = -arr[1];                 res[2] = -arr[1];                 res[1] = arr[0] + arr[2];             }else {                 res[1] = -arr[0];                 res[2] = -arr[0];                 res[0] = arr[1] + arr[2];             }         }         for (int i = 0; i < n; i++) {             out.print(res[i] + "" "");         }         out.println();     }     public static FastReader sc;     public static PrintWriter out;      } ","import java.io.*; import java.util.*; public class Pupsen { public static void main(String[] args) throws Exception { FastIO in = new FastIO(); int t = in.nextInt(); for (int tc=0; tc<t; tc++) { int n = in.nextInt(); int[] a = new int[n]; for (int i=0; i<n; i++) { a[i] = in.nextInt(); } int[] b = new int[n]; if (n%2==0) { for (int i=0; i<n-1; i+=2) { b[i] = -a[i+1]; b[i+1] = a[i]; } for (int i=0; i<n; i++) System.out.print(b[i]+"" ""); } else { if (a[0]+a[1]!=0) { b[0] = -a[2]; b[1] = -a[2]; b[2] = a[0]+a[1]; } else if (a[0]+a[2]!=0) { b[0] = -a[1]; b[2] = -a[1]; b[1] = a[0]+a[2]; } else { b[1] = -a[0]; b[2] = -a[0]; b[0] = a[1]+a[2]; } for (int i=3; i<n-1; i+=2) { b[i] = -a[i+1]; b[i+1] = a[i]; } for (int i=0; i<n; i++) System.out.print(b[i]+"" ""); } System.out.println(); } } } ",1
985,"import java.util.*; import java.lang.*; import java.io.*; public class Solution {     static int MAX = 100005;     static Map<Integer, List<int[]>> graph = new HashMap<>();     static int[] value = new int[MAX];     public static void main(String[] args) throws java.lang.Exception {         out = new PrintWriter(new BufferedOutputStream(System.out));         sc = new FastReader();         int test = sc.nextInt();         for (int t = 0; t < test; t++) {             solve();         }         out.close();     }     private static void solve() {         int n = sc.nextInt();         graph.clear();         for (int i = 1; i <= n; i++) {             graph.put(i, new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             graph.get(u).add(new int[]{v, i});             graph.get(v).add(new int[]{u, i});         }         int node = 0;         for (int i = 1; i <= n; i++) {             int childrens = graph.get(i).size();             if (childrens > 2) {                 out.println(-1);                 return;             }                          if (childrens == 1) {                 node = i;             }         }         dfs(node, 0, 2);         for (int i = 0; i < n - 1; i++) {             out.print(value[i] + "" "");         }         out.println();     }     private static void dfs(int currNode, int parent, int prime) {         int addPrime = prime == 2 ? 3 : 2;         for (int[] adjacentNode : graph.get(currNode)) {             if (adjacentNode[0] == parent) {                 continue;             }             value[adjacentNode[1]] = prime;             dfs(adjacentNode[0], currNode, addPrime);         }     }     public static FastReader sc;     public static PrintWriter out;      } ","import java.util.*; import java.lang.*; import java.io.*; public class Main {     static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out)); public static void main (String[] args) throws java.lang.Exception { FastReader sc = new FastReader(); int t = sc.nextInt(); while(t-->0){          solve(sc);      } } public static void solve(FastReader sc){     int n = sc.nextInt();          ArrayList<ArrayList<Edge>> graph = new ArrayList<ArrayList<Edge>>();     for(int i = 0;i<n;++i){         graph.add(new ArrayList<>());     }     for(int i = 0;i<n-1;++i){         int u = sc.nextInt();         int v = sc.nextInt();                  u--;         v--;                  graph.get(u).add(new Edge(v, i));         graph.get(v).add(new Edge(u, i));                       }          int start = 0;     for(int i = 0;i<n;++i){         if(graph.get(i).size()>2){             out.println(-1);out.flush();return;         }else if(graph.get(i).size()==1){             start=i;         }     }          int val=2;     int [] wgt = new int[n-1];     int curr = graph.get(start).get(0).node;          wgt[graph.get(start).get(0).idx] = val;          val=5;          while(true){         ArrayList<Edge> list = graph.get(curr);         if(list.size()==1){             break;         }else{             for(Edge el : list){                 if(wgt[el.idx]==0){                     wgt[el.idx] = val;                     val = 7-val;                     curr = el.node;                 }             }                      }              }               for(int el : wgt){         out.print(el + "" "");     }     out.println();     out.flush();      } static class Edge {       int node;       int idx;       Edge(int src, int nbr) {          this.node = src;          this.idx = nbr;       }    } } ",0
986,"import java.util.*; import java.lang.*; import java.io.*; public class Template { static class Pair implements Comparable<Pair> { int h; int ind; Pair(int h, int ind) { this.h = h; this.ind = ind; } } public static void main(String[] args) { FastReader fs=new FastReader(); int T=fs.nextInt(); for (int tt=0; tt<T; tt++) { int n = fs.nextInt(); int m = fs.nextInt(); int x = fs.nextInt(); if(n < m) { System.out.println(""NO""); continue; } Pair a[] = new Pair[n]; PriorityQueue<Pair> heap = new PriorityQueue<>(); for(int i=0;i<n;i++) { a[i] = new Pair(fs.nextInt(), i); } Arrays.sort(a); for(int i=1;i<=m;i++) { heap.add(new Pair(0, i)); } int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; int ans[] = new int[n]; int idx = 0; while(!heap.isEmpty() && idx < n) { Pair curr = heap.poll(); curr.h += a[idx].h; ans[a[idx].ind] = curr.ind; heap.add(new Pair(curr.h,  curr.ind)); idx++; } System.out.println(""YES""); for(int i:ans) System.out.print(i+"" ""); System.out.println(); } } } ","import java.util.*; import java.lang.*; import java.io.*; public  class cses {        static int mod=1000000007;     static FastReader sc=new FastReader();     public static void main (String[] args) throws java.lang.Exception     {         long startTime=System.currentTimeMillis();         int t=sc.nextInt();         for(int y=0;y<t;++y)         {            int n=sc.nextInt();            int m=sc.nextInt();            int x=sc.nextInt();            int arr[]=arrayintinput(n);                        int index[]=new int[n];                                    PriorityQueue<Node> pq =new PriorityQueue<Node>(new comp());                       for(int i=0;i<m;++i)            {                pq.add(new Node(0,i+1));            }            for(int i=0;i<n;++i)            {             Node temp=pq.remove();             temp.sum+=arr[i];             index[i]=temp.build;             pq.add(new Node(temp.sum,temp.build));            }            System.out.println(""YES"");             for(int i=0;i<n;++i)             {                 System.out.print(index[i]+"" "");                 }               System.out.println();         }          }          static int[] arrayintinput(int n)     {         int arr[]=new int[n];         for(int i=0;i<n;++i)         {             arr[i]=sc.nextInt();         }         return arr;     }     static class comp implements Comparator<Node>{               }    static class Node{     int sum;     int build;     Node(int sum ,int build)     {     this.sum=sum;     this.build=build;     }     }                         } ",0
987,"import java.util.*; import java.lang.*; import java.io.*; public class codeforces {      public static void main (String[] args) throws java.lang.Exception { FastReader sc=new FastReader(); int t=sc.nextInt(); while(t-->0) {     int n=sc.nextInt();     int m=sc.nextInt();     int x=sc.nextInt();     PriorityQueue<pair> pq=new PriorityQueue<>(new myComp());     myarr a[]=new myarr[n];     int b[]=new int[n];        for(int i=0;i<n;i++)     {         a[i]=new myarr(sc.nextInt(),i);     }     Arrays.sort(a,new mycom());     for(int i=0;i<m;i++)     {         pq.add(new pair(a[i].val,i+1));                b[a[i].ii]=i+1;     }     StringBuffer sb=new StringBuffer();     boolean flag=false;     if(m!=1)     {         for(int i=m;i<n;i++)         {             pair p=pq.poll();             int g=p.b;             int h=pq.peek().b;             if(Math.abs((g+a[i].val)-h)<=x)             {                 b[a[i].ii]=p.t;                 pq.add(new pair(g+a[i].val,p.t));             }             else             {                 flag=true;                 break;             }         }         if(flag)         System.out.println(""NO"");         else         {             System.out.println(""YES"");             for(int i=0;i<n;i++)             {                 sb.append(b[i]+"" "");             }             System.out.println(sb.toString());         }     }     else     {         System.out.println(""YES"");         for(int i=0;i<n;i++)         {             sb.append(""1 "");         }         System.out.println(sb.toString());     } } } static class pair {     int b;     int t;     pair(int b,int t)     {         this.b=b;         this.t=t;     } } static class myComp implements Comparator<pair> {      } static class myarr {     int val,ii;     myarr(int val,int ii)     {         this.val=val;         this.ii=ii;     } } static class mycom implements Comparator<myarr> {      } } ","import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.Collections; import java.util.Comparator; import java.util.Arrays; import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; import java.util.Queue; import java.util.PriorityQueue; import java.util.List; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Map; import java.util.HashMap; import java.util.Scanner; import java.util.Set; import java.util.StringTokenizer; import java.util.Vector; public class Dobby { public static void main(String[] args) { try { FastReader fr = new FastReader(); PrintWriter pt = new PrintWriter(System.out); int t = fr.nextInt(); while (t > 0) { int n = fr.nextInt(), m = fr.nextInt(), x = fr.nextInt(); ArrayList<Pair> pp = new ArrayList<>(); int A[] = new int[n]; for (int i = 0; i < n; i++) { A[i] = fr.nextInt(); Pair pr = new Pair(A[i], i); pp.add(pr); } Collections.sort(pp); Collections.reverse(pp); int ps[] = new int[n]; int pk[] = new int[n]; Arrays.fill(ps, 0); Arrays.fill(pk, 0); int index = 0; for (int i = 0; i < n; i++) { if (pk[index] < x) { pk[index] += pp.get(i).a; } ps[pp.get(i).b] = index + 1; index++; index = index == m ? 0 : index; } pt.println(""YES""); for (int i = 0; i < n; i++) { pt.print(ps[i] + "" ""); } pt.println(); t--; } pt.close(); } catch ( Exception e) { return; } } static void merge(long arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; long L[] = new long[n1]; long R[] = new long[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } static void sort(long arr[], int l, int r) { if (l < r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } static class Pair implements Comparable<Pair> { int a, b; Pair(int a, int b) { this.a = a; this.b = b; } } } ",0
988,"import java.util.*; import java.lang.*; import java.io.*; public class ecf106 { public static void main(String[] args) throws Exception{     InputStreamReader ip=new InputStreamReader(System.in);     BufferedReader br = new BufferedReader(ip);     int t= Integer.parseInt(br.readLine());          while(t-->0){        int n=Integer.parseInt(br.readLine());         String[] strs=(br.readLine()).trim().split("" "");                            long[] arr=new long [n];         for(int i=0;i<n;i++){             arr[i]=Integer.parseInt(strs[i]);         }         long min1=0,min2=0;         long x=0,y=0;         long hor=arr[0],vert=arr[1];         long ans=(n*hor)+(n*vert);                  for(int i=2;i<n;i++){             if(i%2==0){                 x++;                 if(arr[i]>=hor){                        min1+=arr[i];                   }else{                     min1+=hor;  hor=arr[i];                 }             }else{                 y++;                 if(arr[i]>=vert){                        min2+=arr[i];                     }else{                     min2+=vert;  vert=arr[i];                 }             }             long rem=(n-x)*hor+(n-y)*vert;             ans=Math.min(ans, min1+min2+rem);         }         System.out.println(ans);     }     } } ","import java.util.*; import java.lang.*; import java.io.*; public class C { public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int t = Integer.parseInt(br.readLine()); StringBuilder sb = new StringBuilder(); while (t-- > 0) { String[] scn = (br.readLine()).trim().split("" ""); int n = Integer.parseInt(scn[0]); long[] arr = new long[n]; scn = (br.readLine()).trim().split("" ""); for (int i = 0; i < n; i++) { arr[i] = Long.parseLong(scn[i]); } long min; long hor = arr[0], ver = arr[1]; long min1 = 0, min2 = 0; min = (hor + ver) * n; long x = 0, y = 0; for (int i = 2; i < n; i++) { if (i % 2 == 0) { x += 1; if (arr[i] >= hor) { min1 += arr[i]; } else { min1 += hor; hor = arr[i]; } } else { y += 1; if (arr[i] >= ver) { min2 += arr[i]; } else { min2 += ver; ver = arr[i]; } } long pro =  (n - x) * hor + (n - y) * ver; min = Math.min(min, min1 + min2 +pro); } sb.append(min); sb.append(""\n""); } System.out.println(sb); return; } } ",1
989,"import java.util.*; import java.lang.*; import java.io.*; public final class Solution {          public static void main(String[] args) throws Exception {                  Reader sc = new Reader();         BufferedWriter op = new BufferedWriter(new OutputStreamWriter(System.out));                    int n=sc.nextInt();           ArrayList<Integer> fill= new ArrayList<Integer>();           ArrayList<Integer> unfilled= new ArrayList<>();           for(int i=0;i<n;i++){               int x =sc.nextInt();               if(x==1){                   fill.add(i);               }else{                   unfilled.add(i);               }           }           Collections.sort(fill);           Collections.sort(unfilled);                                 long[][] dp =new long[fill.size()+1][unfilled.size()+1];            for(int i=0;i<fill.size()+1;i++){               for(int j=0;j<unfilled.size()+1;j++){                   dp[i][j]=Integer.MAX_VALUE;               }           }           for(int i=0;i<unfilled.size()+1;i++){               dp[0][i]=0;           }                                                for(int i=1;i<fill.size()+1;i++){               for(int j=1;j<unfilled.size()+1;j++){                   dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(fill.get(i-1)-unfilled.get(j-1)));               }           }           System.out.println(dp[fill.size()][unfilled.size()]);                                                                              }         } ","import java.io.*;     import java.util.*;     import java.lang.Math;     public class Main {           static Scanner sc;           static StringBuilder ans;                      static int ni()     { return sc.nextInt();       }                                                                                                                             static void runIo() throws Exception  {                sc = new Scanner(System.in);           }                                                                                                                                                           public static void main(String[] args)  throws Exception {                                runIo();                              int t;                t = 1;                                                             ans = new StringBuilder();                           while( t-- > 0 ) {                        solve();                }                                           System.out.println(ans+"""");              }                static int N ;            static int M ;            static ArrayList<Integer> f;           static ArrayList<Integer> e;           static long dp[][];           static long find(int i, int j ) {                                if( i == N )   return 0;                if( j == M )   return Integer.MAX_VALUE;                if (dp[i][j] != -1 )                     return dp[i][j];                return dp[i][j] = Math.min( find(i, j+1), Math.abs(f.get(i)-e.get(j)) +  find(i+1, j+1) );           }                  public static void solve() {                                     int n = ni();                f = new ArrayList();                e = new ArrayList();                               for(int i = 0; i<n; i++) {                     int v = ni();                     if( v == 0 ) {                          e.add(i);                     }                     else                          f.add(i);                }                N = f.size();                M = e.size();                               dp = new long[N][M];                for(int i = 0; i<N; i++)                     Arrays.fill(dp[i], -1);                ans.append(find(0, 0)+""\n"");           }        } ",0
990,"import java.util.*; import java.lang.*; import java.io.*; public final class Solution {          public static void main(String[] args) throws Exception {                  Reader sc = new Reader();         BufferedWriter op = new BufferedWriter(new OutputStreamWriter(System.out));                    int n=sc.nextInt();           ArrayList<Integer> fill= new ArrayList<Integer>();           ArrayList<Integer> unfilled= new ArrayList<>();           for(int i=0;i<n;i++){               int x =sc.nextInt();               if(x==1){                   fill.add(i);               }else{                   unfilled.add(i);               }           }           Collections.sort(fill);           Collections.sort(unfilled);                                 long[][] dp =new long[fill.size()+1][unfilled.size()+1];            for(int i=0;i<fill.size()+1;i++){               for(int j=0;j<unfilled.size()+1;j++){                   dp[i][j]=Integer.MAX_VALUE;               }           }           for(int i=0;i<unfilled.size()+1;i++){               dp[0][i]=0;           }                                                for(int i=1;i<fill.size()+1;i++){               for(int j=1;j<unfilled.size()+1;j++){                   dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(fill.get(i-1)-unfilled.get(j-1)));               }           }           System.out.println(dp[fill.size()][unfilled.size()]);                                                                              }         } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.StringTokenizer;   public class taskd {     public static void main(String[] args) {         FastScanner in = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         taskd sol = new taskd();         sol.solve(in, out);         out.flush();     }     void solve(FastScanner in, PrintWriter out) {         int n = in.nextInt();         ArrayList<Integer> a = new ArrayList<>();         ArrayList<Integer> b = new ArrayList<>();         for (int i = 0; i < n; i++) {             int x = in.nextInt();             if (x == 1) {                 a.add(i);             } else {                 b.add(i);             }         }         long dp[][] = new long[a.size() + 5][b.size() + 5];         for (int i = a.size()-1; i >= 0; i--) {             dp[i][b.size()] = Integer.MAX_VALUE;             for (int j = b.size()-1; j >= 0; j--) {                 dp[i][j] = dp[i][j + 1];                 dp[i][j] = Math.min(dp[i][j], Math.abs(a.get(i) - b.get(j)) + dp[i + 1][j + 1]);             }         }         out.println(dp[0][0]);     }      } ",0
991,"import java.util.*; import java.lang.*; import java.io.*; public final class Solution {          public static void main(String[] args) throws Exception {                  Reader sc = new Reader();         BufferedWriter op = new BufferedWriter(new OutputStreamWriter(System.out));                    int n=sc.nextInt();           ArrayList<Integer> fill= new ArrayList<Integer>();           ArrayList<Integer> unfilled= new ArrayList<>();           for(int i=0;i<n;i++){               int x =sc.nextInt();               if(x==1){                   fill.add(i);               }else{                   unfilled.add(i);               }           }           Collections.sort(fill);           Collections.sort(unfilled);                                 long[][] dp =new long[fill.size()+1][unfilled.size()+1];            for(int i=0;i<fill.size()+1;i++){               for(int j=0;j<unfilled.size()+1;j++){                   dp[i][j]=Integer.MAX_VALUE;               }           }           for(int i=0;i<unfilled.size()+1;i++){               dp[0][i]=0;           }                                                for(int i=1;i<fill.size()+1;i++){               for(int j=1;j<unfilled.size()+1;j++){                   dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(fill.get(i-1)-unfilled.get(j-1)));               }           }           System.out.println(dp[fill.size()][unfilled.size()]);                                                                              }         } ","import java.util.*; public class D {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int n = scanner.nextInt();         ArrayList<Integer> occupied = new ArrayList<>();         ArrayList<Integer> vacant = new ArrayList<>();         for (int i = 0; i < n; i++) {             int x = scanner.nextInt();             if (x == 1)                 occupied.add(i);             else                 vacant.add(i);         }         Solution Solution = new Solution(occupied, vacant);         System.out.println(Solution.memoization());     } } class Solution {     ArrayList<Integer> occupied, vacant;     int x, y;     public Solution(ArrayList<Integer> occupied, ArrayList<Integer> vacant) {         this.occupied = occupied;         this.vacant = vacant;         x = occupied.size(); y = vacant.size();     }               int memoization() {         int[][] dp = new int[x][y];         for (int i = 0; i < x; i++) {             Arrays.fill(dp[i], -1);         }         return memoization(dp, x-1, y-1);     }     int memoization(int[][] dp, int n, int m) {         if(n < 0) {             return 0;         }         if(m < n) {             return Integer.MAX_VALUE;         }         if(dp[n][m] != -1) {             return dp[n][m];         }         int first = memoization(dp, n, m-1);         int second = memoization(dp, n-1, m-1) + Math.abs(occupied.get(n) - vacant.get(m));         dp[n][m] = Math.min(first, second);         return dp[n][m];     } } ",0
992,"import java.util.*; import java.lang.*; public class Codeforces {     static Scanner sr=new Scanner(System.in);     public static void main(String[] args) throws java.lang.Exception {         StringBuilder ans = new StringBuilder("""");         int T = sr.nextInt();         while (T-- > 0) {             int n=sr.nextInt();             int m=sr.nextInt();             int x=sr.nextInt();             TreeMap<Integer,ArrayList<Integer>>h=new TreeMap<>();             for(int i=0;i<n;i++)             {                 int a=sr.nextInt();                 if(!h.containsKey(a))                     h.put(a,new ArrayList<>());                 h.get(a).add(i);             }             ans.append(""YES"");             ans.append('\n');             int an[]=new int[n];             int q=0;             for(int z:h.keySet())             {                 for(int i=0;i<h.get(z).size();i++)                 {                     an[h.get(z).get(i)]=(q++)%m+1;                 }             }             for(int i=0;i<n;i++)                 ans.append(an[i]+"" "");             ans.append('\n');         }         System.out.println(ans);     } } ","import java.util.*; import java.io.*; import java.lang.*; import java.util.StringTokenizer; import java.util.concurrent.TimeUnit; public class C101 {     static HritikScanner sc = new HritikScanner();     static PrintWriter pw = new PrintWriter(System.out, true);     public static void main(String[] args) {         int t = ni();         while (t-- > 0) {             solve();         }     }      static void solve() {          int n = ni();          int m = ni(), x = ni();          Map<Integer, ArrayList<Integer>> map = new TreeMap<>();          System.out.println(""YES"");          for(int i = 0; i < n; i++)          {              int num = ni();              if(!map.containsKey(num))              {                  map.put(num, new ArrayList<Integer>());              }              map.get(num).add(i);          }          int[] ans = new int[n];          int q = 0;          for(int block : map.keySet())          {              for(int i = 0; i < map.get(block).size(); i++)              {                  ans[map.get(block).get(i)] = (q++)%m+1;              }          }          for(int ele : ans)          {              System.out.print(ele + "" "");          }      }                                        static int ni() {         return sc.nextInt();     }                                                                                                                                                                                } ",1
993,"import java.util.*; import java.math.*; import java.io.*;   public class A{ static FastReader scan=new FastReader();  public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));   static LinkedList<Integer>edges[];   static boolean stdin = true;     static String filein = ""input"";     static String fileout = ""output""; static int dx[] = { -1, 0, 1, 0 }; static int dy[] = { 0, 1, 0, -1 }; int dx_8[]={1,1,1,0,0,-1,-1,-1}; int dy_8[]={-1,0,1,-1,1,-1,0,1}; static char sts[]={'U','R','D','L'}; static boolean prime[];                                              static int perm=0,FOR=0;                   static boolean flag=false; static int len=100000000; static ArrayList<Pair>inters=new ArrayList<Pair>(); static StringBuilder sb;  private static int next(int[] arr, int target)       {           int start = 0, end = arr.length - 1;                int ans = -1;           while (start <= end) {               int mid = (start + end) / 2;                                              if(arr[mid]==target)                 return mid;             if (arr[mid] <target) {                   start = mid + 1;               }                                 else {                   ans = mid;                   end = mid - 1;               }           }           return ans;       }                static StringBuilder a,b;      static ArrayList<Integer>v; static ArrayList<Integer>pows;      static long mod=(long)(1e9)+7;                   static int dp[][];     static int n;     static int arr[];                   public static void main(String[] args)  throws Exception  {          int tt=1;            tt=scan.nextInt(); outer:while(tt-->0) {  int n=scan.nextInt(),m=scan.nextInt();  char board[][]=new char[n][m];  for(int i=0;i<n;i++)     board[i]=scan.next().toCharArray(); ArrayList<Pair>res[]=new ArrayList[3*n*m]; for(int i=0;i<3*n*m;i++) res[i]=new ArrayList(); int k=0; for(int i=0;i<n;i++) {     for(int j=0;j<m;j++)     {         ArrayList<Pair>arr=new ArrayList<Pair>();         ArrayList<Pair>arr2=new ArrayList<Pair>();         if(i+1<n&&j+1<m)         {             if(board[i][j]=='1')                 arr.add(new Pair(i,j));             else arr2.add(new Pair(i,j));             if(board[i][j+1]=='1')                 arr.add(new Pair(i,j+1));             else  arr2.add(new Pair(i,j+1));                          if(board[i+1][j]=='1')                 arr.add(new Pair(i+1,j));             else arr2.add(new Pair(i+1,j));             if(board[i+1][j+1]=='1')                 arr.add(new Pair(i+1,j+1));             else arr2.add(new Pair(i+1,j+1));             if(arr.size()==3)             {                 for(Pair p:arr){                     board[p.x][p.y]='0';                     res[k].add(new Pair(p.x,p.y));                 }                 k++;             }             else if(arr.size()==2)             {                 for(Pair p:arr2)                 {                     board[p.x][p.y]='1';                      res[k].add(new Pair(p.x,p.y));                 }                                  Pair p=arr.get(0);                 board[p.x][p.y]='0';                 res[k].add(new Pair(p.x,p.y));                 k++;                 for(Pair pp:arr2)                 {                     board[pp.x][pp.y]='0';                     res[k].add(new Pair(pp.x,pp.y));                 }                 p=arr.get(1);                 board[p.x][p.y]='0';                 res[k].add(new Pair(p.x,p.y));                 k++;             }             else if(arr.size()==1)             {                 Pair p=arr.get(0);                 Pair tmp=new Pair(p.x,p.y);                 board[p.x][p.y]='0';                 res[k].add(new Pair(p.x,p.y));                 p=arr2.get(1);                  board[p.x][p.y]='1';                 res[k].add(new Pair(p.x,p.y));                   p=arr2.get(2);                  board[p.x][p.y]='1';                 res[k].add(new Pair(p.x,p.y));                 k++;                 arr=new ArrayList();                 arr.add(new Pair(arr2.get(1).x,arr2.get(1).y));                 arr.add(new Pair(arr2.get(2).x,arr2.get(2).y));                 arr2.remove(1);                 arr2.remove(1);                 arr2.add(new Pair(tmp.x,tmp.y));                 for(Pair pp:arr2)                 {                     board[pp.x][pp.y]='1';                      res[k].add(new Pair(pp.x,pp.y));                 }                                   p=arr.get(0);                 board[p.x][p.y]='0';                 res[k].add(new Pair(p.x,p.y));                 k++;                 for(Pair pp:arr2)                 {                     board[pp.x][pp.y]='0';                     res[k].add(new Pair(pp.x,pp.y));                 }                 p=arr.get(1);                 board[p.x][p.y]='0';                 res[k].add(new Pair(p.x,p.y));                 k++;             }             else if(arr.size()==4)             {                 Pair p=arr.get(0);                 board[p.x][p.y]='0';                 arr2.add(new Pair(p.x,p.y));                 res[k].add(new Pair(p.x,p.y));                  p=arr.get(1);                 board[p.x][p.y]='0';                 arr2.add(new Pair(p.x,p.y));                   res[k].add(new Pair(p.x,p.y));                  p=arr.get(2);                 board[p.x][p.y]='0';                 arr2.add(new Pair(p.x,p.y));                   res[k].add(new Pair(p.x,p.y));                   k++;                 arr.remove(0);                 arr.remove(0);                 arr.remove(0);                 p=arr.get(0);                 Pair tmp=new Pair(p.x,p.y);                 board[p.x][p.y]='0';                 res[k].add(new Pair(p.x,p.y));                 p=arr2.get(1);                  board[p.x][p.y]='1';                 res[k].add(new Pair(p.x,p.y));                   p=arr2.get(2);                  board[p.x][p.y]='1';                 res[k].add(new Pair(p.x,p.y));                 k++;                 arr=new ArrayList();                 arr.add(new Pair(arr2.get(1).x,arr2.get(1).y));                 arr.add(new Pair(arr2.get(2).x,arr2.get(2).y));                 arr2.remove(1);                 arr2.remove(1);                 arr2.add(new Pair(tmp.x,tmp.y));                 for(Pair pp:arr2)                 {                     board[pp.x][pp.y]='1';                      res[k].add(new Pair(pp.x,pp.y));                 }                                   p=arr.get(0);                 board[p.x][p.y]='0';                 res[k].add(new Pair(p.x,p.y));                 k++;                 for(Pair pp:arr2)                 {                     board[pp.x][pp.y]='0';                     res[k].add(new Pair(pp.x,pp.y));                 }                 p=arr.get(1);                 board[p.x][p.y]='0';                 res[k].add(new Pair(p.x,p.y));                 k++;             }         }     } } out.println(k); for(int i=0;i<k;i++) {     for(Pair p:res[i])         out.print((p.x+1)+"" ""+(p.y+1)+"" "");     out.println(); } }   out.close(); }      static class Pair implements Comparable<Pair>{         public int x, y;         public Pair(int x1, int y1) {             x=x1;             y=y1;         }                            }        } ","import java.util.*; import java.io.*; import java.math.*; import java.lang.*; public class BinaryTable {               static int mod = 1000000007;          public static void main(String[] args) throws Exception {         FastReader scn = new FastReader();         PrintWriter pw = new PrintWriter(System.out);         int t = scn.nextInt();         outer : while(t-->0){             int n = scn.nextInt();             int m = scn.nextInt();             int[][] arr = new int[n][m];             for(int i=0; i<n; i++){             String s = scn.nextLine();             for(int j=0; j<m; j++){             char ch = s.charAt(j);             arr[i][j] = ch - '0';             }             }             ArrayList<Pair> list = new ArrayList<>();             if(n % 2 == 0 && m % 2 == 0){             for(int i=0; i<n; i+=2){             for(int j=0; j<m; j+=2){             if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j+1] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i][j+1] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             }else if(arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j+1] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }else if(arr[i][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }             }             }             }else if(n % 2 == 0 && m % 2 == 1){             int M = m-1;             for(int i=0; i<n; i+=2){             for(int j=0; j<M; j+=2){             if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j+1] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i][j+1] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             }else if(arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j+1] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }else if(arr[i][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }             }             }             for(int i=0; i<n; i+=2){             if(arr[i][m-1] == 1 && arr[i+1][m-1] == 1){             list.add(new Pair(i, m-2));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i, m-2));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i, m-1));             }else if(arr[i][m-1] == 1){             list.add(new Pair(i, m-2));             list.add(new Pair(i, m-1));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i, m-1)); list.add(new Pair(i+1, m-1));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i, m-2));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i, m-1));             }else if(arr[i+1][m-1] == 1){             list.add(new Pair(i, m-1));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i, m-2));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i, m-1));            list.add(new Pair(i, m-2));             }             }             }else if(n % 2 == 1 && m % 2 == 0){             int N = n-1;             for(int i=0; i<N; i+=2){             for(int j=0; j<m; j+=2){             if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j+1] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i][j+1] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             }else if(arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j+1] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }else if(arr[i][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }             }             }             for(int j=0; j<m; j+=2){             if(arr[n-1][j] == 1 && arr[n-1][j+1] == 1){             list.add(new Pair(n-2, j));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-1, j+1));             list.add(new Pair(n-1, j));             list.add(new Pair(n-2, j));             list.add(new Pair(n-2, j+1));             }else if(arr[n-1][j] == 1){             list.add(new Pair(n-2, j));             list.add(new Pair(n-1, j));             list.add(new Pair(n-1, j+1));             list.add(new Pair(n-1, j)); list.add(new Pair(n-1, j+1));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-1, j));             list.add(new Pair(n-2, j));             }else if(arr[n-1][j+1] == 1){             list.add(new Pair(n-1, j));             list.add(new Pair(n-1, j+1));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-2, j));             list.add(new Pair(n-1, j+1));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-2, j));             list.add(new Pair(n-1, j));            list.add(new Pair(n-1, j+1));             }             }             }else if(n % 2 == 1 && m % 2 == 1){             int N = n-1;             int M = m-1;             for(int i=0; i<N; i+=2){             for(int j=0; j<M; j+=2){             if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j+1] == 1 && arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i][j+1] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j] == 1 && arr[i][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             }else if(arr[i+1][j] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             }else if(arr[i][j+1] == 1 && arr[i+1][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             }else if(arr[i][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }else if(arr[i][j+1] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i+1][j] == 1){             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i, j));             }else if(arr[i+1][j+1] == 1){             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j+1));             list.add(new Pair(i+1, j+1));             list.add(new Pair(i, j));             list.add(new Pair(i+1, j));             }             }             }             for(int j=0; j<M; j+=2){             if(arr[n-1][j] == 1 && arr[n-1][j+1] == 1){             list.add(new Pair(n-2, j));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-1, j+1));             list.add(new Pair(n-1, j));             list.add(new Pair(n-2, j));             list.add(new Pair(n-2, j+1));             }else if(arr[n-1][j] == 1){             list.add(new Pair(n-2, j));             list.add(new Pair(n-1, j));             list.add(new Pair(n-1, j+1));             list.add(new Pair(n-1, j)); list.add(new Pair(n-1, j+1));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-1, j));             list.add(new Pair(n-2, j));             }else if(arr[n-1][j+1] == 1){             list.add(new Pair(n-1, j));             list.add(new Pair(n-1, j+1));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-2, j));             list.add(new Pair(n-1, j+1));             list.add(new Pair(n-2, j+1));             list.add(new Pair(n-2, j));             list.add(new Pair(n-1, j));            list.add(new Pair(n-1, j+1));             }             }             for(int i=0; i<N; i+=2){             if(arr[i][m-1] == 1 && arr[i+1][m-1] == 1){             list.add(new Pair(i, m-2));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i, m-2));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i, m-1));             }else if(arr[i][m-1] == 1){             list.add(new Pair(i, m-2));             list.add(new Pair(i, m-1));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i, m-1)); list.add(new Pair(i+1, m-1));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i, m-2));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i, m-1));             }else if(arr[i+1][m-1] == 1){             list.add(new Pair(i, m-1));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i, m-2));             list.add(new Pair(i+1, m-2));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i+1, m-1));             list.add(new Pair(i, m-1));            list.add(new Pair(i, m-2));             }             }             if(arr[n-1][m-1] == 1){             list.add(new Pair(n-1, m-1));             list.add(new Pair(n-2, m-1));             list.add(new Pair(n-1, m-2));             list.add(new Pair(n-2, m-2));             list.add(new Pair(n-1, m-2));             list.add(new Pair(n-1, m-1));             list.add(new Pair(n-1, m-1));             list.add(new Pair(n-2, m-2));             list.add(new Pair(n-2, m-1));             }             }             int k = list.size()/3;             pw.println(k);             for(int i=0; i<k; i++){             for(int j=0; j<3; j++){             Pair p = list.get(i*3+j);             pw.print((p.x+1) + "" "" + (p.y+1) + "" "");             }             pw.println();             }         }         pw.close();     }     public static class Pair{         int x;         int y;         Pair(int x, int y){             this.x = x;             this.y = y;         }     }                                                                                                                                                                            } ",0
994,"import java.util.*; import java.math.*; import java.io.*;   public class B{ static int[] dx = new int[]{-1,0,1,0};     static int[] dy = new int[]{0,1,0,-1};     static FastReader scan=new FastReader();    public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));   static ArrayList<Pair>es;   static LinkedList<Integer>edges[];   static Set<Pair>edges2[][];    static boolean prime[];                                                                                 static int mid;                 static int cnt=0; static int count1[];    static long arr[]; static int n; static long res,tmpres; static ArrayList<Pair>pairs; static boolean vis[]; static long dp[][]; static long dfs(int x,long last,int prev) {            if(dp[x][prev]!=-1){                 return dp[x][prev];     }     long ch1=0,ch2=0,res=0;     for(int v:edges[x])     {         if(!vis[v])         {             vis[v]=true;                                     res+=Math.max((dfs(v,pairs.get(v).x,1)+Math.abs(pairs.get(v).x-last)),(dfs(v,pairs.get(v).y,2)+Math.abs(pairs.get(v).y-last)));                         vis[v]=false;         }     }     return dp[x][prev]=res; } public static void main(String[] args)  throws Exception  {                                            int tt=1;        tt=scan.nextInt();   outer:while(tt-->0)  { int n=scan.nextInt(); pairs=new ArrayList<Pair>(); edges=new LinkedList[n]; for(int i=0;i<n;i++) edges[i]=new LinkedList(); for(int i=0;i<n;i++) {     long l=scan.nextLong(),r=scan.nextLong();     pairs.add(new Pair(l,r)); } for(int i=0;i<n-1;i++) {     int a=scan.nextInt()-1;     int b=scan.nextInt()-1;     edges[a].add(b);     edges[b].add(a); } vis=new boolean[n]; vis[0]=true; dp=new long[n][3]; for(long K[]:dp)     Arrays.fill(K,-1); long x=dfs(0,pairs.get(0).x,0); vis=new boolean[n]; vis[0]=true; dp=new long[n][3]; for(long K[]:dp)     Arrays.fill(K,-1); out.println(Math.max(x,dfs(0,pairs.get(0).y,0))); } out.close(); }     public static class Pair implements Comparable<Pair>{          long x;          long y;          long ab;                  long z;         public Pair(){}         public Pair(long x1, long y1,long z) {             x=x1;             y=y1;             this.z=z;         }         public Pair(long x1, long y1) {             x=x1;             y=y1;             this.ab=x+y;                  }                                     } } ","import java.util.*; import java.io.*; import java.math.*; public class A { static FastReader f = new FastReader(); static PrintWriter out = new PrintWriter(System.out); public static void main(String[] args) { int t = f.nextInt(); while(t-- > 0) solve(); out.close(); } static Node[] nodes; static long[][] dp; static void solve() { int n = f.nextInt(); nodes = new Node[n]; for(int i=0;i<n;i++) { nodes[i] = new Node(f.nextInt(), f.nextInt()); } for(int i=1;i<n;i++) { int u = f.nextInt() - 1; int v = f.nextInt() - 1; nodes[u].adj.add(v); nodes[v].adj.add(u); } dp = new long[n][2]; for(int i=0;i<n;i++) { for(int j=0;j<2;j++) { dp[i][j] = -1; } } System.out.println(Math.max(rek(-1, 0,false),rek(-1, 0,true))); } static long rek(int from, int now, boolean left) {  if(dp[now][left?0:1] != -1) { return dp[now][left?0:1]; } long ret = 0; for(int i : nodes[now].adj) { if(i == from) { continue; } long l = rek(now,i,false) + Math.abs(nodes[i].right - (left ? nodes[now].left : nodes[now].right)); long r = rek(now,i,true) + Math.abs(nodes[i].left - (left ? nodes[now].left : nodes[now].right)); ret += Math.max(l, r); } dp[now][left?0:1] = ret; return ret; } static class Node { int left, right; ArrayList<Integer> adj = new ArrayList<>(); Node(int left, int right) { this.left = left; this.right = right; } } } ",0
995,"import java.util.*; import java.math.*; import java.io.*; import java.lang.*; public class C_Balanced_Stone_Heaps {     public static int t, n;     public static int H[]; private static long startTime = System.currentTimeMillis(); public static void main(String[] args) { FastReader sc =new FastReader(); t = sc.nextInt();         while (t-->0) {             n = sc.nextInt();             H = new int[n];             int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE; for (int i = 0; i < n; i++) {                 H[i] = sc.nextInt();                 max = Math.max(H[i], max);                 min = Math.min(H[i], min);             }             int mid = 0;             while (min < max) {                 mid = min + (max-min+1)/2;                 if(check(mid)) {                     min = mid;                 }                 else max = mid-1;             }             System.out.println(min);         } }     public static boolean check(int x){         int S[] = Arrays.copyOf(H, H.length);         for (int i = n-1; i >= 2; i--) {             if(S[i]<x) return false;             int move = Math.min(S[i]-x, H[i])/3;             if(i>=2){                                  S[i-1]+=(move);                 S[i-2]+=2*(move);             }         }         return S[0]>= x && S[1] >= x;     } } ","import java.awt.Container; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileNotFoundException; import java.io.FileWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.math.BigInteger; import java.util.*; public class Main {         public static boolean check(int a[],int value)     {            int b[]= new int[a.length];            for (int i = a.length-1; i >=2; i--) {             if(a[i]+b[i]<value)             {                 return false;             }             int d = Math.min(a[i], (a[i]+b[i]-value));             b[i-1]+=d/3;             b[i-2]+=(2*(d/3));                      }                                    if(a[0]+b[0]<value||a[1]+b[1]<value)         {             return false;         }         return true;              }         public static void main(String[] args)     {         FastScanner input = new FastScanner();         StringBuilder result = new StringBuilder();         int tc = input.nextInt();         work:         while (tc-- > 0) {           int n = input.nextInt();         int a[]= new int[n];               int min = Integer.MAX_VALUE;         int max = Integer.MIN_VALUE;         for (int i = 0; i < n; i++) {             a[i] = input.nextInt();             min = Math.min(min, a[i]);             max = Math.max(max, a[i]);                      }         int low = min;         int high  = max;         int ans = 0;         while(low<=high)         {             int mid = low+(high-low)/2;             if(check(a, mid))             {                 ans = mid;                 low = mid+1;             }             else             {                 high = mid-1;             }                                   }         result.append(ans+""\n"");                     }         System.out.println(result);                      }      } ",0
996,"import java.util.*; import java.math.*; import java.io.*; import java.lang.*; public class C_Balanced_Stone_Heaps {     public static int t, n;     public static int H[]; private static long startTime = System.currentTimeMillis(); public static void main(String[] args) { FastReader sc =new FastReader(); t = sc.nextInt();         while (t-->0) {             n = sc.nextInt();             H = new int[n];             int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE; for (int i = 0; i < n; i++) {                 H[i] = sc.nextInt();                 max = Math.max(H[i], max);                 min = Math.min(H[i], min);             }             int mid = 0;             while (min < max) {                 mid = min + (max-min+1)/2;                 if(check(mid)) {                     min = mid;                 }                 else max = mid-1;             }             System.out.println(min);         } }     public static boolean check(int x){         int S[] = Arrays.copyOf(H, H.length);         for (int i = n-1; i >= 2; i--) {             if(S[i]<x) return false;             int move = Math.min(S[i]-x, H[i])/3;             if(i>=2){                                  S[i-1]+=(move);                 S[i-2]+=2*(move);             }         }         return S[0]>= x && S[1] >= x;     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class fastTemp {          static int n;     static int arr[];     public static void main(String[] args)     {         FastReader fs = new FastReader();         int t = fs.nextInt();         while(t-- >0){                n = fs.nextInt();                arr = new int[n];               int max = Integer.MIN_VALUE;               for(int i=0;i<n;i++){                 arr[i] = fs.nextInt();                   if(max<arr[i]){                       max =arr[i];                   }               }               int l=1;               int r = max;               int ans = 0;               while(l<r){                   int mid = l + (r-l+1)/2;                   if(check(mid)){                   l = mid;                   }else{                       r = mid-1;                   }               }             System.out.println(l);         }     } static int min = Integer.MAX_VALUE;     public static boolean check(int x){         int ar[] = new int[n];         for(int i=0;i<n;i++){             ar[i] = arr[i];         }                 for(int i=n-1;i>=2;i--){            if(ar[i]<x){                return false;            }            int d = (Math.min(arr[i],ar[i]-x))/3;           ar[i-1] += d;           ar[i-2] += 2*d;         }         return ar[0]>=x && ar[1]>=x;     } } ",1
997,"import java.util.*; import java.math.*; public class Main { public static class Edge{ int u; int v; Edge(int u, int v){ this.u = u; this.v = v; } } public static void main(String[] args) { Scanner scn = new Scanner(System.in); int t = scn.nextInt(); StringBuilder sb = new StringBuilder(""""); for(int A=0 ; A<t ; A++) { int n = scn.nextInt(); List<Edge>[] graph = new ArrayList[n]; for(int i=0 ; i<n ; i++) { graph[i] = new ArrayList<>(); } String[] arr = new String[n-1]; for(int i=0 ; i<n-1 ; i++) { int u = scn.nextInt(); int v = scn.nextInt(); arr[i] = (u-1) + "" "" + (v-1); graph[u-1].add(new Edge(u-1, v-1)); graph[v-1].add(new Edge(v-1, u-1)); } boolean flag = false; int src = 0; for(int i=0 ; i<n ; i++) { if(graph[i].size() > 2) { flag = true; }else if(graph[i].size() == 1) src = i; } if(flag) { sb.append(-1 + ""\n""); }else { Map<String, Integer> hm = new HashMap<>(); int count = 0; int val = 2; while(count < n) { List<Edge> e = graph[src]; int i=0; while(i < e.size() && hm.containsKey(src + "" "" + e.get(i).v)) i++; if(i < e.size()) { int nbr = e.get(i).v; hm.put(src + "" "" + nbr, val); hm.put(nbr + "" "" + src, val); val = 5 - val; src = nbr; } count++; } for(int i=0 ; i<arr.length ; i++) { int wt = hm.get(arr[i]); sb.append(wt + "" ""); } sb.append(""\n""); } } System.out.println(sb); } } ","import java.io.*; import java.util.ArrayList; import java.util.HashMap; import java.util.StringTokenizer; import java.util.TreeMap; public class NotAssigning {     static ArrayList<Integer>[]adj;     static boolean vis [];     static int edges[];                    public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-->0){             int n = sc.nextInt();             vis= new boolean [n];             adj= new ArrayList[n];             TreeMap<Integer,Pair> idx = new TreeMap<>();             TreeMap<Pair,Integer> w= new TreeMap<>();             boolean notValid = false;             for(int i =0;i<n;i++){                 adj[i]= new ArrayList<>();             }             for(int i =1;i<n;i++){                 int u = sc.nextInt()-1;                 int v = sc.nextInt()-1;                 int max = Math.max(u,v);                 int min = Math.min(u,v);                 idx.put(i,new Pair(min , max));                 adj[u].add(v);                 adj[v].add(u);                 if(adj[u].size()>2||adj[v].size()>2)notValid=true;             }             if(notValid){                 pw.println(-1);                 continue;             }             dfs(0,2,w);             for(int i =1;i<n;i++){                 pw.print(w.get(idx.get(i))+"" "");             }             pw.println();         }         pw.close();     }     static void dfs(int node , int w , TreeMap<Pair , Integer>weight){         vis[node]=true;         int i =0;         for(int x : adj[node]){             if(!vis[x]) {                 int min = Math.min(x , node);                 int max = Math.max(x , node);                 if(i%2==0){                     weight.put(new Pair(min , max),w);                     dfs(x, 5-w,weight);                 }                 else{                     weight.put(new Pair(min , max),5-w);                     dfs(x, w, weight);                 }                 i++;             }             }         }     static class Pair implements Comparable<Pair>{         int x;         int y ;         Pair(int x , int y ){             this.x=x;             this.y=y;         }              }      } ",0
998,"import java.util.*; import java.util.Map.Entry; import java.io.*; import java.math.*; import static java.util.stream.Collectors.*; import static java.util.Map.Entry.*; public class Hey { public static void main (String[] args) throws IOException { final long mod=(long) (1e9+7);   Reader s=new Reader();   PrintWriter pt=new PrintWriter(System.out);   int T=s.nextInt();   while(T-->0)   {   int n=s.nextInt();   int c[]=new int[n];   for(int i=0;i<n;i++) {   c[i]=s.nextInt();   }   long mo[]=new long[n];   long me[]=new long[n];   mo[0]=-1;   me[0]=-1;   mo[1]=c[0];   me[1]=c[1];   long so[]=new long[n];   long se[]=new long[n];   so[1]=c[0];   se[1]=c[1];   for(int i=2;i<n;i++) {   if(i%2==0) {   mo[i]=Math.min(c[i], mo[i-1]);   me[i]=me[i-1];   so[i]=so[i-1]+c[i];   se[i]=se[i-1];   }   else {   mo[i]=mo[i-1];   me[i]=Math.min(c[i], me[i-1]);   so[i]=so[i-1];   se[i]=se[i-1]+c[i];   }   }      long min=Long.MAX_VALUE;   for(int i=1;i<n;i++) {   long k1=0, k2=0;   if(i%2==1) {   k1=i/2+1;   k2=i/2+1;   }   else {   k2=i/2;   k1=k2+1;   }   min=Math.min((n-k1)*mo[i]+so[i]+(n-k2)*me[i]+se[i], min);   }   pt.println(min);   }   pt.close(); }                                                                                                } ","import java.util.*; public class test {     static final long mod = (long) 1e9 + 7;          public static void main(String args[]) {         Scanner sc = new Scanner(System.in);         int t = 1;         t = sc.nextInt();         while (t-- > 0) {                          int n = sc.nextInt();             long[] cost = new long[n];             long[] a = new long[n];             for (int i = 0; i < n; i++) {                 cost[i] = sc.nextLong();                 a[i] = cost[i];                 if (i > 1)                     a[i] = Math.min(a[i], a[i - 2]);             }             long sum = cost[0];             long res = Long.MAX_VALUE;             for (int i = 1; i < n; i++) {                 sum += cost[i];                 long cur = sum - a[i] - a[i - 1];                 int p = (i + 1) / 2;                 int q = (i + 1) - p;                 int x = n - p + 1;                 int y = n - q + 1;                 cur += (a[i - 1] * x + a[i] * y);                 res = Math.min(res, cur);             }             println(res);         }         sc.close();     }          static void println(Object o) {         System.out.println(o);     }                               } ",0
999,"import java.util.*; import java.util.function.BiFunction; import java.util.function.Function; import java.util.function.IntToLongFunction; import java.lang.*; import java.io.*; import java.math.*; public final class CF {      public static void main(String[]args)throws IOException     {         FastReader ob=new FastReader();         int t=ob.nextInt();         StringBuffer sb=new StringBuffer();         while(t-->0)         {             int n=ob.nextInt();             PriorityQueue<Long> a=new PriorityQueue<>();             PriorityQueue<Long> b=new PriorityQueue<>();             long ans=Long.MAX_VALUE;             long sum=0;             for(int i=0;i<n;i++)             {                long x=ob.nextInt();                if(i%2==0)                a.add(x);                else                b.add(x);                  sum+=x;                if(i!=0)                ans=Math.min(ans,sum+(a.peek()*(n-a.size()))+(b.peek()*(n-b.size())));             }                          sb.append(ans+""\n"");         }         System.out.println(sb);     } } ","import java.io.*; import java.util.*; public class test3 { public static void main(String[] args) throws  IOException { FastReader f = new FastReader(); int t = f.nextInt(); while(t-->0) {  int n = f.nextInt();  int C[] = new int[n];  long ans=Long.MAX_VALUE,pre = 0;  PriorityQueue<Integer> epq = new PriorityQueue<Integer>();  PriorityQueue<Integer> opq = new PriorityQueue<Integer>();  for(int i = 0;i<n;i++) {  C[i] = f.nextInt();  if(i%2==0)epq.add(C[i]);  else opq.add(C[i]);  pre+=C[i];  if(i>0) {  ans  = Math.min(ans,pre+ ((long)n-(long)epq.size())*(long)epq.peek()  + ((long)n-(long)opq.size())*(long)opq.peek());  }  }  System.out.println(ans); }     }              } ",1
1000,"import java.util.*; import java.util.function.BiFunction; import java.util.function.Function; import java.util.function.IntToLongFunction; import java.lang.*; import java.io.*; import java.math.*; public final class CF {      public static void main(String[]args)throws IOException     {         FastReader ob=new FastReader();         int t=ob.nextInt();         StringBuffer sb=new StringBuffer();         while(t-->0)         {             int n=ob.nextInt();             PriorityQueue<Long> a=new PriorityQueue<>();             PriorityQueue<Long> b=new PriorityQueue<>();             long ans=Long.MAX_VALUE;             long sum=0;             for(int i=0;i<n;i++)             {                long x=ob.nextInt();                if(i%2==0)                a.add(x);                else                b.add(x);                  sum+=x;                if(i!=0)                ans=Math.min(ans,sum+(a.peek()*(n-a.size()))+(b.peek()*(n-b.size())));             }                          sb.append(ans+""\n"");         }         System.out.println(sb);     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class CF { private static FS sc = new FS(); private static class extra { static int[] intArr(int size) { int[] a = new int[size]; for(int i = 0; i < size; i++) a[i] = sc.nextInt(); return a; } } static long count = 0; public static void main(String[] args) { int t = sc.nextInt(); StringBuilder ret = new StringBuilder(); while(t-- > 0) { int n = sc.nextInt(); int[] a = extra.intArr(n); PriorityQueue<Integer> c = new PriorityQueue<>(); PriorityQueue<Integer> d = new PriorityQueue<>(); long sum = 0; long min = Long.MAX_VALUE; for(int i = 0; i < n; i++) { sum += a[i]; if(i%2 == 0) c.add(a[i]); else d.add(a[i]); if(i != 0) { min = Math.min(min, sum + (n - c.size())*1L*c.peek() + (n-d.size())*1L*d.peek()); } } ret.append(min + ""\n"");  } System.out.println(ret); } } ",1
1001,"import java.util.*; import java.util.function.BiFunction; import java.util.function.Function; import java.util.function.IntToLongFunction; import java.lang.*; import java.io.*; import java.math.*; public final class CF {      public static void main(String[]args)throws IOException     {         FastReader ob=new FastReader();         int t=ob.nextInt();         StringBuffer sb=new StringBuffer();         while(t-->0)         {             int n=ob.nextInt();             PriorityQueue<Long> a=new PriorityQueue<>();             PriorityQueue<Long> b=new PriorityQueue<>();             long ans=Long.MAX_VALUE;             long sum=0;             for(int i=0;i<n;i++)             {                long x=ob.nextInt();                if(i%2==0)                a.add(x);                else                b.add(x);                  sum+=x;                if(i!=0)                ans=Math.min(ans,sum+(a.peek()*(n-a.size()))+(b.peek()*(n-b.size())));             }                          sb.append(ans+""\n"");         }         System.out.println(sb);     } } ","import java.util.*; public class Solve{     public static void main(String[] args){         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();                         while(t-->0){             int n=sc.nextInt();            long ans=Long.MAX_VALUE;            long pre=0;            PriorityQueue<Long> epq=new PriorityQueue<>();            PriorityQueue<Long> opq=new PriorityQueue<>();            for(int i=0;i<n;i++){                long a=sc.nextInt();                if(i%2==0)opq.add(a);                else epq.add(a);                pre+=a;               if(i>0) ans=Math.min(ans,pre+opq.peek()*(n-opq.size())+epq.peek()*(n-epq.size()));                            }           System.out.println(ans);         }     } } ",1
1002,"import java.util.*; import java.util.stream.Collectors; import java.io.*; import java.math.*; public class GR18_C2 { public static FastScanner sc; public static StringBuilder sb ;public static int MOD= 1000000007;     public static void solve(int t) throws IOException {     int n=sc.nextInt();     String a=sc.next();     String b=sc.next();          int _00=0;     int _01=0;     int _10=0;     int _11=0;          for(int i=0;i<n;i++) {     if(a.charAt(i)=='0' && b.charAt(i)=='0') _00++;     if(a.charAt(i)=='0' && b.charAt(i)=='1') _01++;     if(a.charAt(i)=='1' && b.charAt(i)=='0') _10++;     if(a.charAt(i)=='1' && b.charAt(i)=='1') _11++;     }          int ans=Integer.MAX_VALUE;                    if(_01==_10) {     ans=Math.min(ans, _10*2);     }               if(_00+1==_11) {     ans=Math.min(ans, (_11-1)*2+1);     }     if(ans==Integer.MAX_VALUE) sb.append(-1).append('\n');     else sb.append(ans).append('\n');     }      public static void main(String[] args) throws IOException { sb = new StringBuilder(""""); sc = new FastScanner(); int t=sc.nextInt(); for(int i=1;i<=t;i++){ solve(i); } System.out.println(sb); } } ","import java.io.*; import java.util.*; public class new1{          public static int count(int[] arr, int[] dest) {     int n = arr.length;     int count = 0;     for(int i = 0; i < n; i++) {     if(arr[i] != dest[i]) count++;     }     return count;     }                public static void main(String[] args)  throws IOException{     BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out)); FastReader s = new FastReader(); int t = s.nextInt();     for(int z = 0; z < t; z++) {     int n = s.nextInt();     String str1 = s.next();     String str2 = s.next();     int count1  = 0; int count2 = 0;     for(int i = 0; i < n; i++) {     if(str1.charAt(i) == '1') count1++;     if(str2.charAt(i) == '1') count2++;     }     if(!(count1 == count2 || n - count1 + 1 == count2)) {     System.out.println(-1);     continue;     }          int[] arr = new int[n];     int[] dest = new int[n];     for(int i = 0; i < n; i++) {     arr[i] = str1.charAt(i) - '0';     dest[i] = str2.charAt(i) - '0';     }     int ans1 = count(arr, dest);     int ans2 = Integer.MAX_VALUE;     int flag = 0;     for(int i = 0; i < n; i++) {     if(flag == 0 && arr[i] == 1 && dest[i] == 1) {     flag = 1;     }     else {     arr[i] = 1 - arr[i];     }     }          if(flag == 1) {     ans2 = Math.min(ans2, count(arr, dest) + 1);     }     else {     for(int i = 0; i < n; i++) {     if(str1.charAt(i) == '1' && flag == 0) {     flag = 1; arr[i] = 1;     break;     }     }          }     if(flag == 1) ans2 = Math.min(ans2, count(arr, dest) + 1);     int ans = Integer.MAX_VALUE;     if(count1 == count2) ans = Math.min(ans, ans1);     if(n - count1 + 1 == count2) ans = Math.min(ans, ans2);     System.out.println(ans);                    }          } } ",0
1003,"import java.util.*; import java.util.stream.Collectors; import java.io.*; import java.math.*; public class GR18_C2 { public static FastScanner sc; public static StringBuilder sb ;public static int MOD= 1000000007;     public static void solve(int t) throws IOException {     int n=sc.nextInt();     String a=sc.next();     String b=sc.next();          int _00=0;     int _01=0;     int _10=0;     int _11=0;          for(int i=0;i<n;i++) {     if(a.charAt(i)=='0' && b.charAt(i)=='0') _00++;     if(a.charAt(i)=='0' && b.charAt(i)=='1') _01++;     if(a.charAt(i)=='1' && b.charAt(i)=='0') _10++;     if(a.charAt(i)=='1' && b.charAt(i)=='1') _11++;     }          int ans=Integer.MAX_VALUE;                    if(_01==_10) {     ans=Math.min(ans, _10*2);     }               if(_00+1==_11) {     ans=Math.min(ans, (_11-1)*2+1);     }     if(ans==Integer.MAX_VALUE) sb.append(-1).append('\n');     else sb.append(ans).append('\n');     }      public static void main(String[] args) throws IOException { sb = new StringBuilder(""""); sc = new FastScanner(); int t=sc.nextInt(); for(int i=1;i<=t;i++){ solve(i); } System.out.println(sb); } } ","import java.util.*; import java.io.*; import java.math.BigInteger; import java.nio.charset.StandardCharsets; public class Main { private static FS sc = new FS(); static int mod = (int) 1e9; static LinkedList<Integer>[] temp, idx; static long inf = (long) Long.MAX_VALUE; public static void main(String[] args) {  int t = sc.nextInt(); StringBuilder ret = new StringBuilder(); while(t-- > 0) { int n = sc.nextInt(); String a = sc.next(), b = sc.next(); int _00 = 0, _01 = 0, _10 = 0, _11 = 0; for(int i = 0; i < n; i++) { if(a.charAt(i) == '0' && b.charAt(i) == '0') _00++; if(a.charAt(i) == '0' && b.charAt(i) == '1') _01++; if(a.charAt(i) == '1' && b.charAt(i) == '0') _10++; if(a.charAt(i) == '1' && b.charAt(i) == '1') _11++; } int ans = Integer.MAX_VALUE; if(_10 == _01) ans = _01 + _10; if(_10 > 0) { int n00 = _10 - 1;             int n01 = _11;             int n10 = _00 + 1;             int n11 = _01;             if (n01 == n10) {                 ans = Math.min(ans, 1 + n01 + n10);             } } if(_11 > 0) { int n00 = _10;             int n01 = _11 - 1;             int n10 = _00;             int n11 = _01 + 1;             if (n01 == n10) {                 ans = Math.min(ans, 1 + n01 + n10);             } } ret.append(ans == Integer.MAX_VALUE ? -1 : ans); ret.append(""\n""); } System.out.println(ret); } } ",0
1004,"import java.util.*; import javax.swing.text.html.HTMLDocument.HTMLReader.PreAction; import java.io.*; import java.math.*; import java.sql.Array;; public class Main {        static long mod = (long)(1e9 + 7);                                  static FR sc = new FR();  static StringBuilder sb = new StringBuilder();  public static void main(String args[]) {  int tc = 1;   tc = sc.nextInt();      while(tc-->0) {  TEST_CASE();    }       System.out.println(sb);  }  static void TEST_CASE() {  int n = sc.nextInt(); ;  int[] arr = new int[n];  for(int i =0 ; i<n;i++) {  arr[i] = sc.nextInt();  }   boolean cond = false;  Set<Integer> set = new HashSet<>();  set.add(0);  for(int i =0 ; i<n ; i++) {  ArrayList<Integer> al = new ArrayList<>(set);  for(int e:al) {  int num = e+arr[i];  if(set.contains(num)) {  cond = true;  break;  }  set.add(num);  }  }  if(cond) System.out.println(""YES"");  else System.out.println(""NO"");  }   } ","import java.io.PrintWriter; import java.util.*; public class D {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         for (int i = 0; i < t; i++) {             solve(sc, pw);         }         pw.close();     }     static void solve(Scanner in, PrintWriter out){         int n = in.nextInt();         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = in.nextInt();         }         Set<Integer> set = new HashSet<>();         for(int x : arr) {             if (x == 0){                 out.println(""YES"");                 return;             }else if (set.contains(x) || set.contains(-x)){                 out.println(""YES"");                 return;             }             set.add(x);         }         for (int i = 0; i < n; i++) {             if (dfs(0, i, arr, 0)){                 out.println(""YES"");                 return;             }         }         out.println(""NO"");     }     static boolean dfs(int idx, int need, int[] arr, int cur){         if (cur == arr[need]) return true;         if (idx == arr.length) return false;         if (idx == need) return dfs(idx + 1, need, arr, cur);         return dfs(idx + 1, need, arr, cur + arr[idx]) |                 dfs(idx + 1, need, arr, cur - arr[idx]) |                 dfs(idx + 1, need, arr, cur);     } } ",0
1005,"import java.util.*; public class A {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         StringBuilder sb = new StringBuilder();         int testCases = sc.nextInt();         for (int t = 0; t < testCases; t++) {             int n = sc.nextInt();             int m = sc.nextInt();             char c[][] = new char[n][m];             for (int i = 0; i < n; i++) {                 String str = sc.next();                 c[i] = str.toCharArray();             }             int count = 0;             StringBuilder ans = new StringBuilder();             for (int i = 0; i < m - 2; i++) {                 for (int j = 0; j < n; j++) {                     if (c[j][i] == '0') {                         continue;                     }                     count++;                     if (j == n - 1) {                         c[j][i] = '0';                         c[j][i + 1] = (c[j][i + 1] == '0' ? '1' : '0');                         c[j - 1][i + 1] = (c[j - 1][i + 1] == '0' ? '1' : '0');                         ans.append((j + 1) + "" "" + (i + 1) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j) + "" "" + (i + 2))                                 .append(""\n"");                         continue;                     }                     c[j][i] = '0';                     c[j][i + 1] = (c[j][i + 1] == '0' ? '1' : '0');                     c[j + 1][i + 1] = (c[j + 1][i + 1] == '0' ? '1' : '0');                     ans.append((j + 1) + "" "" + (i + 1) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j + 2) + "" "" + (i + 2))                             .append(""\n"");                 }             }             for (int i = 0; i < n - 2; i++) {                 for (int j = m - 2; j < m; j++) {                     if (c[i][j] == '0') {                         continue;                     }                     count++;                     if (j == m - 1) {                         c[i][j] = '0';                         c[i + 1][j] = (c[i + 1][j] == '0' ? '1' : '0');                         c[i + 1][j - 1] = (c[i + 1][j - 1] == '0' ? '1' : '0');                         ans.append((i + 1) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j))                                 .append(""\n"");                         continue;                     }                     c[i][j] = '0';                     c[i + 1][j] = (c[i + 1][j] == '0' ? '1' : '0');                     c[i + 1][j + 1] = (c[i + 1][j + 1] == '0' ? '1' : '0');                     ans.append((i + 1) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j + 2))                             .append(""\n"");                 }             }             ArrayList<String> al = new ArrayList<>();             int count_one = 0;             for (int i = n - 2; i < n; i++) {                 for (int j = m - 2; j < m; j++) {                     if (c[i][j] == '0') {                         al.add((i + 1) + "" "" + (j + 1));                     } else {                         count_one++;                         al.add(0, (i + 1) + "" "" + (j + 1));                     }                 }             }             if (count_one == 0) {                 sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }             if (count_one == 1) {                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(2)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(3)).append(""\n"");                 count = count + 3;                 sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }             if (count_one == 2) {                 ans.append(al.get(0) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                 ans.append(al.get(1) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                 count = count + 2;                 sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }             if (count_one == 3) {                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(2)).append(""\n"");                 count = count + 1;                 sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }             if (count_one == 4) {                 ans.append(al.get(1) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(2)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(3)).append(""\n"");                 count = count + 4;                 sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }         }         System.out.print(sb);     } } ","import java.util.*;   public class A {       public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         StringBuilder sb = new StringBuilder();         int testCases = sc.nextInt();           for (int t = 0; t < testCases; t++) {             int n = sc.nextInt();             int m = sc.nextInt();               char c[][] = new char[n][m];               for (int i = 0; i < n; i++) {                 String str = sc.next();                 c[i] = str.toCharArray();             }               int count = 0;             StringBuilder ans = new StringBuilder();               for (int i = 0; i < m - 2; i++) {                 for (int j = 0; j < n; j++) {                       if (c[j][i] == '0') {                         continue;                     }                     count++;                       if (j == n - 1) {                           c[j][i] = '0';                         c[j][i + 1] = (c[j][i + 1] == '0' ? '1' : '0');                         c[j - 1][i + 1] = (c[j - 1][i + 1] == '0' ? '1' : '0');                           ans.append((j + 1) + "" "" + (i + 1) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j) + "" "" + (i + 2))                                 .append(""\n"");                         continue;                     }                       c[j][i] = '0';                     c[j][i + 1] = (c[j][i + 1] == '0' ? '1' : '0');                     c[j + 1][i + 1] = (c[j + 1][i + 1] == '0' ? '1' : '0');                       ans.append((j + 1) + "" "" + (i + 1) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j + 2) + "" "" + (i + 2))                             .append(""\n"");                   }             }               for (int i = 0; i < n - 2; i++) {                 for (int j = m - 2; j < m; j++) {                     if (c[i][j] == '0') {                         continue;                     }                     count++;                       if (j == m - 1) {                         c[i][j] = '0';                         c[i + 1][j] = (c[i + 1][j] == '0' ? '1' : '0');                         c[i + 1][j - 1] = (c[i + 1][j - 1] == '0' ? '1' : '0');                           ans.append((i + 1) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j))                                 .append(""\n"");                           continue;                     }                       c[i][j] = '0';                     c[i + 1][j] = (c[i + 1][j] == '0' ? '1' : '0');                     c[i + 1][j + 1] = (c[i + 1][j + 1] == '0' ? '1' : '0');                       ans.append((i + 1) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j + 1) + "" "" + (i + 2) + "" "" + (j + 2))                             .append(""\n"");                 }             }               ArrayList<String> al = new ArrayList<>();               int count_one = 0;               for (int i = n - 2; i < n; i++) {                 for (int j = m - 2; j < m; j++) {                       if (c[i][j] == '0') {                         al.add((i + 1) + "" "" + (j + 1));                     } else {                         count_one++;                         al.add(0, (i + 1) + "" "" + (j + 1));                     }                   }             }               if (count_one == 0) {                 sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }               if (count_one == 1) {                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(2)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(3)).append(""\n"");                   count = count + 3;                   sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }               if (count_one == 2) {                 ans.append(al.get(0) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                 ans.append(al.get(1) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                   count = count + 2;                 sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }               if (count_one == 3) {                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(2)).append(""\n"");                   count = count + 1;                 sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;             }               if (count_one == 4) {                 ans.append(al.get(1) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                   ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(2)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(2) + "" "" + al.get(3)).append(""\n"");                 ans.append(al.get(0) + "" "" + al.get(1) + "" "" + al.get(3)).append(""\n"");                   count = count + 4;                   sb.append(count).append(""\n"");                 sb.append(ans).append(""\n"");                 continue;               }           }           System.out.print(sb);     } } ",1
1006,"import java.util.*; public class ArmChairs { static int[]arr; static ArrayList<Integer>a; static ArrayList<Integer>b; static int dp[][]; public static void main(String[] args) { Scanner scn = new Scanner(System.in); int n = scn.nextInt(); arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=scn.nextInt(); } dp=new int[n+1][n+1]; a =new ArrayList<>(); b =new ArrayList<>(); for(int i=0;i<n;i++) { if(arr[i]==0) { a.add(i); }else{ b.add(i); } } System.out.println(solve(0,0)); } public static int solve(int i,int j) { if(i==b.size()) { return 0; } if(j==a.size()) { return 100000000; } if(dp[i][j]!=0) { return dp[i][j]; } int x=Math.abs(a.get(j)-b.get(i))+solve(i+1,j+1); int y=solve(i,j+1); return dp[i][j]=Math.min(x, y); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class P4 { static int dp[][]=new int[5000+1][5000+1]; public static void main(String[] args) { FastReader sc=new FastReader(); int t=1; StringBuilder s=new StringBuilder(); while(t--!=0) { int n=sc.nextInt(); int a[]=new int[n]; for(int i=0;i<=n;i++) { for(int j=0;j<=n;j++) { P4.dp[i][j]=-1; } } ArrayList<Integer> one=new ArrayList<>(); ArrayList<Integer> zero=new ArrayList<>(); for(int i=0;i<n;i++) { a[i]=sc.nextInt(); if(a[i]==0) { zero.add(i); }else { one.add(i); } } Collections.sort(zero); Collections.sort(one); long ans=sol(0,0,zero.size(),one.size(),a,zero,one); System.out.println(ans); } } private static long sol(int i, int j, int n, int m,int a[], ArrayList<Integer> zero, ArrayList<Integer> one) { if(j==m) { return 0; } int av=n-i; int rem=m-j; if(av<rem) { return Integer.MAX_VALUE-1; } if(dp[i][j]!=-1) { return dp[i][j]; } long ans1=sol(i+1,j,n,m,a, zero, one); long ans2=Math.abs(zero.get(i)-one.get(j))+sol(i+1,j+1,n,m,a, zero, one); dp[i][j]=(int) Math.min(ans1, ans2); return dp[i][j]; }   } ",0
1007,"import java.util.*; public class ArmChairs { static int[]arr; static ArrayList<Integer>a; static ArrayList<Integer>b; static int dp[][]; public static void main(String[] args) { Scanner scn = new Scanner(System.in); int n = scn.nextInt(); arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=scn.nextInt(); } dp=new int[n+1][n+1]; a =new ArrayList<>(); b =new ArrayList<>(); for(int i=0;i<n;i++) { if(arr[i]==0) { a.add(i); }else{ b.add(i); } } System.out.println(solve(0,0)); } public static int solve(int i,int j) { if(i==b.size()) { return 0; } if(j==a.size()) { return 100000000; } if(dp[i][j]!=0) { return dp[i][j]; } int x=Math.abs(a.get(j)-b.get(i))+solve(i+1,j+1); int y=solve(i,j+1); return dp[i][j]=Math.min(x, y); } } ","import java.util.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ",0
1008,"import java.util.*; public class Armchairs { public static int findMinTime(List<Integer> zeros, List<Integer> ones) { if (ones.size() == 0) return 0; int oneSize = ones.size(); int zeroSize = zeros.size(); int [][] time = new int [oneSize + 1][zeroSize + 1]; for (int i=1; i<=oneSize; i++) { time[i][i] = time[i - 1][i - 1] + Math.abs(ones.get(i - 1) - zeros.get(i - 1)); for (int j=i+1; j<=zeroSize; j++) { time[i][j] = Math.min(time[i][j - 1], time[i - 1][j - 1] +  Math.abs(ones.get(i - 1) - zeros.get(j - 1))); } } return time[oneSize][zeroSize]; } public static void main (String [] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); List<Integer> zeros = new ArrayList<>(); List<Integer> ones = new ArrayList<>(); for (int i=0; i<n; i++) { int number= sc.nextInt(); if (number == 1) ones.add(i); else zeros.add(i); } System.out.println(findMinTime(zeros, ones)); } } ","import java.io.BufferedReader;  import java.io.IOException;  import java.io.InputStreamReader;  import java.util.Scanner;  import java.util.StringTokenizer; import java.util.*; public class codeforcesD{          public static long dp[][];     public static List<Integer> list1,list0;    public static void main(String args[]){         FastReader sc=new FastReader();         int n=sc.nextInt();         list1=new ArrayList<>();         list0=new ArrayList<>();         for(int i=0;i<n;i++){            int a=sc.nextInt();            if(a==0){list0.add(i);}            if(a==1){list1.add(i);}         }         dp=new long[list1.size()][list0.size()];         for(int i=0;i<list1.size();i++){           for(int j=0;j<list0.size();j++){               dp[i][j]=-1;             }         }         System.out.println(check(0,0));            }     public static long check(int i,int j){           if(i>=list1.size()){return 0;}           if(j>=list0.size()){return Integer.MAX_VALUE;}           if(dp[i][j]!=-1){return dp[i][j];}           dp[i][j]=Math.min(check(i+1,j+1)+(long)Math.abs(list1.get(i)-list0.get(j)),check(i,j+1));          return dp[i][j];      } } ",0
1009,"import java.util.*; public class Armchairs { public static int findMinTime(List<Integer> zeros, List<Integer> ones) { if (ones.size() == 0) return 0; int oneSize = ones.size(); int zeroSize = zeros.size(); int [][] time = new int [oneSize + 1][zeroSize + 1]; for (int i=1; i<=oneSize; i++) { time[i][i] = time[i - 1][i - 1] + Math.abs(ones.get(i - 1) - zeros.get(i - 1)); for (int j=i+1; j<=zeroSize; j++) { time[i][j] = Math.min(time[i][j - 1], time[i - 1][j - 1] +  Math.abs(ones.get(i - 1) - zeros.get(j - 1))); } } return time[oneSize][zeroSize]; } public static void main (String [] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); List<Integer> zeros = new ArrayList<>(); List<Integer> ones = new ArrayList<>(); for (int i=0; i<n; i++) { int number= sc.nextInt(); if (number == 1) ones.add(i); else zeros.add(i); } System.out.println(findMinTime(zeros, ones)); } } ","import java.util.*; public class ArmChairs { static int[]arr; static ArrayList<Integer>a; static ArrayList<Integer>b; static int dp[][]; public static void main(String[] args) { Scanner scn = new Scanner(System.in); int n = scn.nextInt(); arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=scn.nextInt(); } dp=new int[n+1][n+1]; a =new ArrayList<>(); b =new ArrayList<>(); for(int i=0;i<n;i++) { if(arr[i]==0) { a.add(i); }else{ b.add(i); } } System.out.println(solve(0,0)); } public static int solve(int i,int j) { if(i==b.size()) { return 0; } if(j==a.size()) { return 100000000; } if(dp[i][j]!=0) { return dp[i][j]; } int x=Math.abs(a.get(j)-b.get(i))+solve(i+1,j+1); int y=solve(i,j+1); return dp[i][j]=Math.min(x, y); } } ",0
1010,"import java.util.*; public class B {      static Scanner sc = null; public static void main(String[] args) { sc = new Scanner(System.in); int t = sc.nextInt(); while(t-- >0){     int n = sc.nextInt();     sc.nextLine();     String a[] = new String[n];     for(int i=0;i<n;i++){         a[i] = sc.nextLine();     }     ArrayList<Character> a1 = new ArrayList<>();     a1.add('a');     a1.add('b');     a1.add('c');     a1.add('d');     a1.add('e');     int res = 0;     for(Character ch : a1){         ArrayList<Integer> a2 = new ArrayList<>();         for(int i=0;i<n;i++){              int f1 = 0;              int f2 = 0;              String s = a[i];              for(int j=0;j<s.length();j++){                  char c2 = s.charAt(j);                  if(c2==ch)                  f1++;                  else                  f2++;              }              a2.add(f1-f2);         }         Collections.sort(a2);         int sum = 0;         int count = 0;         for(int j = n-1;j>=0;j--){             int num = a2.get(j);             sum+=num;             if(sum>0){                 count++;             }             else             break;         }         res = Math.max(res,count);     }     System.out.println(res); } } } ","import java.util.*; public class shivam{     public static int diff(String str, char ch){         int cnt=0;         for(int i=0;i<str.length();i++){             if(ch==str.charAt(i)){                 cnt++;             }         }         return cnt-(str.length()-cnt);     }     public static int process(char ch,int n,String  []arr){         int[]a=new int[n];             for(int i=0;i<n;i++){                 a[i]=diff(arr[i],ch);             }             Arrays.sort(a);             int max=0;             int sum=0;             for(int i=n-1;i>=0;i--){                 sum+=a[i];                 if(sum>0){                     max++;                 }                 else{                     break;                 }             }         return max;     }     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         int k=sc.nextInt();         while(k-->0){             int n=sc.nextInt();             String []arr=new String[n];             for(int i=0;i<n;i++){                 arr[i]=sc.next();             }             int a=process('a',n,arr);             int b=process('b',n,arr);             int c=process('c',n,arr);             int d=process('d',n,arr);             int e=process('e',n,arr);             System.out.println(Math.max(a,Math.max(b,Math.max(c,Math.max(d,e)))));                     }     } } ",0
1011,"import java.util.*; public class BalancedStoneHeaps {     public static boolean check(int n, int x, int[] h) {         int[] c_h = new int[n];         for (int i = 0; i < n; i++)             c_h[i] = h[i];         for (int i = n - 1; i >= 2; i--) {             if (c_h[i] < x)                 return false;             int d = Math.min(h[i], c_h[i] - x) / 3;             c_h[i - 1] += d;             c_h[i - 2] += 2 * d;         }         return c_h[0] >= x && c_h[1] >= x;     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] h = new int[n];             int max = Integer.MIN_VALUE;             for (int i = 0; i < n; i++) {                 h[i] = sc.nextInt();                 if (h[i] > max) {                     max = h[i];                 }             }             int l = 0;             int r = max;             while (l < r) {                 int mid = l + (r - l + 1) / 2;                 if (check(n, mid, h)) {                     l = mid;                 } else {                     r = mid - 1;                 }             }             System.out.println(l);         }     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class fastTemp {          static int n;     static int arr[];     public static void main(String[] args)     {         FastReader fs = new FastReader();         int t = fs.nextInt();         while(t-- >0){                n = fs.nextInt();                arr = new int[n];               int max = Integer.MIN_VALUE;               for(int i=0;i<n;i++){                 arr[i] = fs.nextInt();                   if(max<arr[i]){                       max =arr[i];                   }               }               int l=1;               int r = max;               int ans = 0;               while(l<r){                   int mid = l + (r-l+1)/2;                   if(check(mid)){                   l = mid;                   }else{                       r = mid-1;                   }               }             System.out.println(l);         }     } static int min = Integer.MAX_VALUE;     public static boolean check(int x){         int ar[] = new int[n];         for(int i=0;i<n;i++){             ar[i] = arr[i];         }                 for(int i=n-1;i>=2;i--){            if(ar[i]<x){                return false;            }            int d = (Math.min(arr[i],ar[i]-x))/3;           ar[i-1] += d;           ar[i-2] += 2*d;         }         return ar[0]>=x && ar[1]>=x;     } } ",1
1012,"import java.util.*; public class CF763C { private static final int MAX = 1000000001; private static final int MIN = 0; public static final void main(String ...args) { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); int[] h = new int[n]; int i, b = MAX, e = MIN; for (i = 0; i < n; i++) { h[i] = sc.nextInt(); if (b > h[i]) b = h[i]; if (e < h[i]) e = h[i]; } int[] s = new int[n]; int c, d, ans = b; while (b <= e) { c = (b + e) / 2; for (i = 0; i < n; i++) { s[i] = 0; } for (i = n - 1; i >= 2; i--) { if (h[i] + s[i] < c) { e = c - 1; break; } else { d = Math.min(h[i], h[i] + s[i] - c) / 3; s[i - 1] += d; s[i - 2] += 2 * d; } } if (i == 1) { if (h[i] + s[i] < c || h[i - 1] + s[i - 1] < c) { e = c - 1; } else { ans = c; b = c + 1; } } } System.out.println(ans); } } } ","import java.util.*; public class BalancedStoneHeaps {     public static boolean check(int n, int x, int[] h) {         int[] c_h = new int[n];         for (int i = 0; i < n; i++)             c_h[i] = h[i];         for (int i = n - 1; i >= 2; i--) {             if (c_h[i] < x)                 return false;             int d = Math.min(h[i], c_h[i] - x) / 3;             c_h[i - 1] += d;             c_h[i - 2] += 2 * d;         }         return c_h[0] >= x && c_h[1] >= x;     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             int[] h = new int[n];             int max = Integer.MIN_VALUE;             for (int i = 0; i < n; i++) {                 h[i] = sc.nextInt();                 if (h[i] > max) {                     max = h[i];                 }             }             int l = 0;             int r = max;             while (l < r) {                 int mid = l + (r - l + 1) / 2;                 if (check(n, mid, h)) {                     l = mid;                 } else {                     r = mid - 1;                 }             }             System.out.println(l);         }     } } ",0
1013,"import java.util.*; public class CodeForces { static ArrayList<String>res; public static void main(String[] args) { Scanner input = new Scanner(System.in); int test = input.nextInt(); while(test-->0){ int n = input.nextInt(); int m = input.nextInt(); char arr[][] = new char[n][m]; res = new ArrayList<>(); for(int i =0;i<n;i++){ for(int j =0;j<1;j++){ arr[i] = input.next().toCharArray(); } } for(int i =0;i<n-1;i++){ for(int j =0;j<m-1;j++){ int count =0; if(arr[i+1][j] == '1')count++; if(arr[i][j+1] == '1')count++; if(arr[i][j] == '1')count++; if(arr[i+1][j+1] == '1')count++; if(count == 0)continue; if(count == 1)one(arr,i,j); if(count == 2)two(arr,i,j); if(count == 3)three(arr,i,j); if(count == 4)four(arr,i,j); } } System.out.println(res.size()); for(String it:res)System.out.println(it); } } public static void one(char arr[][],int i,int j){ int row = i+2; int col = j+2; int count =0; StringBuilder sb = new StringBuilder(); for(int x=i;x<row;x++){ for(int y = j;y<col;y++){ if(arr[x][y] == '1' ){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '0'; sb.append("" ""); }else if(arr[x][y] == '0' && count<2){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '1'; sb.append("" ""); count++; } } } res.add(sb.toString()); two(arr,i,j); } public static void two(char arr[][],int i,int j){ int row = i+2; int col = j+2; boolean ok = true; StringBuilder sb = new StringBuilder(); for(int x=i;x<row;x++){ for(int y = j;y<col;y++){ if(arr[x][y] == '1' && ok){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '0'; sb.append("" ""); ok = false; }else if(arr[x][y] == '0'){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '1'; sb.append("" ""); } } } res.add(sb.toString()); three(arr,i,j); } public static void three(char arr[][],int i,int j){ StringBuilder sb = new StringBuilder(); if(arr[i][j] == '1'){ sb.append(i+1); sb.append("" ""); sb.append(j+1); arr[i][j] = '0'; sb.append("" ""); } if(arr[i+1][j] == '1'){ sb.append(i+2); sb.append("" ""); sb.append(j+1); arr[i+1][j] = '0'; sb.append("" ""); } if(arr[i][j+1] == '1'){ arr[i][j+1] ='0'; sb.append(i+1); sb.append("" ""); sb.append(j+2); sb.append("" ""); } if(arr[i+1][j+1] == '1'){ arr[i+1][j+1] = '0'; sb.append(i+2); sb.append("" ""); sb.append(j+2); } res.add(sb.toString()); } public static void four(char arr[][],int i,int j){ int row = i+2; int col = j+2; int count =0; StringBuilder sb = new StringBuilder(); for(int x=i;x<row;x++){ for(int y = j;y<col;y++){ if(count<3){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '0'; sb.append("" ""); count++; } } } res.add(sb.toString()); one(arr,i,j); } } ","import java.util.*; import java.io.*; public class C{                     static int mod = (int)(1e9+7);               static void flip(char[][] arr,int i,int j)     {         if(arr[i][j]=='1')             arr[i][j] = '0';         else             arr[i][j] = '1';     }     static void add2s(StringBuilder sb,int n,int m)     {         sb.append((n) +"" "" + (m-1) + "" ""  +(n-1) + "" "" + (m) + "" ""  +(n) + "" "" + (m)+""\n"");         sb.append((n-1) +"" "" + (m-1) + "" ""  +(n-1) + "" "" + (m) + "" ""  +(n) + "" "" + (m)+""\n"");     }     static void add3s(StringBuilder sb,int n,int m)     {         sb.append((n) +"" "" + (m-1) + "" ""  +(n-1) + "" "" + (m-1) + "" ""  +(n) + "" "" + (m)+""\n"");         sb.append((n-1) +"" "" + (m-1) + "" ""  +(n) + "" "" + (m-1) + "" ""  +(n-1) + "" "" + (m)+""\n"");     }     public static void main(String[] args) {         InputReader in = new InputReader(System.in);         OutputWriter out = new OutputWriter(System.out);         int t = in.nextInt();         while(t-- >0)         {                          int n = in.nextInt(),m = in.nextInt();             char[][] arr = new char[n][m];             for(int i=0;i<n;i++)                 arr[i] = in.nextLine().toCharArray();                          int nops = 0;             StringBuilder res = new StringBuilder();                          for(int i=0;i<n-1;i++)             {                 for(int j=0;j<m;j++)                 {                     if(arr[i][j]=='1')                     {                         nops++;                         if(j==m-1)                         {                             res.append((i+1) + "" "" + (j+1) + "" "" + (i+2) + "" "" + (j+1) + "" "" + (i+2) + "" "" + (j) + ""\n"");                             flip(arr,i,j);                             flip(arr,i+1,j);                             flip(arr,i+1,j-1);                         }                         else                         {                             res.append((i+1) + "" "" + (j+1) + "" "" + (i+2) + "" "" + (j+1) + "" "" + (i+2) + "" "" + (j+2) + ""\n"");                             flip(arr,i,j);                             flip(arr,i+1,j);                             flip(arr,i+1,j+1);                         }                     }                 }             }                          int i = n-2;             for(int j=0;j<m-1;j++)             {                 char a = arr[i][j],b = arr[i+1][j];                 if(a=='0' && b=='0')                 {                     continue;                 }                 else if(a=='0' && b=='1')                 {                     nops++;                     res.append((i+2) + "" "" + (j+1) + "" "" + (i+1) + "" "" + (j+2) + "" "" + (i+2) + "" "" + (j+2) + ""\n"");                     flip(arr,i+1,j);                     flip(arr,i,j+1);                     flip(arr,i+1,j+1);                 }                 else if(a=='1' && b=='0')                 {                     nops++;                     res.append((i+1) + "" "" + (j+1) + "" "" + (i+1) + "" "" + (j+2) + "" "" + (i+2) + "" "" + (j+2) + ""\n"");                     flip(arr,i,j);                     flip(arr,i,j+1);                     flip(arr,i+1,j+1);                 }                 else                 {                     nops++;                     res.append((i+2) + "" "" + (j+1) + "" "" + (i+1) + "" "" + (j+1) + "" "" + (i+2) + "" "" + (j+2) + ""\n"");                     flip(arr,i+1,j);                     flip(arr,i,j);                     flip(arr,i+1,j+1);                 }             }                          char a = arr[n-2][m-1];             char b = arr[n-1][m-1];             if(a=='0' && b=='0')             {             }             else if(a=='1' && b=='0')             {                 nops+=3;                 res.append((n-1) + "" "" + (m) + "" "" + (n-1) + "" "" + (m-1) + "" "" + (n) + "" "" + (m-1)+""\n"");                 add2s(res,n,m);             }             else if(a=='0' && b=='1')             {                 nops+=3;                 res.append((n) + "" "" + (m) + "" "" + (n-1) + "" "" + (m-1) + "" "" + (n) + "" "" + (m-1)+""\n"");                 add2s(res,n,m);             }             else             {                 nops+=2;                 add3s(res,n,m);             }                                                                                      out.printLine(nops);             if(nops>0)                 out.print(res);         }         out.flush();         out.close();     } } ",0
1014,"import java.util.*; public class CodeForces { static ArrayList<String>res; public static void main(String[] args) { Scanner input = new Scanner(System.in); int test = input.nextInt(); while(test-->0){ int n = input.nextInt(); int m = input.nextInt(); char arr[][] = new char[n][m]; res = new ArrayList<>(); for(int i =0;i<n;i++){ for(int j =0;j<1;j++){ arr[i] = input.next().toCharArray(); } } for(int i =0;i<n-1;i++){ for(int j =0;j<m-1;j++){ int count =0; if(arr[i+1][j] == '1')count++; if(arr[i][j+1] == '1')count++; if(arr[i][j] == '1')count++; if(arr[i+1][j+1] == '1')count++; if(count == 0)continue; if(count == 1)one(arr,i,j); if(count == 2)two(arr,i,j); if(count == 3)three(arr,i,j); if(count == 4)four(arr,i,j); } } System.out.println(res.size()); for(String it:res)System.out.println(it); } } public static void one(char arr[][],int i,int j){ int row = i+2; int col = j+2; int count =0; StringBuilder sb = new StringBuilder(); for(int x=i;x<row;x++){ for(int y = j;y<col;y++){ if(arr[x][y] == '1' ){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '0'; sb.append("" ""); }else if(arr[x][y] == '0' && count<2){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '1'; sb.append("" ""); count++; } } } res.add(sb.toString()); two(arr,i,j); } public static void two(char arr[][],int i,int j){ int row = i+2; int col = j+2; boolean ok = true; StringBuilder sb = new StringBuilder(); for(int x=i;x<row;x++){ for(int y = j;y<col;y++){ if(arr[x][y] == '1' && ok){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '0'; sb.append("" ""); ok = false; }else if(arr[x][y] == '0'){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '1'; sb.append("" ""); } } } res.add(sb.toString()); three(arr,i,j); } public static void three(char arr[][],int i,int j){ StringBuilder sb = new StringBuilder(); if(arr[i][j] == '1'){ sb.append(i+1); sb.append("" ""); sb.append(j+1); arr[i][j] = '0'; sb.append("" ""); } if(arr[i+1][j] == '1'){ sb.append(i+2); sb.append("" ""); sb.append(j+1); arr[i+1][j] = '0'; sb.append("" ""); } if(arr[i][j+1] == '1'){ arr[i][j+1] ='0'; sb.append(i+1); sb.append("" ""); sb.append(j+2); sb.append("" ""); } if(arr[i+1][j+1] == '1'){ arr[i+1][j+1] = '0'; sb.append(i+2); sb.append("" ""); sb.append(j+2); } res.add(sb.toString()); } public static void four(char arr[][],int i,int j){ int row = i+2; int col = j+2; int count =0; StringBuilder sb = new StringBuilder(); for(int x=i;x<row;x++){ for(int y = j;y<col;y++){ if(count<3){ sb.append(x+1); sb.append("" ""); sb.append(y+1); arr[x][y] = '0'; sb.append("" ""); count++; } } } res.add(sb.toString()); one(arr,i,j); } } ","import java.util.*; public class CodeForces{ static ArrayList<int[]> ans = new ArrayList<>();          public static void add(int a,int b,int c,int d,int e,int f){         int[] tem=new int[6];         tem[0]=a;tem[1]=b;tem[2]=c;tem[3]=d;tem[4]=e;tem[5]=f;         ans.add(tem);     }    public static void helper(int[][] arr,int r,int c){        for(int k=0;k<12;k++){            if(arr[r][c]==1){                add(r,c,r+1,c,r,c+1);                arr[r][c]=1-arr[r][c];                arr[r+1][c]=1-arr[r+1][c];                arr[r][c+1]=1-arr[r][c+1];            }            if(arr[r][c+1]==1){                 add(r,c+1,r+1,c+1,r,c);                arr[r][c+1]=1-arr[r][c+1];                arr[r+1][c+1]=1-arr[r+1][c+1];                arr[r][c]=1-arr[r][c];            }            if(arr[r+1][c]==1){                 add(r+1,c+1,r,c,r+1,c);                arr[r+1][c+1]=1-arr[r+1][c+1];                arr[r][c]=1-arr[r][c];                arr[r+1][c]=1-arr[r+1][c];            }            if(arr[r+1][c+1]==1){                 add(r+1,c+1,r+1,c,r,c+1);                arr[r+1][c+1]=1-arr[r+1][c+1];                arr[r+1][c]=1-arr[r+1][c];                arr[r][c+1]=1-arr[r][c+1];            }                    }            }     public static void main(String[] args) { Scanner sc = new Scanner(System.in); int t=sc.nextInt(); while(t-->0){     int n = sc.nextInt();     int m = sc.nextInt();     ans.clear();     int[][] arr=new int[n][m];     for(int i=0;i<n;i++){         String str = sc.next();         for(int j=0;j<m;j++){             arr[i][j]=str.charAt(j)-'0';         }     }          for(int i=0;i<n;i+=2){         for(int j=0;j<m;j+=2){             if(i==n-1&&j==m-1){                 helper(arr,i-1,j-1);             }else if(i==n-1){                 helper(arr,i-1,j);             }else if(j==m-1){                 helper(arr,i,j-1);             }else{                 helper(arr,i,j);             }                      }     }     System.out.println(ans.size());     for(int[] move:ans){         for(int i=0;i<6;i++){             System.out.print(move[i]+1 +"" "");         }         System.out.println();     }                                 }             } } ",0
1015,"import java.util.*; public class CodeForces1525C{ public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ","import java.io.*; import java.math.*; import java.util.*; public class test {                                  public static void main(String args[]) throws Exception {     Scanner sc = new Scanner();    StringBuffer res = new StringBuffer();        int tc = 1;        while(tc-->0) {      int n = sc.nextInt();          ArrayList<Integer> one = new ArrayList<>();     ArrayList<Integer> zero = new ArrayList<>();          for(int i=0;i<n;i++) {           int x = sc.nextInt();          if(x==1) {      one.add(i);     }     else {      zero.add(i);     }     }          int dp[][] = new int[one.size()+1][zero.size()+1];           for(int i=1;i<=one.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(zero.get(i-1)-one.get(i-1));          for(int j=i+1;j<=zero.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(one.get(i-1)-zero.get(j-1)));          }      }      System.out.println(dp[one.size()][zero.size()]);    } System.out.println(res);    } } ",1
1016,"import java.util.*; public class CodeForces1525C{ public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ","import java.io.*; import java.util.*;   public class ArmChairs {            public static int solution(int n, int[] arr) {           ArrayList<Integer> one = new ArrayList<Integer>();         ArrayList<Integer> zero = new ArrayList<Integer>();           for (int i = 0; i < n; i++) {             if (arr[i] == 1) {                 one.add(i);             } else {                 zero.add(i);             }         }           int[][] dp = new int[one.size() + 1][zero.size() + 1];           for (int i = 1; i <= one.size(); i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(one.get(i - 1) - zero.get(i - 1));             for (int j = i + 1; j <= zero.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(one.get(i - 1) - zero.get(j - 1)));             }         }           return dp[one.size()][zero.size()];     }         public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));           int n = Integer.parseInt(br.readLine());           String[] s = br.readLine().split("" "");         int[] arr = new int[n];         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(s[i]);         }            log.write(Integer.toString(solution(n, arr)) + ""\n"");         log.flush();              }   } ",1
1017,"import java.util.*; public class CodeForces1525C{ public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ","import java.util.*; import java.io.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int n = sc.nextInt(); ArrayList<Integer>  o=new ArrayList<Integer>(); ArrayList<Integer>  e=new ArrayList<Integer>(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++){ dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } } System.out.println(dp[o.size()][e.size()]); } } ",1
1018,"import java.util.*; public class CodeForces1525C{ public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ","import java.util.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ",1
1019,"import java.util.*; public class CodeForces1525C{ public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ","import java.util.*; public class MyClass {     public static void main(String args[]) {      Scanner s=new Scanner(System.in);      int n=s.nextInt();      int a[]=new int[n];      ArrayList<Integer> lt1=new ArrayList<>();      ArrayList<Integer> lt0=new ArrayList<>();      for(int i=0;i<n;i++)      {          int l=s.nextInt();          if(l==0)          lt0.add(i+1);          else          lt1.add(i+1);      }      int dp[][]=new int[lt1.size()+1][lt0.size()+1];      for(int i=1;i<=lt1.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(lt0.get(i-1)-lt1.get(i-1));          for(int j=i+1;j<=lt0.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(lt1.get(i-1)-lt0.get(j-1)));          }      }      System.out.println(dp[lt1.size()][lt0.size()]);           } } ",1
1020,"import java.util.*; public class CodeForces1525C{ public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ","import java.util.*; public class Solution { public static int minMoves(int[] input) { List<Integer> people = new ArrayList<Integer>(); List<Integer> chairs = new ArrayList<Integer>(); for (int i = 0; i < input.length; i++) { if (input[i] == 1) { people.add(i); } else { chairs.add(i); } } int[] memo = new int[chairs.size() + 1]; for (int p = 1; ((!people.isEmpty()) && (p <= people.size())); p++) { int prev = memo[p]; memo[p] = memo[p - 1] + Math.abs(people.get(p - 1) - chairs.get(p - 1)); for (int c = p + 1; c <= chairs.size(); c++) { int tmp = memo[c]; memo[c] = Math.min(memo[c - 1], prev + Math.abs(people.get(p - 1) - chairs.get(c - 1))); prev = tmp; } } return memo[memo.length - 1]; } public static void main(String[] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); int[] input = new int[n]; for (int i = 0; i < n; i++) { input[i] = sc.nextInt(); } System.out.println(Solution.minMoves(input)); } } ",0
1021,"import java.util.*; public class CodeForcesRound {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         for (int i = 0; i<t; i++)             System.out.println(solve(sc));         sc.close();     }     public static long solve(Scanner sc) {         int n = sc.nextInt();         long[] c = new long[n];         long[] ps = new long[n];         c[0] = sc.nextLong();         c[1] = sc.nextLong();         ps[0] = c[0];         ps[1] = c[1];         for (int i = 2; i<n; i++) {             c[i] = sc.nextLong();             ps[i] = ps[i-2] + c[i];         }         long res = Long.MAX_VALUE;         long[] mins = new long[n];         mins[0] = n*c[0];         mins[1] = n*c[1];         int minEven = 0;         int minOdd = 1;         for (int i = 2; i<n; i++) {             if (i%2==0) {                 if (c[i]<c[minEven])                     minEven = i;                 mins[i] = ps[minEven]-c[minEven] + ps[i]-ps[minEven] + c[minEven]*(n-i/2);             } else {                 if (c[i]<c[minOdd])                     minOdd = i;                 mins[i] = ps[minOdd]-c[minOdd] + ps[i]-ps[minOdd] + c[minOdd]*(n-i/2);             }         }         for (int i = 1; i<n; i++) {             res = Math.min(res, mins[i]+mins[i-1]);         }         return res;     }     public static long min(long a, long b, long c) {         long t = Math.min(a, b);         return Math.min(t, c);     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintStream; import java.util.StringTokenizer; public class Solution {          public static void main(String[] args) {         PrintStream out = System.out;         FastScanner fs = new FastScanner();         int T = fs.nextInt();         while (T-- > 0) {             int n = fs.nextInt();             long[] arr = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = fs.nextLong();             }             long[] ps = new long[n];             ps[0] = arr[0];             for (int i = 1; i < n; i++) {                 ps[i] = ps[i - 1] + arr[i];             }             long min = arr[0] * n + arr[1] * n;             int even = 0;             int odd = 1;             for (int i = 2; i < n; i++) {                 if (i % 2 == 0) {                     if (arr[i] < arr[even]) {                         even = i;                     }                 } else {                     if (arr[i] < arr[odd]) {                         odd = i;                     }                 }                 int tmp = i + 1;                 int oddCount = tmp / 2;                 int evenCount = (tmp + 1) / 2;                 long local = ps[i];                 local += (n - oddCount) * arr[odd];                 local += (n - evenCount) * arr[even];                 min = Math.min(min, local);             }             out.println(min);         }     }                } ",0
1022,"import java.util.*; public class Codeforces { static int mod = 1000000007; public static void main(String[] args) {      Scanner sc = new Scanner(System.in);         while(sc.hasNext()) {    int t   =  sc.nextInt();    while(t-->0) {     int n =  sc.nextInt(); long k = sc.nextLong(); long a[] = new long[n+1]; for(int i = 1 ; i<=n;i++) { a[i] = sc.nextLong(); } a[0] = -1; Arrays.sort(a); long sum = 0; for(int i = 1 ; i<=n;i++) { sum+=a[i]; } if(sum<=k) { System.out.println(0); } else if(sum == k+1) { System.out.println(1); } else { long ans = sum-k; long diff = sum - k;          sum = 0;   for(int i = n ; i>1 ; i--) { long x = 0;   sum+=a[i];   if(sum - (n-i+1)*a[1] >= diff) {   x = 0;   }   else {   x = (long) Math.max(Math.ceil((double)(diff - sum + ((n-i+1)*a[1]))/(n-i+2)) , 0);          }   ans = Math.min(ans, x +n-i+1);      }   System.out.println(ans);                     }                                  }      }     }     } ","import java.util.*; import java.io.*; import java.math.BigInteger;   public class code{                           public static void main(String[] arg) throws IOException{                           PrintWriter out = new PrintWriter(System.out);         Scanner in = new Scanner(System.in);                  int t=in.nextInt();                  while(t-- > 0){           int n=in.nextInt();           long k=in.nextLong();           PriorityQueue<Long> pq=new PriorityQueue<Long>();           long[] sum=new long[n+1];           for(int i=0;i<n;i++){             long a=in.nextLong();             pq.offer(a);                        }                      for(int i=1;i<=n;i++){             sum[i]=pq.poll()+sum[i-1];           }           long min=(long)1e18;           for(int i=0;i<n;i++){             long x=sum[1]-floor(k-sum[n-i]+sum[1],(long)i+1);             min=Math.min(min,(long)i+Math.max(0L,x));           }           out.println(min);         }           out.flush();     }     public static long floor(long a,long b){       long z=a/b;       if(b*z>a) z--;       return z;     }   } ",0
1023,"import java.util.*; public class CvsMe {     private static class pair {         int low, high;         pair(int low, int high) {             this.low = low;             this.high = high;         }                                         }     static int val[];     static HashMap<pair, Integer> mp;     static int ans[];     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         int t = in.nextInt();         while (t-- != 0) {             int n = in.nextInt();             ArrayList<ArrayList<Integer>> edge = new ArrayList<>();             boolean flag = false;             int deg[] = new int[n + 1];             val = new int[n + 1];             ans = new int[n + 1];             mp = new HashMap<>();             for (int i = 0; i <= n; i++) {                 edge.add(new ArrayList<Integer>());             }             int start = -1;             int end = -1;             for (int i = 1; i < n; i++) {                 int u = in.nextInt();                 int v = in.nextInt();                 pair p = new pair(u, v);                 mp.put(p, i);                 edge.get(u).add(v);                 edge.get(v).add(u);                 deg[u]++;                 deg[v]++;                 if (deg[u] > 2 || deg[v] > 2) {                     flag = true;                 }             }             boolean vis[] = new boolean[n + 1];             if (flag) {                 System.out.println(-1);                 continue;             } else {                 for (int i = 1; i <= n; i++) {                     if (deg[i] == 1 ) {                         start = i;break;                     }                 }                 dfs(vis, edge, 5, start);                 for (int i = 1; i < n; i++) {                     System.out.print(ans[i] + "" "");                 }                 System.out.println();             }         }     }     private static void dfs(boolean vis[], ArrayList<ArrayList<Integer>> edge, int k, int i) {         vis[i] = true;         for (int j : edge.get(i)) {             if (!vis[j]) {                 int w = 2;                 if (val[i] == 2 || val[j] == 2){ w = 5;}                 int id = 0;                 pair p = new pair(i, j);                 if (mp.containsKey(p)) {                     id = mp.get(p);                                      } else {                     p = new pair(j, i);                     if (mp.containsKey(p)) {id = mp.get(p);                 }}                 ans[id] = w;                 val[i] = w;                 val[j] = w;                 dfs(vis, edge, k, j);             }         }     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.util.concurrent.ThreadLocalRandom; public class A {     private static void sport(List<Integer>[] g, Map<W, Integer> map) {         int n = g.length;         for (int i = 0; i < n; i++) {             if (g[i].size() > 2) {                 System.out.println(-1);                 return;             }         }         int[] ans = new int[n - 1];                  Queue<int[]> queue = new LinkedList<>();         Set<Integer> seen = new HashSet<>();         int val = 3;         for (Integer integer : g[0]) {             Integer idx = map.get(new W(0, integer));             ans[idx] = val;             queue.add(new int[]{val, integer});             seen.add(integer);             val = val == 2 ? 3 : 2;         }         seen.add(0);         while (!queue.isEmpty()) {             int[] poll = queue.poll();             for (Integer u : g[poll[1]]) {                 if (!seen.contains(u)) {                     seen.add(u);                     int curr = poll[0] == 2 ? 3 : 2;                     Integer integer = map.get(new W(poll[1], u));                     ans[integer] = curr;                     queue.add(new int[]{curr, u});                 }             }         }         for (int an : ans) {             System.out.print(an + "" "");         }         System.out.println();     }     static class W {         int u;         int v;         public W(int u, int v) {             this.u = u;             this.v = v;         }                       }               public static void main(String[] args) throws IOException {         FastScanner sc = new FastScanner();         int t = sc.nextInt();         for (int i = 0; i < t; i++) {             int n = sc.nextInt();             List<Integer>[] g = new ArrayList[n];             for (int j = 0; j < n; j++) {                 g[j] = new ArrayList<>();             }             Map<W, Integer> map = new HashMap<>();             for (int j = 0; j < n - 1; j++) {                 int u = sc.nextInt() - 1;                 int v = sc.nextInt() - 1;                 g[u].add(v);                 g[v].add(u);                 map.put(new W(u, v), j);                 map.put(new W(v, u), j);             }             sport(g, map);         }     }           } ",0
1024,"import java.util.*; public class D {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int n = scanner.nextInt();         ArrayList<Integer> occupied = new ArrayList<>();         ArrayList<Integer> vacant = new ArrayList<>();         for (int i = 0; i < n; i++) {             int x = scanner.nextInt();             if (x == 1)                 occupied.add(i);             else                 vacant.add(i);         }         Solution Solution = new Solution(occupied, vacant);         System.out.println(Solution.memoization());     } } class Solution {     ArrayList<Integer> occupied, vacant;     int x, y;     public Solution(ArrayList<Integer> occupied, ArrayList<Integer> vacant) {         this.occupied = occupied;         this.vacant = vacant;         x = occupied.size(); y = vacant.size();     }               int memoization() {         int[][] dp = new int[x][y];         for (int i = 0; i < x; i++) {             Arrays.fill(dp[i], -1);         }         return memoization(dp, x-1, y-1);     }     int memoization(int[][] dp, int n, int m) {         if(n < 0) {             return 0;         }         if(m < n) {             return Integer.MAX_VALUE;         }         if(dp[n][m] != -1) {             return dp[n][m];         }         int first = memoization(dp, n, m-1);         int second = memoization(dp, n-1, m-1) + Math.abs(occupied.get(n) - vacant.get(m));         dp[n][m] = Math.min(first, second);         return dp[n][m];     } } ","import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.math.BigDecimal; import java.math.RoundingMode; import java.util.*; public class Main { static final long MOD=1000000007; static final long MOD1=998244353; static long ans=0; public static void main(String[] args){ PrintWriter out = new PrintWriter(System.out); InputReader sc=new InputReader(System.in); int N = sc.nextInt(); int[] A = sc.nextIntArray(N); ArrayList<Integer> a1 = new ArrayList<Integer>(); ArrayList<Integer> a2 = new ArrayList<Integer>(); for (int i = 0; i < A.length; i++) { if (A[i]==0) { a1.add(i); }else { a2.add(i); } } int[][] dp = new int[a1.size()+1][a2.size()+1]; for (int i = 0; i < dp.length; i++) { Arrays.fill(dp[i], Integer.MAX_VALUE/2); } dp[0][0] = 0; for (int i = 1; i <= a1.size() ; i++) { int pos1 = a1.get(i-1); for (int j = 0; j <= a2.size(); j++) { dp[i][j] = dp[i-1][j]; if (j-1>=0) { int pos2 = a2.get(j-1); dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + Math.abs(pos1-pos2)); } } } System.out.println(dp[a1.size()][a2.size()]); } } ",0
1025,"import java.util.*; public class D {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int n = scanner.nextInt();         ArrayList<Integer> occupied = new ArrayList<>();         ArrayList<Integer> vacant = new ArrayList<>();         for (int i = 0; i < n; i++) {             int x = scanner.nextInt();             if (x == 1)                 occupied.add(i);             else                 vacant.add(i);         }         Solution Solution = new Solution(occupied, vacant);         System.out.println(Solution.memoization());     } } class Solution {     ArrayList<Integer> occupied, vacant;     int x, y;     public Solution(ArrayList<Integer> occupied, ArrayList<Integer> vacant) {         this.occupied = occupied;         this.vacant = vacant;         x = occupied.size(); y = vacant.size();     }               int memoization() {         int[][] dp = new int[x][y];         for (int i = 0; i < x; i++) {             Arrays.fill(dp[i], -1);         }         return memoization(dp, x-1, y-1);     }     int memoization(int[][] dp, int n, int m) {         if(n < 0) {             return 0;         }         if(m < n) {             return Integer.MAX_VALUE;         }         if(dp[n][m] != -1) {             return dp[n][m];         }         int first = memoization(dp, n, m-1);         int second = memoization(dp, n-1, m-1) + Math.abs(occupied.get(n) - vacant.get(m));         dp[n][m] = Math.min(first, second);         return dp[n][m];     } } ","import java.util.*; public class Solution { public static int minMoves(int[] input) { List<Integer> people = new ArrayList<Integer>(); List<Integer> chairs = new ArrayList<Integer>(); for (int i = 0; i < input.length; i++) { if (input[i] == 1) { people.add(i); } else { chairs.add(i); } } int[] memo = new int[chairs.size() + 1]; for (int p = 1; ((!people.isEmpty()) && (p <= people.size())); p++) { int prev = memo[p]; memo[p] = memo[p - 1] + Math.abs(people.get(p - 1) - chairs.get(p - 1)); for (int c = p + 1; c <= chairs.size(); c++) { int tmp = memo[c]; memo[c] = Math.min(memo[c - 1], prev + Math.abs(people.get(p - 1) - chairs.get(c - 1))); prev = tmp; } } return memo[memo.length - 1]; } public static void main(String[] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); int[] input = new int[n]; for (int i = 0; i < n; i++) { input[i] = sc.nextInt(); } System.out.println(Solution.minMoves(input)); } } ",0
1026,"import java.util.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ","import java.util.*; import java.io.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int n = sc.nextInt(); ArrayList<Integer>  o=new ArrayList<Integer>(); ArrayList<Integer>  e=new ArrayList<Integer>(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++){ dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } } System.out.println(dp[o.size()][e.size()]); } } ",1
1027,"import java.util.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(),dp[][]=new int[n+1][n+1]; for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]); } } ","import java.util.*; public class MyClass {     public static void main(String args[]) {      Scanner s=new Scanner(System.in);      int n=s.nextInt();      int a[]=new int[n];      ArrayList<Integer> lt1=new ArrayList<>();      ArrayList<Integer> lt0=new ArrayList<>();      for(int i=0;i<n;i++)      {          int l=s.nextInt();          if(l==0)          lt0.add(i+1);          else          lt1.add(i+1);      }      int dp[][]=new int[lt1.size()+1][lt0.size()+1];      for(int i=1;i<=lt1.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(lt0.get(i-1)-lt1.get(i-1));          for(int j=i+1;j<=lt0.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(lt1.get(i-1)-lt0.get(j-1)));          }      }      System.out.println(dp[lt1.size()][lt0.size()]);           } } ",1
1028,"import java.util.*; public class D{     private static Scanner scanner = new Scanner(System.in);     public static void main(String[] args){         int q = scanner.nextInt();         while(q-- > 0){             int n = scanner.nextInt(),             k = scanner.nextInt();             int[] a = new int[k];             for(int i=0;i<k;i++){                 a[i] = scanner.nextInt();             }             int[] t = new int[k];             for(int j=0;j<k;j++){                 t[j] = scanner.nextInt();             }             long[] L = new long[n];             long[] R = new long[n];             for(int i=0;i<n;i++){                 L[i] = Integer.MAX_VALUE;                 R[i] = Integer.MAX_VALUE;             }             for(int i=0;i<k;i++){                 L[a[i]-1] = t[i];                 R[a[i]-1] = t[i];             }                          long min = Integer.MAX_VALUE;             for(int i=0;i<n;i++){                 L[i] = Math.min(min+1,L[i]);                 min = L[i];             }             min = Integer.MAX_VALUE;             for(int i=n-1;i>=0;i--){                 R[i] = Math.min(min+1,R[i]);                 min = R[i];             }             for(int i=0;i<n;i++){                 System.out.print(Math.min(L[i],R[i]) + "" "");             }             System.out.println();         }     } } ","import javax.swing.*; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Arrays; import java.util.HashSet; import java.util.StringTokenizer; public class AirConditioner {     public static void main(String[] args) {         MyScanner sc = new MyScanner();         int input = sc.nextInt();         sc.nextLine();         for(int i = 0; i < input; i++){             String[] length = sc.nextLine().split("" "");             String[] index = sc.nextLine().split("" "");             String[] temperature = sc.nextLine().split("" "");             long[] boxes = findTemp(length, index,temperature);             for(int j = 0; j < boxes.length; j++){                 if(j == 0) System.out.print(boxes[j]);                 else System.out.print("" ""+boxes[j]);             }             System.out.println();             sc.nextLine();         }     }     public static long[]  findTemp(String[] length, String[] index,String[] temperature) {         long n = Long.parseLong(length[0]);         HashSet<Integer> set = new HashSet<>();         long airCond = Long.parseLong(length[1]);         long[] boxes = new long[(int)n];         Arrays.fill(boxes,Integer.MAX_VALUE);         for(int i = 0 ; i < index.length; i++){             boxes[Integer.parseInt(index[i]) - 1] = Long.parseLong(temperature[i]);             set.add(Integer.parseInt(index[i]) - 1);                     }         int prev = -1;         for(int i = 0 ; i < boxes.length; i++) {                          if(set.contains(i)){                 if(prev != - 1) boxes[i] = Math.min((Math.abs(i - prev) ) + boxes[prev],boxes[i]);                                 prev = i;             }            if(prev == -1) continue;            if(set.contains(i)){                prev = i;            }            else{                boxes[i] = (Math.abs(i - prev) ) + boxes[prev];            }         }         prev = boxes.length;         for(int i = boxes.length - 1; i >= 0; i--) {             if(set.contains(i)){                                if(prev != boxes.length)  boxes[i] = Math.min((Math.abs(i - prev) ) + boxes[prev],boxes[i]);                 prev = i;             }             if(prev == boxes.length) continue;             else{                 boxes[i] = Math.min((Math.abs(i - prev) ) + boxes[prev],boxes[i]);             }         }         return boxes;     } } ",0
1029,"import java.util.*; public class D{   static Scanner sc;   public static void solve(){     int n=sc.nextInt();     Integer a[]=new Integer[n];     int flag;     for(int i=0;i<n;i++) a[i]=sc.nextInt();     String s=sc.next();     ArrayList<Integer> x=new ArrayList<>();     ArrayList<Integer> y=new ArrayList<>();     for(int i=0;i<n;i++){       if(s.charAt(i)=='B') x.add(a[i]);       else y.add(a[i]);     }     Collections.sort(x);     Collections.sort(y);     int p=n;     int q=1;     for(int i=y.size()-1;i>=0;i--){       if(y.get(i)>p){System.out.println(""NO""); return;}       p-=1;     }     for(int i=0;i<x.size();i++){       if(x.get(i)<q){System.out.println(""NO""); return;}       q+=1;     }     System.out.println(""YES"");   }   public static void main(String args[]){       sc=new Scanner(System.in);       int t=sc.nextInt();       while(t-->0) solve();   } } ","import java.io.*; import java.util.*; public class new1{ public static void main(String[] args)  throws IOException{     FastReader s = new FastReader();          BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));     int t =  s.nextInt();     for(int z = 0; z < t; z++) {     int n = s.nextInt();     int[] arr = new int[n];     ArrayList<Integer> blue = new ArrayList<Integer>();     ArrayList<Integer> red = new ArrayList<Integer>();     for(int i = 0; i < n; i++) {     arr[i] = s.nextInt();     }     String str = s.next();     for(int i = 0; i < n; i++) {     if(str.charAt(i) == 'B') blue.add(arr[i]);     else red.add(arr[i]);     }     red.sort(null); blue.sort(null);     int j = red.size() - 1; int k = blue.size() - 1;     while(j >= 0 && red.get(j) > n) j--;     boolean ans = true;     for(int m = n; m >= 1; m--) {     if(j >= 0) j--;     else if(k >= 0 && blue.get(k) >= m) k--;     else ans = false;          while(j >= 0 && red.get(j) > m - 1) j--;     }     if(ans) System.out.println(""YES"");     else System.out.println(""NO"");               }               } } ",0
1030,"import java.util.*; public class D{   static Scanner sc;   public static void solve(){     int n=sc.nextInt();     Integer a[]=new Integer[n];     int flag;     for(int i=0;i<n;i++) a[i]=sc.nextInt();     String s=sc.next();     ArrayList<Integer> x=new ArrayList<>();     ArrayList<Integer> y=new ArrayList<>();     for(int i=0;i<n;i++){       if(s.charAt(i)=='B') x.add(a[i]);       else y.add(a[i]);     }     Collections.sort(x);     Collections.sort(y);     int p=n;     int q=1;     for(int i=y.size()-1;i>=0;i--){       if(y.get(i)>p){System.out.println(""NO""); return;}       p-=1;     }     for(int i=0;i<x.size();i++){       if(x.get(i)<q){System.out.println(""NO""); return;}       q+=1;     }     System.out.println(""YES"");   }   public static void main(String args[]){       sc=new Scanner(System.in);       int t=sc.nextInt();       while(t-->0) solve();   } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class D { public static void main(String[] args) throws IOException { FastScanner fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); for (int tc = 0; tc < t; tc++) { int n = fs.nextInt(); int[] a = fs.readArray(n); String s = fs.nextLine(); ArrayList<Integer> blues = new ArrayList<Integer>(); ArrayList<Integer> reds = new ArrayList<Integer>(); for (int i = 0; i < s.length(); i++) { if (s.charAt(i) == 'B') { blues.add(a[i]); } else { reds.add(a[i]); } } Collections.sort(blues); Collections.sort(reds); boolean ok = true; for (int i = 1; i <= blues.size(); i++) { if (blues.get(i - 1) < i) { ok = false; break; } } for (int i = blues.size() + 1; i <= n; i++) { if (reds.get(i - blues.size() - 1) > i) { ok = false; break; } } if (ok) { out.println(""YES""); } else { out.println(""NO""); } } out.close(); } } ",1
1031,"import java.util.*; public class D{   static Scanner sc;   public static void solve(){     int n=sc.nextInt();     Integer a[]=new Integer[n];     int flag;     for(int i=0;i<n;i++) a[i]=sc.nextInt();     String s=sc.next();     ArrayList<Integer> x=new ArrayList<>();     ArrayList<Integer> y=new ArrayList<>();     for(int i=0;i<n;i++){       if(s.charAt(i)=='B') x.add(a[i]);       else y.add(a[i]);     }     Collections.sort(x);     Collections.sort(y);     int p=n;     int q=1;     for(int i=y.size()-1;i>=0;i--){       if(y.get(i)>p){System.out.println(""NO""); return;}       p-=1;     }     for(int i=0;i<x.size();i++){       if(x.get(i)<q){System.out.println(""NO""); return;}       q+=1;     }     System.out.println(""YES"");   }   public static void main(String args[]){       sc=new Scanner(System.in);       int t=sc.nextInt();       while(t-->0) solve();   } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Codeforces {     public static void main(String[] args) {         FastReader fastReader = new FastReader();         int t = fastReader.nextInt();         while (t-- > 0) {             int n = fastReader.nextInt();             int a[] = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = fastReader.nextInt();             }             ArrayList<Integer> b = new ArrayList<>();             ArrayList<Integer> r = new ArrayList<>();             char c[] = fastReader.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (c[i] == 'B') {                     b.add(a[i]);                 } else {                     r.add(a[i]);                 }             }             Collections.sort(b);             Collections.sort(r);             int sizeb = b.size();             boolean isValid = true;             for (int i = 1 , j = 0; i <=sizeb; i++ , j++){                 if (b.get(j) <  i){                     isValid =false;                 }             }             for (int i = sizeb+1 , j = 0; i <=n && j < r.size(); i++ , j++){                 if (r.get(j) >  i){                     isValid =false;                 }             }             if (isValid){                 System.out.println(""YES"");             }else{                 System.out.println(""NO"");             }         }     }      } ",0
1032,"import java.util.*; public class D{   static Scanner sc;   public static void solve(){     int n=sc.nextInt();     Integer a[]=new Integer[n];     int flag;     for(int i=0;i<n;i++) a[i]=sc.nextInt();     String s=sc.next();     ArrayList<Integer> x=new ArrayList<>();     ArrayList<Integer> y=new ArrayList<>();     for(int i=0;i<n;i++){       if(s.charAt(i)=='B') x.add(a[i]);       else y.add(a[i]);     }     Collections.sort(x);     Collections.sort(y);     int p=n;     int q=1;     for(int i=y.size()-1;i>=0;i--){       if(y.get(i)>p){System.out.println(""NO""); return;}       p-=1;     }     for(int i=0;i<x.size();i++){       if(x.get(i)<q){System.out.println(""NO""); return;}       q+=1;     }     System.out.println(""YES"");   }   public static void main(String args[]){       sc=new Scanner(System.in);       int t=sc.nextInt();       while(t-->0) solve();   } } ","import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int  t=sc.nextInt(); while(t-- >0) { int n=sc.nextInt(); int[] arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextInt(); } String str=sc.next(); ArrayList<Pair> plist=new ArrayList<>(); for(int i=0;i<n;i++) { char ch=str.charAt(i); plist.add(new Pair(arr[i],ch)); } Collections.sort(plist); int counter=1; boolean flag=false; for(int i=0;i<plist.size();i++) { int val=plist.get(i).number; int clr=plist.get(i).color; if(clr=='B') { if(val<counter) { flag=true; break; } } else { if(val>counter) { flag=true; break; } } counter++; } System.out.println(flag?""NO"":""YES""); } } public static class Pair implements Comparable<Pair>{ int number; char color; Pair(int number,char color){ this.number=number; this.color=color; } } } ",0
1033,"import java.util.*; public class D{   static Scanner sc;   public static void solve(){     int n=sc.nextInt();     Integer a[]=new Integer[n];     int flag;     for(int i=0;i<n;i++) a[i]=sc.nextInt();     String s=sc.next();     ArrayList<Integer> x=new ArrayList<>();     ArrayList<Integer> y=new ArrayList<>();     for(int i=0;i<n;i++){       if(s.charAt(i)=='B') x.add(a[i]);       else y.add(a[i]);     }     Collections.sort(x);     Collections.sort(y);     int p=n;     int q=1;     for(int i=y.size()-1;i>=0;i--){       if(y.get(i)>p){System.out.println(""NO""); return;}       p-=1;     }     for(int i=0;i<x.size();i++){       if(x.get(i)<q){System.out.println(""NO""); return;}       q+=1;     }     System.out.println(""YES"");   }   public static void main(String args[]){       sc=new Scanner(System.in);       int t=sc.nextInt();       while(t-->0) solve();   } } ","import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ",0
1034,"import java.util.*; public class D{   static Scanner sc;   public static void solve(){     int n=sc.nextInt();     Integer a[]=new Integer[n];     int flag;     for(int i=0;i<n;i++) a[i]=sc.nextInt();     String s=sc.next();     ArrayList<Integer> x=new ArrayList<>();     ArrayList<Integer> y=new ArrayList<>();     for(int i=0;i<n;i++){       if(s.charAt(i)=='B') x.add(a[i]);       else y.add(a[i]);     }     Collections.sort(x);     Collections.sort(y);     int p=n;     int q=1;     for(int i=y.size()-1;i>=0;i--){       if(y.get(i)>p){System.out.println(""NO""); return;}       p-=1;     }     for(int i=0;i<x.size();i++){       if(x.get(i)<q){System.out.println(""NO""); return;}       q+=1;     }     System.out.println(""YES"");   }   public static void main(String args[]){       sc=new Scanner(System.in);       int t=sc.nextInt();       while(t-->0) solve();   } } ","import java.util.*; public class anshulvmc {          public static void sort(int[] a) { ArrayList<Integer> l=new ArrayList<>(); for (int i:a) l.add(i); Collections.sort(l); for (int i=0; i<a.length; i++) a[i]=l.get(i); }                                                                                                     public static boolean redblue(int[] num, String chnum) {     ArrayList<Integer> blue = new ArrayList<>();     ArrayList<Integer> red = new ArrayList<>();     for(int i=0;i<chnum.length();i++) {     char ch = chnum.charAt(i);     if(ch == 'B') {     blue.add(num[i]);     }     else {     red.add(num[i]);     }     }     Collections.sort(blue);     Collections.sort(red);     for(int i=0;i<blue.size();i++) {     if(blue.get(i) >= i+1) {          }     else {     return false;     }     }     for(int i=0;i<red.size();i++) {     if(red.get(i) > i+1 + blue.size()) {     return false;     }     }     return true;     }          public static void main(String args[])               {     Scanner scn = new Scanner(System.in);     int test = scn.nextInt();     for(int i=0;i<test;i++) {     int size = scn.nextInt();     int[] arr = new int[size];     for(int j=0;j<size;j++) {     arr[j] = scn.nextInt();     }     String str = scn.next();     boolean f = redblue(arr,str);     if(f) {     System.out.println(""YES"");     }     else {     System.out.println(""NO"");     }     }          } } ",0
1035,"import java.util.*; public class D{   static Scanner sc;   public static void solve(){     int n=sc.nextInt();     Integer a[]=new Integer[n];     int flag;     for(int i=0;i<n;i++) a[i]=sc.nextInt();     String s=sc.next();     ArrayList<Integer> x=new ArrayList<>();     ArrayList<Integer> y=new ArrayList<>();     for(int i=0;i<n;i++){       if(s.charAt(i)=='B') x.add(a[i]);       else y.add(a[i]);     }     Collections.sort(x);     Collections.sort(y);     int p=n;     int q=1;     for(int i=y.size()-1;i>=0;i--){       if(y.get(i)>p){System.out.println(""NO""); return;}       p-=1;     }     for(int i=0;i<x.size();i++){       if(x.get(i)<q){System.out.println(""NO""); return;}       q+=1;     }     System.out.println(""YES"");   }   public static void main(String args[]){       sc=new Scanner(System.in);       int t=sc.nextInt();       while(t-->0) solve();   } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",0
1036,"import java.util.*; public class E1547 {     public static void main(String[] args){         Scanner sc = new Scanner(System.in);         int q = sc.nextInt();         for(int i = 0; i < q; i++){             int n = sc.nextInt();             int k = sc.nextInt();             int[][] t = new int[k][2];             for(int j = 0; j < k; j++){                 t[j][0] = sc.nextInt();             }             for(int j = 0; j < k; j++){                 t[j][1] = sc.nextInt();             }             long[] left = new long[n];             long[] right = new long[n];             long tmp = Integer.MAX_VALUE;             long[] max =new long[n];             for(int j = 0; j < n; j++){                 max[j] = Integer.MAX_VALUE;             }             for (int j = 0; j < k; j++) {                 max[t[j][0]-1] = t[j][1];             }             for (int j = 1; j <= n; j++) {                 tmp = Math.min(tmp+1, max[j-1]);                 left[j-1] = tmp;             }             for(int j = n; j >= 1; j--){                 tmp = Math.min(tmp+1, max[j-1]);                 right[j-1] = tmp;             }             for(int j = 0; j < n; j++){                 System.out.print(Math.min(left[j], right[j]) + "" "");             }             System.out.println();         }     } } ","import java.io.*; import java.util.*; public class CODECHEF {          static long MOD=1000000000;          static long[] solve(int[] pos,long[] arr,int n,int k){         long[] ans=new long[n];         long[] left=new long[n];         long[] right=new long[n];         long min=Integer.MAX_VALUE;         for(int i=0;i<n;i++){             min=Math.min(min+1,arr[i]);             left[i]=min;         }         min=Integer.MAX_VALUE;         for(int i=n-1;i>=0;i--){             min=Math.min(min+1,arr[i]);             right[i]=min;         }         for(int i=0;i<n;i++){             ans[i]=Math.min(left[i],right[i]);         }         return ans;     }     public static void main(String[] args) throws java.lang.Exception {          FastReader fs=new FastReader(System.in);          int t=fs.nextInt();          while (t-->0){             int n=fs.nextInt();             int k=fs.nextInt();             int[] pos=new int[k];             for(int i=0;i<k;i++)                 pos[i]=fs.nextInt()-1;             long[] temp=new long[n];             int ptr=0;             Arrays.fill(temp,Integer.MAX_VALUE);              for(int i=0;i<k;i++)                  temp[pos[ptr++]]=fs.nextLong();              long[] ans=solve(pos,temp,n,k);              for(int i=0;i<n;i++)                  System.out.print(ans[i]+"" "");              System.out.println();          }              } } ",0
1037,"import java.util.*; public class Main {        public static void solve (int ar[],int n)     {        if(n%2==1)         {                              int c=ar[2];             int b=ar[1];             int a=ar[0];             if(a+b!=0)             {                ar[2]=-(a+b);                ar[1]=c;                ar[0]=c;             }             else if(b+c!=0)             {                  ar[2]=a;                ar[1]=a;                ar[0]=-(b+c);             }             else             {                  ar[2]=b;                ar[1]=-(a+c);                ar[0]=b;             }             System.out.print(ar[0]+"" ""+ar[1]+"" ""+ar[2]+"" "");            for(int i=3;i<(n);i=i+2)            {                System.out.print((-ar[i+1])+"" ""+ar[i]+"" "");            }              System.out.println();         }                                  else           {               for(int i=0;i<(n);i=i+2)            {                System.out.print((-ar[i+1])+"" ""+ar[i]+"" "");            }               System.out.println();           }                                     } public static void main(String[] args) { Scanner sc=new Scanner(System.in);int t=sc.nextInt(); while(t-->0) {     int n=sc.nextInt();    int ar[]=new int[n];    for(int i=0;i<n;i++)    ar[i]=sc.nextInt();    solve(ar,n); } } } ","import java.io.PrintWriter; import java.util.*; public class Main {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int tc = sc.nextInt();         while(tc-->0){             int n = sc.nextInt();             int[] arr = new int[n]; for(int i = 0; i<n; i++)arr[i] = sc.nextInt();             if(n % 2 == 0){                 for(int i = 0; i<n; i+=2){                     pw.print((-arr[i + 1]) + "" "" + arr[i] + "" "");                 }                 pw.println();             }else{                 if(arr[0] + arr[1] != 0) pw.print(arr[2] + "" "" + arr[2] + "" "" + (-(arr[0] + arr[1])) + "" "");                 else if(arr[0] + arr[2] != 0)pw.println(arr[1] + "" "" + (-(arr[0] + arr[2]))+"" "" + arr[1]);                 else pw.println(-(arr[1] + arr[2]) + "" "" + arr[0]+"" "" + arr[0]);                 for(int i = 3; i<n; i+=2){                     pw.print((-arr[i + 1]) + "" "" + arr[i] + "" "");                 }                 pw.println();             }         }         pw.flush();     } } ",0
1038,"import java.util.*; public class Main {        public static void solve (int ar[],int n)     {        if(n%2==1)         {                              int c=ar[2];             int b=ar[1];             int a=ar[0];             if(a+b!=0)             {                ar[2]=-(a+b);                ar[1]=c;                ar[0]=c;             }             else if(b+c!=0)             {                  ar[2]=a;                ar[1]=a;                ar[0]=-(b+c);             }             else             {                  ar[2]=b;                ar[1]=-(a+c);                ar[0]=b;             }             System.out.print(ar[0]+"" ""+ar[1]+"" ""+ar[2]+"" "");            for(int i=3;i<(n);i=i+2)            {                System.out.print((-ar[i+1])+"" ""+ar[i]+"" "");            }              System.out.println();         }                                  else           {               for(int i=0;i<(n);i=i+2)            {                System.out.print((-ar[i+1])+"" ""+ar[i]+"" "");            }               System.out.println();           }                                     } public static void main(String[] args) { Scanner sc=new Scanner(System.in);int t=sc.nextInt(); while(t-->0) {     int n=sc.nextInt();    int ar[]=new int[n];    for(int i=0;i<n;i++)    ar[i]=sc.nextInt();    solve(ar,n); } } } ","import java.util.*; public class Main {        public static void solve (int ar[],int n)     {        if(n%2==1)         {                              int c=ar[2];             int b=ar[1];             int a=ar[0];             if(a+b!=0)             {                ar[2]=-(a+b);                ar[1]=c;                ar[0]=c;             }             else if(b+c!=0)             {                  ar[2]=a;                ar[1]=a;                ar[0]=-(b+c);             }             else             {                  ar[2]=b;                ar[1]=-(a+c);                ar[0]=b;             }             System.out.print(ar[0]+"" ""+ar[1]+"" ""+ar[2]+"" "");            for(int i=3;i<(n);i=i+2)            {                System.out.print((-ar[i+1])+"" ""+ar[i]+"" "");            }              System.out.println();         }                                  else           {               for(int i=0;i<(n);i=i+2)            {                System.out.print((-ar[i+1])+"" ""+ar[i]+"" "");            }               System.out.println();           }                                     } public static void main(String[] args) { Scanner sc=new Scanner(System.in);int t=sc.nextInt(); while(t-->0) {     int n=sc.nextInt();    int ar[]=new int[n];    for(int i=0;i<n;i++)    ar[i]=sc.nextInt();    solve(ar,n); } } } ",1
1039,"import java.util.*; public class Main {     public static void main(String args[]) {         Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t-- > 0){             int n = s.nextInt();             String a = s.next();             String b = s.next();             int a1 = 0, b1 = 0;             for (char c: a.toCharArray()){                 if (c == '1') a1++;             }             for (char c: b.toCharArray()){                 if (c == '1') b1++;             }             int ans = Integer.MAX_VALUE;             int res = 0;             for (int i = 0; i < n; i++) {                 if (a.charAt(i) != b.charAt(i)) res++;             }             if (a1 == b1) ans = Math.min(ans, res);             if (b1 == n-a1+1) ans = Math.min(ans, n-res);             if (ans == Integer.MAX_VALUE){                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         }     } } ","import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ",0
1040,"import java.util.*; public class Main {     public static void main(String args[]) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0){             int n  =sc.nextInt();             long[] arr = new long[n];             for(int i=0;i<n;i++){                 arr[i] =sc.nextLong();             }             Map<Long, Long> map = new HashMap<>();             List<Long> list = new ArrayList<>();             list.add((long)0);             for(int i=0;i<n;i++){                 int s = list.size();                 for(int j=0;j<s;j++){                     list.add(list.get(j)+arr[i]);                 }             }             int flag = 0;             for(int i=0;i<list.size();i++){                 map.put(list.get(i), map.getOrDefault(list.get(i), (long)0)+1);                 if(map.get(list.get(i))>1){                     flag = 1;                     break;                 }             }             if(flag>0)                 System.out.println(""YES"");             else                 System.out.println(""NO"");         }     } } ","import java.util.*;     public class Main {         public static void main(String args[]) {             Scanner sc = new Scanner(System.in);             int t = sc.nextInt();             while(t-->0){                 int n  =sc.nextInt();                 long[] arr = new long[n];                 for(int i=0;i<n;i++){                     arr[i] =sc.nextLong();                 }                 Map<Long, Long> map = new HashMap<>();                 List<Long> list = new ArrayList<>();                 list.add((long)0);                 for(int i=0;i<n;i++){                     int s = list.size();                     for(int j=0;j<s;j++){                         list.add(list.get(j)+arr[i]);                     }                 }                 int flag = 0;                 for(int i=0;i<list.size();i++){                     map.put(list.get(i), map.getOrDefault(list.get(i), (long)0)+1);                     if(map.get(list.get(i))>1){                         flag = 1;                         break;                     }                 }                 if(flag>0)                     System.out.println(""YES"");                 else                     System.out.println(""NO"");             }         }     } ",1
1041,"import java.util.*; public class Main {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         for (int i = 0; i < t; i++) {             int n = scan.nextInt();             ArrayList<ArrayList<Pair>> graph = new ArrayList<>();             for (int j = 0; j < n; j++) {                 graph.add(new ArrayList<>());             }             for (int j = 0; j < n - 1; j++) {                 int u;                 int v;                 u = scan.nextInt();                 v = scan.nextInt();                 u--;                 v--;                 graph.get(u).add(new Pair(v, j));                 graph.get(v).add(new Pair(u, j));             }             boolean soluble = true;             int curV = 0;             int prevV = -1;             int[] ans = new int[n];             int prime = 2;             for (int j = 0; j < n; j++) {                 ArrayList<Pair> list = graph.get(j);                 if (list.size() > 2) {                     soluble = false;                 } else if (list.size() == 1) {                     curV = j;                 }             }             if (soluble) {                 for (int j = 0; j < n - 1; j++) {                     ArrayList<Pair> list = graph.get(curV);                     for (int z = 0; z < list.size(); z++) {                         if (list.get(z).vertex != prevV) {                             ans[list.get(z).numberOfEdge] = prime;                             prime = changePrime(prime);                             prevV = curV;                             curV = list.get(z).vertex;                             break;                         }                     }                 }                 for (int j = 0; j < n - 1; j++) {                     System.out.print(ans[j] + "" "");                 }                 System.out.println();             } else {                 System.out.println(-1);             }         }     }     public static int changePrime(int prime) {         if (prime == 2) {             prime = 3;         } else {             prime = 2;         }         return prime;     } } class Pair {     int vertex;     int numberOfEdge;     public Pair(int vertex, int numberOfEdge) {         this.vertex = vertex;         this.numberOfEdge = numberOfEdge;     } } ","import java.io.*; import java.util.*; public class Main {     static int i, j, k, n, m, t, y, x, sum = 0;     static long mod = 998244353;     static FastScanner fs = new FastScanner();     static PrintWriter out = new PrintWriter(System.out);     static String str;     public static void main(String[] args) {         t = fs.nextInt();         while (t-- > 0) {             n = fs.nextInt();             List<Pair>[] g = new ArrayList[n+1];             for(i=1;i<=n;i++){                 g[i] = new ArrayList();             }             for(i=0;i<n-1;i++){                 x = fs.nextInt();                 y = fs.nextInt();                 g[x].add(new Pair(y,i));                 g[y].add(new Pair(x,i));             }             boolean isPossible = true;             int l1 =0, l2=0;             for(i=1;i<=n;i++){                 if(g[i].size()>2)                     isPossible = false;                 if(g[i].size()==1)                     if(l1==0)                         l1 = i;                     else                         l2 =i;             }             if(!isPossible){                 out.println(-1);                 continue;             }             i = l1;             k=0;             int [] ans = new int[n];             int [] vis = new int[n+1];             j=0;             while(i!=l2){                 Pair p = g[i].get(0);                 if(p.x==j)                     p = g[i].get(1);                 if(k%2==0)                     ans[p.y] = 2;                 else                     ans[p.y]=5;                 k++;                 j=i;                 i = p.x;             }             for(i=0;i<n-1;i++){                 out.print(ans[i]+"" "");             }             out.println();         }         out.close();     }                        static long add(long a, long b) {         return ((a % mod) + (b % mod)) % mod;     }                         static class Pair implements Comparable<Pair> {         public int x, y;         Pair(int x, int y) {             this.x = x;             this.y = y;         }              } } ",0
1042,"import java.util.*; public class Main {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         for (int i = 0; i < t; i++) {             int n = scan.nextInt();             ArrayList<ArrayList<Pair>> graph = new ArrayList<>();             for (int j = 0; j < n; j++) {                 graph.add(new ArrayList<>());             }             for (int j = 0; j < n - 1; j++) {                 int u;                 int v;                 u = scan.nextInt();                 v = scan.nextInt();                 u--;                 v--;                 graph.get(u).add(new Pair(v, j));                 graph.get(v).add(new Pair(u, j));             }             boolean soluble = true;             int curV = 0;             int prevV = -1;             int[] ans = new int[n];             int prime = 2;             for (int j = 0; j < n; j++) {                 ArrayList<Pair> list = graph.get(j);                 if (list.size() > 2) {                     soluble = false;                 } else if (list.size() == 1) {                     curV = j;                 }             }             if (soluble) {                 for (int j = 0; j < n - 1; j++) {                     ArrayList<Pair> list = graph.get(curV);                     for (int z = 0; z < list.size(); z++) {                         if (list.get(z).vertex != prevV) {                             ans[list.get(z).numberOfEdge] = prime;                             prime = changePrime(prime);                             prevV = curV;                             curV = list.get(z).vertex;                             break;                         }                     }                 }                 for (int j = 0; j < n - 1; j++) {                     System.out.print(ans[j] + "" "");                 }                 System.out.println();             } else {                 System.out.println(-1);             }         }     }     public static int changePrime(int prime) {         if (prime == 2) {             prime = 3;         } else {             prime = 2;         }         return prime;     } } class Pair {     int vertex;     int numberOfEdge;     public Pair(int vertex, int numberOfEdge) {         this.vertex = vertex;         this.numberOfEdge = numberOfEdge;     } } ","import java.io.*; import java.util.*; public class Main { final static long mod = 1000000007; public static void main(String[] args) { InputReader in = new InputReader(System.in); PrintWriter out = new PrintWriter(System.out); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); int[][] a = new int[n - 1][2]; ArrayList<ArrayList<Data>> g = new ArrayList<>(); for (int i = 0; i < n - 1; i++) { g.add(new ArrayList<>()); a[i][0] = in.nextInt() - 1; a[i][1] = in.nextInt() - 1; } g.add(new ArrayList<>()); for (int i = 0; i < n - 1; i++) { g.get(a[i][0]).add(new Data(a[i][1], i)); g.get(a[i][1]).add(new Data(a[i][0], i)); } if (!check(g)) { System.out.println(-1); continue; } int[] ans = new int[n - 1]; ans[0] = 2; for(int node: a[0]) { for(Data d: g.get(node)) { solve(g, d.a, d.ind, false, ans); } } for (int i : ans) System.out.print(i + "" ""); System.out.println(); } out.flush(); } private static void solve(ArrayList<ArrayList<Data>> g, int node, int edge, boolean b, int[] ans) { if (ans[edge] != 0) return; ans[edge] = b ? 2 : 3; for (Data d : g.get(node)) { solve(g, d.a, d.ind, !b, ans); } } private static boolean check(ArrayList<ArrayList<Data>> g) { for (ArrayList<Data> a : g) if (a.size() > 2) return false; return true; } } class Data { int a; int ind; Data(int val, int ind) { this.a = Math.abs(val); this.ind = ind; } } ",0
1043,"import java.util.*; public class Main {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         for (int i = 0; i < t; i++) {             int n = scan.nextInt();             ArrayList<ArrayList<Pair>> graph = new ArrayList<>();             for (int j = 0; j < n; j++) {                 graph.add(new ArrayList<>());             }             for (int j = 0; j < n - 1; j++) {                 int u;                 int v;                 u = scan.nextInt();                 v = scan.nextInt();                 u--;                 v--;                 graph.get(u).add(new Pair(v, j));                 graph.get(v).add(new Pair(u, j));             }             boolean soluble = true;             int curV = 0;             int prevV = -1;             int[] ans = new int[n];             int prime = 2;             for (int j = 0; j < n; j++) {                 ArrayList<Pair> list = graph.get(j);                 if (list.size() > 2) {                     soluble = false;                 } else if (list.size() == 1) {                     curV = j;                 }             }             if (soluble) {                 for (int j = 0; j < n - 1; j++) {                     ArrayList<Pair> list = graph.get(curV);                     for (int z = 0; z < list.size(); z++) {                         if (list.get(z).vertex != prevV) {                             ans[list.get(z).numberOfEdge] = prime;                             prime = changePrime(prime);                             prevV = curV;                             curV = list.get(z).vertex;                             break;                         }                     }                 }                 for (int j = 0; j < n - 1; j++) {                     System.out.print(ans[j] + "" "");                 }                 System.out.println();             } else {                 System.out.println(-1);             }         }     }     public static int changePrime(int prime) {         if (prime == 2) {             prime = 3;         } else {             prime = 2;         }         return prime;     } } class Pair {     int vertex;     int numberOfEdge;     public Pair(int vertex, int numberOfEdge) {         this.vertex = vertex;         this.numberOfEdge = numberOfEdge;     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.StringTokenizer; public class NotAssigning { static class Pair { int a, b; public Pair(int a, int b) { this.a = a; this.b = b; } } static boolean vis[]; public static void dfs(ArrayList<ArrayList<Pair>> t, int cur, boolean mode, int[] w) { vis[cur] = true; for (Pair p : t.get(cur)) { if (!vis[p.a]) { if (mode) { w[p.b] = 3; } else { w[p.b] = 2; } dfs(t, p.a, !mode, w); } } } public static void solve(int n, int[] u, int[] v) { ArrayList<ArrayList<Pair>> t = new ArrayList<ArrayList<Pair>>(n); for (int i=0; i<n; i++) { t.add(new ArrayList<Pair>()); } for (int i=0; i<n-1; i++) { t.get(u[i]).add(new Pair(v[i], i)); t.get(v[i]).add(new Pair(u[i], i)); } int start = 0; for (int i=0; i<n; i++) { if (t.get(i).size() > 2) { System.out.println(""-1""); return; } if (t.get(i).size() == 1) { start = i; } } vis = new boolean[n]; int[] w = new int[n-1]; dfs(t, start, false, w); StringBuilder ans = new StringBuilder(); for (int i=0; i<n-1; i++) { ans.append(w[i]).append("" ""); } System.out.println(ans); } public static void main(String[] args) { FastReader in = new FastReader(); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); int[] u = new int[n-1]; int[] v = new int[n-1]; for (int i=0; i<n-1; i++) { u[i] = in.nextInt()-1; v[i] = in.nextInt()-1; } solve(n, u, v); } } } ",0
1044,"import java.util.*; public class Main {     static class Edge{         public int node;         public int index;         public Edge(int n, int i){             node=n;             index=i;         }     }     static Scanner sc=new Scanner(System.in); public static void main(String[] args) {          int test=sc.nextInt();     while(test-->0){                  solve();     } } static void solve(){     int n=sc.nextInt();         ArrayList<ArrayList<Edge>> graph= new ArrayList<ArrayList<Edge>>();         for(int i=0;i<n;i++){             graph.add(new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             u--; v--;                          graph.get(u).add(new Edge(v, i));             graph.get(v).add(new Edge(u, i));             }                          int start = 0;             for (int i = 0; i < n; i++) {                 if (graph.get(i).size() > 2) {                     System.out.println(""-1"");                     return;                 } else if (graph.get(i).size() == 1) {                     start = i;                 }             }             int[] weight = new int[n - 1];                          int prevNode = -1;             int curNode = start;             int curWeight = 2;                          while (true) {                 ArrayList<Edge> edges = graph.get(curNode);                 Edge next = edges.get(0);                                  if (next.node == prevNode) {                     if (edges.size() == 1) {                         break;                     } else {                         next = edges.get(1);                     }                 }                 weight[next.index] = curWeight;                                  prevNode = curNode;                 curNode = next.node;                 curWeight = 5 - curWeight;             }             for (int i = 0; i < n - 1; i++) {                 System.out.print(weight[i]);                 System.out.print("" "");             }             System.out.println(); } } ","import java.io.*; import java.util.*;   public class Contest1627C {          static InputReader r = new InputReader(System.in);     static PrintWriter pw = new PrintWriter(System.out);     static long mod = 1000000007; static ArrayList<Integer>[] adj; static ArrayList<Integer>[] num; static int[] ans;     public static void main(String[] args)     {     int t = r.nextInt();     while (t > 0)     {     t--;     int n = r.nextInt();     adj = new ArrayList[n];     num = new ArrayList[n];     for (int i = 0; i < n; i ++)     {     adj[i] = new ArrayList<Integer>();     num[i] = new ArrayList<Integer>();     }     int[] deg = new int[n];     boolean flag = false;     for (int i = 0; i < n - 1; i ++)     {     int a = r.nextInt()-1;     int b = r.nextInt()-1;     adj[a].add(b);     adj[b].add(a);     num[a].add(i);     num[b].add(i);     deg[a] ++;     deg[b] ++;     if (deg[a] > 2 || deg[b] > 2)     {     flag = true;     }     }     if (flag)     {     pw.println(-1);     continue;     }     ans = new int[n];     for (int i = 0; i < n; i ++)     {     if (deg[i] == 1)     {     dfs(i,3,-1);     }     }     for (int i = 0; i < n - 1; i ++)     {     pw.println(ans[i]);     }     }         pw.close();     }     static void dfs(int node, int x, int p)     {     for (int j = 0; j < adj[node].size(); j ++)     {     int i = adj[node].get(j);     if (i == p)     {     continue;     }     ans[num[node].get(j)] = x;     dfs(i,5-x,node);     }     } } ",0
1045,"import java.util.*; public class Main {     static class Edge{         public int node;         public int index;         public Edge(int n, int i){             node=n;             index=i;         }     }     static Scanner sc=new Scanner(System.in); public static void main(String[] args) {          int test=sc.nextInt();     while(test-->0){                  solve();     } } static void solve(){     int n=sc.nextInt();         ArrayList<ArrayList<Edge>> graph= new ArrayList<ArrayList<Edge>>();         for(int i=0;i<n;i++){             graph.add(new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             u--; v--;                          graph.get(u).add(new Edge(v, i));             graph.get(v).add(new Edge(u, i));             }                          int start = 0;             for (int i = 0; i < n; i++) {                 if (graph.get(i).size() > 2) {                     System.out.println(""-1"");                     return;                 } else if (graph.get(i).size() == 1) {                     start = i;                 }             }             int[] weight = new int[n - 1];                          int prevNode = -1;             int curNode = start;             int curWeight = 2;                          while (true) {                 ArrayList<Edge> edges = graph.get(curNode);                 Edge next = edges.get(0);                                  if (next.node == prevNode) {                     if (edges.size() == 1) {                         break;                     } else {                         next = edges.get(1);                     }                 }                 weight[next.index] = curWeight;                                  prevNode = curNode;                 curNode = next.node;                 curWeight = 5 - curWeight;             }             for (int i = 0; i < n - 1; i++) {                 System.out.print(weight[i]);                 System.out.print("" "");             }             System.out.println(); } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.StringTokenizer; public class NotAssigning { static class Pair { int a, b; public Pair(int a, int b) { this.a = a; this.b = b; } } static boolean vis[]; public static void dfs(ArrayList<ArrayList<Pair>> t, int cur, boolean mode, int[] w) { vis[cur] = true; for (Pair p : t.get(cur)) { if (!vis[p.a]) { if (mode) { w[p.b] = 3; } else { w[p.b] = 2; } dfs(t, p.a, !mode, w); } } } public static void solve(int n, int[] u, int[] v) { ArrayList<ArrayList<Pair>> t = new ArrayList<ArrayList<Pair>>(n); for (int i=0; i<n; i++) { t.add(new ArrayList<Pair>()); } for (int i=0; i<n-1; i++) { t.get(u[i]).add(new Pair(v[i], i)); t.get(v[i]).add(new Pair(u[i], i)); } int start = 0; for (int i=0; i<n; i++) { if (t.get(i).size() > 2) { System.out.println(""-1""); return; } if (t.get(i).size() == 1) { start = i; } } vis = new boolean[n]; int[] w = new int[n-1]; dfs(t, start, false, w); StringBuilder ans = new StringBuilder(); for (int i=0; i<n-1; i++) { ans.append(w[i]).append("" ""); } System.out.println(ans); } public static void main(String[] args) { FastReader in = new FastReader(); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); int[] u = new int[n-1]; int[] v = new int[n-1]; for (int i=0; i<n-1; i++) { u[i] = in.nextInt()-1; v[i] = in.nextInt()-1; } solve(n, u, v); } } } ",0
1046,"import java.util.*; public class Main {     static class Edge{         public int node;         public int index;         public Edge(int n, int i){             node=n;             index=i;         }     }     static Scanner sc=new Scanner(System.in); public static void main(String[] args) {          int test=sc.nextInt();     while(test-->0){                  solve();     } } static void solve(){     int n=sc.nextInt();         ArrayList<ArrayList<Edge>> graph= new ArrayList<ArrayList<Edge>>();         for(int i=0;i<n;i++){             graph.add(new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             u--; v--;                          graph.get(u).add(new Edge(v, i));             graph.get(v).add(new Edge(u, i));             }                          int start = 0;             for (int i = 0; i < n; i++) {                 if (graph.get(i).size() > 2) {                     System.out.println(""-1"");                     return;                 } else if (graph.get(i).size() == 1) {                     start = i;                 }             }             int[] weight = new int[n - 1];                          int prevNode = -1;             int curNode = start;             int curWeight = 2;                          while (true) {                 ArrayList<Edge> edges = graph.get(curNode);                 Edge next = edges.get(0);                                  if (next.node == prevNode) {                     if (edges.size() == 1) {                         break;                     } else {                         next = edges.get(1);                     }                 }                 weight[next.index] = curWeight;                                  prevNode = curNode;                 curNode = next.node;                 curWeight = 5 - curWeight;             }             for (int i = 0; i < n - 1; i++) {                 System.out.print(weight[i]);                 System.out.print("" "");             }             System.out.println(); } } ","import java.util.*;   public class Main { public static void main(String[] args) {     Scanner sc = new Scanner(System.in);  int tc = sc.nextInt(); while(tc>0) {     tc--;     int ans = 0;     int n = sc.nextInt();     int in[] = new int[n];     int wx[] = new int[n-1];     int wy[] = new int[n-1];     ArrayList<ArrayList<Integer>> arr = new ArrayList<ArrayList<Integer>>();     HashMap<String,Integer> h = new HashMap<String,Integer>();     HashSet<Integer> h2 = new HashSet<Integer>();     for(int i=0;i<n;i++)     {         arr.add(new ArrayList<Integer>());     }     for(int i=0;i<n-1;i++)     {         int x = sc.nextInt();         int y = sc.nextInt();         x--;         y--;         in[x]++;         in[y]++;         if(in[x]>2 || in[y]>2)         {             ans = -1;         }         else if(ans!=-1)         {             arr.get(x).add(y);             arr.get(y).add(x);             wx[i] = x;             wy[i] = y;         }              }     if(ans == -1)     {         System.out.println(""-1"");     }     else     {         int vis[] = new int[n];         ArrayDeque<Integer> q = new ArrayDeque<Integer>();         q.add(0);         vis[0] = 1;         while(q.size()>0)         {             int x = q.removeFirst();             for(int i=0;i<arr.get(x).size();i++)             {                 int y = arr.get(x).get(i);                 String temp  =String.valueOf(x);                 if(vis[y] == 0)                 {                     vis[y] = 1;                     if(h2.contains(y) || h2.contains(x))                     {                         String s1 = temp+""_""+String.valueOf(y);                         String s2 = String.valueOf(y)+""_""+temp;                         h.put(s1,11);                         h.put(s2,11);                                              }                     else                     {                         String s1 = temp+""_""+String.valueOf(y);                         String s2 = String.valueOf(y)+""_""+temp;                         h.put(s1,2);                         h.put(s2,2);                         h2.add(x);                         h2.add(y);                     }                     q.add(y);                 }             }         }         for(int i=0;i<wx.length;i++)         {             String s1 = String.valueOf(wx[i])+""_""+String.valueOf(wy[i]);             System.out.print(h.get(s1)+"" "");         }         System.out.println();     } } } } ",0
1047,"import java.util.*; public class Main {     static class Edge{         public int node;         public int index;         public Edge(int n, int i){             node=n;             index=i;         }     }     static Scanner sc=new Scanner(System.in); public static void main(String[] args) {          int test=sc.nextInt();     while(test-->0){                  solve();     } } static void solve(){     int n=sc.nextInt();         ArrayList<ArrayList<Edge>> graph= new ArrayList<ArrayList<Edge>>();         for(int i=0;i<n;i++){             graph.add(new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             u--; v--;                          graph.get(u).add(new Edge(v, i));             graph.get(v).add(new Edge(u, i));             }                          int start = 0;             for (int i = 0; i < n; i++) {                 if (graph.get(i).size() > 2) {                     System.out.println(""-1"");                     return;                 } else if (graph.get(i).size() == 1) {                     start = i;                 }             }             int[] weight = new int[n - 1];                          int prevNode = -1;             int curNode = start;             int curWeight = 2;                          while (true) {                 ArrayList<Edge> edges = graph.get(curNode);                 Edge next = edges.get(0);                                  if (next.node == prevNode) {                     if (edges.size() == 1) {                         break;                     } else {                         next = edges.get(1);                     }                 }                 weight[next.index] = curWeight;                                  prevNode = curNode;                 curNode = next.node;                 curWeight = 5 - curWeight;             }             for (int i = 0; i < n - 1; i++) {                 System.out.print(weight[i]);                 System.out.print("" "");             }             System.out.println(); } } ","import java.util.*; import java.io.*; public class Main {     static MyScanner sc;     static PrintWriter out;     static {         sc = new MyScanner();         out = new PrintWriter(System.out);     }     public static void bfs(Node[] g, int[] ans) {         Arrays.fill(ans, -1);         boolean[] visited = new boolean[g.length];         Queue<Integer> q = new LinkedList<>();         int s = 0;         for(int i = 0; i < g.length; i++) {             if(g[i].l.size() == 1) {                 s = i;                 break;             }         }         q.add(s);         int curr = 2;         while(!q.isEmpty()) {             int u = q.poll();             if(visited[u])                 continue;             visited[u] = true;             for(Edge edge : g[u].l) {                 if(!visited[edge.v]) {                     ans[edge.id] = curr;                     q.add(edge.v);                     if(curr == 2) curr = 3;                     else curr = 2;                 }             }         }     }     public static void solve() {         int n = sc.nextInt();         Node[] a = new Node[n];         for(int i = 0; i < n; i++)             a[i] = new Node();         for(int i = 0; i < n - 1; i++) {             int u = sc.nextInt() - 1;             int v = sc.nextInt() - 1;             a[u].l.add(new Edge(v, i));             a[v].l.add(new Edge(u, i));         }         for(Node node : a) {             if(node.l.size() > 2) {                 out.println(-1);                 return;             }         }         int[] ans = new int[n - 1];         bfs(a, ans);         for(int i = 0; i < n - 1; i++)             out.print(ans[i] + "" "");         out.println();     }     public static void main(String[] args) {         int t = sc.nextInt();         while(t-- > 0)             solve();         out.flush();     } } class Edge {     int v, id;     Edge(int a, int b) {         v = a;         id = b;     } } class Node {     ArrayList<Edge> l;     Node() {         l = new ArrayList<>();     } } ",0
1048,"import java.util.*; public class Main {     static class Edge{         public int node;         public int index;         public Edge(int n, int i){             node=n;             index=i;         }     }     static Scanner sc=new Scanner(System.in); public static void main(String[] args) {          int test=sc.nextInt();     while(test-->0){                  solve();     } } static void solve(){     int n=sc.nextInt();         ArrayList<ArrayList<Edge>> graph= new ArrayList<ArrayList<Edge>>();         for(int i=0;i<n;i++){             graph.add(new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             u--; v--;                          graph.get(u).add(new Edge(v, i));             graph.get(v).add(new Edge(u, i));             }                          int start = 0;             for (int i = 0; i < n; i++) {                 if (graph.get(i).size() > 2) {                     System.out.println(""-1"");                     return;                 } else if (graph.get(i).size() == 1) {                     start = i;                 }             }             int[] weight = new int[n - 1];                          int prevNode = -1;             int curNode = start;             int curWeight = 2;                          while (true) {                 ArrayList<Edge> edges = graph.get(curNode);                 Edge next = edges.get(0);                                  if (next.node == prevNode) {                     if (edges.size() == 1) {                         break;                     } else {                         next = edges.get(1);                     }                 }                 weight[next.index] = curWeight;                                  prevNode = curNode;                 curNode = next.node;                 curWeight = 5 - curWeight;             }             for (int i = 0; i < n - 1; i++) {                 System.out.print(weight[i]);                 System.out.print("" "");             }             System.out.println(); } } ","import java.util.*; import java.io.*; public class Main { public static FastReader obj = new FastReader(); public static PrintWriter out = new PrintWriter(System.out); public static class pair { int a; int b; pair(int  x, int y) { a = x; b = y; } } public static int i() { return obj.nextInt(); } public static int[] i(int n) { int[] arr = new int[n]; for (int i = 0; i < n; i++) arr[i] = i(); return arr; } public static void sortpair(ArrayList<pair> arr) { arr.sort(new Comparator<pair>() { }); }     public static ArrayList<ArrayList<pair>> adj;     public static int[] ans; public static void main(String[] args) { int len = i(); while (len-- != 0) { int n = i(); adj=new ArrayList<>(n+1); ans=new int[n]; int ok=0; for(int i=0;i<=n;i++)adj.add(new ArrayList<>()); for(int i=0;i<n-1;i++) { int a=obj.nextInt(); int b=obj.nextInt(); adj.get(a).add(new pair(b,i)); adj.get(b).add(new pair(a,i)); if(adj.get(a).size()>2)ok=1; if(adj.get(b).size()>2)ok=1; } if(ok==1)out.println(-1); else { int[] vis=new int[n+1]; if(adj.get(1).size()==2) { vis[adj.get(1).get(1).a]=1; dfs(1,vis,11); vis[adj.get(1).get(1).a]=0; vis[1]=0; dfs(1,vis,2); } else { dfs(1,vis,11); } for(int i=0;i<n-1;i++)out.print(ans[i]+"" ""); out.println(); } } out.flush(); } public static void dfs(int cur,int[] vis,int c) { vis[cur]=1; for(pair nd:adj.get(cur)) { if(vis[nd.a]==1)continue; if(c==2)ans[nd.b]=11; else ans[nd.b]=2; dfs(nd.a,vis,ans[nd.b]); } } } ",0
1049,"import java.util.*; public class Main {     static class Edge{         public int node;         public int index;         public Edge(int n, int i){             node=n;             index=i;         }     }     static Scanner sc=new Scanner(System.in); public static void main(String[] args) {          int test=sc.nextInt();     while(test-->0){                  solve();     } } static void solve(){     int n=sc.nextInt();         ArrayList<ArrayList<Edge>> graph= new ArrayList<ArrayList<Edge>>();         for(int i=0;i<n;i++){             graph.add(new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             u--; v--;                          graph.get(u).add(new Edge(v, i));             graph.get(v).add(new Edge(u, i));             }                          int start = 0;             for (int i = 0; i < n; i++) {                 if (graph.get(i).size() > 2) {                     System.out.println(""-1"");                     return;                 } else if (graph.get(i).size() == 1) {                     start = i;                 }             }             int[] weight = new int[n - 1];                          int prevNode = -1;             int curNode = start;             int curWeight = 2;                          while (true) {                 ArrayList<Edge> edges = graph.get(curNode);                 Edge next = edges.get(0);                                  if (next.node == prevNode) {                     if (edges.size() == 1) {                         break;                     } else {                         next = edges.get(1);                     }                 }                 weight[next.index] = curWeight;                                  prevNode = curNode;                 curNode = next.node;                 curWeight = 5 - curWeight;             }             for (int i = 0; i < n - 1; i++) {                 System.out.print(weight[i]);                 System.out.print("" "");             }             System.out.println(); } } ","import java.util.*; import java.io.*; public class hmm { static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out);  static boolean visited[];  static ArrayList<pair>arr[];  static HashMap<String,Integer>hm = new HashMap<>();    public static void dfs(int start, int prime) {    visited[start]=true;    for(pair x: arr[start]) {    if(!visited[(int) x.x]) {    x.y = prime==2?3:2;    hm.put(start+"",""+x.x,x.y);    hm.put(x.x+"",""+start, x.y);    dfs(x.x,x.y);    }    }        }     public static void main(String[] args) throws Exception { int t =sc.nextInt(); while (t-- > 0) {          int n =sc.nextInt();          visited= new boolean [n];          arr=new ArrayList[n];          int[]color = new int[n];          ArrayList<pair>lol = new ArrayList<pair>();                    for(int i=0;i<n;i++)          arr[i]=new ArrayList<pair>();          for(int i=0;i<n-1;i++) {          int u = sc.nextInt()-1;          int v = sc.nextInt()-1;              lol.add(new pair(u,v));          arr[u].add(new pair(v,0));          arr[v].add(new pair(u,0));          }          boolean can = true;          for(int i=0;i<n;i++)          if(arr[i].size()>2){          can = false;          }          if(!can)          pw.println(-1);                    else {          int []hh = new int [] {2,3};          int i=0;          visited[0]= true;          for(pair x: arr[0]) {          hm.put(0+"",""+x.x,hh[i]);          dfs(x.x,hh[i++]);          }                    for(pair a:lol) {          int u = a.x;          int y = a.y;          if(hm.containsKey(u+"",""+y))          pw.print(hm.get(u+"",""+y)+"" "");          else          pw.print(hm.get(y+"",""+u)+"" "");          }          pw.println();          } } pw.close(); } static class pair { int x ; int y; public pair(int n,int c) { x= n; y = c; } } } ",0
1050,"import java.util.*; public class Main {     static class Edge{         public int node;         public int index;         public Edge(int n, int i){             node=n;             index=i;         }     }     static Scanner sc=new Scanner(System.in); public static void main(String[] args) {          int test=sc.nextInt();     while(test-->0){                  solve();     } } static void solve(){     int n=sc.nextInt();         ArrayList<ArrayList<Edge>> graph= new ArrayList<ArrayList<Edge>>();         for(int i=0;i<n;i++){             graph.add(new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             u--; v--;                          graph.get(u).add(new Edge(v, i));             graph.get(v).add(new Edge(u, i));             }                          int start = 0;             for (int i = 0; i < n; i++) {                 if (graph.get(i).size() > 2) {                     System.out.println(""-1"");                     return;                 } else if (graph.get(i).size() == 1) {                     start = i;                 }             }             int[] weight = new int[n - 1];                          int prevNode = -1;             int curNode = start;             int curWeight = 2;                          while (true) {                 ArrayList<Edge> edges = graph.get(curNode);                 Edge next = edges.get(0);                                  if (next.node == prevNode) {                     if (edges.size() == 1) {                         break;                     } else {                         next = edges.get(1);                     }                 }                 weight[next.index] = curWeight;                                  prevNode = curNode;                 curNode = next.node;                 curWeight = 5 - curWeight;             }             for (int i = 0; i < n - 1; i++) {                 System.out.print(weight[i]);                 System.out.print("" "");             }             System.out.println(); } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef{     public static class Edge{         int node;         int index;         Edge(int node, int index){             this.node = node;             this.index = index;         }     }     static Scanner scn = new Scanner(System.in); public static void main (String[] args) throws java.lang.Exception{ int t = scn.nextInt(); while(t-->0){     solve(); } } public static void solve(){     int n = scn.nextInt();     ArrayList<Edge>[]graph = new ArrayList[n];     for(int i = 0; i < n; i++){         graph[i] = new ArrayList<>();     }     for(int i = 0; i < n - 1; i++){         int u = scn.nextInt() - 1;         int v = scn.nextInt() - 1;         graph[u].add(new Edge(v, i));         graph[v].add(new Edge(u, i));     }     int start = 0;     for(int i = 0; i < n; i++){         if(graph[i].size() > 2){             System.out.println(""-1"");             return;         }else if(graph[i].size() == 1){             start = i;         }     }     int[]weight = new int[n - 1];     int prevNode = -1, curNode = start, curWeight = 2;     while(true){         ArrayList<Edge>edges = graph[curNode];         Edge next = edges.get(0);         if(next.node == prevNode){             if(edges.size() == 1){                 break;             }else{                 next = edges.get(1);             }         }         weight[next.index] = curWeight;         prevNode = curNode;         curNode = next.node;         curWeight = 5 - curWeight;     }     for(int i = 0; i < n - 1; i++){         System.out.print(weight[i]);         System.out.print("" "");     }     System.out.println(); } } ",1
1051,"import java.util.*; public class Main {     static class Edge{         public int node;         public int index;         public Edge(int n, int i){             node=n;             index=i;         }     }     static Scanner sc=new Scanner(System.in); public static void main(String[] args) {          int test=sc.nextInt();     while(test-->0){                  solve();     } } static void solve(){     int n=sc.nextInt();         ArrayList<ArrayList<Edge>> graph= new ArrayList<ArrayList<Edge>>();         for(int i=0;i<n;i++){             graph.add(new ArrayList<>());         }         for (int i = 0; i < n - 1; i++) {             int u = sc.nextInt();             int v = sc.nextInt();             u--; v--;                          graph.get(u).add(new Edge(v, i));             graph.get(v).add(new Edge(u, i));             }                          int start = 0;             for (int i = 0; i < n; i++) {                 if (graph.get(i).size() > 2) {                     System.out.println(""-1"");                     return;                 } else if (graph.get(i).size() == 1) {                     start = i;                 }             }             int[] weight = new int[n - 1];                          int prevNode = -1;             int curNode = start;             int curWeight = 2;                          while (true) {                 ArrayList<Edge> edges = graph.get(curNode);                 Edge next = edges.get(0);                                  if (next.node == prevNode) {                     if (edges.size() == 1) {                         break;                     } else {                         next = edges.get(1);                     }                 }                 weight[next.index] = curWeight;                                  prevNode = curNode;                 curNode = next.node;                 curWeight = 5 - curWeight;             }             for (int i = 0; i < n - 1; i++) {                 System.out.print(weight[i]);                 System.out.print("" "");             }             System.out.println(); } } ","import java.util.*; public class Main {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         for (int i = 0; i < t; i++) {             int n = scan.nextInt();             ArrayList<ArrayList<Pair>> graph = new ArrayList<>();             for (int j = 0; j < n; j++) {                 graph.add(new ArrayList<>());             }             for (int j = 0; j < n - 1; j++) {                 int u;                 int v;                 u = scan.nextInt();                 v = scan.nextInt();                 u--;                 v--;                 graph.get(u).add(new Pair(v, j));                 graph.get(v).add(new Pair(u, j));             }             boolean soluble = true;             int curV = 0;             int prevV = -1;             int[] ans = new int[n];             int prime = 2;             for (int j = 0; j < n; j++) {                 ArrayList<Pair> list = graph.get(j);                 if (list.size() > 2) {                     soluble = false;                 } else if (list.size() == 1) {                     curV = j;                 }             }             if (soluble) {                 for (int j = 0; j < n - 1; j++) {                     ArrayList<Pair> list = graph.get(curV);                     for (int z = 0; z < list.size(); z++) {                         if (list.get(z).vertex != prevV) {                             ans[list.get(z).numberOfEdge] = prime;                             prime = changePrime(prime);                             prevV = curV;                             curV = list.get(z).vertex;                             break;                         }                     }                 }                 for (int j = 0; j < n - 1; j++) {                     System.out.print(ans[j] + "" "");                 }                 System.out.println();             } else {                 System.out.println(-1);             }         }     }     public static int changePrime(int prime) {         if (prime == 2) {             prime = 3;         } else {             prime = 2;         }         return prime;     } } class Pair {     int vertex;     int numberOfEdge;     public Pair(int vertex, int numberOfEdge) {         this.vertex = vertex;         this.numberOfEdge = numberOfEdge;     } } ",0
1052,"import java.util.*; public class Main {     static long mod = 998244353;     public static void solve() {                                                                                                   int n;         Scanner sc = new Scanner(System.in);         n = Integer.parseInt(sc.next());     int[] arr = new int[n];         ArrayList<Integer> ones = new ArrayList<>();         for (int i = 0; i < n; i++) {             arr[i] = Integer.parseInt(sc.next());             if (arr[i] == 1) {                 ones.add(i);             }         }         if (ones.size() == 0) {             System.out.println(""0\n"");             return;         }     int[] zeroes = new int[n - ones.size()];         int cur = 0;         for (int i = 0; i < n; i++) {             if (arr[i] == 0) {                 zeroes[cur] = i;                 cur++;             }         }     int[][] dp = new int[ones.size()][n-ones.size()];         for (int i = 1; i < ones.size(); i++) {             dp[i][0] = 100000000;         }         dp[0][0] = Math.abs(ones.get(0) - zeroes[0]);         for (int i = 1; i < n - ones.size(); i++) {             dp[0][i] = Math.min(dp[0][i - 1], Math.abs(ones.get(0) - zeroes[i]));         }                  for (int i = 1; i < ones.size(); i++) {             for (int j = 1; j < n - ones.size(); j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i-1][j-1] + Math.abs(zeroes[j] - ones.get(i)));             }         }         System.out.println(dp[ones.size()-1][n-ones.size()-1] + ""\n"");     }     public static void main(String[] args) {         solve();     } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.PrintWriter; import java.util.Arrays; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.StringTokenizer; import java.io.Writer; import java.io.OutputStreamWriter; import java.io.BufferedReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         OutputWriter out = new OutputWriter(outputStream);         DArmchairs solver = new DArmchairs();         solver.solve(1, in, out);         out.close();     }     static class DArmchairs {         static ArrayList<Integer> empty;         static ArrayList<Integer> chair;         static long[][] dp;         public void solve(int testNumber, InputReader in, OutputWriter out) {             int n = in.nextInt();             int[] arr = in.nextIntArray(n);             empty = new ArrayList<>();             chair = new ArrayList<>();             for (int i = 0; i < n; i++) {                 int a = arr[i];                 if (a == 1) chair.add(i);                 else empty.add(i);             }             dp = new long[chair.size()][empty.size()];             for (long[] row : dp) Arrays.fill(row, -1);             long ans = rec(0, 0);             out.println(ans);         }         static long rec(int i, int j) {             if (i == chair.size()) return 0;             int req = chair.size() - i;             int have = empty.size() - j;             if (req > have) return Integer.MAX_VALUE;             if (dp[i][j] != -1) return dp[i][j];             long opt1 = Math.abs(chair.get(i) - empty.get(j)) + rec(i + 1, j + 1);             long opt2 = rec(i, j + 1);             dp[i][j] = Math.min(opt1, opt2);             return dp[i][j];         }     }           } ",0
1053,"import java.util.*; public class Main {   public static void main(String[] args) {     Scanner sc= new Scanner(System.in);     int t=sc.nextInt();     while(t-->0){       int n=sc.nextInt();       int[] a=new int[n];       for(int i=0;i<n;i++)a[i]=sc.nextInt();       String x=sc.next();       Vector<Integer> R=new Vector<>();       Vector<Integer> B=new Vector<>();       for(int i=0;i<n;i++){         if(x.charAt(i)=='B') R.add(a[i]);         else B.add(a[i]);       }       Collections.sort(R);       Collections.sort(B);       boolean yes=true;       for(int i=0;i<R.size();i++){         if(R.get(i)-i<1){System.out.println(""NO"");yes=false;break;}       }       if(yes)         {           int s=B.size();           for(int j=0;j<s;j++){             if(B.get(j)+s-j>n+1){System.out.println(""NO"");yes=false;break;}           }         }         if(yes)System.out.println(""YES"");     }     sc.close();   } } ","import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Stack; import java.util.StringTokenizer; import java.util.TreeMap; import java.util.TreeSet; import java.io.*;   public class Div2 {  public static String solution(int [] arr, int n, String st)   {         ArrayList<Integer> red = new ArrayList<>();         ArrayList<Integer> blue = new ArrayList<>();                  for(int i = 0; i<n; i++)         {         if(st.charAt(i)=='R')         red.add(arr[i]);         else         blue.add(arr[i]);         }              Collections.sort(red);         Collections.sort(blue);         int cb = 1;                  for(int j = 0; j<blue.size(); j++)         {             if(blue.get(j)<cb)             return ""NO"";             cb++;         }                  int cr = n;         for(int j = red.size()-1; j>=0; j--)         {             if(red.get(j)>cr)             return ""NO"";             cr--;         }                  return ""YES"";  }          private static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { MyScanner s =  new MyScanner();        int t = s.nextInt();          for(int j = 0; j<t ; j++)     {     int n = s.nextInt();     int[] arr = new int[n];     for(int i =0; i<n; i++)     arr[i] = s.nextInt();          String st = s.next();         out.println(solution(arr,n, st));     }                out.flush();     out.close();      } } ",0
1054,"import java.util.*; public class Main { public static void main(String[] args) { Scanner s  = new Scanner(System.in); int t = s.nextInt(); while(t-- > 0){     int n = s.nextInt();     int[] arr = new int[n];     for(int i=0;i<n;i++)         arr[i] = s.nextInt();     String str = s.next();     List<Integer> left = new ArrayList<>();     List<Integer> right = new ArrayList<>();     for(int i=0;i<arr.length;i++){         if(str.charAt(i) == 'B')             left.add(arr[i]);         else right.add(arr[i]);     }     Collections.sort(left);     Collections.sort(right);     boolean flag = false;     for(int i=0;i<left.size();i++)         if(left.get(i) < i+1){             flag = true;             break;         }     if(!flag){         for(int i=0;i<right.size();i++)             if(right.get(i) > left.size()+i+1){                 flag = true;                 break;             }     }     if(flag)         System.out.println(""NO"");     else System.out.println(""YES""); } } } ","import java.util.*; import java.io.*; public class code  { static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out);        public static void main(String[] args) throws Exception { int t=sc.nextInt(); while(t-->0) {             int n=sc.nextInt();             int []vals=new int[n];             boolean numLine[]=new boolean[n+1];             for(int i=0;i<n;i++)vals[i]=sc.nextInt();             String s=sc.nextLine();             ArrayList<Integer>b=new ArrayList<Integer>();             ArrayList<Integer>r=new ArrayList<Integer>();             for(int i=0;i<n;i++) {             if(s.charAt(i)=='B' && vals[i]>0 )b.add(vals[i]);             else if( s.charAt(i)=='R' && vals[i]<=n)r.add(vals[i]);             }           Collections.sort(b);           Collections.sort(r);           int small=1;           for(int i=0;i<b.size();i++) {                      int y=b.get(i);           if(y<small)continue;           numLine[small]=true;           small++;           }                     int large=n;           for(int i=r.size()-1;i>=0;i--) {                      int y=r.get(i);           if(y>large)continue;                     numLine[large]=true;           large--;           }                      boolean can=true;           for(int i=1;i<=n;i++) {           if(numLine[i]==false) {           pw.println(""no"");           can=false;           break;           }                      }           if(can)pw.println(""yes"");                                                               }  pw.close(); } } ",0
1055,"import java.util.*; public class Main { public static void main(String[] args) { Scanner s  = new Scanner(System.in); int t = s.nextInt(); while(t-- > 0){     int n = s.nextInt();     int[] arr = new int[n];     for(int i=0;i<n;i++)         arr[i] = s.nextInt();     String str = s.next();     List<Integer> left = new ArrayList<>();     List<Integer> right = new ArrayList<>();     for(int i=0;i<arr.length;i++){         if(str.charAt(i) == 'B')             left.add(arr[i]);         else right.add(arr[i]);     }     Collections.sort(left);     Collections.sort(right);     boolean flag = false;     for(int i=0;i<left.size();i++)         if(left.get(i) < i+1){             flag = true;             break;         }     if(!flag){         for(int i=0;i<right.size();i++)             if(right.get(i) > left.size()+i+1){                 flag = true;                 break;             }     }     if(flag)         System.out.println(""NO"");     else System.out.println(""YES""); } } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",0
1056,"import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int  t=sc.nextInt(); while(t-- >0) { int n=sc.nextInt(); int[] arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextInt(); } String str=sc.next(); ArrayList<Pair> plist=new ArrayList<>(); for(int i=0;i<n;i++) { char ch=str.charAt(i); plist.add(new Pair(arr[i],ch)); } Collections.sort(plist); int counter=1; boolean flag=false; for(int i=0;i<plist.size();i++) { int val=plist.get(i).number; int clr=plist.get(i).color; if(clr=='B') { if(val<counter) { flag=true; break; } } else { if(val>counter) { flag=true; break; } } counter++; } System.out.println(flag?""NO"":""YES""); } } public static class Pair implements Comparable<Pair>{ int number; char color; Pair(int number,char color){ this.number=number; this.color=color; } } } ","import java.io.*; import java.util.*; public class Practice { static int mod=1000000007; static final int size=501; static FastReader sc=new FastReader(System.in); static  PrintWriter out=new PrintWriter(System.out); static long[] factorialNumInverse; static long[] naturalNumInverse; static int[] sp; static long[] fact; static ArrayList<Integer> pr; public static void main(String[] args) throws IOException { int t=1; t=sc.nextInt(); while(t-->0) solve(); out.close(); out.flush(); } static void solve() throws IOException { int n=sc.nextInt(); int arr[]=new int[n]; for(int i=0;i<n;i++) arr[i]=sc.nextInt(); String s=sc.next(); ArrayList<Integer> blue=new ArrayList<Integer>(); ArrayList<Integer> red=new ArrayList<Integer>(); for(int i=0;i<n;i++) { if(s.charAt(i)=='B') blue.add(arr[i]); else red.add(arr[i]); } Collections.sort(blue); Collections.sort(red); for(int i=0;i<blue.size();i++) { if(blue.get(i)<i+1) { out.println(""NO""); return; } } for(int i=0;i<red.size();i++) { if(red.get(i)>i+1+blue.size()) { out.println(""NO""); return; } } out.println(""YES""); }   } ",0
1057,"import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int  t=sc.nextInt(); while(t-- >0) { int n=sc.nextInt(); int[] arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextInt(); } String str=sc.next(); ArrayList<Pair> plist=new ArrayList<>(); for(int i=0;i<n;i++) { char ch=str.charAt(i); plist.add(new Pair(arr[i],ch)); } Collections.sort(plist); int counter=1; boolean flag=false; for(int i=0;i<plist.size();i++) { int val=plist.get(i).number; int clr=plist.get(i).color; if(clr=='B') { if(val<counter) { flag=true; break; } } else { if(val>counter) { flag=true; break; } } counter++; } System.out.println(flag?""NO"":""YES""); } } public static class Pair implements Comparable<Pair>{ int number; char color; Pair(int number,char color){ this.number=number; this.color=color; } } } ","import java.util.*; public class Main { public static void main(String[] args) { Scanner s  = new Scanner(System.in); int t = s.nextInt(); while(t-- > 0){     int n = s.nextInt();     int[] arr = new int[n];     for(int i=0;i<n;i++)         arr[i] = s.nextInt();     String str = s.next();     List<Integer> left = new ArrayList<>();     List<Integer> right = new ArrayList<>();     for(int i=0;i<arr.length;i++){         if(str.charAt(i) == 'B')             left.add(arr[i]);         else right.add(arr[i]);     }     Collections.sort(left);     Collections.sort(right);     boolean flag = false;     for(int i=0;i<left.size();i++)         if(left.get(i) < i+1){             flag = true;             break;         }     if(!flag){         for(int i=0;i<right.size();i++)             if(right.get(i) > left.size()+i+1){                 flag = true;                 break;             }     }     if(flag)         System.out.println(""NO"");     else System.out.println(""YES""); } } } ",0
1058,"import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int  t=sc.nextInt(); while(t-- >0) { int n=sc.nextInt(); int[] arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextInt(); } String str=sc.next(); ArrayList<Pair> plist=new ArrayList<>(); for(int i=0;i<n;i++) { char ch=str.charAt(i); plist.add(new Pair(arr[i],ch)); } Collections.sort(plist); int counter=1; boolean flag=false; for(int i=0;i<plist.size();i++) { int val=plist.get(i).number; int clr=plist.get(i).color; if(clr=='B') { if(val<counter) { flag=true; break; } } else { if(val>counter) { flag=true; break; } } counter++; } System.out.println(flag?""NO"":""YES""); } } public static class Pair implements Comparable<Pair>{ int number; char color; Pair(int number,char color){ this.number=number; this.color=color; } } } ","import java.util.*; public class anshulvmc {          public static void sort(int[] a) { ArrayList<Integer> l=new ArrayList<>(); for (int i:a) l.add(i); Collections.sort(l); for (int i=0; i<a.length; i++) a[i]=l.get(i); }                                                                                                     public static boolean redblue(int[] num, String chnum) {     ArrayList<Integer> blue = new ArrayList<>();     ArrayList<Integer> red = new ArrayList<>();     for(int i=0;i<chnum.length();i++) {     char ch = chnum.charAt(i);     if(ch == 'B') {     blue.add(num[i]);     }     else {     red.add(num[i]);     }     }     Collections.sort(blue);     Collections.sort(red);     for(int i=0;i<blue.size();i++) {     if(blue.get(i) >= i+1) {          }     else {     return false;     }     }     for(int i=0;i<red.size();i++) {     if(red.get(i) > i+1 + blue.size()) {     return false;     }     }     return true;     }          public static void main(String args[])               {     Scanner scn = new Scanner(System.in);     int test = scn.nextInt();     for(int i=0;i<test;i++) {     int size = scn.nextInt();     int[] arr = new int[size];     for(int j=0;j<size;j++) {     arr[j] = scn.nextInt();     }     String str = scn.next();     boolean f = redblue(arr,str);     if(f) {     System.out.println(""YES"");     }     else {     System.out.println(""NO"");     }     }          } } ",0
1059,"import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int  t=sc.nextInt(); while(t-- >0) { int n=sc.nextInt(); int[] arr=new int[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextInt(); } String str=sc.next(); ArrayList<Pair> plist=new ArrayList<>(); for(int i=0;i<n;i++) { char ch=str.charAt(i); plist.add(new Pair(arr[i],ch)); } Collections.sort(plist); int counter=1; boolean flag=false; for(int i=0;i<plist.size();i++) { int val=plist.get(i).number; int clr=plist.get(i).color; if(clr=='B') { if(val<counter) { flag=true; break; } } else { if(val>counter) { flag=true; break; } } counter++; } System.out.println(flag?""NO"":""YES""); } } public static class Pair implements Comparable<Pair>{ int number; char color; Pair(int number,char color){ this.number=number; this.color=color; } } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",0
1060,"import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); while(t-->0){     int n=sc.nextInt();     int k=sc.nextInt();          int idx[]=new int[k];          for(int i=0;i<k;i++){         idx[i]=sc.nextInt();     }          long arr[]=new long[n];     Arrays.fill(arr,Integer.MAX_VALUE);     for(int i=0;i<k;i++){         long temp=sc.nextLong();         arr[idx[i]-1]=temp;     }          long left[]=new long[n];     long right[]=new long[n];          Arrays.fill(left,Integer.MAX_VALUE);     Arrays.fill(right,Integer.MAX_VALUE);               left[0]=arr[0];          for(int i=1;i<n;i++){        left[i]=Math.min(left[i-1]+1,arr[i]);     }          right[arr.length-1]=arr[arr.length-1];          for(int i=n-2;i>=0;i--){         right[i]=Math.min(right[i+1]+1,arr[i]);     }          for(int i=0;i<n;i++){                               System.out.print(Math.min(left[i],right[i])+"" "");     }     System.out.println();    } } } ","import  java.math.*; import java.util.*; import java.lang.*; import java.io.*; public final class Main {     FastReader s;     public static void main (String[] args) throws java.lang.Exception     {         new Main().run();     }     void run()     {         s = new FastReader();         solve();     }    StringBuffer sb;     void solve()     {          sb = new StringBuffer();         for(int T = s.nextInt();T > 0;T--)             start();             }     void start()     {         int n = s.nextInt();         int m = s.nextInt();         long arr[] = longArr(m);         long arr2[] = longArr(m);         long ans [] = new long[n];         Arrays.fill(ans,Integer.MAX_VALUE);         for(int i = 0; i<m; i++)         {             ans[(int)arr[i]-1] = arr2[i];         }         long left [] = new long[n];         long right [] = new long[n];         left[0] = ans[0];         for(int i = 1; i<n; i++)         {             left[i] = Math.min(ans[i], left[i-1]+1);         }         right[n-1] = ans[n-1];         for(int i = n-2; i>=0; i--)         {             right[i] = Math.min(right[i+1]+1, ans[i]);         }         StringBuffer x = new StringBuffer();         for(int i =0; i<n; i++)         {             long p = Math.min(left[i],right[i]);             x.append(p+"" "");         }         System.out.println(x);     }                                                  public long [] longArr(int len)     {                  long [] arr = new long[len];         String [] strs =  s.nextLine().trim().split(""\\s+"");         for(int i =0; i<len; i++)         {             arr[i] = Long.parseLong(strs[i]);         }         return arr;     }                } ",1
1061,"import java.util.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); while(t-->0){     int n=sc.nextInt();     int k=sc.nextInt();          int idx[]=new int[k];          for(int i=0;i<k;i++){         idx[i]=sc.nextInt();     }          long arr[]=new long[n];     Arrays.fill(arr,Integer.MAX_VALUE);     for(int i=0;i<k;i++){         long temp=sc.nextLong();         arr[idx[i]-1]=temp;     }          long left[]=new long[n];     long right[]=new long[n];          Arrays.fill(left,Integer.MAX_VALUE);     Arrays.fill(right,Integer.MAX_VALUE);               left[0]=arr[0];          for(int i=1;i<n;i++){        left[i]=Math.min(left[i-1]+1,arr[i]);     }          right[arr.length-1]=arr[arr.length-1];          for(int i=n-2;i>=0;i--){         right[i]=Math.min(right[i+1]+1,arr[i]);     }          for(int i=0;i<n;i++){                               System.out.print(Math.min(left[i],right[i])+"" "");     }     System.out.println();    } } } ","import java.util.*; public class j {   public static void main(String args[])   {     Scanner in=new Scanner(System.in);     int n=in.nextInt();     while(n-->0)     {       int len=in.nextInt();       int t=in.nextInt();       int pos[]=new int[t];       int temp[]=new int[t];       for(int i=0;i<t;i++)       pos[i]=in.nextInt();       for(int i=0;i<t;i++)       temp[i]=in.nextInt();       long range[]=new long[len];       Arrays.fill(range,Long.MAX_VALUE-10000);       for(int i=0;i<t;i++)       range[pos[i]-1]=temp[i];       for(int i=1;i<len;i++)       {         range[i]=Math.min(range[i],1+range[i-1]);       }       for(int i=len-2;i>=0;i--)       {       range[i]=Math.min(range[i+1]+1,range[i]);       }       for(int i=0;i<len;i++)       {         System.out.print(range[i]+"" "");       }System.out.println();     }   } } ",0
1062,"import java.util.*; public class Main { public static void main(String[] args){      Scanner scn = new Scanner(System.in);      int t = scn.nextInt();      StringBuilder gs = new StringBuilder("""");      for(int Z=0 ; Z<t ; Z++){      int n = scn.nextInt();      String[] str = new String[n];      Set<String> hs = new HashSet<>();      int minLen = Integer.MAX_VALUE;      for(int i=0 ; i<n ; i++) {      str[i] = scn.next();      hs.add(str[i]);      minLen = Math.min(minLen, str[i].length());      }      if(minLen == 1)      gs.append(""YES"" + ""\n"");      else {      boolean mark = false;      for(int i=0 ; i<n ; i++) {      if(str[i].length() == 2 && str[i].charAt(0) == str[i].charAt(1)) {      mark = true;      break;      }      String rev = """";      for(int j=str[i].length()-1 ; j>=0 ; j--)      rev += str[i].charAt(j);      if(hs.contains(rev)) {      mark = true;      break;      }      if(str[i].length() == 3) {      String ans = rev.substring(1, rev.length());      if(hs.contains(ans)){      mark = true;      break;      }      }      if(str[i].length() < 3) {      for(int k=0 ; k<26 ; k++) {      String str1 = (char)(k + 'a') + rev;      if(hs.contains(str1)) {      mark= true;      break;      }      }      }           hs.remove(str[i]);      }      if(!mark)      gs.append(""NO"" + ""\n"");      else      gs.append(""YES"" + ""\n"");      }      }      System.out.println(gs); } } ","import java.util.*; public class Main { public static void main(String[] args){      Scanner scn = new Scanner(System.in);      int t = scn.nextInt();      StringBuilder sb = new StringBuilder("""");      for(int A=0 ; A<t ; A++){      int n = scn.nextInt();      String[] arr = new String[n];      Map<String, Integer> hm = new HashMap<>();      int min = 4;      for(int i=0 ; i<n ; i++) {      arr[i] = scn.next();      hm.put(arr[i], arr[i].length());      min = Math.min(min, arr[i].length());      }      if(min == 1)      sb.append(""YES"" + ""\n"");      else {      boolean flag = false;      for(int i=0 ; i<n ; i++) {      if(arr[i].length() == 2 && arr[i].charAt(0) == arr[i].charAt(1)) {      flag = true;      break;      }      String s = """";      for(int j=arr[i].length()-1 ; j>=0 ; j--)      s += arr[i].charAt(j);      if(hm.containsKey(s)) {      flag = true;      break;      }      if(arr[i].length() < 3) {      for(int k=0 ; k<26 ; k++) {      String str = (char)(k + 'a') + s;      if(hm.containsKey(str)) {      flag= true;      break;      }      }      }      if(arr[i].length() == 3) {      String str = s.substring(1, s.length());      if(hm.containsKey(str)){      flag = true;      break;      }      }      hm.remove(arr[i]);      }      if(flag)      sb.append(""YES"" + ""\n"");      else      sb.append(""NO"" + ""\n"");      }      }      System.out.println(sb); } } ",1
1063,"import java.util.*; public class Main { public static void main(String[] args){ Scanner sc = new Scanner(System.in); int t = sc.nextInt(); for ( int zzz=0; zzz<t; zzz++ ) { int n = sc.nextInt(); HashMap<Integer, HashSet<Integer>> adj = new HashMap<>(); HashMap<HashSet<Integer>, Integer> inv = new HashMap<>(); boolean f = false; for ( int i=0; i<n-1; i++ ) { int u = sc.nextInt(); int v = sc.nextInt(); if ( adj.containsKey(u) ) { HashSet<Integer> s = adj.get(u); if ( s.size()>1 ) f = true; s.add(v); adj.put(u, s); } else { HashSet<Integer> s = new HashSet<>(); s.add(v); adj.put(u, s); } if ( adj.containsKey(v) ) { HashSet<Integer> s = adj.get(v); if ( s.size()>1 ) f = true; s.add(u); adj.put(v, s); } else { HashSet<Integer> s = new HashSet<>(); s.add(u); adj.put(v, s); } HashSet<Integer> si = new HashSet<>(); si.add(u); si.add(v); inv.put(si, i); } if ( f ) { System.out.println(-1); continue; } String[] ans = new String[n-1]; boolean g = false; ArrayDeque<Integer> q = new ArrayDeque<>(); q.addLast(1); boolean[] seen = new boolean[n+1]; while ( q.size()>0 ) { int v = q.removeLast(); seen[v] = true; HashSet<Integer> s = adj.get(v); for ( int e : s ) { if ( seen[e] ) continue; HashSet<Integer> st = new HashSet<>(); st.add(v); st.add(e); int pos = inv.get(st); if ( g ) { ans[pos] = ""3""; } else { ans[pos] = ""2""; } g = !g; q.addLast(e); break; } } g = true; q.addLast(1); while ( q.size()>0 ) { int v = q.removeLast(); seen[v] = true; HashSet<Integer> s = adj.get(v); for ( int e : s ) { if ( seen[e] ) continue; HashSet<Integer> st = new HashSet<>(); st.add(v); st.add(e); int pos = inv.get(st); if ( g ) { ans[pos] = ""3""; } else { ans[pos] = ""2""; } g = !g; q.addLast(e); break; } } System.out.println(String.join("" "", ans)); } } } ","import java.util.*; import java.io.*; public class Main {     static FastScanner sc = new FastScanner(System.in);     static PrintWriter pw = new PrintWriter(System.out);     static StringBuilder sb = new StringBuilder();     static long mod = (long) 1e9 + 7;     public static void main(String[] args) throws Exception {         int t = sc.nextInt();         for(int i = 0; i < t; i++) solve();         pw.flush();     }          static ArrayList<ArrayList<int[]>> map;     static int[] ans;     public static void solve() {         sb.setLength(0);         int n = sc.nextInt();         ans = new int[n-1];         map = new ArrayList<>();         for(int i = 0; i < n; i++){             map.add(new ArrayList<>());         }         int[] cnt = new int[n];         for(int i = 0; i < n-1; i++){             int[] e = sc.nextIntArray(2);             e[0]--;             e[1]--;             cnt[e[0]]++;             cnt[e[1]]++;                          map.get(e[0]).add(new int[]{e[1],i});             map.get(e[1]).add(new int[]{e[0],i});         }         for(int i = 0; i < n; i++){             if(cnt[i] > 2){                 pw.println(-1);                 return;             }         }                  for(int i = 0; i < n; i++){             if(cnt[i] == 1){                 ArrayDeque<int[]> dq = new ArrayDeque<>();                 boolean[] used = new boolean[n];                 used[i] = true;                 dq.add(new int[]{i,0});                 while(dq.size() > 0){                     int[] now = dq.poll();                     int u = now[0];                     int c = now[1];                                          for(int[] next : map.get(u)){                         int v = next[0];                         int ei = next[1];                                                  if(!used[v]){                             used[v] = true;                                                          ans[ei] = c % 2 == 0 ? 3 : 2;                             dq.add(new int[]{v,c+1});                         }                     }                 }                 for(int v : ans){                     if(v == 0){                         pw.println(-1);                         return;                     }                     sb.append(v).append("" "");                 }                 pw.println(sb.toString().trim());                 return;             }         }         pw.println(-1);     }      } ",0
1064,"import java.util.*; public class Main { public static void main(String[] args){ Scanner sc = new Scanner(System.in); int t = sc.nextInt(); for ( int zzz=0; zzz<t; zzz++ ) { int n = sc.nextInt(); int[] a = new int[n]; String[] b = new String[n]; for ( int i=0; i<n; i++ ) { a[i] = sc.nextInt(); } int pos = 0; if ( n%2==1 ) { int a01 = a[0]+a[1]; if ( a01==0 ) { a01 = a[0]-a[1]; b[0] = String.valueOf(a[2]); b[1] = String.valueOf(0-a[2]); b[2] = String.valueOf(0-a01); } else { b[0] = String.valueOf(a[2]); b[1] = String.valueOf(a[2]); b[2] = String.valueOf(0-a01); } pos = 3; } for ( int i=pos; i<n; i=i+2 ) { b[i] = String.valueOf(a[i+1]); b[i+1] = String.valueOf(0-a[i]); } System.out.println(String.join("" "", b)); } } } ","import java.io.*; import java.util.*;   public class cf {       public static void main(String[] args){           FastScanner sc = new FastScanner();         int t = sc.nextInt();         while(t-- > 0){    int n=sc.nextInt();             int arr[]=new int[n];             for(int i=0;i<n;i++){                 arr[i]=sc.nextInt();             }             int ans[]=new int[n];             if(n%2==0){                 for(int i=0;i<n;i=i+2){                     ans[i]=-arr[i+1];                     ans[i+1]=arr[i];                 }             }             else{                 if(arr[0]+arr[1]!=0){                     ans[0]=-arr[2];                     ans[1]=-arr[2];                     ans[2]=arr[0]+arr[1];                 }                 else{                     if(arr[1]+arr[2]!=0){                         ans[1]=-arr[0];                         ans[2]=-arr[0];                         ans[0]=arr[1]+arr[2];                     }                     else{                         ans[0]=-arr[1];                         ans[2]=-arr[1];                         ans[1]=arr[0]+arr[2];                     }                 }                 for(int i=3;i<n;i=i+2){                     ans[i]=-arr[i+1];                     ans[i+1]=arr[i];                 }             }             for(int j=0;j<n;j++){                 System.out.print(ans[j]+"" "");             }             System.out.println();                                                                                        }                        }                    } ",0
1065,"import java.util.*; public class Main { public static void main(String[] args){ Scanner sc = new Scanner(System.in); int t = sc.nextInt(); for ( int zzz=0; zzz<t; zzz++ ) { int n = sc.nextInt(); int[] a = new int[n]; String[] b = new String[n]; for ( int i=0; i<n; i++ ) { a[i] = sc.nextInt(); } int pos = 0; if ( n%2==1 ) { int a01 = a[0]+a[1]; if ( a01==0 ) { a01 = a[0]-a[1]; b[0] = String.valueOf(a[2]); b[1] = String.valueOf(0-a[2]); b[2] = String.valueOf(0-a01); } else { b[0] = String.valueOf(a[2]); b[1] = String.valueOf(a[2]); b[2] = String.valueOf(0-a01); } pos = 3; } for ( int i=pos; i<n; i=i+2 ) { b[i] = String.valueOf(a[i+1]); b[i+1] = String.valueOf(0-a[i]); } System.out.println(String.join("" "", b)); } } } ","import java.util.*; public class Main { public static void main(String[] args){ Scanner sc = new Scanner(System.in); int t = sc.nextInt(); for ( int zzz=0; zzz<t; zzz++ ) { int n = sc.nextInt(); int[] a = new int[n]; String[] b = new String[n]; for ( int i=0; i<n; i++ ) { a[i] = sc.nextInt(); } int pos = 0; if ( n%2==1 ) { int a01 = a[0]+a[1]; if ( a01==0 ) { a01 = a[0]-a[1]; b[0] = String.valueOf(a[2]); b[1] = String.valueOf(0-a[2]); b[2] = String.valueOf(0-a01); } else { b[0] = String.valueOf(a[2]); b[1] = String.valueOf(a[2]); b[2] = String.valueOf(0-a01); } pos = 3; } for ( int i=pos; i<n; i=i+2 ) { b[i] = String.valueOf(a[i+1]); b[i+1] = String.valueOf(0-a[i]); } System.out.println(String.join("" "", b)); } } } ",1
1066,"import java.util.*; public class Main { static Scanner scan = new Scanner(System.in); static int[] readArray(int[] x) { for(int i=0; i<x.length; ++i) x[i] = scan.nextInt(); return x; } static long[] readArray(long[] x) { for(int i=0; i<x.length; ++i) x[i] = scan.nextLong(); return x; } public static void main(String[] args) { int t = scan.nextInt(); for(int it=0; it<t; ++it) { int n = scan.nextInt(); long[] aa = readArray(new long[n]); long minEven = aa[0]; long minOdd = aa[1]; long sum = aa[0]+aa[1]; long best = n*minEven + n*minOdd; int numOdd = 1; int numEven = 1; for(int i=2; i<n; ++i) { if(i%2 == 0) { minEven = Math.min(aa[i], minEven); numEven++; }else { minOdd = Math.min(aa[i], minOdd); numOdd++; } sum += aa[i]; long score = sum; score += minEven*(n-numEven); score += minOdd*(n-numOdd); best = Math.min(best, score); } System.out.println(best); } } } ","import java.io.*; import java.lang.*; import java.util.*; public class MinGridPath { public static void main(String[] args) { Scanner s=new Scanner(System.in); int t=s.nextInt(); while(t-->0){ int n = s.nextInt(); long[] aa =new long[n]; for(int i=0;i<n;i++) aa[i]=s.nextLong();   long minEven = aa[0]; long minOdd = aa[1]; long sum = aa[0]+aa[1]; long best = n*minEven + n*minOdd; int numOdd = 1; int numEven = 1; for(int i=2; i<n; ++i) { if(i%2 == 0) { minEven = Math.min(aa[i], minEven); numEven++; }else { minOdd = Math.min(aa[i], minOdd); numOdd++; } sum += aa[i]; long score = sum; score += minEven*(n-numEven); score += minOdd*(n-numOdd); best = Math.min(best, score); } System.out.println(best); } } } ",1
1067,"import java.util.*; public class Main { static Scanner scan = new Scanner(System.in); static int[] readArray(int[] x) { for(int i=0; i<x.length; ++i) x[i] = scan.nextInt(); return x; } static long[] readArray(long[] x) { for(int i=0; i<x.length; ++i) x[i] = scan.nextLong(); return x; } public static void main(String[] args) { int t = scan.nextInt(); for(int it=0; it<t; ++it) { int n = scan.nextInt(); long[] aa = readArray(new long[n]); long minEven = aa[0]; long minOdd = aa[1]; long sum = aa[0]+aa[1]; long best = n*minEven + n*minOdd; int numOdd = 1; int numEven = 1; for(int i=2; i<n; ++i) { if(i%2 == 0) { minEven = Math.min(aa[i], minEven); numEven++; }else { minOdd = Math.min(aa[i], minOdd); numOdd++; } sum += aa[i]; long score = sum; score += minEven*(n-numEven); score += minOdd*(n-numOdd); best = Math.min(best, score); } System.out.println(best); } } } ","import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.nio.file.Paths; import java.util.ArrayList; import java.util.Arrays; import java.util.InputMismatchException; import java.util.List; import java.util.Map.Entry; import java.util.TreeMap; public class Main { public Main() throws FileNotFoundException { long t = System.currentTimeMillis(); InputReader reader = new InputReader(); int ttt = reader.nextInt(); for (int tt = 0; tt < ttt; tt++) { int n=reader.nextInt(); long[] s=new long[n]; for(int i=0;i<n;i++) { s[i]=reader.nextLong(); } long smallest1=s[0]; long smallest2=s[1]; long val=n*s[0]+n*s[1]; int left1=n-1; int left2=n-1; long base=s[0]+s[1]; for(int i=2;i<n;i++) { if(i%2==0) { val=Math.min(val, base+left2*smallest2+left1*s[i]); base+=s[i]; smallest1=Math.min(smallest1, s[i]); left1--; }else { val=Math.min(val, base+left1*smallest1+left2*s[i]); base+=s[i]; smallest2=Math.min(smallest2, s[i]); left2--; } } System.out.println(val); } } public static void main(String[] args) throws FileNotFoundException { new Main(); } } ",0
1068,"import java.util.*; public class Main{   public static void main(String args[]){     Scanner sc=new Scanner(System.in);     int T=sc.nextInt();     while(T-->0){      int n=sc.nextInt();      int arr[]=new int[n];      int min=Integer.MAX_VALUE;int max=Integer.MIN_VALUE;      for(int i=0;i<n;i++){       arr[i]=sc.nextInt();       min=Math.min(arr[i],min);       max=Math.max(arr[i],max);      }      while(min<=max){       int mid=min+(max-min)/2;       if(helper(arr,mid))        min=mid+1;        else max=mid-1;      }      System.out.println(min-1);     }   }   public static boolean helper(int arr[],int min){    int tmp[]=Arrays.copyOf(arr,arr.length);    for(int i=arr.length-1;i>=2;i--){     if(tmp[i]<min)      return false;     int d=(Math.min(arr[i],tmp[i]-min))/3;     tmp[i-1]+=d;     tmp[i-2]+=d*2;    }    return tmp[1]>=min && tmp[0]>=min;   } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Example {          public static void main(String[] args) {         FastReader sc = new FastReader();         int t= sc.nextInt();         while(t>0){             t--;             int ans=Integer.MAX_VALUE;             int n=sc.nextInt();             int[] ar= new int[n];             int l=Integer.MAX_VALUE;             int h=Integer.MIN_VALUE;             for(int i=0;i<n;i++){                 ar[i]=sc.nextInt();                 l=Math.min(l,ar[i]);                 h=Math.max(h,ar[i]);             }             int[] extra;             while(l<=h){                 int mid=l+(h-l)/2;                 if(possibleans(ar,mid)){                     ans=mid;                     l=mid+1;                 }else{                     h=mid-1;                 }             }             System.out.println(ans);         }     }     private static boolean possibleans(int[] ar, int mid) { int[] extra=new int[ar.length];         for(int i=ar.length-1;i>=2;i--){             if((ar[i]+extra[i]-mid)<0){                 return false;             }             int d=Math.min(ar[i],extra[i]+ar[i]-mid);             extra[i-1]=extra[i-1]+d/3;             extra[i-2]+=2*(d/3);         }         int a=ar[0]+extra[0];         int b=ar[1]+extra[1];         return (a>=mid && b>=mid);     }      } ",1
1069,"import java.util.*; public class Main{   public static void main(String args[]){     Scanner sc=new Scanner(System.in);     int T=sc.nextInt();     while(T-->0){      int n=sc.nextInt();      int arr[]=new int[n];      int min=Integer.MAX_VALUE;int max=Integer.MIN_VALUE;      for(int i=0;i<n;i++){       arr[i]=sc.nextInt();       min=Math.min(arr[i],min);       max=Math.max(arr[i],max);      }      while(min<=max){       int mid=min+(max-min)/2;       if(helper(arr,mid))        min=mid+1;        else max=mid-1;      }      System.out.println(min-1);     }   }   public static boolean helper(int arr[],int min){    int tmp[]=Arrays.copyOf(arr,arr.length);    for(int i=arr.length-1;i>=2;i--){     if(tmp[i]<min)      return false;     int d=(Math.min(arr[i],tmp[i]-min))/3;     tmp[i-1]+=d;     tmp[i-2]+=d*2;    }    return tmp[1]>=min && tmp[0]>=min;   } } ","import java.util.*; public class Main{   public static void main(String args[]){     Scanner sc=new Scanner(System.in);     int T=sc.nextInt();     while(T-->0){      int n=sc.nextInt();      int arr[]=new int[n];      int min=Integer.MAX_VALUE;int max=Integer.MIN_VALUE;      for(int i=0;i<n;i++){       arr[i]=sc.nextInt();       min=Math.min(arr[i],min);       max=Math.max(arr[i],max);      }      while(min<=max){       int mid=min+(max-min)/2;       if(helper(arr,mid))        min=mid+1;        else max=mid-1;      }      System.out.println(min-1);     }   }   public static boolean helper(int arr[],int min){    int tmp[]=Arrays.copyOf(arr,arr.length);    for(int i=arr.length-1;i>=2;i--){     if(tmp[i]<min)      return false;     int d=(Math.min(arr[i],tmp[i]-min))/3;     tmp[i-1]+=d;     tmp[i-2]+=d*2;    }    return tmp[1]>=min && tmp[0]>=min;   } } ",1
1070,"import java.util.*; public class MyClass {     public static void main(String args[]) {       Scanner sc=new Scanner(System.in);       int tc=sc.nextInt();       while(tc>0)       {           int n=sc.nextInt();           int arr[]=new int[n];           int i,max=Integer.MIN_VALUE,min=Integer.MAX_VALUE;           for(i=0;i<n;i++)           {               arr[i]=sc.nextInt();               if(arr[i]>max)               max=arr[i];               if(arr[i]<min)               min=arr[i];           }           int low=min,high=max,mid,ans=min;           while(low<=high)           {               mid=(low+high)/2;               int temp[]=new int[n];               for(i=0;i<n;i++)               temp[i]=arr[i];               boolean flag=true;               for(i=n-1;i>=2;--i)               {                   if(temp[i]<mid)                   {                   flag=false;                   break;                   }                   int deli=Math.min(temp[i]-mid,arr[i]);                   int ex=deli/3;                   temp[i]=temp[i]-(3*ex);                   temp[i-1]=temp[i-1]+(ex);                    temp[i-2]=temp[i-2]+(2*ex);                                   }                              if(temp[0]<mid || temp[1]<mid)               flag=false;                              if(flag==true)               {               ans=mid;               low=mid+1;               }               else               high=mid-1;           }           System.out.println(ans);           --tc;       }}} ","import java.util.*; public class CF763C { private static final int MAX = 1000000001; private static final int MIN = 0; public static final void main(String ...args) { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); int[] h = new int[n]; int i, b = MAX, e = MIN; for (i = 0; i < n; i++) { h[i] = sc.nextInt(); if (b > h[i]) b = h[i]; if (e < h[i]) e = h[i]; } int[] s = new int[n]; int c, d, ans = b; while (b <= e) { c = (b + e) / 2; for (i = 0; i < n; i++) { s[i] = 0; } for (i = n - 1; i >= 2; i--) { if (h[i] + s[i] < c) { e = c - 1; break; } else { d = Math.min(h[i], h[i] + s[i] - c) / 3; s[i - 1] += d; s[i - 2] += 2 * d; } } if (i == 1) { if (h[i] + s[i] < c || h[i - 1] + s[i - 1] < c) { e = c - 1; } else { ans = c; b = c + 1; } } } System.out.println(ans); } } } ",0
1071,"import java.util.*; public class MyClass {     public static void main(String args[]) {      Scanner s=new Scanner(System.in);      int n=s.nextInt();      int a[]=new int[n];      ArrayList<Integer> lt1=new ArrayList<>();      ArrayList<Integer> lt0=new ArrayList<>();      for(int i=0;i<n;i++)      {          int l=s.nextInt();          if(l==0)          lt0.add(i+1);          else          lt1.add(i+1);      }      int dp[][]=new int[lt1.size()+1][lt0.size()+1];      for(int i=1;i<=lt1.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(lt0.get(i-1)-lt1.get(i-1));          for(int j=i+1;j<=lt0.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(lt1.get(i-1)-lt0.get(j-1)));          }      }      System.out.println(dp[lt1.size()][lt0.size()]);           } } ","import java.io.*; import java.math.*; import java.util.*; public class test {                                  public static void main(String args[]) throws Exception {     Scanner sc = new Scanner();    StringBuffer res = new StringBuffer();        int tc = 1;        while(tc-->0) {      int n = sc.nextInt();          ArrayList<Integer> one = new ArrayList<>();     ArrayList<Integer> zero = new ArrayList<>();          for(int i=0;i<n;i++) {           int x = sc.nextInt();          if(x==1) {      one.add(i);     }     else {      zero.add(i);     }     }          int dp[][] = new int[one.size()+1][zero.size()+1];           for(int i=1;i<=one.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(zero.get(i-1)-one.get(i-1));          for(int j=i+1;j<=zero.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(one.get(i-1)-zero.get(j-1)));          }      }      System.out.println(dp[one.size()][zero.size()]);    } System.out.println(res);    } } ",1
1072,"import java.util.*; public class MyClass {     public static void main(String args[]) {      Scanner s=new Scanner(System.in);      int n=s.nextInt();      int a[]=new int[n];      ArrayList<Integer> lt1=new ArrayList<>();      ArrayList<Integer> lt0=new ArrayList<>();      for(int i=0;i<n;i++)      {          int l=s.nextInt();          if(l==0)          lt0.add(i+1);          else          lt1.add(i+1);      }      int dp[][]=new int[lt1.size()+1][lt0.size()+1];      for(int i=1;i<=lt1.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(lt0.get(i-1)-lt1.get(i-1));          for(int j=i+1;j<=lt0.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(lt1.get(i-1)-lt0.get(j-1)));          }      }      System.out.println(dp[lt1.size()][lt0.size()]);           } } ","import java.util.*; import java.io.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int n = sc.nextInt(); ArrayList<Integer>  o=new ArrayList<Integer>(); ArrayList<Integer>  e=new ArrayList<Integer>(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++){ dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } } System.out.println(dp[o.size()][e.size()]); } } ",1
1073,"import java.util.*; public class MyClass {     public static void main(String args[]) {      Scanner s=new Scanner(System.in);      int n=s.nextInt();      int a[]=new int[n];      ArrayList<Integer> lt1=new ArrayList<>();      ArrayList<Integer> lt0=new ArrayList<>();      for(int i=0;i<n;i++)      {          int l=s.nextInt();          if(l==0)          lt0.add(i+1);          else          lt1.add(i+1);      }      int dp[][]=new int[lt1.size()+1][lt0.size()+1];      for(int i=1;i<=lt1.size();i++)      {          dp[i][i]=dp[i-1][i-1]+Math.abs(lt0.get(i-1)-lt1.get(i-1));          for(int j=i+1;j<=lt0.size();j++)          {              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(lt1.get(i-1)-lt0.get(j-1)));          }      }      System.out.println(dp[lt1.size()][lt0.size()]);           } } ","import java.util.*; public class Longjumps {  public static void main(String[] args){  Scanner sc=new Scanner(System.in); ArrayList<Integer> o=new ArrayList<Integer>(), e=new ArrayList<Integer>(); int n = sc.nextInt(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++) dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } System.out.println(dp[o.size()][e.size()]);  } } ",1
1074,"import java.util.*; public class P3 {     public static class tower implements Comparable<tower>{         ArrayList<Integer> index;         int size;         tower(){             size = 0;             index = new ArrayList<>();         }              }     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         while(t>0){             t--;             int n = scan.nextInt();             int m = scan.nextInt();             int x = scan.nextInt();             ArrayList<Integer> arr = new ArrayList<>();             HashMap<Integer,Integer> map = new HashMap<>();             for(int i = 0;i<n;i++){                 arr.add(scan.nextInt());                 map.put(i, arr.get(i));             }             System.out.println(""YES"");             PriorityQueue<tower> towers  = new PriorityQueue<>();             for(int i = 0;i<m;i++){                 tower curr = new tower();                 towers.add(curr);             }             for(int i = 0;i<n;i++){                 tower curr = towers.poll();                 curr.size += arr.get(i);                 curr.index.add(i);                 towers.add(curr);             }             int[] ans = new int[n];             int count = 1;             while(towers.size() > 0){                 tower curr = towers.poll();                 for(Integer p : curr.index){                     ans[p] = count;                 }                 count++;             }             for(int i = 0;i<n;i++){                 System.out.print(ans[i] +"" "");             }             System.out.println();         }     } } ","import java.io.*; import java.util.*; import java.lang.*; public class B{     public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));     static long MOD = (long) (1e9 + 7);          static long MOD2 = MOD * MOD;     static FastReader sc = new FastReader();     static int pInf = Integer.MAX_VALUE;     static int nInf = Integer.MIN_VALUE;     static long ded = (long)(1e17)+9;     public static void main(String[] args) throws Exception {         int test = 1;         test = sc.nextInt();         for (int i = 1; i <= test; i++){             solve();         }         out.flush();         out.close();     }     static void solve(){         int n = sc.nextInt();         int m = sc.nextInt();         int diff = sc.nextInt();         ArrayList<Pair> A = new ArrayList<>();         for(int i=  0; i < n; i++){             int x = sc.nextInt();             A.add(new Pair(x,i));         }         int[] sum = new int[m];         int[] ans = new int[n];         Collections.sort(A);         for(int i=  0; i < n; i++){             int idx = i%m;             sum[idx] += A.get(i).x;             ans[A.get(i).y] = idx+1;         }         Arrays.sort(sum);         if(Math.abs(sum[0]-sum[sum.length-1])>diff){             out.println(""NO"");             return;         }         out.println(""YES"");         for(int i = 0; i < n; i++){             out.print(ans[i]+"" "");         }         out.println();     }     static class Pair implements Comparable<Pair> {         int x;         int y;         public Pair(int x, int y) {             this.x = x;             this.y = y;         }                                }          public static long add(long a, long b) {         return ((a % MOD) + (b % MOD)) % MOD;     }                                                             } ",0
1075,"import java.util.*; public class P3 {     public static class tower implements Comparable<tower>{         ArrayList<Integer> index;         int size;         tower(){             size = 0;             index = new ArrayList<>();         }              }     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         while(t>0){             t--;             int n = scan.nextInt();             int m = scan.nextInt();             int x = scan.nextInt();             ArrayList<Integer> arr = new ArrayList<>();             HashMap<Integer,Integer> map = new HashMap<>();             for(int i = 0;i<n;i++){                 arr.add(scan.nextInt());                 map.put(i, arr.get(i));             }             System.out.println(""YES"");             PriorityQueue<tower> towers  = new PriorityQueue<>();             for(int i = 0;i<m;i++){                 tower curr = new tower();                 towers.add(curr);             }             for(int i = 0;i<n;i++){                 tower curr = towers.poll();                 curr.size += arr.get(i);                 curr.index.add(i);                 towers.add(curr);             }             int[] ans = new int[n];             int count = 1;             while(towers.size() > 0){                 tower curr = towers.poll();                 for(Integer p : curr.index){                     ans[p] = count;                 }                 count++;             }             for(int i = 0;i<n;i++){                 System.out.print(ans[i] +"" "");             }             System.out.println();         }     } } ","import java.io.*; import java.util.*; public class codefor  { static class height implements Comparable<height> { int h,index; height(int hi,int i) { h=hi; index=i; } }   public static void main(String[] args)  { FastReader sc=new FastReader(); int T=sc.nextInt(); while(T-->0) { int n=sc.nextInt(),m=sc.nextInt(),x=sc.nextInt(),i; ArrayList<height> arr=new ArrayList<>(); int ans[]=new int[n]; PriorityQueue<height> tower=new PriorityQueue<height>(); for(i=0;i<n;i++) arr.add(new height(sc.nextInt(),i)); if(n<m) System.out.println(""NO""); else { System.out.println(""YES""); Collections.sort(arr,Collections.reverseOrder()); for(i=0;i<m;i++) tower.add(new height(0,i+1)); for(i=0;i<n;i++) { height t=tower.poll(); t.h=t.h+arr.get(i).h; tower.add(t); ans[arr.get(i).index]=t.index; } for(i=0;i<n;i++) System.out.print(ans[i]+"" ""); System.out.println(); } } } } ",0
1076,"import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ","import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ",1
1077,"import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ","import java.util.*; public class Solution { private static Scanner in = new Scanner(System.in); public static void main(String args[]) { int t = in.nextInt(); while(t-->0) { solution(); } } private static void solution() { int ans=0; int n = in.nextInt(); String s[] = new String[n]; int occurance[][] = new int[n][5]; for(int i=0;i<n;i++) { s[i] = in.next(); for(int j=0;j<s[i].length();j++) { occurance[i][s[i].charAt(j)-'a']++; } } for(int i=0;i<5;i++) { int arr[] = new int[n]; for(int j=0;j<n;j++) { arr[j] = s[j].length() - (2 * occurance[j][i]); } Arrays.sort(arr); int temp=0; int count=0; for(int j=0;j<n;j++) { if(temp+arr[j] < 0) { count++; temp += arr[j]; } else  break; } ans = Math.max(ans, count); } System.out.println(ans); } } ",0
1078,"import java.util.*; public class Sol {     public static void main(String[] args)     {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while(t-->0)         { int n = sc.nextInt(); int a[][]=new int[n][5]; int tot[]=new int[n]; for(int i=0;i<n;i++) { String x = sc.next(); for(int j=0;j<x.length();j++) a[i][x.charAt(j)-'a'] += 1; tot[i]=x.length(); } int max=Integer.MIN_VALUE; for(int i=0;i<5;i++) max=Math.max(max,function(a,n,i,tot)); System.out.println(max); }     } static int function(int a[][],int n,int i,int tot[]) { Integer ans[] = new Integer[n]; for(int j=0;j<n;j++) ans[j]=a[j][i]-(tot[j]-a[j][i]); int res=0,j=0; Arrays.sort(ans,Collections.reverseOrder()); while(j<n&&res+ans[j]>0) res+=ans[j++]; return j; } } ","import java.util.*; public class Solution { private static Scanner in = new Scanner(System.in); public static void main(String args[]) { int t = in.nextInt(); while(t-->0) { solution(); } } private static void solution() { int ans=0; int n = in.nextInt(); String s[] = new String[n]; int occurance[][] = new int[n][5]; for(int i=0;i<n;i++) { s[i] = in.next(); for(int j=0;j<s[i].length();j++) { occurance[i][s[i].charAt(j)-'a']++; } } for(int i=0;i<5;i++) { int arr[] = new int[n]; for(int j=0;j<n;j++) { arr[j] = s[j].length() - (2 * occurance[j][i]); } Arrays.sort(arr); int temp=0; int count=0; for(int j=0;j<n;j++) { if(temp+arr[j] < 0) { count++; temp += arr[j]; } else  break; } ans = Math.max(ans, count); } System.out.println(ans); } } ",0
1079,"import java.util.*; public class Soltion{        public static void main(String []args){         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                  while(t-->0){             int n = sc.nextInt();             Integer[] arr = new Integer[n];             for(int i=0;i<n;i++){                 arr[i] = sc.nextInt();             }             String s = sc.next();                          List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();                          for(int i=0;i<s.length();i++){                 if(s.charAt(i)=='B'){                     blue.add(arr[i]);                 }                 else{                     red.add(arr[i]);                 }             }                          Collections.sort(blue);             Collections.sort(red);             int p=1,q=n;                          boolean flag = true;             for(int i=red.size()-1;i>=0;i--){                 if(red.get(i)>q){                     flag = false;                     break;                 }                 q--;             }                          for(int i=0;i<blue.size();i++){                 if(blue.get(i)<p){                     flag = false;                     break;                 }                 p++;             }                          System.out.println(flag? ""Yes"" : ""No"");         }      } } ","import java.util.*; import java.io.*; public class code  { static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out);        public static void main(String[] args) throws Exception { int t=sc.nextInt(); while(t-->0) {             int n=sc.nextInt();             int []vals=new int[n];             boolean numLine[]=new boolean[n+1];             for(int i=0;i<n;i++)vals[i]=sc.nextInt();             String s=sc.nextLine();             ArrayList<Integer>b=new ArrayList<Integer>();             ArrayList<Integer>r=new ArrayList<Integer>();             for(int i=0;i<n;i++) {             if(s.charAt(i)=='B' && vals[i]>0 )b.add(vals[i]);             else if( s.charAt(i)=='R' && vals[i]<=n)r.add(vals[i]);             }           Collections.sort(b);           Collections.sort(r);           int small=1;           for(int i=0;i<b.size();i++) {                      int y=b.get(i);           if(y<small)continue;           numLine[small]=true;           small++;           }                     int large=n;           for(int i=r.size()-1;i>=0;i--) {                      int y=r.get(i);           if(y>large)continue;                     numLine[large]=true;           large--;           }                      boolean can=true;           for(int i=1;i<=n;i++) {           if(numLine[i]==false) {           pw.println(""no"");           can=false;           break;           }                      }           if(can)pw.println(""yes"");                                                               }  pw.close(); } } ",0
1080,"import java.util.*; public class Soltion{        public static void main(String []args){         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                  while(t-->0){             int n = sc.nextInt();             Integer[] arr = new Integer[n];             for(int i=0;i<n;i++){                 arr[i] = sc.nextInt();             }             String s = sc.next();                          List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();                          for(int i=0;i<s.length();i++){                 if(s.charAt(i)=='B'){                     blue.add(arr[i]);                 }                 else{                     red.add(arr[i]);                 }             }                          Collections.sort(blue);             Collections.sort(red);             int p=1,q=n;                          boolean flag = true;             for(int i=red.size()-1;i>=0;i--){                 if(red.get(i)>q){                     flag = false;                     break;                 }                 q--;             }                          for(int i=0;i<blue.size();i++){                 if(blue.get(i)<p){                     flag = false;                     break;                 }                 p++;             }                          System.out.println(flag? ""Yes"" : ""No"");         }      } } ","import java.util.*; public class Soltion{        public static void main(String []args){         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                  while(t-->0){             int n = sc.nextInt();             Integer[] arr = new Integer[n];             for(int i=0;i<n;i++){                 arr[i] = sc.nextInt();             }             String s = sc.next();                          List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();                          for(int i=0;i<s.length();i++){                 if(s.charAt(i)=='B'){                     blue.add(arr[i]);                 }                 else{                     red.add(arr[i]);                 }             }                          Collections.sort(blue);             Collections.sort(red);             int p=1,q=n;                          boolean flag = true;             for(int i=red.size()-1;i>=0;i--){                 if(red.get(i)>q){                     flag = false;                     break;                 }                 q--;             }                          for(int i=0;i<blue.size();i++){                 if(blue.get(i)<p){                     flag = false;                     break;                 }                 p++;             }                          System.out.println(flag? ""Yes"" : ""No"");         }      } } ",1
1081,"import java.util.*; public class Soltion{        public static void main(String []args){         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                  while(t-->0){             int n = sc.nextInt();             Integer[] arr = new Integer[n];             for(int i=0;i<n;i++){                 arr[i] = sc.nextInt();             }             String s = sc.next();                          List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();                          for(int i=0;i<s.length();i++){                 if(s.charAt(i)=='B'){                     blue.add(arr[i]);                 }                 else{                     red.add(arr[i]);                 }             }                          Collections.sort(blue);             Collections.sort(red);             int p=1,q=n;                          boolean flag = true;             for(int i=red.size()-1;i>=0;i--){                 if(red.get(i)>q){                     flag = false;                     break;                 }                 q--;             }                          for(int i=0;i<blue.size();i++){                 if(blue.get(i)<p){                     flag = false;                     break;                 }                 p++;             }                          System.out.println(flag? ""Yes"" : ""No"");         }      } } ","import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ",0
1082,"import java.util.*; public class Soltion{        public static void main(String []args){         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                  while(t-->0){             int n = sc.nextInt();             Integer[] arr = new Integer[n];             for(int i=0;i<n;i++){                 arr[i] = sc.nextInt();             }             String s = sc.next();                          List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();                          for(int i=0;i<s.length();i++){                 if(s.charAt(i)=='B'){                     blue.add(arr[i]);                 }                 else{                     red.add(arr[i]);                 }             }                          Collections.sort(blue);             Collections.sort(red);             int p=1,q=n;                          boolean flag = true;             for(int i=red.size()-1;i>=0;i--){                 if(red.get(i)>q){                     flag = false;                     break;                 }                 q--;             }                          for(int i=0;i<blue.size();i++){                 if(blue.get(i)<p){                     flag = false;                     break;                 }                 p++;             }                          System.out.println(flag? ""Yes"" : ""No"");         }      } } ","import java.util.*; public class mentor1 {     public static boolean solve(int n, String color, int[] arr){         List<Integer> Barr = new ArrayList<Integer>();         List<Integer> Rarr = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if(color.charAt(i) == 'B')Barr.add(arr[i]);             else Rarr.add(arr[i]);         }         Barr.sort(Comparator.naturalOrder());         Rarr.sort(Comparator.reverseOrder());         for (int i = 0; i < Barr.size(); i++) {             if(Barr.get(i)< i + 1)return false;         }         for (int i = 0; i < Rarr.size(); i++) {             int expect = n-i;             if(Rarr.get(i) > expect)return false;         }         return true;     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         int n = input.nextInt();         for (int i = 0; i < n; i++) {             int m = input.nextInt();             int[] arr = new int[m];             for(int j = 0;j<m; j++)arr[j] = input.nextInt();             String color = input.next();             if(solve(m,color,arr)) System.out.println(""YES"");             else System.out.println(""NO"");         }     } } ",0
1083,import java.util.*; public class Solution {     public static void main(String args[])     {   Scanner s = new Scanner(System.in);         int t = s.nextInt();         while(t-- > 0){                  int n= s.nextInt();                  long [] time= new long [n];                  long [] health= new long [n];                  for(int i=0; i<n; i++)                  time[i]= s.nextLong();                  for(int i=0; i<n; i++)                  health[i]= s.nextLong();                  long currhealth= health[n-1];                  long currtime= time[n-1];                  long ans=0;                  for(int i= n-2; i>=0; i--)                  {   if(currtime-time[i]>= currhealth)                      {  ans+= (currhealth*(currhealth+1))/2;                             currhealth= health[i];                                currtime= time[i];                      }                      else if(currtime-time[i]>currhealth-health[i])                          currhealth+= (currtime-time[i]-currhealth+health[i]);                  }                  ans+= (currhealth*(currhealth+1))/2;                  System.out.println(ans);         }                  s.close();     }      } ,"import java.util.*; import java.io.*; import java.lang.*; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); while(t-->0){     int n=sc.nextInt();     long k[]=new long[n];     long h[]=new long[n];     for(int i=0;i<n;i++){         k[i]=sc.nextInt();     }     for(int i=0;i<n;i++){         h[i]=sc.nextInt();     }     long length=h[n-1];     long curr=0;     long ans=0;     for(int i=n-1;i>=1;i--){         if(k[i]-k[i-1]>=length){             curr=curr+length;             ans=ans+(curr*(curr+1))/2;             length=h[i-1];             curr=0;         }         else{             length=Math.max(length-(k[i]-k[i-1]),h[i-1]);             curr=curr+k[i]-k[i-1];         }     }     curr=curr+length;     ans=ans+(curr*(curr+1))/2;     System.out.println(ans);  } } } ",0
1084,"import java.util.*; public class Solution { private static Scanner in = new Scanner(System.in); public static void main(String[] args) { int t = in.nextInt(); while(t-- > 0) solve();     } private static void solve() { int n = in.nextInt(); int k = in.nextInt(); int a[] = new int[k+1]; for(int i=1; i<=k; i++) a[i] = in.nextInt(); long l[] = new long[n+1]; long r[] = new long[n+1]; for(int i=1; i<=n; i++) { l[i] = Integer.MAX_VALUE; r[i] = Integer.MAX_VALUE; } for(int i=1; i<=k; i++) { l[a[i]] = in.nextInt(); r[a[i]] = l[a[i]]; } for(int i=2;i<=n;i++) { l[i] = Math.min(l[i-1]+1, l[i]); } for(int i=n-1;i>=0;i--) { r[i] = Math.min(r[i+1]+1, r[i]); } for(int i=1;i<=n;i++) { System.out.print(Math.min(l[i], r[i])+"" ""); } System.out.println(); } } ","import java.util.*; public class Solution { private static Scanner in = new Scanner(System.in); public static void main(String[] args) { int t = in.nextInt(); while(t-- > 0) solve();     } private static void solve() { int n = in.nextInt(); int k = in.nextInt(); int a[] = new int[k+1]; for(int i=1; i<=k; i++) a[i] = in.nextInt(); long l[] = new long[n+1]; long r[] = new long[n+1]; for(int i=1; i<=n; i++) { l[i] = Integer.MAX_VALUE; r[i] = Integer.MAX_VALUE; } for(int i=1; i<=k; i++) { l[a[i]] = in.nextInt(); r[a[i]] = l[a[i]]; } for(int i=2;i<=n;i++) { l[i] = Math.min(l[i-1]+1, l[i]); } for(int i=n-1;i>=0;i--) { r[i] = Math.min(r[i+1]+1, r[i]); } for(int i=1;i<=n;i++) { System.out.print(Math.min(l[i], r[i])+"" ""); } System.out.println(); } } ",1
1085,"import java.util.*; public class Solution { public static int minMoves(int[] input) { List<Integer> people = new ArrayList<Integer>(); List<Integer> chairs = new ArrayList<Integer>(); for (int i = 0; i < input.length; i++) { if (input[i] == 1) { people.add(i); } else { chairs.add(i); } } int[] memo = new int[chairs.size() + 1]; for (int p = 1; ((!people.isEmpty()) && (p <= people.size())); p++) { int prev = memo[p]; memo[p] = memo[p - 1] + Math.abs(people.get(p - 1) - chairs.get(p - 1)); for (int c = p + 1; c <= chairs.size(); c++) { int tmp = memo[c]; memo[c] = Math.min(memo[c - 1], prev + Math.abs(people.get(p - 1) - chairs.get(c - 1))); prev = tmp; } } return memo[memo.length - 1]; } public static void main(String[] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); int[] input = new int[n]; for (int i = 0; i < n; i++) { input[i] = sc.nextInt(); } System.out.println(Solution.minMoves(input)); } } ","import java.util.*; import java.io.*; public class D { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int n = sc.nextInt(); ArrayList<Integer>  o=new ArrayList<Integer>(); ArrayList<Integer>  e=new ArrayList<Integer>(); for(int i=1;i<=n;i++){ int x=sc.nextInt(); if(x==1)o.add(i); else e.add(i); } int dp[][]=new int[o.size()+1][e.size()+1]; for(int i=1;i<=o.size();i++){ dp[i][i]=dp[i-1][i-1]+Math.abs(o.get(i-1)-e.get(i-1)); for(int j=i+1;j<=e.size();j++){ dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j-1]+Math.abs(o.get(i-1)-e.get(j-1))); } } System.out.println(dp[o.size()][e.size()]); } } ",0
1086,"import java.util.*; public class Solution { public static void main(String[] args) {           Scanner io =new Scanner (System.in);           int t = io.nextInt();   for (int iii=0; iii<t; iii++) {   int n = io.nextInt();   long k = io.nextLong();       Long[] arr = new Long[n];   for (int i=0; i<n; i++) {   arr[i] = io.nextLong();   }       Arrays.sort(arr);   long[] psum = new long[n];   psum[0] = arr[0];   for (int i=1; i<n; i++) {   psum[i] = psum[i-1] + arr[i];   }       if (psum[n-1] <= k) {   System.out.println(0);   continue;   }          long ans = Long.MAX_VALUE;      for (int i=0; i<n; i++) {   long sum = psum[i] + (n-i-1)*arr[0];   if (sum <= k) {   ans = Math.min(ans, n-1-i);   continue;   }   long ops = (long) Math.ceil((double) (sum - k)/(double) (n-i));       ans = Math.min(ans, n-1-i + ops);      }   System.out.println(ans);      }           }             } ","import java.util.*; public class Solution {   public static void main(String[] args) {           Scanner io =new Scanner (System.in);           int t = io.nextInt();   for (int iii=0; iii<t; iii++) {   int n = io.nextInt();   long k = io.nextLong();       Long[] arr = new Long[n];   for (int i=0; i<n; i++) {   arr[i] = io.nextLong();   }       Arrays.sort(arr);   long[] psum = new long[n];   psum[0] = arr[0];   for (int i=1; i<n; i++) {   psum[i] = psum[i-1] + arr[i];   }       if (psum[n-1] <= k) {   System.out.println(0);   continue;   }          long ans = Long.MAX_VALUE;      for (int i=0; i<n; i++) {   long sum = psum[i] + (n-i-1)*arr[0];   if (sum <= k) {   ans = Math.min(ans, n-1-i);   continue;   }   long ops = (long) Math.ceil((double) (sum - k)/(double) (n-i));       ans = Math.min(ans, n-1-i + ops);      }   System.out.println(ans);      }             }                 } ",1
1087,"import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class D { public static void main(String[] args) throws IOException { FastScanner fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); for (int tc = 0; tc < t; tc++) { int n = fs.nextInt(); int[] a = fs.readArray(n); String s = fs.nextLine(); ArrayList<Integer> blues = new ArrayList<Integer>(); ArrayList<Integer> reds = new ArrayList<Integer>(); for (int i = 0; i < s.length(); i++) { if (s.charAt(i) == 'B') { blues.add(a[i]); } else { reds.add(a[i]); } } Collections.sort(blues); Collections.sort(reds); boolean ok = true; for (int i = 1; i <= blues.size(); i++) { if (blues.get(i - 1) < i) { ok = false; break; } } for (int i = blues.size() + 1; i <= n; i++) { if (reds.get(i - blues.size() - 1) > i) { ok = false; break; } } if (ok) { out.println(""YES""); } else { out.println(""NO""); } } out.close(); } } ",0
1088,"import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ","import java.util.*; public class Main {   public static void main(String[] args) {     Scanner sc= new Scanner(System.in);     int t=sc.nextInt();     while(t-->0){       int n=sc.nextInt();       int[] a=new int[n];       for(int i=0;i<n;i++)a[i]=sc.nextInt();       String x=sc.next();       Vector<Integer> R=new Vector<>();       Vector<Integer> B=new Vector<>();       for(int i=0;i<n;i++){         if(x.charAt(i)=='B') R.add(a[i]);         else B.add(a[i]);       }       Collections.sort(R);       Collections.sort(B);       boolean yes=true;       for(int i=0;i<R.size();i++){         if(R.get(i)-i<1){System.out.println(""NO"");yes=false;break;}       }       if(yes)         {           int s=B.size();           for(int j=0;j<s;j++){             if(B.get(j)+s-j>n+1){System.out.println(""NO"");yes=false;break;}           }         }         if(yes)System.out.println(""YES"");     }     sc.close();   } } ",0
1089,"import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ","import java.util.*; public class Soltion{        public static void main(String []args){         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();                  while(t-->0){             int n = sc.nextInt();             Integer[] arr = new Integer[n];             for(int i=0;i<n;i++){                 arr[i] = sc.nextInt();             }             String s = sc.next();                          List<Integer> blue = new ArrayList<>();             List<Integer> red = new ArrayList<>();                          for(int i=0;i<s.length();i++){                 if(s.charAt(i)=='B'){                     blue.add(arr[i]);                 }                 else{                     red.add(arr[i]);                 }             }                          Collections.sort(blue);             Collections.sort(red);             int p=1,q=n;                          boolean flag = true;             for(int i=red.size()-1;i>=0;i--){                 if(red.get(i)>q){                     flag = false;                     break;                 }                 q--;             }                          for(int i=0;i<blue.size();i++){                 if(blue.get(i)<p){                     flag = false;                     break;                 }                 p++;             }                          System.out.println(flag? ""Yes"" : ""No"");         }      } } ",0
1090,"import java.util.*; public class Solution{     public static void main(String[] args){     Scanner sc=new Scanner(System.in);     int t=sc.nextInt();     while(t-->0) {         int n=sc.nextInt();         int[] a=new int[n];         for(int i=0;i<n;i++)              a[i]=sc.nextInt();      char[] c=sc.next().toCharArray();         Vector<Integer> l=new Vector<>(), r=new Vector<>();         for(int i=0;i<n;i++)             (c[i] == 'B' ? l : r).add(a[i]);         Collections.sort(l);         Collections.sort(r,Collections.reverseOrder());         boolean ok = true;         for(int i=0;i<l.size();i++)             if (l.get(i) < i + 1)                 ok = false;         for(int i=0;i<r.size();i++)             if (r.get(i) > n - i)                 ok = false;          System.out.print((ok ? ""YES"" : ""NO"")+'\n');     }     } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ",0
1091,"import java.util.*; public class Solve{     public static void main(String[] args){         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();                         while(t-->0){             int n=sc.nextInt();            long ans=Long.MAX_VALUE;            long pre=0;            PriorityQueue<Long> epq=new PriorityQueue<>();            PriorityQueue<Long> opq=new PriorityQueue<>();            for(int i=0;i<n;i++){                long a=sc.nextInt();                if(i%2==0)opq.add(a);                else epq.add(a);                pre+=a;               if(i>0) ans=Math.min(ans,pre+opq.peek()*(n-opq.size())+epq.peek()*(n-epq.size()));                            }           System.out.println(ans);         }     } } ","import java.util.*; import java.io.*; import java.math.*; public class C { private static long INF = 2000000000000000000L; public static void process() throws IOException { int n = sc.nextInt(); PriorityQueue<Integer> odd = new PriorityQueue<Integer>(); PriorityQueue<Integer> even = new PriorityQueue<Integer>(); int arr[] = sc.readArray(n); long min = INF; long sumOdd = 0; long sumEven = 0; for (int i = 0; i < n; i++) { int x = arr[i]; if (i % 2 == 0) { even.add(x); sumEven += x; } else { odd.add(x); sumOdd += x; } if (i > 0) { long ans = 0; ans += 1l * even.peek() * (n - (even.size())); ans += 1l * odd.peek() * (n - (odd.size())); ans += sumOdd + sumEven; min = Math.min(ans, min); } } System.out.println(min); } static FastScanner sc; static PrintWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new PrintWriter(System.out); } else { sc = new FastScanner(100); out = new PrintWriter(""output.txt""); } int t = 1; t = sc.nextInt(); while (t-- > 0) { process(); } out.flush(); out.close(); } } ",0
1092,"import java.util.*; public class anshulvmc {          public static void sort(int[] a) { ArrayList<Integer> l=new ArrayList<>(); for (int i:a) l.add(i); Collections.sort(l); for (int i=0; i<a.length; i++) a[i]=l.get(i); }                                                                                                     public static boolean redblue(int[] num, String chnum) {     ArrayList<Integer> blue = new ArrayList<>();     ArrayList<Integer> red = new ArrayList<>();     for(int i=0;i<chnum.length();i++) {     char ch = chnum.charAt(i);     if(ch == 'B') {     blue.add(num[i]);     }     else {     red.add(num[i]);     }     }     Collections.sort(blue);     Collections.sort(red);     for(int i=0;i<blue.size();i++) {     if(blue.get(i) >= i+1) {          }     else {     return false;     }     }     for(int i=0;i<red.size();i++) {     if(red.get(i) > i+1 + blue.size()) {     return false;     }     }     return true;     }          public static void main(String args[])               {     Scanner scn = new Scanner(System.in);     int test = scn.nextInt();     for(int i=0;i<test;i++) {     int size = scn.nextInt();     int[] arr = new int[size];     for(int j=0;j<size;j++) {     arr[j] = scn.nextInt();     }     String str = scn.next();     boolean f = redblue(arr,str);     if(f) {     System.out.println(""YES"");     }     else {     System.out.println(""NO"");     }     }          } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class Codeforces {     public static void main(String[] args) {         FastReader fastReader = new FastReader();         int t = fastReader.nextInt();         while (t-- > 0) {             int n = fastReader.nextInt();             int a[] = new int[n];             for (int i = 0; i < n; i++) {                 a[i] = fastReader.nextInt();             }             ArrayList<Integer> b = new ArrayList<>();             ArrayList<Integer> r = new ArrayList<>();             char c[] = fastReader.next().toCharArray();             for (int i = 0; i < n; i++) {                 if (c[i] == 'B') {                     b.add(a[i]);                 } else {                     r.add(a[i]);                 }             }             Collections.sort(b);             Collections.sort(r);             int sizeb = b.size();             boolean isValid = true;             for (int i = 1 , j = 0; i <=sizeb; i++ , j++){                 if (b.get(j) <  i){                     isValid =false;                 }             }             for (int i = sizeb+1 , j = 0; i <=n && j < r.size(); i++ , j++){                 if (r.get(j) >  i){                     isValid =false;                 }             }             if (isValid){                 System.out.println(""YES"");             }else{                 System.out.println(""NO"");             }         }     }      } ",0
1093,"import java.util.*; public class anshulvmc {          public static void sort(int[] a) { ArrayList<Integer> l=new ArrayList<>(); for (int i:a) l.add(i); Collections.sort(l); for (int i=0; i<a.length; i++) a[i]=l.get(i); }                                                                                                     public static boolean redblue(int[] num, String chnum) {     ArrayList<Integer> blue = new ArrayList<>();     ArrayList<Integer> red = new ArrayList<>();     for(int i=0;i<chnum.length();i++) {     char ch = chnum.charAt(i);     if(ch == 'B') {     blue.add(num[i]);     }     else {     red.add(num[i]);     }     }     Collections.sort(blue);     Collections.sort(red);     for(int i=0;i<blue.size();i++) {     if(blue.get(i) >= i+1) {          }     else {     return false;     }     }     for(int i=0;i<red.size();i++) {     if(red.get(i) > i+1 + blue.size()) {     return false;     }     }     return true;     }          public static void main(String args[])               {     Scanner scn = new Scanner(System.in);     int test = scn.nextInt();     for(int i=0;i<test;i++) {     int size = scn.nextInt();     int[] arr = new int[size];     for(int j=0;j<size;j++) {     arr[j] = scn.nextInt();     }     String str = scn.next();     boolean f = redblue(arr,str);     if(f) {     System.out.println(""YES"");     }     else {     System.out.println(""NO"");     }     }          } } ","import java.util.*; public class SolutionB {                                   public static void main(String[] args){         Scanner s = new Scanner(System.in);                  int t = s.nextInt();         for(int i =0;i<t;i++) {             int n = s.nextInt();             int arr [] = new int[n];             ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int j=0;j<n;j++){                 int num = s.nextInt();                 arr[j]=num;             }             String color = s.next();             for(int j=0;j<n;j++){                 if(color.charAt(j)=='B'){                     blue.add(arr[j]);                 }                 else{                     red.add(arr[j]);                 }             }             Collections.sort(blue);             String ans = ""YES"";             int counter = 0;             for(int j=0;j<blue.size();j++){                 int current = blue.get(j);                 if (current<1){                     ans=""NO"";                     break;                 }                 if(current>counter){                     counter++;                 }                 else{                     ans=""NO"";                     break;                 }             }             if(ans==""NO""){                 System.out.println(ans);             }             else{                 int tempCounter = n+1;                 Collections.sort(red);                 for(int j=red.size()-1;j>=0;j--){                     int  current  = red.get(j);                     if(current>=tempCounter){                         ans=""NO"";                         break;                     }                     else{                         tempCounter--;                     }                 }                 if(tempCounter-counter!=1)                     System.out.println(""NO"");                 else                     System.out.println(ans);             }         }         return;     } } ",0
1094,"import java.util.*; public class code {     int hell(String arr[],int a,int n)     {         int sum=0;         int s=0;         int arr1[]=new int[n];         int x=0;         int y=0;         for(int i=0;i<n;i++)         {             int l=arr[i].length();             for(int j=0;j<l;j++)             {                 if(arr[i].charAt(j)==a)                     x++;                 else                     y++;             }             arr1[i]=y-x;             y=0;             x=0;         }         Arrays.sort(arr1);         for(int i=0;i<n;i++)         {             s+=arr1[i];             if(s<0)                 sum++;             else                     break;         }         return sum;     }     public static void main(String args[])     {         code ob=new code();         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         while(t-->0)         {             int sum1=0;             int sum2=0;             int n=sc.nextInt();             String arr[]=new String[n];             for(int i=0;i<n;i++)             {                 arr[i]=sc.next();             }             for(int i=97;i<=102;i++)             {                 sum2=ob.hell(arr,i,n);                 sum1=Math.max(sum2,sum1);             }             System.out.println(sum1);         }     } } ","import java.io.IOException;     import java.io.InputStream;     import java.io.PrintWriter;     import java.util.InputMismatchException;     import java.util.PriorityQueue;     public class InterestingStory {         static InputReader inputReader=new InputReader(System.in);         static void solve()         {             int n=inputReader.nextInt();             String arr[]=new String[n];             for (int i=0;i<n;i++)             {                 arr[i]=inputReader.readString();             }             int larr[]=new int[n];             for (int i=0;i<n;i++) {                 larr[i] = arr[i].length();             }             int freqarr[][]=new int[n][5];             for (int i=0;i<n;i++)             {                 freqarr[i]=freq(arr[i],larr[i]);             }             int max=Integer.MIN_VALUE;             for (char c='a';c<='e';c++)             {                 max=Math.max(max,helper(freqarr,larr,n,c));             }             out.println(max);         }         static  int helper(int freqarr[][],int larr[],int n,char c)         {             int sum=0;             PriorityQueue<Integer>priorityQueue=new PriorityQueue<>();             for (int i=0;i<n;i++)             {                 int score=freqarr[i][c-'a']-(larr[i]-freqarr[i][c-'a']);                 priorityQueue.add(score);                 sum+=score;             }             while (!priorityQueue.isEmpty()&&sum<=0) {                 sum -= priorityQueue.poll();             }             return priorityQueue.size();         }        static int []freq(String str,int len)         {             int arr[]=new int[5];             for (int i=0;i<len;i++)             {                 arr[str.charAt(i)-'a']++;             }             return arr;         }         static PrintWriter out=new PrintWriter((System.out));         public static void main(String args[])throws IOException         {             int t=inputReader.nextInt();             while(t-->0)             {                 solve();             }             out.close();         }              } ",0
1095,"import java.util.*; public class contestA {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         int inf = 1000300300;         while (t-->0){             int n = scanner.nextInt();             int k = scanner.nextInt();             int[] c = new int[n];             Arrays.fill(c,inf);             int[] a = new int[k];             int[] b = new int[k];             for(int i=0;i<k;++i) a[i] = scanner.nextInt() - 1;             for(int i=0;i<k;++i) b[i] = scanner.nextInt();             for(int i=0;i<k;++i) c[a[i]] = b[i];             for(int i=1;i<n;++i){                 c[i] = Math.min(c[i],c[i-1]+1);             }             for(int i=n-2;i>=0;--i){                 c[i] = Math.min(c[i],c[i+1]+1);             }             for(int i=0;i<n;++i) System.out.print(c[i]+"" "");             System.out.println();         }     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.HashSet; import java.util.Stack; import java.util.StringTokenizer; import java.util.Vector; public class Main { static InputStream inputStream = System.in; static OutputStream outputStream = System.out; static InputReader in = new InputReader(inputStream); static PrintWriter out = new PrintWriter(outputStream); public static void main(String[] args) { int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); int k = in.nextInt(); int[] v1 = new int[k]; int[] v2 = new int[k]; for (int i = 0; i < k; i++) { v1[i] = in.nextInt(); } for (int i = 0; i < k; i++) { v2[i] = in.nextInt(); } int[] res = new int[n + 2]; Arrays.fill(res, 2000000000); for (int i = 0; i < k; i++) { res[v1[i]] = v2[i]; } for (int i = 1; i <= n; i++) { int val = Math.min(res[i], res[i - 1] + 1); res[i] = val; } for (int i = n; i >= 1; i--) { int val1 = Math.min(res[i], res[i + 1] + 1); res[i] = val1; } for (int i = 1; i <= n; i++) { int r = res[i]; out.print(r + "" ""); } out.println(); } out.close(); } } ",0
1096,"import java.util.*; public class contestA {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         int inf = 1000300300;         while (t-->0){             int n = scanner.nextInt();             int k = scanner.nextInt();             int[] c = new int[n];             Arrays.fill(c,inf);             int[] a = new int[k];             int[] b = new int[k];             for(int i=0;i<k;++i) a[i] = scanner.nextInt() - 1;             for(int i=0;i<k;++i) b[i] = scanner.nextInt();             for(int i=0;i<k;++i) c[a[i]] = b[i];             for(int i=1;i<n;++i){                 c[i] = Math.min(c[i],c[i-1]+1);             }             for(int i=n-2;i>=0;--i){                 c[i] = Math.min(c[i],c[i+1]+1);             }             for(int i=0;i<n;++i) System.out.print(c[i]+"" "");             System.out.println();         }     } } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Arrays; public class Main{       public static void main (String[] args){         FastReader s = new FastReader();         int t=1;t=s.ni();         for(int test=1;test<=t;test++){         int n=s.ni(),k=s.ni();         int position[]=s.readArray(k),temp[]=s.readArray(k);         int ans[]=new int[n];         Arrays.fill(ans,Integer.MAX_VALUE/2);         for(int i=0;i<k;i++){             ans[position[i]-1]=temp[i];         }         for(int i=1;i<n;i++){             ans[i]=Math.min(ans[i-1]+1,ans[i]);         }         for(int i=n-2;i>=0;i--){             ans[i]=Math.min(ans[i],ans[i+1]+1);         }         for(int i=0;i<n;i++)         System.out.print(ans[i]+"" "");         System.out.println();         }     }                } ",1
1097,"import java.util.*; public class contestC {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         while (t-->0){             int n = scanner.nextInt();             ArrayList<String> list = new ArrayList<>();             for(int i=0;i<n;++i){                 String s = scanner.next();                 list.add(s);             }             int ans = 0;             for(char a='a';a<='e';++a ){                 ArrayList<Integer> num = new ArrayList<>();                 for(String s : list){                     int cnt = 0;                     for(int i=0;i<s.length();++i){                         if(s.charAt(i)==a) cnt++;                         else cnt--;                     }                     num.add(cnt);                 }                 Collections.sort(num,Collections.reverseOrder());                 int sum = 0;                 for(int i=0;i<num.size();++i){                     sum+=num.get(i);                     if(sum<=0){                         ans = Math.max(ans,i);                         break;                     }                 }                 if(sum > 0) {                     ans = n;                     break;                 }             }             System.out.println(ans);         }     } } ","import java.util.*; import java.io.*;   public class Main {       public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);         PrintWriter pw = new PrintWriter(System.out);         int t = sc.nextInt();         while(t-- > 0){             int n = sc.nextInt();             String[] s = new String[n];             for(int i=0; i<n; i++)                 s[i] = sc.next();             int MAX = 0;             for(char c = 'a'; c <= 'e'; c++){                 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());                  for(int i=0; i<n; ++i) {                     int curChar = 0;                     int otherChar = 0;                     for(int j=0; j<s[i].length(); j++) {                         if(s[i].charAt(j) == c)                             curChar++;                         else                             otherChar++;                     }                     int diff = curChar - otherChar;                     pq.add(diff);                 }                 int cur = 0;                 int numberOfWords = 0;                 while(!pq.isEmpty()){                     if(cur + pq.peek() > 0){                         cur += pq.poll();                         numberOfWords++;                     }else{                         break;                     }                 }                 MAX = Math.max(MAX, numberOfWords);             }             pw.println(MAX);         }         pw.close();     }        } ",0
1098,"import java.util.*; public class d {     public static Scanner sc = new Scanner(System.in);     public static final int MOD = 998244353;     int []f; int [] lf;     public static int mul(int a, int b) {         return (int)((long)a * (long)b % MOD);     }     public static int ksm(int a, int n) {         int ans = 1;         while(n > 0) {             if((n & 1) == 1)                 ans = mul(a, ans);             a = mul(a, a);             n >>= 1;         }         return ans;     }     public int C(int n, int k) {         return (k < 0 || k > n) ? 0 : mul(f[n], mul(lf[n - k], lf[k]));     }     public static int inv(int a) {         return ksm(a, MOD - 2);     }     public void solve() {         int n = sc.nextInt();         int k = sc.nextInt();         f = new int[n + 42];         lf = new int[n + 42];         f[0] = lf[0] = 1;         for(int i = 1; i < f.length; i++) {             f[i] = mul(f[i  - 1], i);             lf[i] = mul(lf[i - 1], inv(i));         }         int[] events = new int[2 * n];         for(int i = 0; i < n; i++) {             int le = sc.nextInt();             int ri = sc.nextInt();             events[i] = le * 2;             events[i + n] = ri * 2 + 1;         }         Arrays.sort(events);         int ans = 0, balance = 0;         for(int r = 0; r < 2 * n;) {             int l = r;             while(r < 2 * n && events[l] == events[r]) ++r;             int added = r - l;             if(events[l] % 2 == 0) {                 ans += C(balance + added, k);                 if(ans >= MOD) ans -= MOD;                 ans += MOD - C(balance, k);                 if(ans >= MOD) ans -= MOD;                 balance += added;             }             else balance -= added;         }         sc.close();         System.out.println(ans);     }     public static void main(String[] args) {         (new d()).solve();     } } ","import java.lang.*; import java.util.*; import java.io.*; public class Main {     static FastScanner in = new FastScanner();     static final int MOD = 998244353;     static int n, k;     static int[] fact, invFact;     static int mul(int a, int b) {         return (int)((long)a * (long)b % MOD);     }     static int pow(int a, int p) {         int ans = 1;         while (p != 0) {             if ((p & 1) != 0)                 ans = mul(ans, a);             a = mul(a, a);             p >>= 1;         }         return ans;     }     static int inv(int a) {         return pow(a, MOD - 2);     }     static void precalc() {         fact = new int[n + 42]; invFact = new int[n + 42];         fact[0] = invFact[0] = 1;         for (int i = 1; i < fact.length; ++i) {             fact[i] = mul(fact[i - 1], i);             invFact[i] = mul(invFact[i - 1], inv(i));         }     }     static int nCk(int a, int b) {         if (b < 0 || a < b)             return 0;         return mul(fact[a], mul(invFact[a - b], invFact[b]));     }     static void solve() {         n = in.nextInt(); k = in.nextInt();         precalc();         int[] events = new int[2 * n];         for (int i = 0; i < n; ++i) {             int l = in.nextInt(), r = in.nextInt();             events[i] = 2 * l;             events[i + n] = 2 * r + 1;         }         Arrays.sort(events);         int ans = 0, balance = 0;         for (int r = 0; r < 2 * n;) {             int l = r;             while (r < 2 * n && events[l] == events[r])                 ++r;             int added = r - l;             if (events[l] % 2 == 0) {                 ans += nCk(balance + added, k);                 if (ans >= MOD) ans -= MOD;                 ans += MOD - nCk(balance, k);                 if (ans >= MOD) ans -= MOD;                 balance += added;             } else                 balance -= added;         }         System.out.println(ans);     }     public static void main(String[] args) {         int T = 1;         while (T-- > 0)             solve();     }      } ",1
1099,"import java.util.*; public class j {   public static void main(String args[])   {     Scanner in=new Scanner(System.in);     int n=in.nextInt();     while(n-->0)     {       int len=in.nextInt();       int t=in.nextInt();       int pos[]=new int[t];       int temp[]=new int[t];       for(int i=0;i<t;i++)       pos[i]=in.nextInt();       for(int i=0;i<t;i++)       temp[i]=in.nextInt();       long range[]=new long[len];       Arrays.fill(range,Long.MAX_VALUE-10000);       for(int i=0;i<t;i++)       range[pos[i]-1]=temp[i];       for(int i=1;i<len;i++)       {         range[i]=Math.min(range[i],1+range[i-1]);       }       for(int i=len-2;i>=0;i--)       {       range[i]=Math.min(range[i+1]+1,range[i]);       }       for(int i=0;i<len;i++)       {         System.out.print(range[i]+"" "");       }System.out.println();     }   } } ","import java.io.*; import java.math.*; import java.util.*; public class test {                                public static void main(String args[]) throws Exception {         Scanner sc = new Scanner();    StringBuilder res = new StringBuilder();      int tc = sc.nextInt();       while(tc-->0) {     int n=sc.nextInt(); int k=sc.nextInt(); int[] ac=new int[k]; long[] ans=new long[n]; Arrays.fill(ans, Integer.MAX_VALUE/2); for(int i=0;i<k;i++) { ac[i]=sc.nextInt()-1; } for(int i=0;i<k;i++) { long x = sc.nextLong(); ans[ac[i]] = x; } for(int i=1;i<n;i++) { ans[i]=Math.min(ans[i], ans[i-1]+1); } for(int i=n-2;i>=0;i--) { ans[i]=Math.min(ans[i], ans[i+1]+1); }                for(int i=0;i<n;i++) {                res.append(ans[i]+"" "");                }                                res.append(""\n"");    } System.out.println(res);        } } ",1
1100,"import java.util.*; public class j {   public static void main(String args[])   {     Scanner in=new Scanner(System.in);     int n=in.nextInt();     while(n-->0)     {       int len=in.nextInt();       int t=in.nextInt();       int pos[]=new int[t];       int temp[]=new int[t];       for(int i=0;i<t;i++)       pos[i]=in.nextInt();       for(int i=0;i<t;i++)       temp[i]=in.nextInt();       long range[]=new long[len];       Arrays.fill(range,Long.MAX_VALUE-10000);       for(int i=0;i<t;i++)       range[pos[i]-1]=temp[i];       for(int i=1;i<len;i++)       {         range[i]=Math.min(range[i],1+range[i-1]);       }       for(int i=len-2;i>=0;i--)       {       range[i]=Math.min(range[i+1]+1,range[i]);       }       for(int i=0;i<len;i++)       {         System.out.print(range[i]+"" "");       }System.out.println();     }   } } ","import java.util.*; import java.lang.*; import java.io.*; public class cf {     static PrintWriter out;     static FastReader scan;               public static int ni() {         return scan.nextInt();     }                                             static void lPA(long arr[]) {         StringBuilder output = new StringBuilder();         for (int i = 0; i < arr.length; i++) output.append(arr[i] + "" "");         out.println(output);     }                    static void iIA(int arr[]) {         for (int i = 0; i < arr.length; i++) arr[i] = ni();     }                                                                      static final Random random = new Random();                              public static void main(String[] args) throws java.lang.Exception {         OutputStream outputStream = System.out;         out = new PrintWriter(outputStream);         scan = new FastReader();                  StringBuilder sb = new StringBuilder();         int t = ni();         while (t-- != 0) {             int n=ni();             int k=ni();             int[] a=new int[k];             int[] temp=new int[k];             iIA(a);             iIA(temp);             long dp[]=new long[n];             Arrays.fill(dp,Integer.MAX_VALUE);             for(int i=0;i<k;i++){                 dp[a[i]-1]=temp[i];             }                          for(int i=1;i<n;i++){                 dp[i]=Math.min(dp[i-1]+1,dp[i]);             }                          for(int i=n-2;i>=0;i--){                 dp[i]=Math.min(dp[i+1]+1,dp[i]);             }             lPA(dp);                      }         out.flush();         out.close();     } } ",1
1101,"import java.util.*; public class main {     public static final Scanner sc = new Scanner(System.in);     public static void solve(){         int n=sc.nextInt();         int[][] a=new int[5][n];         for(int i=0;i<n;i++){             String x=sc.next();             for(int j=0;j<x.length();j++){                 if(x.charAt(j)=='a') a[0][i]++;                 else a[0][i]--;                 if(x.charAt(j)=='b') a[1][i]++;                 else a[1][i]--;                 if(x.charAt(j)=='c') a[2][i]++;                 else a[2][i]--;                 if(x.charAt(j)=='d') a[3][i]++;                 else a[3][i]--;                 if(x.charAt(j)=='e') a[4][i]++;                 else a[4][i]--;             }         }         for(int j=0;j<5;j++) Arrays.sort(a[j]);         int ans=0;         for(int j=0;j<5;j++){             int tmp=0,cnt=0;             for(int i=n-1;i>=0;i--){                 tmp+=a[j][i];                 if(tmp<=0) break;                 else cnt++;             }             ans=Math.max(ans,cnt);         }         System.out.println(ans);     }     public static void main(String[] args) {         int T=1;         T=sc.nextInt();         while(--T>=0) solve();     } } ","import java.io.*; import java.util.*; public class C { static class Code { private void solve(InputReader in, OutputWriter out) throws IOException { ArrayOpn o= new ArrayOpn(); int t = in.readInt(); while(t -- > 0) { int n=in.readInt(); int[][] freq= new int[5][n]; for(int i=0; i<n; i++) { char s[]= in.readString().toCharArray(); for(char e: s) { if(e=='a') { freq[0][i]++; } else { freq[0][i]--; } if(e=='b') { freq[1][i]++; } else { freq[1][i]--; } if(e=='c') { freq[2][i]++; } else { freq[2][i]--; } if(e=='d') { freq[3][i]++; } else { freq[3][i]--; } if(e=='e') { freq[4][i]++; } else { freq[4][i]--; } } } for(int i=0; i<5; i++) { Arrays.sort(freq[i]); } int ans=0; for(int i=0; i<5; i++) { int temp=0, count=0; for(int j=n-1; j>=0; j--) { temp+=freq[i][j]; if(temp<=0) { break; } count++; } ans=Math.max(ans, count); } out.printLine(ans); } out.close(); } } static class ArrayOpn{ static final Random random = new Random(); private void sort(int A[]) { int n = A.length; for(int i=0; i<n; i++) { int j = random.nextInt(n),temp = A[j]; A[j] = A[i]; A[i] = temp; } Arrays.sort(A); } } public static void main(String[] args) throws IOException { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); OutputWriter out = new OutputWriter(outputStream); Code solver = new Code(); solver.solve(in, out); out.flush(); out.close(); } } ",1
1102,"import java.util.*; public class ss {     public static void main(String[]args)     {         Scanner in=new Scanner (System.in);         int t=in.nextInt();         for(int i1=0;i1<t;i1++)         {             int n=in.nextInt(); long[] ar=new long[n]; for(int i=0;i<n;i++) { ar[i]=in.nextLong(); } long[] ans=new long[n]; ans[0]=ar[0]*n; long m=ar[0]; long s1=ar[0]; for(int i=2;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2); } ans[1]=ar[1]*n;  m=ar[1];  s1=ar[1]; for(int i=3;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2); } long mini=ans[0]+ans[1]; for(int i=1;i<n-1;i++) { mini=Math.min(ans[i]+ans[i+1],mini); } System.out.println(mini); } } } ","import java.util.*; public class ss {     public static void main(String[]args)     {         Scanner in=new Scanner (System.in);         int t=in.nextInt();         for(int i1=0;i1<t;i1++)         {             int n=in.nextInt(); long[] ar=new long[n]; for(int i=0;i<n;i++) { ar[i]=in.nextLong(); } long[] ans=new long[n]; ans[0]=ar[0]*n; long m=ar[0]; long s1=ar[0]; for(int i=2;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2);       } ans[1]=ar[1]*n;  m=ar[1];  s1=ar[1]; for(int i=3;i<n;i+=2) { if(m>ar[i]) { m=ar[i]; } s1+=ar[i]; ans[i]=s1-m+m*(n-i/2); } long mini=ans[0]+ans[1]; for(int i=1;i<n-1;i++) { mini=Math.min(ans[i]+ans[i+1],mini); } System.out.println(mini); } } } ",1
1103,"import java.util.ArrayList; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Collections; import java.util.StringTokenizer; import java.util.Arrays; import java.util.Comparator; import java.util.PriorityQueue; import java.util.List; import java.util.HashMap; import java.util.LinkedList; import java.util.HashSet; import java.util.Stack; import java.util.Queue; import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.sqrt; import static java.lang.Math.abs; import static java.lang.Math.random; import static java.lang.Integer.MAX_VALUE; import static java.lang.Integer.MIN_VALUE; import static java.util.Collections.reverseOrder; public final class Test1 { static int mod = 1000000007; static int mod1 = 998244353; public static void main(String[] args) { solve(); }    public static void solve() { FastScanner sc = new FastScanner(); int t = sc.nextInt(); while (t-- != 0) { int n = sc.nextInt(); String[] arr = new String[n]; for (int i = 0; i < n; i++) arr[i] = sc.next(); int cnt[] = new int[5]; for (int i = 0; i < n; i++) { for (char ch : arr[i].toCharArray()) { cnt[ch - 'a']++; } } int res = 0; for (int i = 0; i < 5; i++) { res = Math.max(res, fun(arr, cnt, (char)( 'a' + i))); } System.out.println(res); } } static int fun(String[] arr, int[] cnt, char c) { int n = arr.length; int total = cnt[0] + cnt[1] + cnt[2] + cnt[3] + cnt[4] - cnt[c - 'a']; int letter_total = cnt[c - 'a']; PriorityQueue<Pair>pq = new PriorityQueue<>(); for (int i = 0; i < n; i++) { int letter = 0; int ext = 0; for (char ch : arr[i].toCharArray()) { if (ch == c) letter++; else ext++; } pq.offer(new Pair(letter, ext)); } while (pq.size() > 0) { if (total < letter_total) return pq.size(); Pair temp = pq.poll(); total -= temp.ext; letter_total -= temp.letter; } return 0; } static class Pair implements Comparable<Pair> { int letter, ext; Pair(int letter, int ext) { this.letter = letter; this.ext = ext; } } } ","import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.Collections; import java.util.PriorityQueue; import java.util.Scanner; import java.util.StringJoiner; import java.util.StringTokenizer; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.ArrayList; import java.util.List; import java.util.HashMap; import java.util.Map; import java.util.Set; import java.util.HashSet; import static java.lang.System.out; import static java.util.stream.Collectors.joining; public class C {   static FastScanner sc = new FastScanner(System.in);   public static void main(String[] args) {     try (PrintWriter out = new PrintWriter(System.out)) {       int T = sc.nextInt();       for (int tt = 1; tt <= T; tt++) {         int n = sc.nextInt();         String[] strings = new String[n];         PriorityQueue<Pair>[] frequencies = new PriorityQueue[5];         for (int i = 0; i < 5; i++)           frequencies[i] = new PriorityQueue<>();         for (int i = 0; i < n; i++) {           strings[i] = sc.next();           int[] freq = new int[5];           for (char c : strings[i].toCharArray())             freq[c - 'a']++;           for (int j = 0; j < 5; j++) {                          frequencies[j].add(new Pair(freq[j], strings[i].length()));           }         }                int ans = 0;         for (PriorityQueue<Pair> pq : frequencies) {           long curlen = 0;           long curfreq = 0;           int cnt = 0;           while (!pq.isEmpty()) {             Pair pair = pq.remove();             curfreq += pair.freq;             curlen += pair.len;             if (curfreq >= curlen / 2 + 1) {               cnt++;             } else {               break;             }           }           ans = Math.max(ans, cnt);         }         System.out.println(ans);       }     }   }   static class Pair implements Comparable<Pair> {     int freq, len;     public Pair(int freq, int len) {       this.freq = freq;       this.len = len;     }             }       } ",0
1104,"import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ","import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collections; import java.util.StringTokenizer; public class D {          public static void main(String[] args)     {         FastScanner sc=new FastScanner();         int t=sc.nextInt();         PrintWriter pw=new PrintWriter(System.out);         while(t-->0) {             int n=sc.nextInt();             int[] a=sc.readArray(n);             char[] s=sc.next().toCharArray();             boolean ok=true;             ArrayList<Integer> blues=new ArrayList<>();             ArrayList<Integer> reds=new ArrayList<>();             for(int i=0;i<n;i++){                 if(s[i]=='B'){                     blues.add(a[i]);                 } else {                     reds.add(a[i]);                 }             }             Collections.sort(blues);             Collections.sort(reds);             for(int i=0;i<blues.size();i++){                 if(blues.get(i)<(i+1)){                     ok=false;                     break;                 }             }             int start=blues.size()+1;             for(int i=0;i<reds.size();i++){                 if(reds.get(i)>(start++)){                     ok=false;                     break;                 }             }             if(ok){                pw.println(""YES"");             } else {                 pw.println(""NO"");             }         }         pw.flush();     }      } ",1
1105,"import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Scanner; public class Simple{       public static void main(String args[]){                    Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t>0){                          int n = s.nextInt();             int arr[] = new int[n];             for(int i=0;i<n;i++){                 arr[i] = s.nextInt();             }             String str = s.next();                          ArrayList<Integer> blue = new ArrayList<>();             ArrayList<Integer> red = new ArrayList<>();             for(int i=0;i<n;i++){                 if(str.charAt(i)=='R'){                     red.add(arr[i]);                 }                 else{                     blue.add(arr[i]);                 }             }             Collections.sort(red);             Collections.sort(blue);                          int start =1;             boolean bool =true;             for(int i=0;i<blue.size();i++){                 if(blue.get(i)<start){                     bool = false;                     break;                 }                 start++;             }             if(!bool){                 System.out.println(""NO"");             }             else{                 for(int i=0;i<red.size();i++){                     if(red.get(i)>start){                         bool = false;                         break;                     }                     start++;                 }                 if(bool){                     System.out.println(""YES"");                 }                 else{                     System.out.println(""NO"");                 }             }                                       t--;         }         s.close();       }      } ","import java.util.*; public class mentor1 {     public static boolean solve(int n, String color, int[] arr){         List<Integer> Barr = new ArrayList<Integer>();         List<Integer> Rarr = new ArrayList<Integer>();         for (int i = 0; i < n; i++) {             if(color.charAt(i) == 'B')Barr.add(arr[i]);             else Rarr.add(arr[i]);         }         Barr.sort(Comparator.naturalOrder());         Rarr.sort(Comparator.reverseOrder());         for (int i = 0; i < Barr.size(); i++) {             if(Barr.get(i)< i + 1)return false;         }         for (int i = 0; i < Rarr.size(); i++) {             int expect = n-i;             if(Rarr.get(i) > expect)return false;         }         return true;     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         int n = input.nextInt();         for (int i = 0; i < n; i++) {             int m = input.nextInt();             int[] arr = new int[m];             for(int j = 0;j<m; j++)arr[j] = input.nextInt();             String color = input.next();             if(solve(m,color,arr)) System.out.println(""YES"");             else System.out.println(""NO"");         }     } } ",0
1106,"import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedList; import java.util.PriorityQueue; import java.util.Queue; import java.util.Scanner; import java.io.*; public class ieee1{          public static void main(String[] args) {            Scanner scn=new Scanner(System.in);            int t=scn.nextInt();            while(t-->0){                HashMap<Integer,Integer> map=new HashMap<>();                               int b=scn.nextInt();                int m=scn.nextInt();                int x=scn.nextInt();                int[] arr=new int[b];                PriorityQueue<Node> pq=new PriorityQueue<>(new pqc());                for(int i=0;i<b;i++){                    int ele=scn.nextInt();                                                           arr[i]=ele;                }                for(int i=1;i<=m;i++){                    pq.add(new Node(i,0));                }                System.out.println(""YES"");                for(int i=0;i<arr.length;i++){                    int ele=arr[i];                    Node n=pq.poll();                    System.out.print(n.ind+"" "");                    n.data+=ele;                    pq.add(n);                }                System.out.println();                                   } }     public static class Node{         int ind;         int data;         Node(int ind,int data){             this.ind=ind;             this.data=data;         }     }     public static class pqc implements Comparator<Node>{                       } } ","import java.util.*; import java.io.*; public class Main{     public static class Element implements Comparable<Element>{         public int key;         public int value;         Element(int k, int v)         {             key=k;             value=v;         }              }     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         while(t-->0)         {             int n=sc.nextInt();             int m=sc.nextInt();             int x=sc.nextInt();             int[] arr=new int[n];             for(int i=0;i<n;++i)                 arr[i]=sc.nextInt();             PriorityQueue<Element> pq=new PriorityQueue<>();             for(int i=1;i<=m;++i)             {                 pq.add(new Element(i,0));             }             System.out.println(""YES"");             for(int j=0;j<n;j++)             {                 Element cur = pq.poll();                 System.out.print(cur.key+"" "");                 cur.value+= arr[j];                 pq.add(cur);             }             System.out.println();         }     } } ",1
1107,"import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.PriorityQueue; import java.util.Scanner; public class Armchairs { static List<Integer> zpos ; static List<Integer> opos ; static long[][] dp ; public static void main(String[] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); zpos = new ArrayList<Integer>(); opos = new ArrayList<Integer>(); for (int i = 0; i < n; i++) { int x = sc.nextInt(); if (x == 1) opos.add(i); else zpos.add(i); } dp = new long[5001][5001]; for (int i = 0; i < 5001; i++) Arrays.fill(dp[i], -1); System.out.println(dp(0, 0, opos.size(), zpos.size(), opos.size())); } private static long dp(int i, int j, int m, int n, int cnt) { if (cnt == 0) return 0; if (i >= m || j >= n) return Integer.MAX_VALUE; if (dp[i][j] != -1) return dp[i][j]; long dns = dp(i, j + 1, m, n, cnt); long s = Math.abs(zpos.get(j) - opos.get(i)) + dp(i + 1, j + 1, m, n, cnt - 1); return dp[i][j] = Math.min(dns, s); } } ","import java.io.*; import java.util.*; public class Codeforces {          static FastReader f = new FastReader();     static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     static StringTokenizer st;     static StringBuilder sb = new StringBuilder("""");     private static int m = (int) 1e9 + 7;     static int[] inputArray(int n) throws IOException {         int[] a = new int[n];         for (int i = 0; i < n; i++) {             a[i] = f.nextInt();         }         return a;     }                    public static void main(String[] args) throws IOException {         int t = 1;         while(t-- != 0) {             int N = f.nextInt();             int a[] = inputArray(N);             ArrayList<Integer> space = new ArrayList<>();             ArrayList<Integer> fill = new ArrayList<>();             for(int i = 0 ; i < N;  i++) {                 if(a[i] == 0) {                     space.add(i);                 }                 else {                     fill.add(i);                 }             }             int n = fill.size(), m = space.size();             int[][] dp = new int[n+1][m+1];                                       Arrays.fill(dp[0], 0);             for(int i = 1 ; i <= n ; i++) {                 dp[i][0] = -1;             }             for(int i = 1 ; i <= n ; i++) {                 for(int j = 1 ; j <= m ; j++) {                     if(i > j) {                         dp[i][j] = -1;                         continue;                     }                     dp[i][j] = Integer.MAX_VALUE;                     if(dp[i-1][j-1] != -1) {                         dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1]) + Math.abs(fill.get(i-1) - space.get(j-1));                     }                     if(dp[i][j-1] != -1) {                         dp[i][j] = Math.min(dp[i][j], dp[i][j-1]);                     }                 }             }             System.out.println(dp[n][m]);         }         System.out.println(sb);     } } ",0
1108,"import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; import java.io.DataInputStream; import java.io.FileInputStream; import java.io.IOException; public class ParsasHumongousTree {     public static void main(String args[]) throws IOException {         Reader scan = new Reader();         StringBuilder sb = new StringBuilder();         int t = scan.nextInt();         while (t-- > 0) {             int n = scan.nextInt();             int[] l = new int[n + 1];             int[] r = new int[n + 1];             for (int i = 1; i <= n; i++) {                 l[i] = scan.nextInt();                 r[i] = scan.nextInt();             }             Graph g = new Graph(n);             for (int i = 0; i < n - 1; i++) {                 g.addEdge(scan.nextInt(), scan.nextInt());             }             sb.append(g.dfs(l, r) + ""\n"");         }         System.out.println(sb);     } } class Graph {     ArrayList<Integer>[] node;     int n;     int c = 0;     boolean[] vis;     Graph(int s) {         n = s + 1;         vis = new boolean[n + 1];         node = new ArrayList[n + 1];         for (int i = 0; i < n + 1; i++) {             node[i] = new ArrayList<>();         }     }     void addEdge(int u, int v) {         node[u].add(v);         node[v].add(u);         if (node[u].size() == 1) {             c = u;         }         if (node[v].size() == 1) {             c = v;         }     }     void cleanVisArray() {         for (int i = 0; i < n + 1; i++) {             vis[i] = false;         }     }     long dfs(int[] l, int[] r) {         cleanVisArray();         long[][] dp = new long[n][2];         dfsMain(1, dp, l, r);         return Math.max(dp[1][0], dp[1][1]);     }     void dfsMain(int v, long[][] dp, int[] l, int[] r) {         vis[v] = true;         for (int i : node[v]) {             if (!vis[i]) {                 dfsMain(i, dp, l, r);                 dp[v][0] += Math.max(Math.abs(l[v] - l[i]) + dp[i][0], Math.abs(l[v] - r[i]) + dp[i][1]);                 dp[v][1] += Math.max(Math.abs(r[v] - l[i]) + dp[i][0], Math.abs(r[v] - r[i]) + dp[i][1]);             }         }     } } ","import java.io.*; import java.util.*;          public class C {     static FastReader sc=null;     public static void main(String[] args) { sc=new FastReader(); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); Node nodes[]=new Node[n]; for(int i=0;i<n;i++)nodes[i]=new Node(i,sc.nextInt(),sc.nextInt()); for(int i=0;i+1<n;i++) { int v=sc.nextInt()-1,w=sc.nextInt()-1; nodes[v].adj.add(nodes[w]); nodes[w].adj.add(nodes[v]); } dfs(nodes[0],null); System.out.println(Math.max(nodes[0].right,nodes[0].left)); } } static void dfs(Node v,Node par) { for(Node nn:v.adj) { if(nn!=par) { dfs(nn,v); v.right+=Math.max(nn.right+Math.abs(v.r-nn.r),  nn.left+Math.abs(v.r-nn.l)); v.left+=Math.max(nn.right+Math.abs(v.l-nn.r),  nn.left+Math.abs(v.l-nn.l)); } } } static class Node{ int id; long right=0,left=0; int l,r; ArrayList<Node> adj=new ArrayList<>(); Node(int id,int l,int r){ this.id=id; this.l=l; this.r=r; } }                                                                                                                      } ",0
1109,"import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; public class E1525D {     public static void main(String[] args) {         Scanner scn = new Scanner(System.in);         int n = scn.nextInt();         int[] arr = new int[n];         ArrayList<Integer> occupied = new ArrayList<>();         for (int i = 0; i < n; i++) {             arr[i] = scn.nextInt();             if (arr[i] == 1) occupied.add(i);         }         int[][] dp = new int[n + 1][occupied.size() + 1];         for (int[] row : dp) Arrays.fill(row, (int) 1e9);         dp[0][0] = 0;         for (int i = 1; i <= n; i++) {             dp[i][0] = 0;             for (int j = 1; j <= occupied.size(); j++) {                 dp[i][j] = dp[i - 1][j];                 if (arr[i - 1] == 0)                     dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1] + Math.abs(i - 1 - occupied.get(j - 1)));             }         }         System.out.println(dp[n][occupied.size()]);     } } ","import java.util.*; public class D {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int n = scanner.nextInt();         ArrayList<Integer> occupied = new ArrayList<>();         ArrayList<Integer> vacant = new ArrayList<>();         for (int i = 0; i < n; i++) {             int x = scanner.nextInt();             if (x == 1)                 occupied.add(i);             else                 vacant.add(i);         }         Solution Solution = new Solution(occupied, vacant);         System.out.println(Solution.memoization());     } } class Solution {     ArrayList<Integer> occupied, vacant;     int x, y;     public Solution(ArrayList<Integer> occupied, ArrayList<Integer> vacant) {         this.occupied = occupied;         this.vacant = vacant;         x = occupied.size(); y = vacant.size();     }               int memoization() {         int[][] dp = new int[x][y];         for (int i = 0; i < x; i++) {             Arrays.fill(dp[i], -1);         }         return memoization(dp, x-1, y-1);     }     int memoization(int[][] dp, int n, int m) {         if(n < 0) {             return 0;         }         if(m < n) {             return Integer.MAX_VALUE;         }         if(dp[n][m] != -1) {             return dp[n][m];         }         int first = memoization(dp, n, m-1);         int second = memoization(dp, n-1, m-1) + Math.abs(occupied.get(n) - vacant.get(m));         dp[n][m] = Math.min(first, second);         return dp[n][m];     } } ",0
1110,"import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; public class E1525D {     public static void main(String[] args) {         Scanner scn = new Scanner(System.in);         int n = scn.nextInt();         int[] arr = new int[n];         ArrayList<Integer> occupied = new ArrayList<>();         for (int i = 0; i < n; i++) {             arr[i] = scn.nextInt();             if (arr[i] == 1) occupied.add(i);         }         int[][] dp = new int[n + 1][occupied.size() + 1];         for (int[] row : dp) Arrays.fill(row, (int) 1e9);         dp[0][0] = 0;         for (int i = 1; i <= n; i++) {             dp[i][0] = 0;             for (int j = 1; j <= occupied.size(); j++) {                 dp[i][j] = dp[i - 1][j];                 if (arr[i - 1] == 0)                     dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1] + Math.abs(i - 1 - occupied.get(j - 1)));             }         }         System.out.println(dp[n][occupied.size()]);     } } ","import java.util.ArrayList; import java.util.Arrays; import java.util.Scanner; public class Armchair {     public static void main(String args[]){         Scanner in=new Scanner(System.in);         int n=in.nextInt();         int arr[]=new int[n];         ArrayList<Integer> list1=new ArrayList<Integer>();          ArrayList<Integer> list2=new ArrayList<Integer>();         for(int i=0;i<n;i++)         {             int a=in.nextInt();             if(a==0)                 list2.add(i);             else                 list1.add(i);         }         long dp[][]=new long[list1.size()+1][list2.size()+1];                  solve(list1,list2,dp);         System.out.println(dp[list1.size()][list2.size()]);     } public static void solve( ArrayList<Integer> list1,ArrayList<Integer> list2,long dp[][]){        for(int i=1;i<=list1.size();i++) dp[i][0]=Integer.MAX_VALUE; for(int i=1;i<=list1.size();i++){ for(int j=1;j<=list2.size();j++){ dp[i][j]=Math.min(Math.abs(list1.get(i-1)-list2.get(j-1))+dp[i-1][j-1],dp[i][j-1]); } } } } ",0
1111,"import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.PriorityQueue; import java.util.StringTokenizer; import java.io.*;   public class PhoenixTow { public static class  Pair implements Comparable<Pair> { int x;  int y; Pair(int x, int y) { this.x = x; this.y = y; } } public static void solution(int[] arr, int n, int m, int x) { ArrayList<Pair> list = new ArrayList<>(); for(int i = 0; i<n; i++) { list.add(new Pair(arr[i], i)); } Collections.sort(list); long[] sum = new long[m]; int[] ans = new int[n]; int k = 1; for(int i = 0; i<list.size(); i++) { if(k<m)     {  if(sum[k-1]+list.get(i).x - sum[k]>x)       {out.println(""NO""); return; }            }        sum[k-1]+=list.get(i).x;     ans[list.get(i).y] = k;     k++;          if(k==(m+1))     k=1;      } out.println(""YES"");  for(int i = 0; i<n; i++) out.print(ans[i]+"" ""); out.println(); }          private static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { MyScanner s =  new MyScanner();           int t = s.nextInt();          for(int j = 0; j<t ; j++)     {     int n = s.nextInt();     int m = s.nextInt();     int x = s.nextInt();          int[] arr = new int[n];     for(int i =0; i<n; i++)     arr[i] = s.nextInt();          solution(arr,n,m,x);     }          out.flush();     out.close();      } } ","import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.PrintWriter; import java.text.DecimalFormat; import java.util.Collections; import java.util.Comparator; import java.util.Arrays; import java.util.ArrayList; import java.util.LinkedList; import java.util.Stack; import java.util.Queue; import java.util.PriorityQueue; import java.util.List; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Map; import java.util.HashMap; import java.util.Scanner; import java.util.Set; import java.util.StringTokenizer; import java.util.Vector; public class Dobby { public static void main(String[] args) { try { FastReader fr = new FastReader(); PrintWriter pt = new PrintWriter(System.out); int t = fr.nextInt(); while (t > 0) { int n = fr.nextInt(), m = fr.nextInt(), x = fr.nextInt(); ArrayList<Pair> pp = new ArrayList<>(); int A[] = new int[n]; for (int i = 0; i < n; i++) { A[i] = fr.nextInt(); Pair pr = new Pair(A[i], i); pp.add(pr); } Collections.sort(pp); Collections.reverse(pp); int ps[] = new int[n]; int pk[] = new int[n]; Arrays.fill(ps, 0); Arrays.fill(pk, 0); int index = 0; for (int i = 0; i < n; i++) { if (pk[index] < x) { pk[index] += pp.get(i).a; } ps[pp.get(i).b] = index + 1; index++; index = index == m ? 0 : index; } pt.println(""YES""); for (int i = 0; i < n; i++) { pt.print(ps[i] + "" ""); } pt.println(); t--; } pt.close(); } catch ( Exception e) { return; } } static void merge(long arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; long L[] = new long[n1]; long R[] = new long[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } static void sort(long arr[], int l, int r) { if (l < r) { int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } static class Pair implements Comparable<Pair> { int a, b; Pair(int a, int b) { this.a = a; this.b = b; } } } ",0
1112,"import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.PriorityQueue; import java.util.StringTokenizer; import java.io.*;   public class PhoenixTow { public static class  Pair implements Comparable<Pair> { int x;  int y; Pair(int x, int y) { this.x = x; this.y = y; } } public static void solution(int[] arr, int n, int m, int x) { ArrayList<Pair> list = new ArrayList<>(); for(int i = 0; i<n; i++) { list.add(new Pair(arr[i], i)); } Collections.sort(list); long[] sum = new long[m]; int[] ans = new int[n]; int k = 1; for(int i = 0; i<list.size(); i++) { if(k<m)     {  if(sum[k-1]+list.get(i).x - sum[k]>x)       {out.println(""NO""); return; }            }        sum[k-1]+=list.get(i).x;     ans[list.get(i).y] = k;     k++;          if(k==(m+1))     k=1;      } out.println(""YES"");  for(int i = 0; i<n; i++) out.print(ans[i]+"" ""); out.println(); }          private static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { MyScanner s =  new MyScanner();           int t = s.nextInt();          for(int j = 0; j<t ; j++)     {     int n = s.nextInt();     int m = s.nextInt();     int x = s.nextInt();          int[] arr = new int[n];     for(int i =0; i<n; i++)     arr[i] = s.nextInt();          solution(arr,n,m,x);     }          out.flush();     out.close();      } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.util.Objects; import java.util.Collections; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CPhoenixAndTowers solver = new CPhoenixAndTowers();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CPhoenixAndTowers {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();             ArrayList<Pair<Integer, Integer>> a = new ArrayList<>();             for (int i = 0; i < n; ++i) {                 a.add(new Pair<>(in.nextInt(), i));             }             Collections.sort(a);             int[] ans = new int[n];             int[] sum = new int[m];             int j = 1;             for (int i = 0; i < n; ++i) {                 ans[a.get(i).y] = j;                 sum[j - 1] += a.get(i).x;                 j++;                 if (j == m + 1) j = 1;             }             for (int i = 1; i < m; ++i) {                 if (Math.abs(sum[i - 1] - sum[i]) > k) {                     out.println(""NO"");                 }             }             out.println(""YES"");             for (int e : ans) {                 out.print(e + "" "");             }             out.println();         }     }          static class Pair<U, V> implements Comparable<Pair<U, V>> {         public U x;         public V y;         public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                } } ",0
1113,"import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.PriorityQueue; import java.util.StringTokenizer; import java.io.*;   public class PhoenixTow { public static class  Pair implements Comparable<Pair> { int x;  int y; Pair(int x, int y) { this.x = x; this.y = y; } } public static void solution(int[] arr, int n, int m, int x) { ArrayList<Pair> list = new ArrayList<>(); for(int i = 0; i<n; i++) { list.add(new Pair(arr[i], i)); } Collections.sort(list); long[] sum = new long[m]; int[] ans = new int[n]; int k = 1; for(int i = 0; i<list.size(); i++) { if(k<m)     {  if(sum[k-1]+list.get(i).x - sum[k]>x)       {out.println(""NO""); return; }            }        sum[k-1]+=list.get(i).x;     ans[list.get(i).y] = k;     k++;          if(k==(m+1))     k=1;      } out.println(""YES"");  for(int i = 0; i<n; i++) out.print(ans[i]+"" ""); out.println(); }          private static PrintWriter out = new PrintWriter(System.out); public static void main (String[] args) { MyScanner s =  new MyScanner();           int t = s.nextInt();          for(int j = 0; j<t ; j++)     {     int n = s.nextInt();     int m = s.nextInt();     int x = s.nextInt();          int[] arr = new int[n];     for(int i =0; i<n; i++)     arr[i] = s.nextInt();          solution(arr,n,m,x);     }          out.flush();     out.close();      } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.InputMismatchException; import java.io.IOException; import java.util.ArrayList; import java.util.Objects; import java.util.Collections; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         FastReader in = new FastReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         CPhoenixAndTowers solver = new CPhoenixAndTowers();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class CPhoenixAndTowers {         public void solve(int testNumber, FastReader in, PrintWriter out) {             int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();             ArrayList<Pair<Integer, Integer>> a = new ArrayList<>();             for (int i = 0; i < n; ++i) {                 a.add(new Pair<>(in.nextInt(), i));             }             Collections.sort(a);             int[] ans = new int[n];             int[] sum = new int[m];             int j = 1;             for (int i = 0; i < n; ++i) {                 ans[a.get(i).y] = j;                 sum[j - 1] += a.get(i).x;                 j++;                 if (j == m + 1) j = 1;             }             for (int i = 1; i < m; ++i) {                 if (Math.abs(sum[i - 1] - sum[i]) > k) {                     out.println(""NO"");                 }             }             out.println(""YES"");             for (int e : ans) {                 out.print(e + "" "");             }             out.println();         }     }     static class Pair<U, V> implements Comparable<Pair<U, V>> {         public U x;         public V y;         public Pair(U x, V y) {             this.x = x;             this.y = y;         }                                }      } ",0
1114,"import java.util.ArrayList; import java.util.HashMap; import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Arrays; import java.util.Random; import java.io.FileWriter; import java.io.PrintWriter; public class Main { static ArrayList<Integer> adj[]; static HashMap<Integer, HashMap<Integer, Integer>> mp; public static void insert(int i, int j, int v) { int a = Math.min(i, j), b = Math.max(i, j); if(!mp.containsKey(a)) mp.put(a, new HashMap<>()); mp.get(a).put(b, v); } public static int get(int i, int j) { int a = Math.min(i, j), b = Math.max(i, j); return mp.get(a).get(b); } public static void dfs(int i, int p, boolean two) { for(int to : adj[i]) { if(to == p) continue; insert(i, to, two?2:3); dfs(to,i,!two); two = !two; } } public static void solve() { mp = new HashMap<>(); int n = in.nextInt(); adj = new ArrayList[n]; for(int i = 0; i<n; i++) adj[i] = new ArrayList<>(); int[][] e = new int[n-1][2]; int[] deg = new int[n]; for(int i = 0; i<n-1; i++) { e[i] = in.na(2); deg[--e[i][0]]++; deg[--e[i][1]]++; adj[e[i][0]].add(e[i][1]); adj[e[i][1]].add(e[i][0]); } for(int i = 0; i<n; i++) { if(deg[i]>=3) { out.println(-1); return; } } dfs(0,-1,true); for(int i = 0; i<n-1; i++) { out.print(get(e[i][0], e[i][1])+"" ""); } out.println(); } public static void main(String[] args) { in = new Reader(); out = new Writer(); int t = in.nextInt(); while(t-->0) solve(); out.exit(); } static Reader in; static Writer out; } ","import java.util.*; import java.util.Scanner; public class Solution { static int mod=1000000007;; public static void main(String[] args) { Scanner sc=new Scanner(System.in); int tt=sc.nextInt(); while(tt-->0){ int n=sc.nextInt(); int degree[]=new int[n]; Arrays.fill(degree, 0); int u[]=new int[n-1]; int v[]=new int[n-1]; boolean brea=false; HashMap<Integer,LinkedList<Integer>>graph=new HashMap<>(); for(int i=0;i<n-1;i++) { u[i]=sc.nextInt(); v[i]=sc.nextInt(); u[i]--; v[i]--; if(graph.containsKey(u[i])) { LinkedList<Integer> ll=graph.get(u[i]); ll.add(i); graph.put(u[i],ll); } else { LinkedList<Integer> ll=new LinkedList<>(); ll.add(i); graph.put(u[i],ll); } if(graph.containsKey(v[i])) { LinkedList<Integer> ll=graph.get(v[i]); ll.add(i); graph.put(v[i],ll); } else { LinkedList<Integer> ll=new LinkedList<>(); ll.add(i); graph.put(v[i],ll); } degree[u[i]]++; if(degree[u[i]]>2)brea=true; degree[v[i]]++; if(degree[v[i]]>2)brea=true; } if(brea) { System.out.println(-1); continue; } int i; for( i=0;i<n;i++) { if(degree[i]==1)break; } int ans[]=new int[n-1]; int ind=graph.get(i).get(0); ans[ind]=2; if(u[ind]==i)i=v[ind]; else i=u[ind]; boolean flip=true; while(graph.get(i).size()>1) { if(graph.get(i).get(0)==ind) { ind=graph.get(i).get(1); } else { ind=graph.get(i).get(0); } if(flip) { ans[ind]=3; }else ans[ind]=2; flip=!flip; if(u[ind]==i)i=v[ind]; else i=u[ind]; }   for(int j:ans)  System.out.print(j+"" "");  System.out.println(); } } } ",0
1115,"import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         for (int i = 0; i < t; i++) {             notSitting(scanner);         }     }     private static void notSitting(Scanner scanner) {         int n = scanner.nextInt();         int[] num = new int[n - 1];         int[] ct = new int[n];         boolean[] visited = new boolean[n];         List<int[]>[] edges = new List[n];         for (int i = 0; i < n; i++) {             edges[i] = new ArrayList<>();         }         for (int i = 0; i < n - 1; i++) {             int u = scanner.nextInt() - 1;             int v = scanner.nextInt() - 1;             edges[u].add(new int[]{v, i});             edges[v].add(new int[]{u, i});             ct[u]++;             ct[v]++;         }         int start = -1;         for (int i = 0; i < n; i++) {             if (ct[i] >= 3) {                 System.out.println(-1);                 return;             } else if (ct[i] == 1) {                 start = i;             }         }         visited[start] = true;         boolean odd = false;         for (int i = 0; i < n - 1; i++) {             for (int[] e : edges[start]) {                 if (!visited[e[0]]) {                     visited[e[0]] = true;                     num[e[1]] = odd ? 3 : 2;                     odd = !odd;                     start = e[0];                     break;                 }             }         }         for (int i = 0; i < n - 1; i++) {             System.out.print(num[i]);             System.out.print("" "");         }         System.out.println();     } } ","import java.util.*;   public class Main { public static void main(String[] args) {     Scanner sc = new Scanner(System.in);  int tc = sc.nextInt(); while(tc>0) {     tc--;     int ans = 0;     int n = sc.nextInt();     int in[] = new int[n];     int wx[] = new int[n-1];     int wy[] = new int[n-1];     ArrayList<ArrayList<Integer>> arr = new ArrayList<ArrayList<Integer>>();     HashMap<String,Integer> h = new HashMap<String,Integer>();     HashSet<Integer> h2 = new HashSet<Integer>();     for(int i=0;i<n;i++)     {         arr.add(new ArrayList<Integer>());     }     for(int i=0;i<n-1;i++)     {         int x = sc.nextInt();         int y = sc.nextInt();         x--;         y--;         in[x]++;         in[y]++;         if(in[x]>2 || in[y]>2)         {             ans = -1;         }         else if(ans!=-1)         {             arr.get(x).add(y);             arr.get(y).add(x);             wx[i] = x;             wy[i] = y;         }              }     if(ans == -1)     {         System.out.println(""-1"");     }     else     {         int vis[] = new int[n];         ArrayDeque<Integer> q = new ArrayDeque<Integer>();         q.add(0);         vis[0] = 1;         while(q.size()>0)         {             int x = q.removeFirst();             for(int i=0;i<arr.get(x).size();i++)             {                 int y = arr.get(x).get(i);                 String temp  =String.valueOf(x);                 if(vis[y] == 0)                 {                     vis[y] = 1;                     if(h2.contains(y) || h2.contains(x))                     {                         String s1 = temp+""_""+String.valueOf(y);                         String s2 = String.valueOf(y)+""_""+temp;                         h.put(s1,11);                         h.put(s2,11);                                              }                     else                     {                         String s1 = temp+""_""+String.valueOf(y);                         String s2 = String.valueOf(y)+""_""+temp;                         h.put(s1,2);                         h.put(s2,2);                         h2.add(x);                         h2.add(y);                     }                     q.add(y);                 }             }         }         for(int i=0;i<wx.length;i++)         {             String s1 = String.valueOf(wx[i])+""_""+String.valueOf(wy[i]);             System.out.print(h.get(s1)+"" "");         }         System.out.println();     } } } } ",0
1116,"import java.util.Arrays; import java.util.Random; import java.util.Scanner; public class InterestingStory {     public static void main(String args[]) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         while (t-- > 0) {             int n = scan.nextInt();             String[] a = new String[n];             for (int i = 0; i < n; i++) {                 a[i] = scan.next();             }             int res = -1;             int[] st = new int[n];             for (int i = 0; i < n; i++) {                 String s = a[i];                 int c = 0;                 for (int j = 0; j < s.length(); j++) {                     if (s.charAt(j) == 'a') {                         ++c;                     }                 }                 st[i] = ((s.length() - c) - c);             }             sort(st);             long sum = 0;             int count = 0;             for (int i = 0; i < n; i++) {                 if (st[i] + sum >= 0) {                     break;                 }                 sum += st[i];                 ++count;             }             res = Math.max(res, count);             for (int i = 0; i < n; i++) {                 String s = a[i];                 int c = 0;                 for (int j = 0; j < s.length(); j++) {                     if (s.charAt(j) == 'b') {                         ++c;                     }                 }                 st[i] = ((s.length() - c) - c);             }             sort(st);             sum = 0;             count = 0;             for (int i = 0; i < n; i++) {                 if (st[i] + sum >= 0) {                     break;                 }                 sum += st[i];                 ++count;             }             res = Math.max(res, count);             for (int i = 0; i < n; i++) {                 String s = a[i];                 int c = 0;                 for (int j = 0; j < s.length(); j++) {                     if (s.charAt(j) == 'c') {                         ++c;                     }                 }                 st[i] = ((s.length() - c) - c);             }             sort(st);             sum = 0;             count = 0;             for (int i = 0; i < n; i++) {                 if (st[i] + sum >= 0) {                     break;                 }                 sum += st[i];                 ++count;             }             res = Math.max(res, count);             for (int i = 0; i < n; i++) {                 String s = a[i];                 int c = 0;                 for (int j = 0; j < s.length(); j++) {                     if (s.charAt(j) == 'd') {                         ++c;                     }                 }                 st[i] = ((s.length() - c) - c);             }             sort(st);             sum = 0;             count = 0;             for (int i = 0; i < n; i++) {                 if (st[i] + sum >= 0) {                     break;                 }                 sum += st[i];                 ++count;             }             res = Math.max(res, count);             for (int i = 0; i < n; i++) {                 String s = a[i];                 int c = 0;                 for (int j = 0; j < s.length(); j++) {                     if (s.charAt(j) == 'e') {                         ++c;                     }                 }                 st[i] = ((s.length() - c) - c);             }             sort(st);             sum = 0;             count = 0;             for (int i = 0; i < n; i++) {                 if (st[i] + sum >= 0) {                     break;                 }                 sum += st[i];                 ++count;             }             res = Math.max(res, count);             System.out.println(res);         }     }     static final Random random = new Random();     static void sort(int[] a) {         int n = a.length;         for (int i = 0; i < n; i++) {             int oi = random.nextInt(n), temp = a[oi];             a[oi] = a[i];             a[i] = temp;         }         Arrays.sort(a);     } } ","import java.util.*; public class shivam{     public static int diff(String str, char ch){         int cnt=0;         for(int i=0;i<str.length();i++){             if(ch==str.charAt(i)){                 cnt++;             }         }         return cnt-(str.length()-cnt);     }     public static int process(char ch,int n,String  []arr){         int[]a=new int[n];             for(int i=0;i<n;i++){                 a[i]=diff(arr[i],ch);             }             Arrays.sort(a);             int max=0;             int sum=0;             for(int i=n-1;i>=0;i--){                 sum+=a[i];                 if(sum>0){                     max++;                 }                 else{                     break;                 }             }         return max;     }     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         int k=sc.nextInt();         while(k-->0){             int n=sc.nextInt();             String []arr=new String[n];             for(int i=0;i<n;i++){                 arr[i]=sc.next();             }             int a=process('a',n,arr);             int b=process('b',n,arr);             int c=process('c',n,arr);             int d=process('d',n,arr);             int e=process('e',n,arr);             System.out.println(Math.max(a,Math.max(b,Math.max(c,Math.max(d,e)))));                     }     } } ",0
1117,"import java.util.Arrays; import java.util.Scanner; public class First {     static Scanner sc = new Scanner(System.in);     public static void main(String[] args) {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             String a = sc.next();             String b = sc.next();             char ch1[] = a.toCharArray();             char ch2[] = b.toCharArray();             int zz = 0;             int oz = 0;             int zo = 0;             int oo = 0;             for (int i = 0; i < n; i++) {                 if (ch1[i] == '0') {                     if (ch2[i] == '0') {                         zz += 1;                     } else {                         oz += 1;                     }                 } else {                     if (ch2[i] == '0') {                         zo += 1;                     } else {                         oo += 1;                     }                 }             }             int ans = -1;             if ((oo - zz) == 1 || zo == oz) {                 int s1 = (int) 1e7;                 int s2 = (int) 1e7;                 if ((oo - zz) == 1) {                     s1 = oo + zz;                 }                 if (zo == oz)                     s2 = zo + oz;                 ans = Math.min(s1, s2);             }             System.out.println(ans);         }     } } ","import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ",0
1118,"import java.util.Arrays; import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         int n = in.nextInt();         int[] a = new int[n];         for(int i=0; i<n; i++) {             a[i] = in.nextInt();         }         System.out.println(getMinimumTime(a, n));     }     public static int getMinimumTime(int[] a, int n) {         int[][] minTime = new int[n][n];         int[] posOfPerson = new int[n];         int totalOccupied = 0;         for(int i=0; i<n; i++) {             if(a[i] == 1) {                 posOfPerson[totalOccupied] = i;             }             totalOccupied += a[i];         }         for(int i=0; i<n; i++) {             Arrays.fill(minTime[i], 1, n, Integer.MAX_VALUE);         }         if(a[0] == 0) {             minTime[0][1] = Math.abs(0-posOfPerson[0]);         }         int unoccupiedPlaces = 1-a[0];         for(int i=1; i<n; i++) {             if(a[i] == 0) {                 unoccupiedPlaces++;             }             for(int j=1; j<=Math.min(totalOccupied, unoccupiedPlaces); j++) {                 if(a[i] == 1) {                     minTime[i][j] = minTime[i-1][j];                 }                 else if(j == unoccupiedPlaces) {                     minTime[i][j] = minTime[i-1][j-1] + Math.abs(i-posOfPerson[j-1]);                 }                 else {                     minTime[i][j] = Math.min(minTime[i-1][j], minTime[i-1][j-1] + Math.abs(i-posOfPerson[j-1]));                 }             }         }         return minTime[n-1][totalOccupied];     } } ","import java.io.*; import java.util.*; public class D{     static long[][] dp;     static List<Integer> seats,people;     static int n1,n2;     static long solve(int i,int j){                  if(i==n1) return 0;         long ans = Integer.MAX_VALUE;         if(n1-i>n2-j) return ans;         if(dp[i][j]!=-1) return dp[i][j];                  ans = Math.min(solve(i,j+1),solve(i+1,j+1)+Math.abs(people.get(i)-seats.get(j)));                  return dp[i][j]=ans;     }     public static void main(String args[])throws IOException{         int n=sc.nextInt();                  seats = new ArrayList<>(n/2);         people = new ArrayList<>(n/2);         for(int i=1;i<=n;i++){             if(sc.nextInt()==0){                 seats.add(i);             }else{                 people.add(i);             }         }         n1=people.size();         n2=seats.size();                                                 dp = new long[n1][n2];          for(int i=0;i<n1;i++)         Arrays.fill(dp[i],-1);         long ans =solve(0,0);         out.println(ans);         out.close();     }                                   static FastScanner sc = new FastScanner();     static PrintWriter out =new PrintWriter(System.out);      } ",0
1119,"import java.util.PriorityQueue; import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.Arrays; import java.util.Random; import java.io.FileWriter; import java.io.PrintWriter; public class Main { public static void solve() { int n = in.nextInt(), m = in.nextInt(), x = in.nextInt(); Pair[] a = new Pair[n]; for(int i = 0; i<n; i++) a[i] = new Pair(i, in.nextInt()); Util.sortArray(a); Util.reverse(a); PriorityQueue<Pair> heights = new PriorityQueue<>(); for(int i = 0; i<m; i++) heights.add(new Pair(i, 0)); int[] ans = new int[n]; for(int i = 0; i<n; i++) { Pair p = heights.poll(); p.val += a[i].val; ans[a[i].idx] = p.idx+1; heights.add(p); } long mn = Long.MAX_VALUE, mx = Long.MIN_VALUE; while(!heights.isEmpty()) { Pair p = heights.poll(); mn = Math.min(mn, p.val); mx = Math.max(mx, p.val); } if(mx-mn>x) { out.println(""NO""); return; } out.println(""YES""); out.printlnArray(ans); } static class Pair implements Comparable<Pair>{ int idx; long val; public Pair(int idx, long val) { this.idx = idx; this.val = val; } public String toString() { return this.idx+"" ""+this.val; } } public static void main(String[] args) { in = new Reader(); out = new Writer(); int t = in.nextInt(); while(t-->0) solve(); out.exit(); } static Reader in; static Writer out; static class Util{ private static Random random = new Random(); static long[] fact;                                   public static int random(int min, int max) {     return random.nextInt(max-min+1)+min;     }      public static void reverse(int[] s, int l , int r) { for(int i = l; i<=(l+r)/2; i++) { int tmp = s[i]; s[i] = s[r+l-i]; s[r+l-i] = tmp; }     } public static void reverse(int[] s) { reverse(s, 0, s.length-1);     } public static void reverse(long[] s, int l , int r) { for(int i = l; i<=(l+r)/2; i++) { long tmp = s[i]; s[i] = s[r+l-i]; s[r+l-i] = tmp; }     } public static void reverse(long[] s) { reverse(s, 0, s.length-1);     } public static void reverse(float[] s, int l , int r) { for(int i = l; i<=(l+r)/2; i++) { float tmp = s[i]; s[i] = s[r+l-i]; s[r+l-i] = tmp; }     } public static void reverse(float[] s) { reverse(s, 0, s.length-1);     } public static void reverse(double[] s, int l , int r) { for(int i = l; i<=(l+r)/2; i++) { double tmp = s[i]; s[i] = s[r+l-i]; s[r+l-i] = tmp; }     } public static void reverse(double[] s) { reverse(s, 0, s.length-1);     } public static void reverse(char[] s, int l , int r) { for(int i = l; i<=(l+r)/2; i++) { char tmp = s[i]; s[i] = s[r+l-i]; s[r+l-i] = tmp; }     } public static void reverse(char[] s) { reverse(s, 0, s.length-1);     } public static <T> void reverse(T[] s, int l , int r) { for(int i = l; i<=(l+r)/2; i++) { T tmp = s[i]; s[i] = s[r+l-i]; s[r+l-i] = tmp; }     } public static <T> void reverse(T[] s) { reverse(s, 0, s.length-1);     } public static void shuffle(int[] s) {         for (int i = 0; i < s.length; ++i) {             int j = random.nextInt(i + 1);             int t = s[i];             s[i] = s[j];             s[j] = t;         }     }     public static void shuffle(long[] s) {         for (int i = 0; i < s.length; ++i) {             int j = random.nextInt(i + 1);             long t = s[i];             s[i] = s[j];             s[j] = t;         }     }          public static void shuffle(float[] s) {         for (int i = 0; i < s.length; ++i) {             int j = random.nextInt(i + 1);             float t = s[i];             s[i] = s[j];             s[j] = t;         }     }          public static void shuffle(double[] s) {         for (int i = 0; i < s.length; ++i) {             int j = random.nextInt(i + 1);             double t = s[i];             s[i] = s[j];             s[j] = t;         }     }          public static void shuffle(char[] s) {         for (int i = 0; i < s.length; ++i) {             int j = random.nextInt(i + 1);             char t = s[i];             s[i] = s[j];             s[j] = t;         }     }          public static <T> void shuffle(T[] s) {         for (int i = 0; i < s.length; ++i) {             int j = random.nextInt(i + 1);             T t = s[i];             s[i] = s[j];             s[j] = t;         }     }      public static void sortArray(int[] a) {         shuffle(a);         Arrays.sort(a);     } public static void sortArray(long[] a) { shuffle(a);         Arrays.sort(a);     } public static void sortArray(float[] a) { shuffle(a);         Arrays.sort(a);     } public static void sortArray(double[] a) { shuffle(a);         Arrays.sort(a);     } public static void sortArray(char[] a) { shuffle(a);         Arrays.sort(a);     } public static <T extends Comparable<T>> void sortArray(T[] a) {         Arrays.sort(a);     } } } ","import java.util.*; import java.io.*; public class Solution { static Scanner scn = new Scanner(System.in); static PrintWriter out = new PrintWriter(System.out); static StringBuilder sb = new StringBuilder(); public static void main(String[] HastaLaVistaLa) { int t = scn.nextInt(); while(t-- > 0) solve(); out.println(sb); out.close(); } public static void solve() { int n = scn.nextInt(), m = scn.nextInt(), x = scn.nextInt(); int[] a = new int[n], ans = new int[n]; for(int i = 0; i < n; i++) a[i] = scn.nextInt(); PriorityQueue<Pair> pq = new PriorityQueue<>(); for(int i = 0; i < m; i++) pq.add(new Pair(0L, i)); for(int i = 0; i < n; i++) { int e = a[i]; Pair p = pq.poll(); p.value += e; pq.add(p); ans[i] = p.id + 1; } boolean check = false; long prev = pq.poll().value; while(!pq.isEmpty()) { long cur = pq.poll().value; if(Math.abs(cur - prev) > x) check = true; prev = cur; } if(check) sb.append(""NO""); else { sb.append(""YES\n""); for(int i : ans) sb.append(i + "" ""); } sb.append(""\n""); } static class Pair implements Comparable<Pair> { int id; long value; public Pair(long value, int id) { this.id = id; this.value = value; } } } ",0
1120,"import java.util.Scanner; import java.util.ArrayList; import java.lang.Math; public class fell { private static final Scanner cin = new Scanner(System.in); private static final int maxVal = 1000000000; public static void main(String[] args) { int n = cin.nextInt(); ArrayList<Integer> a = new ArrayList<>(); ArrayList<Integer> b = new ArrayList<>(); for (int i = 0; i < n; i++) { int t = cin.nextInt(); if (t == 0) a.add(i); else b.add(i); } if (a.size() == n) { System.out.println(0); return; } int[][] dp = new int[n][n]; for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) { if (i == 0) dp[i][j] = 0; else dp[i][j] = maxVal; } for (int i = 0; i < a.size(); i++) { for (int j = 0; j < Math.min(i + 1, b.size() + 1); j++) { dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]); if (j == b.size()) continue; dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i][j] + Math.abs(a.get(i) - b.get(j))); } } System.out.println(dp[a.size()][b.size()]); } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main {     static int func(List<Integer> ones, List<Integer> zeroes, int idO, int idZ, int o, int z, Integer[][] memo) {         if(idZ == zeroes.size() || idO == ones.size()) {             return 0;         }                  if(memo[idO][idZ] != null) {             return memo[idO][idZ];         }                  if(o == z) {             return memo[idO][idZ] = Math.abs(ones.get(idO) - zeroes.get(idZ))                 + func(ones, zeroes, idO + 1, idZ + 1, o - 1, z - 1, memo);         } else {             return memo[idO][idZ] = Math.min(                 Math.abs(ones.get(idO) - zeroes.get(idZ))                 + func(ones, zeroes, idO + 1, idZ + 1, o - 1, z - 1, memo),                 func(ones, zeroes, idO, idZ + 1, o, z - 1, memo)             );         }     }      public static void main (String[] args) {         FastScanner scan = new FastScanner();         int n =  scan.nextInt();         int[] arr = scan.readArray(n);                  List<Integer> ones = new ArrayList<>();         List<Integer> zeroes = new ArrayList<>();                  for(int i = 0; i < n; i++) {             if(arr[i] == 0) {                 zeroes.add(i);             } else {                 ones.add(i);             }         }                  int o = ones.size();         int z = zeroes.size();                  Integer[][] memo = new Integer[o + 1][z + 1];                  int ans = func(ones, zeroes, 0, 0, o, z, memo);                  System.out.println(ans);     }                     } ",0
1121,"import java.util.Scanner; import java.util.Arrays; public class B {     public static int[] sort(int[] arr,int low,int high){         int[] sortedArray;         if (low==high) {             sortedArray=new int[]{arr[low]};             return sortedArray;         }         int mid=(low+high)/2;         int[] arr1=sort(arr,low,mid);         int[] arr2=sort(arr,mid+1,high);         sortedArray=merge(arr1,low,mid,arr2,mid+1,high);         return sortedArray;     }     public static int[] merge(int[] arr1,int low1,int high1,int[] arr2,int low2,int high2){         int size1=high1-low1+1;         int size2=high2-low2+1;                  int[] arr=new int[size1+size2];         int pointer=0;         low1=0;low2=0;         while (low1<size1 && low2<size2){             if (arr1[low1] <= arr2[low2]) {                 arr[pointer++]=arr1[low1++];             }             else{                 arr[pointer++]=arr2[low2++];             }         }         while(low1<size1) arr[pointer++]=arr1[low1++];         while(low2<size2) arr[pointer++]=arr2[low2++];         return arr;     }          public static void main(String[] args){         Scanner sc=new Scanner(System.in);         int t=sc.nextInt();         while(t-- > 0){             int n=sc.nextInt();             long k=sc.nextLong();             int[] arr=new int[n];             long sum=0;             for(int i=0;i<n;i++) {                 arr[i]=sc.nextInt();                 sum+=arr[i];             }             if (sum<=k){                 System.out.println(0);                 continue;             }             long s[]=new long[n];             arr=sort(arr,0,n-1);             s[n-1]=arr[n-1]-arr[0];             long ans=sum-k;                      for(int i=n-2;i>=0;i--) s[i]=s[i+1]+arr[i]-arr[0];                         for(int i=n-1;i>=1;i--) {                                  long caseAns=(sum-k-s[i]+n-i)/(n-i+1);                                  caseAns=Math.max(caseAns,0);                 caseAns+=n-i;                 ans=Math.min(caseAns,ans);             }             System.out.println(ans);         }         sc.close();     } } ","import java.util.*; import java.lang.*; import java.io.*; import java.math.BigInteger; import java.text.DecimalFormat; public final class Solution {     static int inf = Integer.MAX_VALUE;     static long mod = 1000000000 + 7;     static void ne(Scanner sc, BufferedWriter op) throws Exception {     int n=sc.nextInt();     long k=sc.nextLong();     long[] arr= new long[n];     long sum=0;     for(int i=0;i<n;i++){         arr[i]=sc.nextLong();         sum+=arr[i];     }     if(sum<=k){         op.write(""0\n"");         return;     }     sort(arr);     long min=sum-k;     long ss=0;          int cc=0;     for(int i=n-1;i>=1;i--){           sum-=arr[i];           sum+=arr[0];           cc++;         if(sum<=k){           min=Math.min(min,cc);           break;         }     }    long val=Math.abs(arr[0]-(k/n))+(n-1);     min=Math.min(val,min);       for(int i=1;i<n;i++){         ss+=arr[i];         long no=((k-ss)/(long)(n-i));               if(k-ss<0 && (k-ss)%(n-i)!=0){             no--;         }        long count=(n-i-1)+Math.abs(arr[0]-no);               min=Math.min(count,min);     }     op.write(min+""\n"");  }                  public static void main(String[] args) throws Exception {         BufferedWriter op = new BufferedWriter(new OutputStreamWriter(System.out));                        Scanner sc= new Scanner(System.in);         int t = sc.nextInt();         while (t-->0){ ne(sc, op); }                                                           op.flush();     }               static void  sort(int[] arr){         ArrayList<Integer> list= new ArrayList<>();         for(int i=0;i<arr.length;i++){             list.add(arr[i]);         }         Collections.sort(list);         for(int i=0;i<arr.length;i++){             arr[i]=list.get(i);         }     }        static void  sort(long[] arr){         ArrayList<Long> list= new ArrayList<>();         for(int i=0;i<arr.length;i++){             list.add(arr[i]);         }         Collections.sort(list);         for(int i=0;i<arr.length;i++){             arr[i]=list.get(i);         }     } }   ",0
1122,"import java.util.Scanner; public class Armchairs {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int num = scanner.nextInt();         int[] chairs = new int[num];         int numOne = 0;         for (int i = 0; i < num; i++) {             chairs[i] = scanner.nextInt();             if (chairs[i] == 1) numOne++;         }         if (numOne == 0) {             System.out.println(0);             return;         }         int one = 0;         int zero = 0;         int[] ones = new int[numOne];         int[] zeros = new int[num - numOne];         for (int i = 0; i < num; i++) {             if (chairs[i] == 0) zeros[zero++] = i;             else ones[one++] = i;         }         long[][] nums = new long[numOne][num - numOne];         for (int c = 0; c < num - numOne; c++)             nums[0][c] = Math.abs(ones[0] - zeros[c]);         for (int r = 1; r < numOne; r++) {             long min = nums[r - 1][r - 1];             for (int c = r; c < num - numOne; c++) {                 min = Math.min(nums[r - 1][c - 1], min);                 nums[r][c] = min + Math.abs(ones[r] - zeros[c]);             }         }         Long result = Long.MAX_VALUE;         for (long min: nums[numOne - 1]) {             if (min > 0) result = Math.min(result, min);         }         System.out.println(result);     } } ","import java.io.*; import java.util.*; public class D { static int[][] dp; static int solve(int i,int j,ArrayList<Integer> A,ArrayList<Integer> B) { if(i==A.size()) { return 0; } if(j==B.size()) { return 1000000009; } if(dp[i][j]!=-1) { return dp[i][j]; } int ans=1000000009; int a=A.get(i); int b=B.get(j); ans=Math.min(ans, Math.abs(a-b)+solve(i+1,j+1,A,B)); ans=Math.min(ans, solve(i,j+1,A,B)); return dp[i][j]=ans; } public static void main(String[] args){ FastReader sc=new FastReader(); int t=1; while(t-->0) { int n=sc.nextInt(); int[] a=new int[n]; ArrayList<Integer> A=new ArrayList<>(); ArrayList<Integer> B=new ArrayList<>(); for(int i=0;i<n;i++) { a[i]=sc.nextInt(); if(a[i]==1) { A.add(i); } else { B.add(i); } } dp=new int[5010][5010]; for(int i=0;i<5010;i++) { Arrays.fill(dp[i], -1); } System.out.println(solve(0,0,A,B)); } } } ",0
1123,"import java.util.Scanner; public class Armchairs {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int num = scanner.nextInt();         int[] chairs = new int[num];         int numOne = 0;         for (int i = 0; i < num; i++) {             chairs[i] = scanner.nextInt();             if (chairs[i] == 1) numOne++;         }         if (numOne == 0) {             System.out.println(0);             return;         }         int one = 0;         int zero = 0;         int[] ones = new int[numOne];         int[] zeros = new int[num - numOne];         for (int i = 0; i < num; i++) {             if (chairs[i] == 0) zeros[zero++] = i;             else ones[one++] = i;         }         long[][] nums = new long[numOne][num - numOne];         for (int c = 0; c < num - numOne; c++)             nums[0][c] = Math.abs(ones[0] - zeros[c]);         for (int r = 1; r < numOne; r++) {             long min = nums[r - 1][r - 1];             for (int c = r; c < num - numOne; c++) {                 min = Math.min(nums[r - 1][c - 1], min);                 nums[r][c] = min + Math.abs(ones[r] - zeros[c]);             }         }         Long result = Long.MAX_VALUE;         for (long min: nums[numOne - 1]) {             if (min > 0) result = Math.min(result, min);         }         System.out.println(result);     } } ","import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class D {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int n = sc.nextInt();         List<Integer> a1 = new ArrayList<>();         List<Integer> a0 = new ArrayList<>();         for (int i = 0; i < n; i++) {             int now = sc.nextInt();             if (now == 1) {                 a1.add(i + 1);             } else {                 a0.add(i + 1);             }         }         int[][] dp = new int[a1.size() + 1][a0.size() + 1];         for (int i = 1; i < dp.length; i++) {             dp[i][i] = dp[i - 1][i - 1] + Math.abs(a1.get(i - 1) - a0.get(i - 1));             for (int j = i + 1; j < dp[i].length; j++) {                 dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j - 1] + Math.abs(a1.get(i - 1) - a0.get(j - 1)));             }         }         System.out.println(dp[a1.size()][a0.size()]);     } } ",0
1124,"import java.util.Scanner; public class C {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         while (t-- > 0) {             int n = scanner.nextInt();             int[] h = new int[n];             for (int i = 0; i < n; i++) {                 h[i] = scanner.nextInt();             }             System.out.println(binSearchSolution(h));         }     }     private static int binSearchSolution(int[] a) {         int l = 0;         int r = (int)1e9 + 1;         while (l < r - 1) {             int m = l + (r - l) / 2;             if (canAchieve(a, m)) {                 l = m;             } else {                 r = m;             }         }         return l;     }     private static boolean canAchieve(int[] a, int min) {         int back1 = a[a.length - 2];         int current = a[a.length - 1];         int nextIndex = a.length - 3;         while (nextIndex >= 0) {             int back2 = a[nextIndex];             if (current < min) {                 return false;             }             int canMove = Math.min(current - min, a[nextIndex + 2]);             int d = canMove / 3;             current = back1 + d;             back1 = back2 + 2 * d;             nextIndex--;         }         if (current < min || back1 < min) {             return false;         }         return true;     } } ","import java.util.Scanner;   public class C {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         while (t-- > 0) {             int n = scanner.nextInt();             int[] h = new int[n];             for (int i = 0; i < n; i++) {                 h[i] = scanner.nextInt();             }             System.out.println(binSearchSolution(h));         }     }       private static int binSearchSolution(int[] a) {         int l = 0;         int r = (int)1e9 + 1;         while (l < r - 1) {             int m = l + (r - l) / 2;             if (canAchieve(a, m)) {                 l = m;             } else {                 r = m;             }         }         return l;     }       private static boolean canAchieve(int[] a, int min) {         int back1 = a[a.length - 2];         int current = a[a.length - 1];         int nextIndex = a.length - 3;         while (nextIndex >= 0) {             int back2 = a[nextIndex];             if (current < min) {                 return false;             }             int canMove = Math.min(current - min, a[nextIndex + 2]);             int d = canMove / 3;             current = back1 + d;             back1 = back2 + 2 * d;             nextIndex--;         }         if (current < min || back1 < min) {             return false;         }         return true;     } } ",1
1125,"import java.util.Scanner; public class C_Set_or_Decrease{ static Scanner in=new Scanner(System.in); static int testCases,n; static long a[]; static long wantedSum; static void solve(){ if(n==1){ if(a[0]<=wantedSum ){ System.out.println(0); }else{ System.out.println((-wantedSum+a[0]) ); } return; } long sum=0; for(long i: a){ sum+=i; } if(sum<=wantedSum){ System.out.println(0); return; } sort(a,0,n-1); long step=Math.max(sum-wantedSum,0); for(int i=1;i<n;i++){ sum-=a[n-i]-a[0]; long t=sum>wantedSum?(sum-wantedSum+i)/(i+1):0; step=Math.min(step,t+i); } System.out.println(step); } public static void main(String [] amit){ testCases=in.nextInt(); for(int t=0;t<testCases;t++){ n=in.nextInt(); wantedSum=in.nextLong(); a=new long[n]; for(int i=0;i<n;i++){ a[i]=in.nextLong(); } solve(); } }    static void merge(long a[],int left,int right,int mid){ int n1=mid-left+1,n2=right-mid; long L[]=new long[n1]; long R[]=new long[n2]; for(int i=0;i<n1;i++){ L[i]=a[left+i]; } for(int i=0;i<n2;i++){ R[i]=a[mid+1+i]; } int i=0,j=0,k=left; while(i<n1 && j<n2){ if(L[i]<=R[j]){ a[k]=L[i]; i++; }else{ a[k]=R[j]; j++; } k++; } while(i<n1){ a[k]=L[i]; i++; k++; } while(j<n2){ a[k]=R[j]; j++; k++; }   }   static void sort(long a[],int left,int right){ if(left>=right){ return;    } int mid=(left+right)/2; sort(a,left,mid); sort(a,mid+1,right); merge(a,left,right,mid);   } } ","import java.util.Scanner;           public class C_Set_or_Decrease{          static Scanner in=new Scanner(System.in);          static int testCases,n;          static long a[];          static long wantedSum;          static void solve(){          if(n==1){          if(a[0]<=wantedSum ){          System.out.println(0);          }else{          System.out.println((-wantedSum+a[0]) );          }          return;          }          long sum=0;          for(long i: a){          sum+=i;          }          if(sum<=wantedSum){          System.out.println(0);          return;          }          sort(a,0,n-1);          long step=Math.max(sum-wantedSum,0);          for(int i=1;i<n;i++){          sum-=a[n-i]-a[0];          long t=sum>wantedSum?(sum-wantedSum+i)/(i+1):0;          step=Math.min(step,t+i);          }          System.out.println(step);                              }          public static void main(String [] amit){          testCases=in.nextInt();          for(int t=0;t<testCases;t++){          n=in.nextInt();          wantedSum=in.nextLong();          a=new long[n];          for(int i=0;i<n;i++){          a[i]=in.nextLong();          }          solve();          }          }             static void merge(long a[],int left,int right,int mid){          int n1=mid-left+1,n2=right-mid;          long L[]=new long[n1];          long R[]=new long[n2];          for(int i=0;i<n1;i++){          L[i]=a[left+i];          }          for(int i=0;i<n2;i++){          R[i]=a[mid+1+i];          }          int i=0,j=0,k=left;          while(i<n1 && j<n2){          if(L[i]<=R[j]){          a[k]=L[i];          i++;          }else{          a[k]=R[j];          j++;          }          k++;          }          while(i<n1){          a[k]=L[i];          i++;     k++;          }          while(j<n2){          a[k]=R[j];          j++;     k++;          }            }             static void sort(long a[],int left,int right){          if(left>=right){          return;             }          int mid=(left+right)/2;          sort(a,left,mid);          sort(a,mid+1,right);          merge(a,left,right,mid);            }          } ",1
1126,"import java.util.Scanner; public class D {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         int lines = s.nextInt();         s.nextLine();         for (int i = 0; i < lines; i += 1) {             solve(s.nextInt(), s);         }     }     public static void solve(int n, Scanner s) {         int a[] = new int[n];         for (int i = 0; i < n; i++) {             a[i] = s.nextInt();         }         int b[] = new int[n];         for (int i = 0; i + 1 < n; i += 2) {             b[i + 1] = a[i];             b[i] = -a[i + 1];         }         while (b[n - 2] == 0 || b[n - 1] == 0) {             b[n - 1] += a[n - 2];             b[n - 2] -= a[n - 1];         }                  StringBuilder erg = new StringBuilder();         for (int i = 0; i < n; i++) {             erg.append(b[i]).append("" "");         }         System.out.println(erg);     } } ","import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileWriter; import java.io.IOException; import java.io.InputStreamReader; import java.math.BigInteger; import java.util.*; public class Main {        public static void main(String[] args)     {         FastScanner input = new FastScanner();        StringBuilder result = new StringBuilder();         int tc = input.nextInt();         while (tc-- > 0) {           int n = input.nextInt();       int a[] = new int[n];       int b[] = new int[n];         for (int i = 0; i < n; i++) {             a[i] = input.nextInt();                      }         if(n%2==0)         {             for (int i = 0; i <n; i+=2) {                 b[i] = a[i+1];                 b[i+1] = -a[i];             }         }         else         {                          for (int i = 0; i <n-3; i+=2) {                 b[i] = a[i+1];                 b[i+1] = -a[i];             }             int last1 = a[n-3];             int last2 = a[n-2];             int last3 = a[n-1];             if(last1+last2!=0)             {                 b[n-3] = -last3;                 b[n-2] = -last3;                 b[n-1] = (last1+last2);             }             else if(last1+last3!=0)             {                 b[n-3] = -last2;                 b[n-2] = (last1+last3);                 b[n-1] = -last2;             }             else if(last2+last3!=0)             {                 b[n-3] =(last2+last3);                 b[n-2] = -last1;                 b[n-1] = -last1;             }         }         for (int i : b) {             result.append(i+"" "");         }         result.append(""\n"");            }         System.out.println(result);                     }      } ",0
1127,"import java.util.Scanner; public class Main {               public static void solution3(){         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         while (t-- > 0){             int n;             n = scanner.nextInt();             int[] costs = new int[n];             for (int i=0; i<n; i++) costs[i] = scanner.nextInt();                          long minEven = costs[0];             long minOdd = costs[1];             long totalEven = minEven;             long totalOdd = minOdd;             long minCost = minEven * n + minOdd * n;             for (int i=2; i<n; i++){                 if (i%2 == 1){                     minOdd = Math.min(minOdd, costs[i]);                     totalOdd += costs[i];                 }                 else{                     minEven = Math.min(minEven, costs[i]);                     totalEven += costs[i];                 }                 long this_cost = totalEven - minEven + minEven * (n - (i+2)/2 + 1) + totalOdd - minOdd + minOdd * (n - (i+1)/2 + 1);                 minCost = Math.min(minCost, this_cost);             }             System.out.println(minCost);         }         scanner.close();     }          public static void main(String[] args) {         solution3();     } } ","import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; public class MinimumGridPath { public static void main(String[] args) throws IOException { FastIO in = new FastIO(System.in); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); long[] c = new long[n]; long[] sums = new long[n]; long[] mins = new long[n]; for (int i = 0; i < n; i++) c[i] = in.nextInt(); sums[0] = mins[0] = c[0]; sums[1] = mins[1] = c[1]; for (int i = 2; i < n; i++) { sums[i] = sums[i-2] + c[i]; mins[i] = Math.min(mins[i-2], c[i]); } long ans = Long.MAX_VALUE; for (int i = 1; i < n; i++) { ans = Math.min(ans, (n - (long) Math.ceil((double) (i+1) / 2)) * mins[i] + (n - (i+1) / 2) * mins[i-1] + sums[i] + sums[i-1]); } System.out.println(ans); } in.close(); } } ",0
1128,"import java.util.Scanner; public class Main {               public static void solution3(){         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         while (t-- > 0){             int n;             n = scanner.nextInt();             int[] costs = new int[n];             for (int i=0; i<n; i++) costs[i] = scanner.nextInt();                          long minEven = costs[0];             long minOdd = costs[1];             long totalEven = minEven;             long totalOdd = minOdd;             long minCost = minEven * n + minOdd * n;             for (int i=2; i<n; i++){                 if (i%2 == 1){                     minOdd = Math.min(minOdd, costs[i]);                     totalOdd += costs[i];                 }                 else{                     minEven = Math.min(minEven, costs[i]);                     totalEven += costs[i];                 }                 long this_cost = totalEven - minEven + minEven * (n - (i+2)/2 + 1) + totalOdd - minOdd + minOdd * (n - (i+1)/2 + 1);                 minCost = Math.min(minCost, this_cost);             }             System.out.println(minCost);         }         scanner.close();     }          public static void main(String[] args) {         solution3();     } } ","import java.util.*; import java.lang.*; import java.io.*; public class Main { static PrintWriter out; static FastReader scan;      public static int ni(){return scan.nextInt();} public static long nl(){return scan.nextLong();}                 static void lIA(long arr[]){      for(int i=0; i<arr.length; i++)arr[i] = nl();  }                                       public static void main (String[] args) throws java.lang.Exception { OutputStream outputStream =System.out;         out =new PrintWriter(outputStream);         scan =new FastReader(); StringBuilder sb = new StringBuilder(); int t = ni(); while(t-->0){ int n = ni(); long arr[] = new long[n]; lIA(arr); long ans = (long)(n*(arr[0] + arr[1])); long sum = arr[0] + arr[1]; long emin = arr[0], omin = arr[1]; for(int i=2; i<n; i++){ sum += arr[i]; if(i%2==0){ emin = Math.min(arr[i], emin); } else{ omin = Math.min(arr[i], omin); } long temp = sum - emin - omin; if(i%2==0) temp += (n-i/2)*emin + (n-i/2+1)*omin; else temp += (n-(i-1)/2)*(emin + omin); ans = Math.min(ans, temp); } System.out.println(ans);         }         out.flush(); out.close(); } } ",0
1129,"import java.util.Scanner; public class Main {               public static void solution3(){         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         while (t-- > 0){             int n;             n = scanner.nextInt();             int[] costs = new int[n];             for (int i=0; i<n; i++) costs[i] = scanner.nextInt();                          long minEven = costs[0];             long minOdd = costs[1];             long totalEven = minEven;             long totalOdd = minOdd;             long minCost = minEven * n + minOdd * n;             for (int i=2; i<n; i++){                 if (i%2 == 1){                     minOdd = Math.min(minOdd, costs[i]);                     totalOdd += costs[i];                 }                 else{                     minEven = Math.min(minEven, costs[i]);                     totalEven += costs[i];                 }                 long this_cost = totalEven - minEven + minEven * (n - (i+2)/2 + 1) + totalOdd - minOdd + minOdd * (n - (i+1)/2 + 1);                 minCost = Math.min(minCost, this_cost);             }             System.out.println(minCost);         }         scanner.close();     }          public static void main(String[] args) {         solution3();     } } ","import java.util.*; import java.lang.Math; import java.util.concurrent.TimeUnit; import java.util.stream.Collectors; import javax.management.Query; import java.io.*; import java.math.BigInteger; public class Main {     static int mod = 1000000007;                              static FastReader f = new FastReader();     static BufferedWriter w = new BufferedWriter(new OutputStreamWriter(System.out));                                                                                                         static int DP[][];     static ArrayList<ArrayList<Integer>> g;     static int count = 0;               public static void main(String args[]) throws Exception {                           Random rand = new Random();         int t = 1;         t = f.nextInt();         int tc = 1;         while (t-- != 0) {             int n = f.nextInt();             int c[] = new int[n];             long minOdd = 0, minEven = 0;             long sumEven = 0, sumOdd = 0;             for (int i = 0; i < n ; i++) {                 c[i] = f.nextInt();                                                                                                                                    }             minEven = c[0];             minOdd = c[1];             sumEven=c[0];             sumOdd=c[1];             long min=minEven*n + minOdd*n;             int even=1,odd=1;             for (int k = 3; k <= n; k++) {                 if(k%2==1){                     sumEven+=c[k-1];                     minEven=Math.min(minEven, c[k-1]);                     even++;                 }else{                     sumOdd+=c[k-1];                     minOdd=Math.min(minOdd, c[k-1]);                     odd++;                 }                 min=Math.min(min, sumEven-minEven+minEven*(n-even+1) + sumOdd-minOdd+minOdd*(n-odd+1));             }             w.write(min+""\n"");         }         w.flush();     } } ",0
1130,import java.util.Scanner; public class Main {     public static void main(String[] args)     {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         while(t-- > 0)         {             int n = scanner.nextInt();             int[] time = new int[n];             int[] h = new int[n];             for(int i  = 0; i < n; i++)             {                 time[i] = scanner.nextInt();             }             for(int j = 0; j < n; j++)             {                 h[j] = scanner.nextInt();             }             long prevMTime = time[n-1];             long prevMHealth = h[n-1];             long manaRequired = 0;             long currMTime = time[n-1];             long currMHealth = h[n-1];             long spellCastingTime = prevMTime - prevMHealth + 1;             for(int i = n-2; i >= 0; i--)             {                 currMHealth = h[i];                 currMTime = time[i];                                  if(spellCastingTime <= currMTime && currMTime - spellCastingTime + 1 < currMHealth)                 {                     spellCastingTime = currMTime - currMHealth + 1;                 }                 else if(spellCastingTime > currMTime)                 {                     long hm = (prevMTime - spellCastingTime) + 1;                     manaRequired += (hm * (hm+1)) / 2;                     prevMTime =currMTime;                     prevMHealth = currMHealth;                     spellCastingTime = prevMTime - prevMHealth + 1;                 }             }             long hm = (prevMTime - spellCastingTime) + 1;             manaRequired += (hm * (hm+1)) / 2;             System.out.println(manaRequired);         }     } } ,"import java.util.*; import java.io.*; public class hmm { static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws Exception { int t =sc.nextInt(); while (t-- > 0) {              int n = sc.nextInt();              int []k = sc.nextIntArray(n);              int h[]=sc.nextIntArray(n);                    long mana = 0;              pair cur = new pair(k[n-1]-h[n-1]+1,k[n-1]);              for(int i=n-1;i>=0;i--) {              int s = k[i];              int start = s-h[i]+1;              if(s>=cur.x) {              cur.x = Math.min(start, cur.x);              }              else {              long x = cur.y - cur.x +1;              mana += x*(x+1)/2;              cur.x = start;              cur.y = s;              }              }                      long x = cur.y - cur.x +1;              mana += x*(x+1)/2;      pw.println(mana);                           } pw.close(); } static class pair { int x ; int y; public pair(int n,int c) { x= n; y = c; } } } ",0
1131,import java.util.Scanner; public class Main {     public static void main(String[] args)     {         Scanner scanner = new Scanner(System.in);         int t = scanner.nextInt();         while(t-- > 0)         {             int n = scanner.nextInt();             int[] time = new int[n];             int[] h = new int[n];             for(int i  = 0; i < n; i++)             {                 time[i] = scanner.nextInt();             }             for(int j = 0; j < n; j++)             {                 h[j] = scanner.nextInt();             }             long prevMTime = time[n-1];             long prevMHealth = h[n-1];             long manaRequired = 0;             long currMTime = time[n-1];             long currMHealth = h[n-1];             long spellCastingTime = prevMTime - prevMHealth + 1;             for(int i = n-2; i >= 0; i--)             {                 currMHealth = h[i];                 currMTime = time[i];                                  if(spellCastingTime <= currMTime && currMTime - spellCastingTime + 1 < currMHealth)                 {                     spellCastingTime = currMTime - currMHealth + 1;                 }                 else if(spellCastingTime > currMTime)                 {                     long hm = (prevMTime - spellCastingTime) + 1;                     manaRequired += (hm * (hm+1)) / 2;                     prevMTime =currMTime;                     prevMHealth = currMHealth;                     spellCastingTime = prevMTime - prevMHealth + 1;                 }             }             long hm = (prevMTime - spellCastingTime) + 1;             manaRequired += (hm * (hm+1)) / 2;             System.out.println(manaRequired);         }     } } ,"import java.util.*; public class solution{ public static void main(String[] args) { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while(t-- > 0){ int n = sc.nextInt(); long[] k = new long[n]; long[] h = new long[n]; for(int i = 0;i < n;i++){ k[i] = sc.nextLong(); } for(int i = 0;i < n;i++){ h[i] = sc.nextLong();  } long length = h[n-1]; long curr = 0; long ans = 0; for(int i = n-1;i >= 1;i--){ if(k[i] - k[i-1] >= length){ curr += length; ans = ans += (curr * (curr + 1))/2; length = h[i-1]; curr = 0; }else{ length = Math.max(length - (k[i] - k[i-1]), h[i-1]); curr += k[i] - k[i-1]; } } curr += length; ans += (curr * (curr + 1))/2; System.out.println(ans); } } } ",0
1132,"import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner sc=new Scanner(System.in); int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); int[] c=new int[n]; for(int i=0;i<n;i++) c[i]=sc.nextInt(); int[] mn= {Integer.MAX_VALUE,Integer.MAX_VALUE}; long[] rem= {(long)n,(long)n}; long sum=0; long ans=Long.MAX_VALUE; for(int i=0;i<n;i++) { mn[i%2]=Math.min(mn[i%2], c[i]); rem[i%2]--; sum+=c[i]; if(i>0) { long cur=sum+rem[0]*mn[0]+rem[1]*mn[1]; ans=Math.min(ans, cur); } } System.out.println(ans); } } } ","import java.util.Scanner; public class C1499 { public static void main(String[] args) { Scanner in = new Scanner(System.in); int t = in.nextInt(); while (t-- > 0) { int n = in.nextInt(); long[] mn = { Long.MAX_VALUE, Long.MAX_VALUE }; long[] rem = { n, n }; long sum = 0; long ans = Long.MAX_VALUE; for (int i = 0; i < n; i++) { int temp = in.nextInt(); mn[i % 2] = Math.min(mn[i % 2], temp); rem[i % 2]--; sum += temp; if (i > 0) { long cur = sum + rem[0] * mn[0] + rem[1] * mn[1]; ans = Math.min(ans, cur); } } System.out.println(ans); } } } ",1
1133,"import java.util.Scanner; public class Menorah {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             char initial[] = sc.next().toCharArray();             char desired[] = sc.next().toCharArray();             int lit1 = 0, lit2 = 0;             int ans = Integer.MAX_VALUE;             for (int i = 0; i < n; i++) {                 if (initial[i] == '1') {                     ++lit1;                 }                 if (desired[i] == '1') {                     ++lit2;                 }             }             if (lit1 == lit2) {                 int count = 0;                 for (int i = 0; i < n; i++) {                     if (initial[i] != desired[i]) {                         ++count;                     }                 }                 ans = Math.min(count, ans);             }             if (lit2 == (n - lit1 + 1)) {                 int count = 0;                 for (int i = 0; i < n; i++) {                     if (initial[i] == desired[i]) {                         ++count;                     }                 }                 ans = Math.min(ans, count);             }             if (ans == Integer.MAX_VALUE) {                 System.out.println(-1);             } else {                 System.out.println(ans);             }         }     } } ","import java.io.*; import java.util.*; public class qC { public static void main(String[] args)throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int T = Integer.parseInt(br.readLine()); while(T-- > 0) { int N = Integer.parseInt(br.readLine()); char[] curr = br.readLine().toCharArray(); char[] sol = br.readLine().toCharArray(); int curr1 = 0; int sol1 = 0; int mismatch = 0; for(int i = 0;i < N;i++) { if(curr[i] == '1') curr1++; if(sol[i] == '1') sol1++; if(curr[i] != sol[i]) mismatch++; } int minAns = Integer.MAX_VALUE; if(curr1 == sol1 && mismatch % 2 == 0) { minAns = Math.min(mismatch, minAns); } for(int i = 0;i < N;i++) { if(curr[i] == '1') { int tempcurr1 = N - curr1 + 1; int tempmismatch; if(sol[i] == '0') { tempmismatch = N - mismatch; } else { tempmismatch = N - mismatch - 1; } if(tempcurr1 == sol1 && tempmismatch % 2 == 0) { minAns = Math.min(minAns, tempmismatch + 1); } } } System.out.println((minAns == Integer.MAX_VALUE) ? -1 : minAns); } } } ",0
1134,"import java.util.Scanner; public class Menorah {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             char initial[] = sc.next().toCharArray();             char desired[] = sc.next().toCharArray();             int lit1 = 0, lit2 = 0;             int ans = Integer.MAX_VALUE;             for (int i = 0; i < n; i++) {                 if (initial[i] == '1') {                     ++lit1;                 }                 if (desired[i] == '1') {                     ++lit2;                 }             }             if (lit1 == lit2) {                 int count = 0;                 for (int i = 0; i < n; i++) {                     if (initial[i] != desired[i]) {                         ++count;                     }                 }                 ans = Math.min(count, ans);             }             if (lit2 == (n - lit1 + 1)) {                 int count = 0;                 for (int i = 0; i < n; i++) {                     if (initial[i] == desired[i]) {                         ++count;                     }                 }                 ans = Math.min(ans, count);             }             if (ans == Integer.MAX_VALUE) {                 System.out.println(-1);             } else {                 System.out.println(ans);             }         }     } } ","import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ",0
1135,"import java.util.Scanner; public class Menorah {     static int MOD9= 1000000000;     public static void main(String[] args){         Scanner sc= new Scanner(System.in);         int numberTest=sc.nextInt();         while(numberTest-->0){             int n=sc.nextInt();             char[] s=new char[n+5];             char[] t=new char[n+5];             String ss=sc.next();             String tt=sc.next();             s=ss.toCharArray();             t=tt.toCharArray();             int cntax = 0, cntbx = 0, same = 0;             int ans=MOD9;             for(int i=0; i<n; i++){                 if(s[i]=='1')cntax++;                 if(t[i]=='1')cntbx++;                 if(s[i]==t[i])same++;             }             if(same==n){                 System.out.println(0);                 continue;             }             else if (cntax==0){                 System.out.println(-1);                 continue;             }             if(cntax==cntbx){                 ans=Math.min(ans,n-same);             }             if(n-cntax+1==cntbx)ans=Math.min(ans,same);             if(ans<MOD9) System.out.println(ans);             else System.out.println(-1);         }     } } ","import java.io.*; import java.util.*;    public class A{ static FastReader sc=null; public static void main(String[] args) { sc=new FastReader(); int t=sc.nextInt(); for(int tt=0;tt<t;tt++) { int n=sc.nextInt(); char a[]=sc.next().toCharArray(),b[]=sc.next().toCharArray(); int fa=0,fb=0,da=0,db=0,sum=0; boolean dif=false; for(int i=0;i<n;i++) { sum+=a[i]-'0'; if(a[i]!=b[i]) { dif=true; if(a[i]=='1')fa++; else fb++; } else { if(a[i]=='1')da++; else db++; } } if(sum==0) { System.out.println(dif?-1:0); continue; } int ans=n+1; if(fa==fb) ans=(fa+fb); if(da==db+1) ans=Math.min(da+db, ans); System.out.println(ans==(n+1)?-1:ans); } } } ",0
1136,"import java.util.Scanner; public class Menorah {     static int MOD9= 1000000000;     public static void main(String[] args){         Scanner sc= new Scanner(System.in);         int numberTest=sc.nextInt();         while(numberTest-->0){             int n=sc.nextInt();             char[] s=new char[n+5];             char[] t=new char[n+5];             String ss=sc.next();             String tt=sc.next();             s=ss.toCharArray();             t=tt.toCharArray();             int cntax = 0, cntbx = 0, same = 0;             int ans=MOD9;             for(int i=0; i<n; i++){                 if(s[i]=='1')cntax++;                 if(t[i]=='1')cntbx++;                 if(s[i]==t[i])same++;             }             if(same==n){                 System.out.println(0);                 continue;             }             else if (cntax==0){                 System.out.println(-1);                 continue;             }             if(cntax==cntbx){                 ans=Math.min(ans,n-same);             }             if(n-cntax+1==cntbx)ans=Math.min(ans,same);             if(ans<MOD9) System.out.println(ans);             else System.out.println(-1);         }     } } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.*; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         TaskA solver = new TaskA();         int t;         t = in.nextInt();                  while (t > 0) {             solver.call(in,out);             t--;         }         out.close();     }     static class TaskA {         public void call(InputReader in, PrintWriter out) {             int n, _00 = 0, _01 = 0, _11 = 0, _10 = 0;             n = in.nextInt();             char[] s = in.next().toCharArray();             char[] s1 = in.next().toCharArray();             for (int i = 0; i < n; i++) {                 if(s[i]==s1[i]){                     if(s[i]=='0'){                         _00++;                     }                     else{                         _11++;                     }                 }                 else{                     if(s[i]=='0'){                         _01++;                     }                     else{                         _10++;                     }                 }             }             int ans = Integer.MAX_VALUE;             if(_10 ==_01){                 ans = 2*_01;             }             if(_11 == _00 + 1){                 ans = Math.min(ans, 2*_00 + 1);             }             if(ans == Integer.MAX_VALUE){                 out.println(-1);             }             else{                 out.println(ans);             }         }     }                                   static final Random random=new Random();           } ",0
1137,"import java.util.Scanner; public class Menorah {     static int MOD9= 1000000000;     public static void main(String[] args){         Scanner sc= new Scanner(System.in);         int numberTest=sc.nextInt();         while(numberTest-->0){             int n=sc.nextInt();             char[] s=new char[n+5];             char[] t=new char[n+5];             String ss=sc.next();             String tt=sc.next();             s=ss.toCharArray();             t=tt.toCharArray();             int cntax = 0, cntbx = 0, same = 0;             int ans=MOD9;             for(int i=0; i<n; i++){                 if(s[i]=='1')cntax++;                 if(t[i]=='1')cntbx++;                 if(s[i]==t[i])same++;             }             if(same==n){                 System.out.println(0);                 continue;             }             else if (cntax==0){                 System.out.println(-1);                 continue;             }             if(cntax==cntbx){                 ans=Math.min(ans,n-same);             }             if(n-cntax+1==cntbx)ans=Math.min(ans,same);             if(ans<MOD9) System.out.println(ans);             else System.out.println(-1);         }     } } ","import java.util.*; import java.io.*; import java.math.*; public class cf { static PrintWriter pw = new PrintWriter(System.out); public static void main(String[] args) throws IOException, InterruptedException { Scanner sc = new Scanner(System.in); int t = sc.nextInt(); while (t-- > 0) { int n = sc.nextInt(); char[] a = sc.next().toCharArray(); char[] b = sc.next().toCharArray(); int x = 0, y = 0, lit = 0,lit2 = 0; for (int i = 0; i < n; i++) { if (a[i] == '1') lit++; if (b[i] == '1') lit2++; if (a[i] == b[i]) x++; else y++; } if(lit == lit2 || n - lit + 1 == lit2) { if (lit == lit2 && n - lit + 1 == lit2) { pw.println(Math.min(x,y)); }else if(lit == lit2) { pw.println(y); }else { pw.println(x); } }else { pw.println(-1); } } pw.close(); } } ",0
1138,"import java.util.Scanner; public class Menorah {     static int MOD9= 1000000000;     public static void main(String[] args){         Scanner sc= new Scanner(System.in);         int numberTest=sc.nextInt();         while(numberTest-->0){             int n=sc.nextInt();             char[] s=new char[n+5];             char[] t=new char[n+5];             String ss=sc.next();             String tt=sc.next();             s=ss.toCharArray();             t=tt.toCharArray();             int cntax = 0, cntbx = 0, same = 0;             int ans=MOD9;             for(int i=0; i<n; i++){                 if(s[i]=='1')cntax++;                 if(t[i]=='1')cntbx++;                 if(s[i]==t[i])same++;             }             if(same==n){                 System.out.println(0);                 continue;             }             else if (cntax==0){                 System.out.println(-1);                 continue;             }             if(cntax==cntbx){                 ans=Math.min(ans,n-same);             }             if(n-cntax+1==cntbx)ans=Math.min(ans,same);             if(ans<MOD9) System.out.println(ans);             else System.out.println(-1);         }     } } ","import java.util.*; import java.io.*; public class C1615{ static FastScanner fs = null; public static void main(String[] args) { fs = new FastScanner(); PrintWriter out = new PrintWriter(System.out); int t = fs.nextInt(); while (t-->0) { int n = fs.nextInt(); String a = fs.next(); String b = fs.next(); char ch1[] = a.toCharArray(); char ch2[] = b.toCharArray(); int c00 = 0; int c01 = 0; int c10 = 0; int c11 = 0; for(int i=0;i<n;i++){ if(ch1[i]=='0'){ if(ch2[i]=='0'){ c00+=1; } else{ c01+=1; } } else{ if(ch2[i]=='0'){ c10+=1; } else{ c11+=1; } } } int ans = -1; if((c11-c00)==1 || c10==c01){ int s1 = (int)1e7;  int s2 = (int)1e7; if((c11-c00)==1){ s1 = c11+c00; } if(c10==c01) s2 = c10+c01; ans = Math.min(s1,s2);  } out.println(ans); } out.close(); } } ",0
1139,"import java.util.Scanner; public class Menorah {     static int MOD9= 1000000000;     public static void main(String[] args){         Scanner sc= new Scanner(System.in);         int numberTest=sc.nextInt();         while(numberTest-->0){             int n=sc.nextInt();             char[] s=new char[n+5];             char[] t=new char[n+5];             String ss=sc.next();             String tt=sc.next();             s=ss.toCharArray();             t=tt.toCharArray();             int cntax = 0, cntbx = 0, same = 0;             int ans=MOD9;             for(int i=0; i<n; i++){                 if(s[i]=='1')cntax++;                 if(t[i]=='1')cntbx++;                 if(s[i]==t[i])same++;             }             if(same==n){                 System.out.println(0);                 continue;             }             else if (cntax==0){                 System.out.println(-1);                 continue;             }             if(cntax==cntbx){                 ans=Math.min(ans,n-same);             }             if(n-cntax+1==cntbx)ans=Math.min(ans,same);             if(ans<MOD9) System.out.println(ans);             else System.out.println(-1);         }     } } ","import java.util.*; import java.io.*; public class codeforces { public static void main(String[] args) throws Exception { int t=sc.nextInt(); while(t-->0) { int n=sc.nextInt(); char[] a=sc.next().toCharArray(); char[] b=sc.next().toCharArray(); int e0=0; int e1=0; int o0=0; int o1=0; for(int i=0;i<n;i++) { if(a[i]!=b[i]) { if(a[i]=='1') { e1++; }else { e0++; } }else { if(a[i]=='1') { o1++; }else { o0++; } } } int ans=Integer.MAX_VALUE; if(e1==e0) { ans=Math.min(ans, e1+e0); } if(o1==o0+1) { ans=Math.min(ans, o1+o0); } pw.println(ans==Integer.MAX_VALUE?-1:ans); } pw.close(); } static long mod = 1000000007; static Random rn = new Random(); static Scanner sc = new Scanner(System.in); static PrintWriter pw = new PrintWriter(System.out); } ",0
1140,"import java.util.Scanner; public class Menorah {     static int MOD9= 1000000000;     public static void main(String[] args){         Scanner sc= new Scanner(System.in);         int numberTest=sc.nextInt();         while(numberTest-->0){             int n=sc.nextInt();             char[] s=new char[n+5];             char[] t=new char[n+5];             String ss=sc.next();             String tt=sc.next();             s=ss.toCharArray();             t=tt.toCharArray();             int cntax = 0, cntbx = 0, same = 0;             int ans=MOD9;             for(int i=0; i<n; i++){                 if(s[i]=='1')cntax++;                 if(t[i]=='1')cntbx++;                 if(s[i]==t[i])same++;             }             if(same==n){                 System.out.println(0);                 continue;             }             else if (cntax==0){                 System.out.println(-1);                 continue;             }             if(cntax==cntbx){                 ans=Math.min(ans,n-same);             }             if(n-cntax+1==cntbx)ans=Math.min(ans,same);             if(ans<MOD9) System.out.println(ans);             else System.out.println(-1);         }     } } ","import java.util.*; public class Main {     public static void main(String args[]) {         Scanner s = new Scanner(System.in);         int t = s.nextInt();         while (t-- > 0){             int n = s.nextInt();             String a = s.next();             String b = s.next();             int a1 = 0, b1 = 0;             for (char c: a.toCharArray()){                 if (c == '1') a1++;             }             for (char c: b.toCharArray()){                 if (c == '1') b1++;             }             int ans = Integer.MAX_VALUE;             int res = 0;             for (int i = 0; i < n; i++) {                 if (a.charAt(i) != b.charAt(i)) res++;             }             if (a1 == b1) ans = Math.min(ans, res);             if (b1 == n-a1+1) ans = Math.min(ans, n-res);             if (ans == Integer.MAX_VALUE){                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         }     } } ",0
1141,"import java.util.Scanner; public class Menorah {     static int MOD9= 1000000000;     public static void main(String[] args){         Scanner sc= new Scanner(System.in);         int numberTest=sc.nextInt();         while(numberTest-->0){             int n=sc.nextInt();             char[] s=new char[n+5];             char[] t=new char[n+5];             String ss=sc.next();             String tt=sc.next();             s=ss.toCharArray();             t=tt.toCharArray();             int cntax = 0, cntbx = 0, same = 0;             int ans=MOD9;             for(int i=0; i<n; i++){                 if(s[i]=='1')cntax++;                 if(t[i]=='1')cntbx++;                 if(s[i]==t[i])same++;             }             if(same==n){                 System.out.println(0);                 continue;             }             else if (cntax==0){                 System.out.println(-1);                 continue;             }             if(cntax==cntbx){                 ans=Math.min(ans,n-same);             }             if(n-cntax+1==cntbx)ans=Math.min(ans,same);             if(ans<MOD9) System.out.println(ans);             else System.out.println(-1);         }     } } ","import java.util.Arrays; import java.util.Scanner; public class First {     static Scanner sc = new Scanner(System.in);     public static void main(String[] args) {         int t = sc.nextInt();         while (t-- > 0) {             int n = sc.nextInt();             String a = sc.next();             String b = sc.next();             char ch1[] = a.toCharArray();             char ch2[] = b.toCharArray();             int zz = 0;             int oz = 0;             int zo = 0;             int oo = 0;             for (int i = 0; i < n; i++) {                 if (ch1[i] == '0') {                     if (ch2[i] == '0') {                         zz += 1;                     } else {                         oz += 1;                     }                 } else {                     if (ch2[i] == '0') {                         zo += 1;                     } else {                         oo += 1;                     }                 }             }             int ans = -1;             if ((oo - zz) == 1 || zo == oz) {                 int s1 = (int) 1e7;                 int s2 = (int) 1e7;                 if ((oo - zz) == 1) {                     s1 = oo + zz;                 }                 if (zo == oz)                     s2 = zo + oz;                 ans = Math.min(s1, s2);             }             System.out.println(ans);         }     } } ",0
1142,"import java.util.Scanner; public class MinimumGridPath {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int test = scanner.nextInt();         StringBuilder sb = new StringBuilder();         for (int t = 0; t < test; t++) {             int n = scanner.nextInt();             long[] arr = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = scanner.nextLong();             }             long minx = arr[0];             long miny = arr[1];             long min = minx * n + miny * n;             long sumx = arr[0];             long sumy = arr[1];             for(int i=2; i<n; i++) {                 int xc;                 int yc;                 if(i%2 == 0) {                     xc = i/2 + 1;                     yc = i/2;                     sumx += arr[i];                     minx = Math.min(minx, arr[i]);                 } else {                     xc = i/2 + 1;                     yc = i/2 + 1;                     sumy += arr[i];                     miny = Math.min(miny, arr[i]);                 }                 min = Math.min(min, sumx + (n-xc) * minx + sumy + (n-yc) * miny);             }             sb.append(min).append(System.lineSeparator());         }         System.out.println(sb);     } } ","import java.io.*; import java.lang.*; import java.util.*; public class MinGridPath { public static void main(String[] args) { Scanner s=new Scanner(System.in); int t=s.nextInt(); while(t-->0){ int n = s.nextInt(); long[] aa =new long[n]; for(int i=0;i<n;i++) aa[i]=s.nextLong();   long minEven = aa[0]; long minOdd = aa[1]; long sum = aa[0]+aa[1]; long best = n*minEven + n*minOdd; int numOdd = 1; int numEven = 1; for(int i=2; i<n; ++i) { if(i%2 == 0) { minEven = Math.min(aa[i], minEven); numEven++; }else { minOdd = Math.min(aa[i], minOdd); numOdd++; } sum += aa[i]; long score = sum; score += minEven*(n-numEven); score += minOdd*(n-numOdd); best = Math.min(best, score); } System.out.println(best); } } } ",0
1143,"import java.util.Scanner; public class MinimumGridPath {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int test = scanner.nextInt();         StringBuilder sb = new StringBuilder();         for (int t = 0; t < test; t++) {             int n = scanner.nextInt();             long[] arr = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = scanner.nextLong();             }             long minx = arr[0];             long miny = arr[1];             long min = minx * n + miny * n;             long sumx = arr[0];             long sumy = arr[1];             for(int i=2; i<n; i++) {                 int xc;                 int yc;                 if(i%2 == 0) {                     xc = i/2 + 1;                     yc = i/2;                     sumx += arr[i];                     minx = Math.min(minx, arr[i]);                 } else {                     xc = i/2 + 1;                     yc = i/2 + 1;                     sumy += arr[i];                     miny = Math.min(miny, arr[i]);                 }                 min = Math.min(min, sumx + (n-xc) * minx + sumy + (n-yc) * miny);             }             sb.append(min).append(System.lineSeparator());         }         System.out.println(sb);     } } ","import java.io.BufferedReader;  import java.io.IOException;  import java.io.InputStreamReader;  import java.util.Scanner;  import java.util.Random; import java.util.Arrays; import java.util.StringTokenizer;  import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.Collections; import java.util.*; public class C  {      public static void main(String[] args)  {  FastReader sc=new FastReader();  StringBuffer ans=new StringBuffer(); int test=sc.nextInt(); while(test-->0) { int n=sc.nextInt(); long arr[]=new long[n]; for(int i=0;i<n;i++) { arr[i]=sc.nextLong(); } long nn=n; long ep=1; long op=1; long se=arr[0]; long so=arr[1]; long sume=se;long sumo=so; long minm = (se*nn) +(so*nn); for(int i=2;i<n;i++) { if(i%2 == 0) { ++ep; sume+=arr[i]; se=Math.min(se, arr[i]); } else { ++op; sumo+=arr[i]; so=Math.min(so, arr[i]); } long cost = (sume)+(se*(nn-ep)); cost+=((sumo)+(so*(nn-op))); minm=Math.min(cost, minm); } ans.append(minm+""\n""); }     System.out.print(ans); }               static final Random random=new Random();        } ",0
1144,"import java.util.Scanner; public class MinimumGridPath {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         int test = scanner.nextInt();         StringBuilder sb = new StringBuilder();         for (int t = 0; t < test; t++) {             int n = scanner.nextInt();             long[] arr = new long[n];             for (int i = 0; i < n; i++) {                 arr[i] = scanner.nextLong();             }             long minx = arr[0];             long miny = arr[1];             long min = minx * n + miny * n;             long sumx = arr[0];             long sumy = arr[1];             for(int i=2; i<n; i++) {                 int xc;                 int yc;                 if(i%2 == 0) {                     xc = i/2 + 1;                     yc = i/2;                     sumx += arr[i];                     minx = Math.min(minx, arr[i]);                 } else {                     xc = i/2 + 1;                     yc = i/2 + 1;                     sumy += arr[i];                     miny = Math.min(miny, arr[i]);                 }                 min = Math.min(min, sumx + (n-xc) * minx + sumy + (n-yc) * miny);             }             sb.append(min).append(System.lineSeparator());         }         System.out.println(sb);     } } ","import java.util.*; public class Main { static Scanner scan = new Scanner(System.in); static int[] readArray(int[] x) { for(int i=0; i<x.length; ++i) x[i] = scan.nextInt(); return x; } static long[] readArray(long[] x) { for(int i=0; i<x.length; ++i) x[i] = scan.nextLong(); return x; } public static void main(String[] args) { int t = scan.nextInt(); for(int it=0; it<t; ++it) { int n = scan.nextInt(); long[] aa = readArray(new long[n]); long minEven = aa[0]; long minOdd = aa[1]; long sum = aa[0]+aa[1]; long best = n*minEven + n*minOdd; int numOdd = 1; int numEven = 1; for(int i=2; i<n; ++i) { if(i%2 == 0) { minEven = Math.min(aa[i], minEven); numEven++; }else { minOdd = Math.min(aa[i], minOdd); numOdd++; } sum += aa[i]; long score = sum; score += minEven*(n-numEven); score += minOdd*(n-numOdd); best = Math.min(best, score); } System.out.println(best); } } } ",0
1145,"import java.util.Scanner; public class Subsequence { private static Scanner sc = new Scanner(System.in); public static void main(String args[]) { int t = sc.nextInt(); while(t-->0) { int n = sc.nextInt(); int a[] = new int[n]; int b[] =  new int[n]; for(int i=0;i<n;i++) { a[i]= sc.nextInt(); } if(n%2==0) { calculateB(a,b,n); } else { calculateB(a,b,n-3); if (a[n - 2] + a[n - 3] != 0) { b[n - 3] = -a[n - 1]; b[n - 2] = -a[n - 1]; b[n - 1] = a[n - 2] + a[n - 3]; } else if (a[n - 2] + a[n - 1] != 0) { b[n - 3] = a[n - 2] + a[n - 1]; b[n - 2] = -a[n - 3]; b[n - 1] = -a[n - 3]; } else { b[n - 3] = -a[n - 2]; b[n - 2] = a[n - 3] + a[n - 1]; b[n - 1] = -a[n - 2]; } } for(int i=0;i<n;i++) { System.out.print(b[i] + "" ""); } System.out.println(); } } private static void calculateB(int[] a, int[] b, int n) { for(int i=0;i<n-1;i=i+2) { b[i] = -a[i+1]; b[i+1] = a[i]; } } } ","import java.io.*; import java.util.*; public class M { static Scanner scanner=new Scanner(System.in); public static void main(String[] args) { int t=scanner.nextInt(); while(t-->0) { int n=scanner.nextInt(); int a[]=new int [n]; int b[]=new int [n]; for(int i=0;i<n;i++)a[i]=scanner.nextInt(); for(int i=0;i+1<n;i+=2) { b[i]=-a[i+1]; b[i+1]=a[i]; } if(n%2==1) { int x=a[n-1],y=a[n-2],z=a[n-3]; if(x+y!=0) { b[n-3]=x+y; b[n-2]=-z; b[n-1]=-z; }else if(y+z!=0) { b[n-1]=y+z; b[n-2]=-x; b[n-3]=-x; }else { b[n-2]=x+z; b[n-1]=-y; b[n-3]=-y; } } StringBuilder sb=new StringBuilder(); for(int i=0;i<n;i++)sb.append(b[i]+"" ""); System.out.println(sb); } } } ",1
1146,"import java.util.Scanner; public class Subsequence { private static Scanner sc = new Scanner(System.in); public static void main(String args[]) { int t = sc.nextInt(); while(t-->0) { int n = sc.nextInt(); int a[] = new int[n]; int b[] =  new int[n]; for(int i=0;i<n;i++) { a[i]= sc.nextInt(); } if(n%2==0) { calculateB(a,b,n); } else { calculateB(a,b,n-3); if (a[n - 2] + a[n - 3] != 0) { b[n - 3] = -a[n - 1]; b[n - 2] = -a[n - 1]; b[n - 1] = a[n - 2] + a[n - 3]; } else if (a[n - 2] + a[n - 1] != 0) { b[n - 3] = a[n - 2] + a[n - 1]; b[n - 2] = -a[n - 3]; b[n - 1] = -a[n - 3]; } else { b[n - 3] = -a[n - 2]; b[n - 2] = a[n - 3] + a[n - 1]; b[n - 1] = -a[n - 2]; } } for(int i=0;i<n;i++) { System.out.print(b[i] + "" ""); } System.out.println(); } } private static void calculateB(int[] a, int[] b, int n) { for(int i=0;i<n-1;i=i+2) { b[i] = -a[i+1]; b[i+1] = a[i]; } } } ","import java.io.BufferedReader;  import java.io.IOException;  import java.io.InputStreamReader;  import java.util.Scanner;  import java.util.StringTokenizer; import java.util.*; public class codeforcesB{     public static void main(String args[]){     FastReader sc=new FastReader();     StringBuilder sb=new StringBuilder();     int t=sc.nextInt();     while(t-->0){       int n=sc.nextInt();       int ar[]=new int[n];       int sum=0;       for(int i=0;i<n;i++){ar[i]=sc.nextInt();}       if(n%2==0){           for(int i=0;i<n;i++){               if(i%2==0){sb.append(-1*ar[i+1]+"" "");}               else{sb.append(ar[i-1]+"" "");}             }                     }       else{           if(ar[1]+ar[0]!=0){           sb.append(ar[2]+"" ""+ar[2]+"" ""+-1*(ar[1]+ar[0])+"" "");}           else{               if(ar[2]+ar[1]!=0){                   sb.append(-1*(ar[2]+ar[1])+"" ""+ar[0]+"" ""+ar[0]+"" "");               }               else{                   sb.append(ar[1]+"" ""+-1*(ar[2]+ar[0])+"" ""+ar[1]+"" "");               }           }           for(int i=3;i<n;i++){               if(i%2==1){sb.append(-1*ar[i+1]+"" "");}               else{sb.append(ar[i-1]+"" "");}             }         }       sb.append(""\n"");     }     System.out.print(sb.toString());    } } ",0
1147,"import java.util.Scanner; public class Subsequence { private static Scanner sc = new Scanner(System.in); public static void main(String args[]) { int t = sc.nextInt(); while(t-->0) { int n = sc.nextInt(); int a[] = new int[n]; int b[] =  new int[n]; for(int i=0;i<n;i++) { a[i]= sc.nextInt(); } if(n%2==0) { calculateB(a,b,n); } else { calculateB(a,b,n-3); if (a[n - 2] + a[n - 3] != 0) { b[n - 3] = -a[n - 1]; b[n - 2] = -a[n - 1]; b[n - 1] = a[n - 2] + a[n - 3]; } else if (a[n - 2] + a[n - 1] != 0) { b[n - 3] = a[n - 2] + a[n - 1]; b[n - 2] = -a[n - 3]; b[n - 1] = -a[n - 3]; } else { b[n - 3] = -a[n - 2]; b[n - 2] = a[n - 3] + a[n - 1]; b[n - 1] = -a[n - 2]; } } for(int i=0;i<n;i++) { System.out.print(b[i] + "" ""); } System.out.println(); } } private static void calculateB(int[] a, int[] b, int n) { for(int i=0;i<n-1;i=i+2) { b[i] = -a[i+1]; b[i+1] = a[i]; } } } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef {                                                                                                                          public static void main (String[] args) throws java.lang.Exception {                                         FastReader scan = new FastReader(); PrintWriter pw = new PrintWriter(System.out);         int t = scan.nextInt();         while(t-->0){          int n= scan.nextInt();          long a[] = new long[n];          for(int i=0;i<n;i++){              a[i] = scan.nextLong();          }          long b[] = new long[n];          int i=0;          if(n%2==1){            if(a[0]+a[1]!=0){            b[0] = -1*a[2];            b[1] = -1*a[2];            b[2] = a[0]+a[1];}            else if(a[0]+a[2]!=0){             b[0] = -1*a[1];             b[2] = -1*a[1];             b[1] = a[0]+a[2];            }            else{             b[2] = -1*a[0];             b[1] = -1*a[0];             b[0] = a[2]+a[1];             }            i = 3;          }          else{              b[0] = -a[1];              b[1] = a[0];              i=2;          }          while(i<n-1){              b[i] = -a[i+1];              b[i+1] = a[i];              i = i+2;          }          for(int j=0;j<n;j++){              pw.print(b[j]+"" "");          }          pw.println();          pw.flush();         }          }      } ",0
1148,"import java.util.Scanner; public class Subsequence { private static Scanner sc = new Scanner(System.in); public static void main(String args[]) { int t = sc.nextInt(); while(t-->0) { int n = sc.nextInt(); int a[] = new int[n]; int b[] =  new int[n]; for(int i=0;i<n;i++) { a[i]= sc.nextInt(); } if(n%2==0) { calculateB(a,b,n); } else { calculateB(a,b,n-3); if (a[n - 2] + a[n - 3] != 0) { b[n - 3] = -a[n - 1]; b[n - 2] = -a[n - 1]; b[n - 1] = a[n - 2] + a[n - 3]; } else if (a[n - 2] + a[n - 1] != 0) { b[n - 3] = a[n - 2] + a[n - 1]; b[n - 2] = -a[n - 3]; b[n - 1] = -a[n - 3]; } else { b[n - 3] = -a[n - 2]; b[n - 2] = a[n - 3] + a[n - 1]; b[n - 1] = -a[n - 2]; } } for(int i=0;i<n;i++) { System.out.print(b[i] + "" ""); } System.out.println(); } } private static void calculateB(int[] a, int[] b, int n) { for(int i=0;i<n-1;i=i+2) { b[i] = -a[i+1]; b[i+1] = a[i]; } } } ","import java.util.Scanner; public class Subsequence { private static Scanner sc = new Scanner(System.in); public static void main(String args[]) { int t = sc.nextInt(); while(t-->0) { int n = sc.nextInt(); int a[] = new int[n]; int b[] =  new int[n]; for(int i=0;i<n;i++) { a[i]= sc.nextInt(); } if(n%2==0) { calculateB(a,b,n); } else { calculateB(a,b,n-3); if (a[n - 2] + a[n - 3] != 0) { b[n - 3] = -a[n - 1]; b[n - 2] = -a[n - 1]; b[n - 1] = a[n - 2] + a[n - 3]; } else if (a[n - 2] + a[n - 1] != 0) { b[n - 3] = a[n - 2] + a[n - 1]; b[n - 2] = -a[n - 3]; b[n - 1] = -a[n - 3]; } else { b[n - 3] = -a[n - 2]; b[n - 2] = a[n - 3] + a[n - 1]; b[n - 1] = -a[n - 2]; } } for(int i=0;i<n;i++) { System.out.print(b[i] + "" ""); } System.out.println(); } } private static void calculateB(int[] a, int[] b, int n) { for(int i=0;i<n-1;i=i+2) { b[i] = -a[i+1]; b[i+1] = a[i]; } } } ",1
1149,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.sql.SQLOutput; import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder: "");         double radius=sc.nextDouble();         int length=sc.nextInt();         double area=radius*radius*3.14159;         System.out.println(""The area is ""+area);         System.out.println(""The volume is ""+area*length);     } } ",0
1150,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.text.DecimalFormat; import java.util.Scanner; public class Soal2 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         DecimalFormat dfArea = new DecimalFormat(""#.####"");         DecimalFormat dfVolume = new DecimalFormat(""#.#"");         System.out.print(""Enter the radius and length of a cylinder: "");         double radius = sc.nextDouble();         double panjang = sc.nextDouble();         System.out.println(""The area is "" + dfArea.format((radius*radius*3.14159)));         System.out.println(""The volume is ""+ dfVolume.format(((radius*radius*3.14159)*panjang)));     }      } ",0
1151,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.text.DecimalFormat; import java.util.Scanner; public class T02 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder :"");         double radius = s.nextDouble();         double length = s.nextDouble();         double area = radius *radius * 3.14159;         DecimalFormat df = new DecimalFormat("".####"");         DecimalFormat df2= new DecimalFormat("".#"");         double volume = area * length;         System.out.println(""The area is ""+df.format(area));         System.out.println(""The volume is ""+df2.format(volume));     } } ",0
1152,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.text.DecimalFormat; import java.util.Scanner; public class t02 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder : "");         double radius = sc.nextDouble();         double length = sc.nextDouble();         double area = radius * radius * 3.14159;         double volume = (radius * radius * 3.14159) * length;         DecimalFormat areaFormat = new DecimalFormat(""#.#####"");         DecimalFormat volumeFormat = new DecimalFormat(""#.#"");         System.out.println(""The area is "" + areaFormat.format(area));         System.out.println(""The volume is "" + volumeFormat.format(volume));     } } ",0
1153,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.*; public class L2 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder: "");         double jari2 = input.nextDouble();         double panjang = input.nextDouble();         double luas = jari2 * jari2 * 3.14159;         double total = luas * panjang;         System.out.println(""The area is "" + luas);         System.out.println(""The volume of the cylinder is "" + total);     } } ",1
1154,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.*; public class L3 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double jari2 = 0;         double panjang = 0;         System.out.print(""Enter the radius and length of a cylinder: "");         jari2 = input.nextDouble();         panjang = input.nextDouble();         double luas = jari2 * jari2 * 3.14159;         double total = luas * panjang;         System.out.print(""The area is "" + luas + "" , "");         System.out.println(""The volume of the cylinder is "" + total);     } } ",1
1155,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.*; public class L4 {     public static double hitLuas(double jari2) {         return jari2 * jari2 * 3.14159;     }     public static double total(double luas, double panjang) {         return luas * panjang;     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double jari2 = 0;         double panjang = 0;         System.out.print(""Enter the radius and length of a cylinder: "");         jari2 = input.nextDouble();         panjang = input.nextDouble();         double luas = hitLuas(jari2);         double total = total(luas,panjang);                  System.out.print(""The area is "" + luas + "" , "");         System.out.println(""The volume of the cylinder is "" + total);     } } ",1
1156,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.*; public class L5 {     public static double hitLuas(double jari2) {         return jari2 * jari2 * 3.14159;     }     public static double total(double luas, double panjang) {         return luas * panjang;     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double jari2, panjang;         double luas, total;         System.out.print(""Enter the radius and length of a cylinder: "");         jari2 = input.nextDouble();         panjang = input.nextDouble();         luas = hitLuas(jari2);         total = total(luas, panjang);         System.out.print(""The area is "" + luas + "" , "");         System.out.println(""The volume of the cylinder is "" + total);     } } ",1
1157,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.*; public class L6 {     public static double hitLuas(double jari2) {         return jari2 * jari2 * 3.14159;     }     public static double total(double luas, double panjang) {         return luas * panjang;     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double jari2, panjang;         double luas, total;         jari2 = 0;         panjang = 0;         System.out.print(""Enter the radius and length of a cylinder: "");         for (int i = 0; i < 1; i++) {             jari2 = input.nextDouble();             panjang = input.nextDouble();         }         luas = hitLuas(jari2);         total = total(luas, panjang);         System.out.print(""The area is "" + luas + "" , "");         System.out.println(""The volume of the cylinder is "" + total);     } } ",1
1158,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; import java.text.DecimalFormat; public class T02 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double radius, length, area, volume;                  System.out.print(""Enter the radius and length of a cylinder: "");         radius = sc.nextDouble();         length = sc.nextDouble();                  area = radius * radius * 3.14159;         volume = area * length ;                  DecimalFormat a = new DecimalFormat(""0.0000"");         DecimalFormat v = new DecimalFormat(""0.0"");                  System.out.println(""The area is "" + a.format(area));         System.out.println(""The volume is "" + v.format(volume));     } } ",0
1159,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2 {          public static double hitungArea(double r) {         return r * r * Math.PI;     }          public static double hitungVolume(double area, double l) {         return area * l;     }          public static void main(String[] args) {                  Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double r = input.nextDouble();         double l = input.nextDouble();                  double area = hitungArea(r);         double volume = hitungVolume(area, l);         System.out.println(""The area is "" + area);         System.out.println(""The volume of the cylinder is "" + volume);     } } ",1
1160,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2 {     public static double hitungArea(double r) {         return r * r * Math.PI;     }          public static double hitungVolume(double r, double l) {         return hitungArea(r) * l;     }          public static void main(String[] args) {                  Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double r = input.nextDouble();         double l = input.nextDouble();                  System.out.println(""The area is "" + hitungArea(r));         System.out.println(""The volume of the cylinder is "" + hitungVolume(r, l));     } } ",1
1161,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2 {     public static double hitungArea(double r) {         return r * r * Math.PI;     }          public static void main(String[] args) {                  Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double r = input.nextDouble();         double l = input.nextDouble();                  System.out.println(""The area is "" + hitungArea(r));         System.out.println(""The volume of the cylinder is "" + hitungArea(r)*l);     } } ",1
1162,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double r = input.nextDouble();         double l = input.nextDouble();         System.out.println(""The area is "" + r*r*Math.PI);         System.out.println(""The volume of the cylinder is "" + r*r*Math.PI*l);     } } ",1
1163,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2 {     public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ",1
1164,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ",1
1165,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2L1 {               public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");                  double radius = input.nextDouble();         double length = input.nextDouble();                  double area = radius * radius * 3.14159;                  double volume = area * length;                  System.out.println(""The area is "" + area);                  System.out.println(""The volume of the cylinder is "" + volume);     }      } ",1
1166,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2L2 {               public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");                  float radius = in.nextFloat();         float length = in.nextFloat();                  double luas = radius * radius * 3.14159;                  double volume = luas * length;                  System.out.println(""The area is "" + luas);                  System.out.println(""The volume of the cylinder is "" + volume);     }      } ",1
1167,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2L3 {               public static void main(String[] args) {                  System.out.print(""Enter the radius and length of a cylinder: "");         Scanner in = new Scanner(System.in);         double radius = in.nextDouble();         double length = in.nextDouble();                  double luas = radius * radius * 3.14159;                  System.out.println(""The area is "" + luas);                  double volume = luas * length;                  System.out.println(""The volume of the cylinder is "" + volume);     }      } ",1
1168,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2L4 {               public static void main(String[] args) {                  System.out.print(""Enter the radius and length of a cylinder: "");         Scanner in = new Scanner(System.in);         float radius = in.nextFloat();         float length = in.nextFloat();                  double luas = hitungLuas(radius);                  System.out.println(""The area is "" + luas);                  double volume = hitungVolume(luas, length);                  System.out.println(""The volume of the cylinder is "" + volume);     }          private static double hitungLuas(float radius){         return radius * radius * 3.14159;     }          private static double hitungVolume(double luas, float length){         return luas * length;     } } ",1
1169,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2L5 {               public static void main(String[] args) {                  System.out.print(""Enter the radius and length of a cylinder: "");         Scanner in = new Scanner(System.in);                  float input = in.nextFloat();                  double luas = hitungLuas(input);                  input = in.nextFloat();                  System.out.println(""The area is "" + luas);                  double volume = hitungVolume(luas, input);                  System.out.println(""The volume of the cylinder is "" + volume);     }          private static double hitungLuas(float radius){         return radius * radius * 3.14159;     }          private static double hitungVolume(double luas, float length){         return luas * length;     } } ",1
1170,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Kasus2L6 {               public static void main(String[] args) {                  System.out.print(""Enter the radius and length of a cylinder: "");         Scanner in = new Scanner(System.in);                  float input = in.nextFloat();                  double luas = hitungLuas(input);                  input = in.nextFloat();                  System.out.println(""The area is "" + luas);                  System.out.println(""The volume of the cylinder is "" + hitungVolume(luas, input));     }          private static double hitungLuas(float radius){         return radius * radius * 3.14159;     }          private static double hitungVolume(double luas, float length){         return luas * length;     } } ",1
1171,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class L1 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area + "", ""); System.out.print(""The volume of the cylinder is "" + volume);     } } ",1
1172,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Level1 {     public static void main(String[] args)      {         Scanner input = new Scanner(System.in);                           System.out.print(""Enter the radius and length of a cylinder: "");         double radius = input.nextDouble();         double length = input.nextDouble();                  double area = radius * radius * 3.14159;         double volume = area * length;         System.out.println(""The area is "" + area);         System.out.println(""The volume of the cylinder is "" + volume);     } } ",1
1173,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Level5  {     public static void main(String[] args)      {         Scanner input = new Scanner(System.in);         double radius, tinggi;                           System.out.print(""Enter the radius and length of a cylinder: "");         radius = input.nextDouble();         tinggi = input.nextDouble();         hitung(radius, tinggi);     }     private static void hitung(double radius, double tinggi)      {         double area = radius * radius * 3.14159;         double volume = radius * radius * 3.14159 * tinggi;         System.out.println(""The area is "" + area);         System.out.println(""The volume of the cylinder is "" + volume);     } } ",1
1174,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {          public static void main(String[] args) {         System.out.print(""Enter the radius and length of a cylinder:"");         Scanner sc = new Scanner(System.in);         double radius = sc.nextDouble();         int length = sc.nextInt();         double area = radius*radius*3.14159;         double volume = length*radius;         System.out.println(""The area is ""+area);         System.out.println(""The volume is ""+volume);              }      } ",0
1175,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     private static double radius,length,areas,volumes;          public static void main(String[] args) {                  System.out.print(""Enter the radius and length of a cylinder: "");         Scanner input = new Scanner(System.in);         radius = input.nextDouble();         length = input.nextDouble();         areas = radius * radius * 3.14159;         volumes = areas * length;         System.out.println(""The area is "" + areas);         System.out.println(""The volume of the cylinder is "" + volumes);     } } ",1
1176,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     private static double radius,length,areas,volumes;          public static void main(String[] args) {                  System.out.print(""Enter the radius and length of a cylinder: "");         Scanner input = new Scanner(System.in);         radius = input.nextDouble();         length = input.nextDouble();         areas = radius * radius * 3.14159;         volumes = areas * length;         cetak();     }     public static void cetak() {         System.out.println(""The area is "" + areas);         System.out.println(""The volume of the cylinder is "" + volumes);     } } ",1
1177,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     private static double radius,length,areas,volumes;          public static void main(String[] args) {                  System.out.print(""Enter the radius and length of a cylinder: "");         Scanner input = new Scanner(System.in);         radius = input.nextDouble();         length = input.nextDouble();         areas = radius * radius * 3.14159;         volumes = areas * length;         cetak();     }     public static void cetak() {         System.out.println(""The area is "" + areas);         System.out.println(""The volume of the cylinder is "" + volumes);     } } ",1
1178,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     private static double radius,length,areas,volumes;          public static void main(String[] args) {                  System.out.print(""Enter the radius and length of a cylinder: "");         Scanner input = new Scanner(System.in);         radius = input.nextDouble();         length = input.nextDouble();         areas = radius * radius * 3.14159;         volumes = areas * length;         cetak();     }     public static void cetak() {         System.out.println(""The area is "" + areas);         System.out.println(""The volume of the cylinder is "" + volumes);     } } ",1
1179,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {             Scanner input = new Scanner(System.in);                                       System.out.print(""Enter the radius and length of a cylinder: "");              double radius = input.nextDouble();             double length = input.nextDouble();                          double area = radius * radius * 3.14159;             double volume = area * length;                          System.out.println(""The area is "" + area);             System.out.println(""The volume of the cylinder is "" + volume); } } ",1
1180,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {             Scanner input = new Scanner(System.in);                                       System.out.print(""Enter the radius and length of a cylinder: "");              double radius = input.nextDouble();             double length = input.nextDouble();                          double areas = radius * radius * 3.14159;             double volumes = areas * length;                          System.out.println(""The area is "" + areas);             System.out.println(""The volume of the cylinder is "" + volumes); } } ",1
1181,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");                  double jejari = input.nextDouble();         double panjang = input.nextDouble();                           System.out.println(""The area is "" + hitungArea(jejari));         System.out.println(""The volume of the cylinder is "" + hitungVolume(panjang, jejari));         }          public static double hitungArea(double jejari){         double area;         return area = jejari * jejari * 3.14159;     }          public static double hitungVolume(double panjang, double jejari){         double volume;         return volume = hitungArea(jejari) * panjang;     } } ",1
1182,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");                  double jejari, panjang;         jejari = input.nextDouble();         panjang = input.nextDouble();                           System.out.println(""The area is "" + hitungArea(jejari));         System.out.println(""The volume of the cylinder is "" + hitungVolume(panjang, jejari));         }          public static double hitungArea(double jejari){         double area;         return area = Math.pow(jejari, 2) * 3.14159;     }          public static double hitungVolume(double panjang, double jejari){         double volume;         return volume = hitungArea(jejari) * panjang;     } } ",1
1183,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");                  double jejari, panjang;         jejari = input.nextDouble();         panjang = input.nextDouble();                           System.out.println(""The area is "" + hitungArea(jejari));         System.out.println(""The volume of the cylinder is "" + hitungVolume(panjang, jejari));         }          public static double hitungArea(double jejari){         double area;         return area = jejari * jejari * 3.14159;     }          public static double hitungVolume(double panjang, double jejari){         double volume;         return volume = hitungArea(jejari) * panjang;     } } ",1
1184,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");                 double jejari = input.nextDouble();         double panjang = input.nextDouble();         double area = jejari * jejari * 3.14159;         double volume = area * panjang;                  System.out.println(""The area is "" + area);         System.out.println(""The volume of the cylinder is "" + volume);         } } ",1
1185,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double jejari = input.nextDouble();         double length = input.nextDouble();         double area = jejari * jejari * 3.14159;         double volume = area * length;                  System.out.println(""The area is "" + area);         System.out.println(""The volume of the cylinder is "" + volume);         } } ",1
1186,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double radius = input.nextDouble();         double length = input.nextDouble();         double area = radius * radius * 3.14159;         double volume = area * length;                  System.out.println(""The area is "" + area);         System.out.println(""The volume of the cylinder is "" + volume);         } } ",1
1187,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class No2 {          public static void main(String[] args) {                  double radius, length, area, volume;         Scanner sc = new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder: "");         radius = sc.nextDouble();         length = sc.nextDouble();         area = radius * radius * 3.14159;         volume = area * length;         System.out.println(""The area is "" + area);         System.out.println(""The volume is "" + volume);              }      } ",0
1188,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class Nomor2_2451041557A22145B3701B0184109CAB013 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder : "");         double radius = sc.nextDouble();         double length = sc.nextDouble();         double area = (radius * radius) * 3.14159;         double volume = area * length;         System.out.println(""The area is : "" + area);         System.out.println(""The volume is : "" + volume);     }      } ",0
1189,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class T02 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double radius, length, area, volume;         System.out.print(""Enter the radius and length of a cylinder: "");         radius = sc.nextDouble();         length = sc.nextDouble();         area = radius * radius * 3.14159;         volume = area * length;         System.out.println(""The area is "" + area);         System.out.println(""The volume is "" + volume);     }      } ",0
1190,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class T02 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder: "");         float r = s.nextFloat();         float l = s.nextFloat();         System.out.println(""The area is "" + r * r * 3.14159);         System.out.println(""The volume is "" + (r * r * 3.14159) * l);     } } ",0
1191,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class T02 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder : "");         double radius = sc.nextDouble();         double length = sc.nextDouble();         double area = radius * radius * 3.14159;         double volume = area * length;         System.out.println(""The area is "" + area);         System.out.println(""The volume "" + volume);     } } ",0
1192,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class T02 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter the radius and length of a cylinder:"");         double radius = sc.nextDouble();         double length = sc.nextDouble();         double area = Math.pow(radius, 2) * Math.PI;         double volume = area * length;         System.out.println(""The area is "" + area);         System.out.println(""The volume is "" + volume);                       } } ",0
1193,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class T02 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter the radius and the length of the cilinder : "");         double rad = sc.nextDouble();         double length = sc.nextDouble();         double area = Math.PI * rad * rad;         double volume = Math.PI * rad * rad* length;         System.out.println(""The area is "" + area);         System.out.println(""The volume is "" + volume);     } } ",0
1194,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class T02 {     public static void main(String[] args){                  Scanner sc = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double radius = sc.nextDouble();         double length = sc.nextDouble();                  double area = radius * radius * 3.14159;         double volume = area * length;                  System.out.println(""The area is "" + (float)area);         System.out.printf(""The volume is %.1f"", volume);         System.out.println();              } } ",0
1195,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class inout{     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder : "");         double rad = sc.nextDouble();         double l = sc.nextDouble();         double ar = rad*rad*3.14159;         double vol = ar*l;         System.out.println(""The area is "" + ar);         System.out.println(""The volume of the cylinder is "" + vol);     } } ",1
1196,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class inout{     public static void main(String[] args) {         double rad,l,ar,vol;         Scanner sc = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder : "");         rad = sc.nextDouble();         l = sc.nextDouble();         ar = hitungAr(rad);         vol = hitungVol(ar,l);         System.out.println(""The area is "" + ar);         System.out.println(""The volume of the cylinder is "" + vol);           }          public static double hitungVol(double ar,double l)     {         return ar*l;     }          public static double hitungAr(double rad)     {         return rad*rad*3.14159;     } }",1
1197,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class inout{     public static void main(String[] args) {         double rad,l,ar,vol;         Scanner sc = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder : "");         rad = sc.nextDouble();         l = sc.nextDouble();         ar = hitungAr(rad);         vol = hitungVol(ar,l);         System.out.println(""The area is "" + ar);         System.out.println(""The volume of the cylinder is "" + vol);           }          public static double hitungVol(double ar,double l)     {         return ar*l;     }          public static double hitungAr(double rad)     {         return rad*rad*3.14159;     } }",1
1198,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class inout{     public static void main(String[] args) {         double rad,l,ar,vol;         Scanner sc = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder : "");         rad = sc.nextDouble();         l = sc.nextDouble();         ar = rad*rad*3.14159;         vol = ar*l;         System.out.println(""The area is "" + ar);         System.out.println(""The volume of the cylinder is "" + vol);     } } ",1
1199,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } "," import java.util.Scanner; public class inputoutput{     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder : "");         double radius = input.nextDouble();         double length = input.nextDouble();         double area = radius*radius*3.14159;         double volume = area*length;         System.out.println(""The area is "" + area);         System.out.println(""The volume of the cylinder is "" + volume);     } } ",1
1200,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.*; class inputoutput{ public static void main(String[] args){ Scanner masukan = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double rad = masukan.nextDouble(); double panjang = masukan.nextDouble(); double a = rad * rad * 3.14159; double vol = a * panjang; System.out.println(""The area is "" + a); System.out.println(""The volume of the cylinder is "" + vol); } }",1
1201,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.*; class inputoutput{ public static void main(String[] args){ Scanner masukan = new Scanner(System.in); double rad,panjang; System.out.print(""Enter the radius and length of a cylinder: ""); rad = masukan.nextDouble(); panjang = masukan.nextDouble(); double a; a = rad * rad * 3.14159; double vol; vol = a * panjang; System.out.println(""The area is "" + a); System.out.println(""The volume of the cylinder is "" + vol); } }",1
1202,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.*; class inputoutput{ static double rad,panjang; static Scanner masukan = new Scanner(System.in); static void input() { rad = masukan.nextDouble(); panjang = masukan.nextDouble(); } static double hitArea() { return Math.pow(rad,2) * 3.14159; } public static void main(String[] args){ System.out.print(""Enter the radius and length of a cylinder: ""); input(); double vol, a; a = hitArea(); vol = a * panjang; System.out.println(""The area is "" + a); System.out.println(""The volume of the cylinder is "" + vol); } }",1
1203,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.*; class inputoutput{ static double rad,panjang; static void input() { Scanner masukan = new Scanner(System.in); rad = masukan.nextDouble(); panjang = masukan.nextDouble(); } static double hitArea() { return rad * rad * 3.14159; } public static void main(String[] args){ System.out.print(""Enter the radius and length of a cylinder: ""); input(); double a; a = hitArea(); double vol; vol = a * panjang; System.out.println(""The area is "" + a); System.out.println(""The volume of the cylinder is "" + vol); } }",1
1204,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.*; class inputoutput{ static double rad,panjang; static void input() { Scanner masukan = new Scanner(System.in); rad = masukan.nextDouble(); panjang = masukan.nextDouble(); } static double hitArea() { return rad * rad * 3.14159; } public static void main(String[] args){ System.out.print(""Enter the radius and length of a cylinder: ""); input(); double vol, a; a = hitArea(); vol = a * panjang; System.out.println(""The area is "" + a); System.out.println(""The volume of the cylinder is "" + vol); } }",1
1205,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Level2 {               public static void main(String[] args) {         Scanner in = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double rad = in.nextDouble();         double panjang = in.nextDouble();                  double luas = rad * rad * 3.14159;         double vol = luas * panjang;         System.out.println(""The area is "" + luas);         System.out.println(""The volume of the cylinder is "" + vol);     } } ",1
1206,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Level3  {     public static void main(String[] args)      {         Scanner x = new Scanner(System.in);         double vol = 0;         double luasAlas = 0;                  System.out.print(""Enter the radius and length of a cylinder: "");         double radius = x.nextDouble();         double length = x.nextDouble();                  luasAlas = radius * radius * 3.14159;         vol = luasAlas * length;                  System.out.println(""The area is "" + luasAlas);         System.out.println(""The volume of the cylinder is "" + vol);     } } ",1
1207,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Level4 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double radius = input.nextDouble();         double tinggi = input.nextDouble();                  System.out.println(""The area is "" + hitungLuasAlas(radius));         System.out.println(""The volume of the cylinder is "" + hitungVolume(hitungLuasAlas(radius), tinggi));     }          public static double hitungLuasAlas(double rad) {         double luasAlas = rad * rad * 3.14159;         return luasAlas;     }          public static double hitungVolume(double luasAlas, double tinggi) {         double volume = luasAlas * tinggi;         return volume;     } } ",1
1208,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Level6 {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         double radius, tinggi;                  System.out.print(""Enter the radius and length of a cylinder: "");         radius = in.nextDouble(); tinggi = in.nextDouble();         count(radius, tinggi);     }     private static void count(double rad, double height) {         System.out.println(""The area is "" + Math.pow(rad, 2) * Math.PI);         System.out.println(""The volume of the cylinder is "" + Math.pow(rad, 2) * Math.PI * height);     } } ",1
1209,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Main {     public static double area(double r){         double area;         area=r*r*3.14159;         return area;     }     public static double volume(double len,double a){         double volume;         volume=len*a;         return volume;     }     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);                  double r,len,a;         System.out.print(""Enter the radius and length of a cylinder: "");         r = scan.nextDouble();         len = scan.nextDouble();         a = area(r);                  System.out.println(""The area is "" + area(r));         System.out.println(""The volume of the cylinder is "" + volume(len,a));     } }   ",1
1210,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Main {     public static double area(double r){         double area;         area=r*r*3.14159;         return area;     }     public static double volume(double len,double a){         double volume;         volume=len*a;         return volume;     }     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);                  double r,len,a;         System.out.print(""Enter the radius and length of a cylinder: "");         r = scan.nextDouble();         len = scan.nextDouble();         a = area(r);                  System.out.println(""The area is "" + area(r));         System.out.println(""The volume of the cylinder is "" + volume(len,a));     } }   ",1
1211,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Main {     public static double area(double r){         double area;         area=r*r*3.14159;         return area;     }     public static double volume(double len,double a){         double volume;         volume=len*a;         return volume;     }     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);                  double r=0;         double len=0;         double a =0;         double volume=0;         System.out.print(""Enter the radius and length of a cylinder: "");         r = scan.nextDouble();         len = scan.nextDouble();         a = area(r);         volume = volume(len,a);                  System.out.println(""The area is "" + a);         System.out.println(""The volume of the cylinder is "" + volume);     } }   ",1
1212,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double radius = input.nextDouble();         double length = input.nextDouble();         double area = radius * radius * 3.14159;         double volume = area * length;                  System.out.println(""The area is "" + area);         System.out.println(""The volume of the cylinder is "" + volume);     } } ",1
1213,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder: "");         double r = scan.nextDouble();         double len = scan.nextDouble();         double a = r * r * 3.14159;         double volume = a * len;                  System.out.println(""The area is "" + a);         System.out.println(""The volume of the cylinder is "" + volume);     } }   ",1
1214,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);                  double r=0;         double len=0;         double a =0;         double volume=0;         System.out.print(""Enter the radius and length of a cylinder: "");         r = scan.nextDouble();         len = scan.nextDouble();         a = r * r * 3.14159;         volume = a * len;                  System.out.println(""The area is "" + a);         System.out.println(""The volume of the cylinder is "" + volume);     } } ",1
1215,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class T02 {    public static void main(String[] args)    {       Scanner sc = new Scanner(System.in);       System.out.print(""Enter the radius and length of a cylinder: "");       String radlen= sc.nextLine();       String[] splited = radlen.split(""\\s+"");       float rad = Float.parseFloat(splited[0]);       float len = Float.parseFloat(splited[1]);       System.out.println(""The area is ""+Math.round(rad*rad*3.14159*10000.0)/10000.0);       System.out.println(""The volume is ""+Math.round(rad*rad*3.14159*len*10.0)/10.0);    } }",0
1216,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class inout{     public static void main(String[] args) {         double rad,l;         Scanner sc = new Scanner(System.in);                  System.out.print(""Enter the radius and length of a cylinder : "");         rad = sc.nextDouble();         l = sc.nextDouble();         hitungVol(hitungAr(rad), l);                    }          public static void hitungVol(double ar,double l)     {         double vol= ar*l;         System.out.println(""The volume of the cylinder is "" + vol);              }          public static double hitungAr(double rad)     {         double ar= rad*rad*3.14159;         System.out.println(""The area is "" + ar);         return ar;     } }",1
1217,"import java.util.Scanner; public class T2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } } ","import java.util.Scanner; public class inputoutput{ public static void main(String[] args){ Scanner input = new Scanner(System.in); System.out.print(""Enter the radius and length of a cylinder: ""); double radius = input.nextDouble(); double length = input.nextDouble(); double area = radius * radius * 3.14159; double volume = area * length; System.out.println(""The area is "" + area); System.out.println(""The volume of the cylinder is "" + volume); } }",1
1218,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.text.DecimalFormat; import java.util.Scanner; public class Soal3 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double weight = sc.nextDouble();         System.out.print(""Enter feet: "");         double feet = sc.nextDouble();         System.out.print(""Enter inches: "");         double inches = sc.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237 / ((height *0.0254)*(height *0.0254));         System.out.println(""BMI is ""+bmi);         if(bmi<18.5)             System.out.println(""Underweight"");         else if(bmi>=18.5 && bmi<25)             System.out.println(""Normal"");         else if(bmi>=25 && bmi<35)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",0
1219,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.*; public class L2 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double berat = sc.nextDouble();         System.out.print(""Enter feet: "");         double feet = sc.nextDouble();         System.out.print(""Enter inches: "");         double inci = sc.nextDouble();         double tinggi = feet * 12 + inci;         double bmi = berat * 0.45359237                 / ((tinggi * 0.0254) * (tinggi * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1220,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.*; public class L3 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double berat = 0;         double inci = 0;         double tinggi = 0 ;         double bmi = 0;         double feet = 0;                  System.out.print(""Enter weight in pounds: "");         berat = sc.nextDouble();         System.out.print(""Enter feet: "");         feet = sc.nextDouble();         System.out.print(""Enter inches: "");         inci = sc.nextDouble();          tinggi = feet * 12 + inci;        bmi = berat * 0.45359237                 / ((tinggi * 0.0254) * (tinggi * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1221,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.*; public class L4 {     public static double hitBmi(double berat, double tinggi)     {         return berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double berat = 0;         double inci = 0;         double tinggi = 0 ;                 double feet = 0;                  System.out.print(""Enter weight in pounds: "");         berat = sc.nextDouble();         System.out.print(""Enter feet: "");         feet = sc.nextDouble();         System.out.print(""Enter inches: "");         inci = sc.nextDouble();          tinggi = feet * 12 + inci;         System.out.println(""BMI is "" + hitBmi(berat,tinggi));         if (hitBmi(berat,tinggi) < 18.5) {             System.out.println(""Underweight"");         } else if (hitBmi(berat,tinggi) < 25) {             System.out.println(""Normal"");         } else if (hitBmi(berat,tinggi) < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1222,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.*; public class L5 {     public static double hitBmi(double berat, double tinggi) {         return berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double berat, inci, tinggi, feet = 0;         System.out.print(""Enter weight in pounds: "");         berat = sc.nextDouble();         System.out.print(""Enter feet: "");         feet = sc.nextDouble();         System.out.print(""Enter inches: "");         inci = sc.nextDouble();         tinggi = feet * 12 + inci;         System.out.println(""BMI is "" + hitBmi(berat, tinggi));         if (hitBmi(berat, tinggi) < 18.5) {             System.out.println(""Underweight"");         } else if (hitBmi(berat, tinggi) < 25) {             System.out.println(""Normal"");         } else if (hitBmi(berat, tinggi) < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1223,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.*; public class L6 {     public static double hitBmi(double berat, double tinggi) {         return berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double berat, inci, tinggi, feet = 0;         System.out.print(""Enter weight in pounds: "");         berat = sc.nextDouble();         System.out.print(""Enter feet: "");         feet = sc.nextDouble();         System.out.print(""Enter inches: "");         inci = sc.nextDouble();         tinggi = feet * 12 + inci;         System.out.println(""BMI is "" + hitBmi(berat, tinggi));         if (hitBmi(berat, tinggi) < 25 && hitBmi(berat, tinggi) > 18.5) {             System.out.println(""Normal"");         } else if (hitBmi(berat, tinggi) < 30 && hitBmi(berat, tinggi) > 25) {             System.out.println(""Overweight"");         } else if (hitBmi(berat, tinggi) > 30) {             System.out.println(""Obese"");         } else {             System.out.println(""Underweight"");         }     } } ",1
1224,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3 {          public static double hitungTinggi(double feet, double inches) {         return feet * 12 + inches;     }          public static double hitungBmi(double weight, double height) {         return weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();                  System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();         double height = hitungTinggi(feet, inches);                  double bmi = hitungBmi(weight, height);                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1225,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3 {     public static double hitungTinggi(double feet, double inches) {         return feet * 12 + inches;     }          public static double hitungBmi(double weight, double feet, double inches) {         return weight * 0.45359237 / ((hitungTinggi(feet, inches) * 0.0254) * (hitungTinggi(feet, inches) * 0.0254));     }          public static String cekBmi(double bmi) {         if (bmi < 18.5) {             return ""Underweight"";         } else if (bmi < 25) {             return ""Normal"";         } else if (bmi < 30) {             return ""Overweight"";         } else {             return ""Obese"";         }     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();                  System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();                  System.out.println(""BMI is "" + hitungBmi(weight, feet, inches));         System.out.println(cekBmi(hitungBmi(weight, feet, inches)));     } } ",1
1226,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3 {     public static double hitungTinggi(double feet, double inches) {         return feet * 12 + inches;     }          public static double hitungBmi(double weight, double feet, double inches) {         return weight * 0.45359237 / ((hitungTinggi(feet, inches) * 0.0254) * (hitungTinggi(feet, inches) * 0.0254));     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();                  System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();                  double bmi = hitungBmi(weight, feet, inches);                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1227,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3 {     public static double hitungTinggi(double feet, double inches) {         return feet * 12 + inches;     }          public static double hitungBmi(double weight, double height) {         return weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));     }          public static void cekBmi(double bmi) {         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();                  System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();                  double bmi = hitungBmi(weight, hitungTinggi(feet, inches));                  System.out.println(""BMI is "" + bmi);         cekBmi(bmi);     } } ",1
1228,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese"");     } } ",1
1229,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3L1 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();         System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237 /((height * 0.0254) * (height * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi < 25)             System.out.println(""Normal"");         else if (bmi < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1230,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3L2 {     public static void main(String[] args) {         Scanner inp = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double berat = inp.nextDouble();         System.out.print(""Enter feet: "");         double kaki = inp.nextDouble();         System.out.print(""Enter inches: "");         double inch = inp.nextDouble();         double tinggi = kaki * 12 + inch;         double rata = berat * 0.45359237 /((tinggi * 0.0254) * (tinggi * 0.0254));         System.out.println(""BMI is "" + rata);         if (rata < 18.5)             System.out.println(""Underweight"");         else if (rata < 25)             System.out.println(""Normal"");         else if (rata < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1231,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3L3 {     public static void main(String[] args) {         System.out.print(""Enter weight in pounds: "");         Scanner inp = new Scanner(System.in);         double berat = inp.nextDouble();         System.out.print(""Enter feet: "");         double kaki = inp.nextDouble();         System.out.print(""Enter inches: "");         double inch = inp.nextDouble();         double tinggi = kaki * 12 + inch;         double rata = berat * 0.45359237 /((tinggi * 0.0254) * (tinggi * 0.0254));         System.out.println(""BMI is "" + rata);         if (rata < 18.5)             System.out.println(""Underweight"");         else if (rata < 25)             System.out.println(""Normal"");         else if (rata < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1232,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3L4 {     public static void main(String[] args) {         System.out.print(""Enter weight in pounds: "");         Scanner inp = new Scanner(System.in);         double berat = inp.nextDouble();         System.out.print(""Enter feet: "");         double kaki = inp.nextDouble();         System.out.print(""Enter inches: "");         double inch = inp.nextDouble();         double tinggi = kaki * 12 + inch;         double rata = hitungBMI(berat, tinggi);         BMIKategori(rata);     }          private static double hitungBMI(double weight, double height){         return weight * 0.45359237 /((height * 0.0254) * (height * 0.0254));     }          private static void BMIKategori(double BMI){         System.out.println(""BMI is "" + BMI);         if (BMI < 18.5)             System.out.println(""Underweight"");         else if (BMI < 25)             System.out.println(""Normal"");         else if (BMI < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1233,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3L5 {     public static void main(String[] args) {         System.out.print(""Enter weight in pounds: "");         Scanner inp = new Scanner(System.in);         double berat = inp.nextDouble();         System.out.print(""Enter feet: "");         double kaki = inp.nextDouble();         System.out.print(""Enter inches: "");         double inch = inp.nextDouble();         BMIKategori(hitungBMI(berat, kaki * 12 + inch));     }          private static double hitungBMI(double weight, double height){         return weight * 0.45359237 /((height * 0.0254) * (height * 0.0254));     }          private static void BMIKategori(double BMI){         System.out.println(""BMI is "" + BMI);         if (BMI < 18.5)             System.out.println(""Underweight"");         else if (BMI < 25)             System.out.println(""Normal"");         else if (BMI < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1234,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Kasus3L6 {     public static void main(String[] args) {         System.out.print(""Enter weight in pounds: "");         Scanner inp = new Scanner(System.in);         double berat = inp.nextDouble();         System.out.print(""Enter feet: "");         double kaki = inp.nextDouble();         System.out.print(""Enter inches: "");         double inch = inp.nextDouble();                           BMIKategori(hitungBMI(berat, kaki * 12 + inch));     }     private static double hitungBMI(double weight, double height) {         double temp = height * 0.0254;         return weight * 0.45359237 / (temp * temp);     }     private static void BMIKategori(double BMI) {         System.out.println(""BMI is "" + BMI);         if (BMI > 30) {             System.out.println(""Obese"");         } else if (BMI > 25) {             System.out.println(""Overweight"");         } else if (BMI > 18.5) {             System.out.println(""Normal"");         } else {             System.out.println(""Underweight"");         }     } } ",1
1235,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class L1 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();         System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237                 / ((height * 0.0254) * (height * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1236,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Level2 {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double berat = in.nextDouble();         System.out.print(""Enter feet: "");         double feet = in.nextDouble();         System.out.print(""Enter inches: "");         double inches = in.nextDouble();         double tinggi = feet * 12 + inches;         double bmi = berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi < 25)             System.out.println(""Normal"");         else if (bmi < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1237,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Level3 {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         double berat;         double feet;         double inches;         double tinggi;         double bmi;         System.out.print(""Enter weight in pounds: "");         berat = in.nextDouble();         System.out.print(""Enter feet: "");         feet = in.nextDouble();         System.out.print(""Enter inches: "");         inches = in.nextDouble();         tinggi = feet * 12 + inches;         bmi = berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1238,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Level5 {          public static void main(String[] args) {         Scanner in = new Scanner(System.in);         double berat = 0;         double feet, inches, tinggi = 0;         System.out.print(""Enter weight in pounds: ""); berat = in.nextDouble();         System.out.print(""Enter feet: ""); feet = in.nextDouble();         System.out.print(""Enter inches: ""); inches = in.nextDouble();                  tinggi = feet * 12 + inches;                  bmi(berat, tinggi);     }          private static void bmi(double weight, double height) {         double bmi = weight * 0.45359237 / Math.pow((height * 0.0254), 2);                  System.out.println(""BMI is "" + bmi);                  if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi < 25)             System.out.println(""Normal"");         else if (bmi < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1239,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter weight in pound: "");         double weight = sc.nextDouble();         System.out.print(""Enter feet: "");         double feet = sc.nextDouble();         System.out.print(""Enter inches: "");         double inches = sc.nextDouble();         double height = feet*12+inches;         double bmi = weight*0.45359237/((height*0.0254)*(height*0.0254));         System.out.println(""BMI is ""+bmi);         if(bmi<18.5)         {             System.out.println(""Underweight"");         }         else if(bmi>=18.5 && bmi<25)         {             System.out.println(""Normal"");         }         else if(bmi>=25 && bmi<35)         {             System.out.println(""Overweight"");         }         else         {             System.out.println(""Obese"");         }     }      } ",0
1240,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     private static double weights,feets,inches,heights,bmi;     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                           System.out.print(""Enter weight in pounds: "");         weights = input.nextDouble();                           System.out.print(""Enter feet: "");         feets = input.nextDouble();         System.out.print(""Enter inches: "");         inches = input.nextDouble();                           heights = feets * 12 + inches;         bmi = weights * 0.45359237         / ((heights * 0.0254) * (heights * 0.0254));         cetak();     }     public static void cetak(){                  System.out.println(""BMI is "" + bmi);          if (bmi >= 30){             System.out.println(""Obese"");         } else if (bmi >= 25) {             System.out.println(""Overweight"");         }else if (bmi >= 18.5) {             System.out.println(""Normal"");         } else {             System.out.println(""Underweight"");         }     } } ",1
1241,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     private static double weights,feets,inches,heights,bmi;     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                           System.out.print(""Enter weight in pounds: "");         weights = input.nextDouble();                           System.out.print(""Enter feet: "");         feets = input.nextDouble();         System.out.print(""Enter inches: "");         inches = input.nextDouble();                           heights = feets * 12 + inches;         bmi = weights * 0.45359237         / ((heights * 0.0254) * (heights * 0.0254));         cetak();     }     public static void cetak(){                  System.out.println(""BMI is "" + bmi);          if (bmi >= 30){             System.out.println(""Obese"");         } else if (bmi >= 25) {             System.out.println(""Overweight"");         }else if (bmi >= 18.5) {             System.out.println(""Normal"");         } else {             System.out.println(""Underweight"");         }     } } ",1
1242,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     private static double weights,feets,inches,heights,bmi;     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                           System.out.print(""Enter weight in pounds: "");         weights = input.nextDouble();                           System.out.print(""Enter feet: "");         feets = input.nextDouble();         System.out.print(""Enter inches: "");         inches = input.nextDouble();                           heights = feets * 12 + inches;         bmi = weights * 0.45359237         / ((heights * 0.0254) * (heights * 0.0254));         cetak();     }     public static void cetak(){                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1243,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static double countHeightUser(double feet,double inches){         return feet*12+inches;     }     public static double countBmi (double height,double weight){         return  weight * 0.45359237 /    (Math.pow((height * 0.0254),2));     }     public static void printBmi(double bmi){         if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi > 18.5&& bmi < 25)             System.out.println(""Normal"");         else if (bmi > 25&& bmi < 30)             System.out.println(""Overweight"");         else if(bmi > 30)             System.out.println(""Obese"");     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                  double inchesUser,weightUser,feetUser,heightUser,bmi;                  System.out.print(""Enter inches: "");         inchesUser = sc.nextDouble();                  System.out.print(""Enter weight in pounds: "");         weightUser = sc.nextDouble();                           System.out.print(""Enter feet: "");         feetUser = sc.nextDouble();                  heightUser = countHeightUser(feetUser,inchesUser);                  bmi =countBmi(heightUser,weightUser);                  System.out.print(""BMI is "");         System.out.println(bmi);         printBmi(bmi);     } } ",1
1244,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                           System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();                           System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();                  double height = feet * 12 + inches;                           double bmi = weight * 0.45359237         / ((height * 0.0254) * (height * 0.0254));                           System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1245,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                           System.out.print(""Enter weight in pounds: "");         double weights = input.nextDouble();                           System.out.print(""Enter feet: "");         double feets = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();                  double heights = feets * 12 + inches;                           double bmi = weights * 0.45359237         / ((heights * 0.0254) * (heights * 0.0254));                           System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1246,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         double berat = input.nextDouble();                  System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();         double height = feet * 12 + inches;                  double bmi = berat * 0.45359237                 / ((height * 0.0254) * (height * 0.0254));                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1247,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();                  System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();         double height = feet * 12 + inches;                  double bmi = weight * 0.45359237                 / ((height * 0.0254) * (height * 0.0254));                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1248,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double berat,feet,inches,height,bmi;                           System.out.print(""Enter weight in pounds: "");         berat = input.nextDouble();                  System.out.print(""Enter feet: "");         feet = input.nextDouble();         System.out.print(""Enter inches: "");         inches = input.nextDouble();         height = feet * 12 + inches;                  bmi = hitungBmi(berat, height);                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }              }          public static double hitungBmi(double berat, double height){         double bmi;         bmi = berat * 0.45359237                 / ((height * 0.0254) * (height * 0.0254));         return bmi;     } } ",1
1249,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double berat,feet,inches,height,bmi;                           System.out.print(""Enter weight in pounds: "");         berat = input.nextDouble();                  System.out.print(""Enter feet: "");         feet = input.nextDouble();         System.out.print(""Enter inches: "");         inches = input.nextDouble();         height = feet * 12 + inches;                  bmi = hitungBmi(berat, height);                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }              }          public static double hitungBmi(double berat, double height){         double bmi;         bmi = berat * 0.45359237                 / ((height * 0.0254) * (height * 0.0254));         return bmi;     } } ",1
1250,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double berat,feet,inches,height,bmi;                           System.out.print(""Enter weight in pounds: "");         berat = input.nextDouble();                  System.out.print(""Enter feet: "");         feet = input.nextDouble();         System.out.print(""Enter inches: "");         inches = input.nextDouble();         height = feet * 12 + inches;                  bmi = hitungBmi(berat, height);                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }              }          public static double hitungBmi(double berat, double height){         double bmi;         bmi = berat * 0.45359237                 / (Math.pow((height * 0.0254), 2));         return bmi;     } } ",1
1251,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double berat;         double feet;         double inches;         double height;         double bmi;                           System.out.print(""Enter weight in pounds: "");         berat = input.nextDouble();                  System.out.print(""Enter feet: "");         feet = input.nextDouble();         System.out.print(""Enter inches: "");         inches = input.nextDouble();         height = feet * 12 + inches;                  bmi = berat * 0.45359237                 / ((height * 0.0254) * (height * 0.0254));                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1252,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         int weight=sc.nextInt();         System.out.print(""Enter feet: "");         int feet=sc.nextInt();         System.out.print(""Enter inches: "");         int inches=sc.nextInt();         double height=feet*12+inches;         double bmi=weight*0.45359237 / ((height * 0.0254) * (height * 0.0254));         System.out.println(""BMI is ""+bmi);         if(bmi<18.5)             System.out.println(""Underweight"");         else if(bmi>=18.5 && bmi<25)             System.out.println(""Normal"");         else if(bmi>=25 && bmi<35)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",0
1253,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class No3 {          public static void main(String[] args) {                          Scanner sc = new Scanner(System.in);         double height,weight,feet,inches,bmi;         System.out.print(""Enter weight in pounds: "");         weight = sc.nextDouble();         System.out.print(""Enter feet: "");         feet = sc.nextDouble();         System.out.print(""Enter inches: "");         inches = sc.nextDouble();         height = feet * 12 + inches;         bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));         System.out.println(""BMI is "" + bmi);         if(bmi<18.5)             System.out.println(""Underweight"");         else if(bmi<25)             System.out.println(""Normal"");         else if(bmi<35)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     }      } ",0
1254,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class Nomor3_2451041557A22145B3701B0184109CAB013 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         int weight = sc.nextInt();         System.out.print(""Enter feet: "");         int feet = sc.nextInt();         System.out.print(""Enter inch: "");         int inches = sc.nextInt();         int height = feet*12 + inches;         double bmi = weight*0.45359237/((height*0.0254)*(height*0.0254));         System.out.println(""BMI is "" + bmi);         if(bmi<18.5){             System.out.println(""underweight"");         }         else if(bmi>=18.5 && bmi<25){             System.out.println(""Normal"");         }         else if(bmi>=25 && bmi<35){             System.out.println(""overweight"");         }         else if(bmi >35){             System.out.println(""obese"");         }     }      } ",0
1255,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class T03 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double weight, feet, inches, bmi, height;         System.out.print(""Enter weight in pounds: "");         weight = sc.nextDouble();         System.out.print(""Enter feet: "");         feet = sc.nextDouble();         System.out.print(""Enter inches: "");         inches = sc.nextDouble();         height = feet * 12 + inches;         bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));         System.out.println(""BMI is "" + bmi);         if(bmi<18.5)             System.out.println(""Underweight"");         else if(bmi<25)             System.out.println(""Normal"");         else if(bmi<35)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     }      } ",0
1256,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class T03 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double weight = s.nextDouble();         System.out.print(""Enter feet: "");         double feet = s.nextDouble();         System.out.print(""Enter inches: "");         double inches = s.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));         System.out.println(""BMI Is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         }         else if(bmi>=18.5 && bmi<25){             System.out.println(""Normal"");         }         else if(bmi>=25 && bmi<35){             System.out.println(""Overweight"");         }         else {             System.out.println(""Obese"");         }     } } ",0
1257,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class T03 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         float w=s.nextFloat();         System.out.print(""Enter feet: "");         float f=s.nextFloat();         System.out.print(""Enter inches: "");         float i=s.nextFloat();         float h=f*12+i;         float bmi = (float) ((w*0.45359237)/((h*0.0254)*(h*0.0254)));         System.out.println(""BMI is ""+bmi);         if(bmi<18.5){             System.out.println(""Underweight"");         } else if (bmi>=18.5 && bmi<25){             System.out.println(""Normal"");         } else if (bmi>=25 && bmi<35){             System.out.println(""Overweight"");         } else if (bmi>=35) {             System.out.println(""Obese"");         }     } } ",0
1258,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class T03 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter weight in pounds : "");         double weight = sc.nextDouble();         System.out.print(""Enter feet : "");         double feet = sc.nextDouble();         System.out.print(""Enter inches : "");         double inches = sc.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237 / ((height * 0.0254)                 * (height * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi >= 18.5 && bmi < 25) {             System.out.println(""Normal"");         } else if (bmi >= 25 && bmi < 35) {             System.out.println(""Overweight"");         } else {             System.out.println(""obese"");         }     } } ",0
1259,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class T03 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter weight in pounds : "");         double weight = sc.nextDouble();         System.out.print(""Enter feet : "");         double feet = sc.nextDouble();         System.out.print(""Enter inches : "");         double inches = sc.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)) ;         System.out.println(""The area is "" + bmi);         if (bmi < 18.5){             System.out.println(""Underweight"");         }else if (bmi < 25){             System.out.println(""Normal"");         }else if (bmi < 35){             System.out.println(""Overweight"");         }else {             System.out.println(""Obese"");         }     } } ",0
1260,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class T03 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double weight = sc.nextDouble();         System.out.print(""Enter feet: "");         double feet = sc.nextDouble();         System.out.print(""Enter Inches: "");         double inches = sc.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237 / Math.pow((height * 0.0254), 2);         System.out.println(""BMI is ""+ bmi);         if(bmi<18.5){             System.out.println(""underweight"");         } else if(bmi<25){             System.out.println(""normal"");         } else if(bmi<35){             System.out.println(""overweight"");         } else{             System.out.println(""obese"");         }     } } ",0
1261,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class T03 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double weight, feet, inches, height, bmi;                  System.out.print(""Enter weight in pounds: "");         weight = sc.nextDouble();                  System.out.print(""Enter feet: "");         feet = sc.nextDouble();                  System.out.print(""Enter inches: "");         inches = sc.nextDouble();                  height = feet * 12 + inches;         bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));                  System.out.println(""BMI is "" + bmi);         if(bmi < 18.5) {             System.out.println(""Underweight"");         }else if (bmi >= 18.5 && bmi < 25) {             System.out.println(""Normal"");         }else if(bmi >= 25 && bmi < 35) {             System.out.println(""Overweight"");         }else if(bmi >= 35) {             System.out.println(""Obese"");         }     } } ",0
1262,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class T03 {     public static void main(String[] args){                  Scanner sc = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         int weight = sc.nextInt();         System.out.print(""Enter feet: "");         int feet = sc.nextInt();         System.out.print(""Enter inches: "");         int inches = sc.nextInt();                  int height = feet * 12 + inches;         double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));                  System.out.println(""BMI is "" + bmi);                  if(bmi < 18.5){             System.out.println(""Underweight"");         }else if(bmi >= 18.5 && bmi < 25){             System.out.println(""Normal"");         }else if(bmi >= 35){             System.out.println(""Obese"");         }              } } ",0
1263,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } "," import java.util.Scanner; public class t03 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter weight in pounds : "");         double weight = sc.nextDouble();         System.out.print(""Enter feet : "");         double feet = sc.nextDouble();         System.out.print(""Enter inches : "");         double inches = sc.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237 / ((height * 0.0254)                 * (height * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""underweight"");         } else if (bmi >= 18.5 && bmi < 25) {             System.out.println(""normal"");         } else if (bmi >= 25 && bmi < 35) {             System.out.println(""overweight"");         } else {             System.out.println(""obese"");         }     } } ",0
1264,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.*; class inputoutput{ public static void main(String[] args)  { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double bobot = input.nextDouble(); System.out.print(""Enter feet: ""); double kaki = input.nextDouble(); System.out.print(""Enter inches: ""); double inc = input.nextDouble(); double height = kaki * 12 + inc; double bmi = bobot * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } }",1
1265,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.*; class inputoutput{ public static void main(String[] args)  { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } }",1
1266,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.*; class inputoutput{ public static void main(String[] args)  { double kaki; double bobot; double bmi; double inc; double height; Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: "");  bobot = input.nextDouble(); System.out.print(""Enter feet: "");  kaki = input.nextDouble(); System.out.print(""Enter inches: "");  inc = input.nextDouble();  height = kaki * 12 + inc;  bmi = bobot * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } }",1
1267,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.*; class inputoutput{ static double hitHeight(double kaki, double inc) { return kaki * 12 + inc; } static double hitBmi(double bobot, double height) { return bobot * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); } public static void main(String[] args)  { double kaki; double bobot; double bmi; double inc; double height; Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: "");  bobot = input.nextDouble(); System.out.print(""Enter feet: "");  kaki = input.nextDouble(); System.out.print(""Enter inches: "");  inc = input.nextDouble();  height = hitHeight(kaki,inc);  bmi = hitBmi(bobot,height); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } }",1
1268,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.*; class inputoutput{ static double kaki,bobot,bmi,inc,height; static double hitHeight(double kaki, double inc) { return kaki * 12 + inc; } static double hitBmi(double bobot, double height) { return bobot * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); } public static void main(String[] args)  { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: "");  bobot = input.nextDouble(); System.out.print(""Enter feet: "");  kaki = input.nextDouble(); System.out.print(""Enter inches: "");  inc = input.nextDouble();  height = hitHeight(kaki,inc);  bmi = hitBmi(bobot,height); System.out.print(""BMI is "" + bmi+""\n""); if (bmi < 18.5) System.out.print(""Underweight""+""\n""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } }",1
1269,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.*; class inputoutput{ static double kaki,bobot,bmi,inc,height; static double hitHeight(double kaki, double inc) { return kaki * 12 + inc; } static double hitBmi(double bobot, double height) { return bobot * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); } public static void main(String[] args)  { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: "");  bobot = input.nextDouble(); System.out.print(""Enter feet: "");  kaki = input.nextDouble(); System.out.print(""Enter inches: "");  inc = input.nextDouble();  height = hitHeight(kaki,inc);  bmi = hitBmi(bobot,height); System.out.print(""BMI is "" + bmi+""\n""); if(bmi>=30) System.out.println(""Obese""); else if(bmi>=25) System.out.println(""Overweight""); else if (bmi >= 18.5) System.out.println(""Normal""); else System.out.print(""Underweight""+""\n""); } }",1
1270,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class Level1 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                           System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();         System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();         double height = feet * 12 + inches;                           double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));                           System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1271,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class Level4  {     public static void main(String[] args)      {         Scanner in = new Scanner(System.in);         double berat;         double kaki;         double inchi;         double tinggi;         System.out.print(""Enter weight in pounds: "");         berat = in.nextDouble();         System.out.print(""Enter feet: "");         kaki = in.nextDouble();         System.out.print(""Enter inches: "");         inchi = in.nextDouble();         tinggi = kaki * 12 + inchi;         hitungBmi(berat, tinggi);     }          private static void hitungBmi(double weight, double height) {         double bmi;         bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));         System.out.println(""BMI is "" + bmi);         if (bmi < 18.5)         {             System.out.println(""Underweight"");         }         else if (bmi < 25)         {             System.out.println(""Normal"");         }         else if (bmi < 30)         {             System.out.println(""Overweight"");         }         else         {             System.out.println(""Obese"");         }     } } ",1
1272,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class Level6 {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         double berat, feet,inches, tinggi;         System.out.print(""Enter weight in pounds: "");         berat = in.nextDouble();         System.out.print(""Enter feet: "");         feet = in.nextDouble();         System.out.print(""Enter inches: "");         inches = in.nextDouble();                  result(fungsiBmi(berat, feet, inches));     }     private static double fungsiBmi(double berat, double feet, double inches) {         double tinggi = feet * 12 + inches;         return berat * 0.45359237 / Math.pow((tinggi * 0.0254), 2);     }          private static void result(double res) {         System.out.println(""BMI is "" + res);         if (res < 18.5)             System.out.println(""Underweight"");         else if (res >= 18.5 && res < 25)             System.out.println(""Normal"");         else if (res >= 25 && res < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1273,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class Main {     public static double countHeightUser(double feet,double inches){         return feet*12+inches;     }     public static double countBmi (double height,double weight){         return  weight * 0.45359237 /        ((height * 0.0254) * (height * 0.0254));     }     public static void printBmi(double bmi){         if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi < 25)             System.out.println(""Normal"");         else if (bmi < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                           System.out.print(""Enter inches: "");         double inchesUser = sc.nextDouble();         System.out.print(""Enter weight in pounds: "");         double weightUser = sc.nextDouble();                           System.out.print(""Enter feet: "");         double feetUser = sc.nextDouble();                  double heightUser = countHeightUser(feetUser,inchesUser);                  double bmi =countBmi(heightUser,weightUser);                  System.out.println(""BMI is "" + bmi);         printBmi(bmi);     } } ",1
1274,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class Main {     public static double countHeightUser(double feet,double inches){         return feet*12+inches;     }     public static double countBmi (double height,double weight){         return  weight * 0.45359237 /        ((height * 0.0254) * (height * 0.0254));     }     public static void printBmi(double bmi){         if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi < 25)             System.out.println(""Normal"");         else if (bmi < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                  double inchesUser,weightUser,feetUser,heightUser,bmi;                  System.out.print(""Enter inches: "");         inchesUser = sc.nextDouble();                  System.out.print(""Enter weight in pounds: "");        weightUser = sc.nextDouble();                           System.out.print(""Enter feet: "");        feetUser = sc.nextDouble();                  heightUser = countHeightUser(feetUser,inchesUser);                  bmi =countBmi(heightUser,weightUser);                  System.out.print(""BMI is "");         System.out.println(bmi);         printBmi(bmi);     } } ",1
1275,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();                           System.out.print(""Enter feet: "");         double feet = input.nextDouble();                  System.out.print(""Enter inches: "");         double inches = input.nextDouble();                  double height = feet * 12 + inches;                  double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi < 25)             System.out.println(""Normal"");         else if (bmi < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1276,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                           System.out.print(""Enter inches: "");         double inchesUser = sc.nextDouble();         System.out.print(""Enter weight in pounds: "");         double weightUser = sc.nextDouble();                           System.out.print(""Enter feet: "");         double feetUser = sc.nextDouble();                  double heightUser = feetUser * 12 + inchesUser;                  double bmi = weightUser * 0.45359237 / ((heightUser * 0.0254) * (heightUser * 0.0254));                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi < 25)             System.out.println(""Normal"");         else if (bmi < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1277,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                  System.out.print(""Enter weight in pounds: "");         double weightUser = sc.nextDouble();                           System.out.print(""Enter feet: "");         double feetUser = sc.nextDouble();                  System.out.print(""Enter inches: "");         double inchesUser = sc.nextDouble();                  double heightUser = feetUser * 12 + inchesUser;                  double bmi = weightUser * 0.45359237 / ((heightUser * 0.0254) * (heightUser * 0.0254));                  System.out.println(""BMI is "" + bmi);         if (bmi < 18.5)             System.out.println(""Underweight"");         else if (bmi < 25)             System.out.println(""Normal"");         else if (bmi < 30)             System.out.println(""Overweight"");         else             System.out.println(""Obese"");     } } ",1
1278,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class T03 {    public static void main(String[] args)    {      Scanner sc = new Scanner(System.in);       System.out.print(""Enter weight in pounds: "");       int w= sc.nextInt();       System.out.print(""Enter feet: "");       int f= sc.nextInt();       System.out.print(""Enter inches: "");       int i= sc.nextInt();       double bmi = ((w*0.45359237)/(((f*12+ i)*0.0254)*((f*12+i)*0.0254)));       System.out.println(""BMI is ""+bmi);       if(bmi < 18.5)       {          System.out.println(""Underweight"");       }       else if(bmi >= 18.5 && bmi < 25)       {          System.out.println(""Normal"");       }       else if(bmi >= 25 && bmi < 35)       {          System.out.println(""Overweight"");       }       else if(bmi >= 35)       {          System.out.println(""Obese"");       }    } }",0
1279,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class cabang {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         System.out.print(""Enter weight in pounds : "");         double w = input.nextDouble();         System.out.print(""Enter feet : "");         double f = input.nextDouble();         System.out.print(""Enter inches : "");         double i = input.nextDouble();         double h = f * 12 + i;         double TotalBmi = w * 0.45359237 / ((h * 0.0254) * (h * 0.0254));                   System.out.println(""BMI is "" + TotalBmi);         if (TotalBmi < 18.5) {             System.out.println(""Underweight "");         } else if (TotalBmi < 25) {             System.out.println(""Normal "");         } else if (TotalBmi < 30) {             System.out.println(""Overweight "");         } else {             System.out.println(""Obese "");         }     } } ",1
1280,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class cabang {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double w,f,i,h,TotalBmi;         System.out.print(""Enter weight in pounds : "");         w = input.nextDouble();         System.out.print(""Enter feet : "");         f = input.nextDouble();         System.out.print(""Enter inches : "");         i = input.nextDouble();         h = f * 12 + i;         TotalBmi = HitBMI(w, h);                  System.out.println(""BMI is "" + TotalBmi);         Result(TotalBmi);     }          public static double HitBMI(double w,double h)     {         return  (w * 0.45359237) / ((h * 0.0254) * (h * 0.0254));      }          public static void Result(double TotalBmi)     {          if (TotalBmi > 30) {             System.out.println(""Obese "");         } else if (TotalBmi < 25 && TotalBmi>18.5) {             System.out.println(""Normal "");         } else if (TotalBmi>25 && TotalBmi < 30) {             System.out.println(""Overweight "");         } else {             System.out.println(""Underweight "");         }     } }",1
1281,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class cabang {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double w,f,i,h,TotalBmi;         System.out.print(""Enter weight in pounds : "");         w = input.nextDouble();         System.out.print(""Enter feet : "");         f = input.nextDouble();         System.out.print(""Enter inches : "");         i = input.nextDouble();         h = f * 12 + i;         TotalBmi = HitBMI(w, h);                  System.out.println(""BMI is "" + TotalBmi);         Result(TotalBmi);     }          public static double HitBMI(double w,double h)     {         return  w * 0.45359237 / ((h * 0.0254) * (h * 0.0254));      }          public static void Result(double TotalBmi)     {          if (TotalBmi < 18.5) {             System.out.println(""Underweight "");         } else if (TotalBmi < 25) {             System.out.println(""Normal "");         } else if (TotalBmi < 30) {             System.out.println(""Overweight "");         } else {             System.out.println(""Obese "");         }     } }",1
1282,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class cabang {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double w,f,i,h,TotalBmi;         System.out.print(""Enter weight in pounds : "");         w = input.nextDouble();         System.out.print(""Enter feet : "");         f = input.nextDouble();         System.out.print(""Enter inches : "");         i = input.nextDouble();         h = f * 12 + i;         TotalBmi = HitBMI(w, h);                  System.out.println(""BMI is "" + TotalBmi);         Result(TotalBmi);     }          public static double HitBMI(double w,double h)     {         return  w * 0.45359237 / ((h * 0.0254) * (h * 0.0254));      }          public static void Result(double TotalBmi)     {          if (TotalBmi < 18.5) {             System.out.println(""Underweight "");         } else if (TotalBmi < 25) {             System.out.println(""Normal "");         } else if (TotalBmi < 30) {             System.out.println(""Overweight "");         } else {             System.out.println(""Obese "");         }     } }",1
1283,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class cabang {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         double w,f,i,h,TotalBmi;         System.out.print(""Enter weight in pounds : "");         w = input.nextDouble();         System.out.print(""Enter feet : "");         f = input.nextDouble();         System.out.print(""Enter inches : "");         i = input.nextDouble();         h = f * 12 + i;         TotalBmi = w * 0.45359237 / ((h * 0.0254) * (h * 0.0254));                   System.out.println(""BMI is "" + TotalBmi);         if (TotalBmi < 18.5) {             System.out.println(""Underweight "");         } else if (TotalBmi < 25) {             System.out.println(""Normal "");         } else if (TotalBmi < 30) {             System.out.println(""Overweight "");         } else {             System.out.println(""Obese "");         }     } } ",1
1284,"import java.util.Scanner; public class T3 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter weight in pounds: ""); double weight = input.nextDouble(); System.out.print(""Enter feet: ""); double feet = input.nextDouble(); System.out.print(""Enter inches: ""); double inches = input.nextDouble(); double height = feet * 12 + inches; double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); System.out.println(""BMI is "" + bmi); if (bmi < 18.5) System.out.println(""Underweight""); else if (bmi < 25) System.out.println(""Normal""); else if (bmi < 30) System.out.println(""Overweight""); else System.out.println(""Obese""); } } ","import java.util.Scanner; public class percabangan {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         System.out.print(""Enter weight in pounds: "");         double weight = input.nextDouble();         System.out.print(""Enter feet: "");         double feet = input.nextDouble();         System.out.print(""Enter inches: "");         double inches = input.nextDouble();         double height = feet * 12 + inches;         double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));                   System.out.println(""BMI is "" + bmi);         if (bmi < 18.5) {             System.out.println(""Underweight"");         } else if (bmi < 25) {             System.out.println(""Normal"");         } else if (bmi < 30) {             System.out.println(""Overweight"");         } else {             System.out.println(""Obese"");         }     } } ",1
1285,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.text.DecimalFormat; import java.util.Scanner; public class Main {          public static void main(String[] args) {                  Scanner sc = new Scanner(System.in);         double a[][] =new double[4][4];         for (int i=0;i<4;i++)         {             for (int j=0;j<4;j++)             {                  a[i][j]=sc.nextDouble();             }           }                           for (int i=0;i<4;i++)         {             for (int j=0;j<4;j++)             {   if(a[i][j]%1==0){                     DecimalFormat decimalFormat = new DecimalFormat(""#"");                     String numberAsString = decimalFormat.format(a[i][j]);                     System.out.print(numberAsString);                 }                 else{                         System.out.print(a[i][j]);                 }                 System.out.print("" "");             }               System.out.println("""");         }                                     System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(a));     }      public static double sumMajorDiagonal(double[][] array) {     double total = 0;     for (int index = 0; index < array.length; index++)     {             total += array[index][index];     }     return total; } } ",0
1286,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.*; public class L1 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);         System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] m = new double[4][4];         for (int i = 0; i < 4; i++)          {             for (int j = 0; j < 4; j++)             {                 m[i][j] = input.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));     }     public static double sumMajorDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < m.length; i++)          {              sum += m[i][i];         }         return sum;     }      } ",1
1287,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.*; public class L2 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] m = new double[4][4];         for (int i = 0; i < 4; i++)          {             for (int j = 0; j < 4; j++)             {                 m[i][j] = sc.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));     }     public static double jumlahDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < m.length; i++)          {              sum += m[i][i];         }         return sum;     }      } ",1
1288,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.*; public class L3 {     public static double jumlahDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < m.length; i++) {             sum += m[i][i];         }         return sum;     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] m = new double[4][4];         System.out.print(""Enter a 4 by 4 matrix row by row: "");         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = sc.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));     } } ",1
1289,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.*; public class L4 {     public static double jumlahDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < m.length; i++) {             sum += m[i][i];         }         return sum;     }     public static void print(double[][] m) {         System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] m = new double[4][4];         System.out.println(""Enter a 4 by 4 matrix row by row: "");         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = sc.nextDouble();             }         }         print(m);     } } ",1
1290,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.*; public class L5 {     public static double jumlahDiagonal(double[][] m) {         double sum = 0;         int hit = 0;         while (hit != m.length) {             sum += m[hit][hit];             hit++;         }         return sum;     }     public static void print(double[][] m) {         System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] m = new double[4][4];         System.out.println(""Enter a 4 by 4 matrix row by row: "");         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = sc.nextDouble();             }         }         print(m);     } } ",1
1291,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.*; public class L6 {     public static double jumlahDiagonal(double[][] m) {         double sum = 0;         int hit = m.length-1;         while (hit >= 0) {             sum += m[hit][hit];             hit--;         }         return sum;     }     public static void print(double[][] m) {         System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));     }     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] m = new double[4][4];         System.out.println(""Enter a 4 by 4 matrix row by row: "");         for (int i = 3; i >= 0 ; i--) {             for (int j = 3; j >= 0; j--) {                 m[i][j] = sc.nextDouble();             }         }         print(m);     } } ",1
1292,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class arraylebihdarisatu {         public static void main(String[] args) {                                    System.out.print(""Enter a 4 by 4 matrix row by row: "");                                                                       System.out.print(""Sum of the elements in the major  diagonal is  ""+ HitungDiagonal());     }     public static double HitungDiagonal() {         Scanner sc = new Scanner(System.in);         double hasil=0;         double[][] matrix = new double[4][4];          for (int x = 0; x < 4; x++) {             for (int y = 0; y< 4; y++) {                matrix[x][y] = sc.nextDouble();                if(x==y)                {                   hasil+=matrix[x][y];                }             }                                    }         return hasil;     } } ",1
1293,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class arraylebihdarisatu {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                           System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[4][4];                                                for (int x = 0; x < 4; x++) {             for (int y = 0; y< 4; y++) {                 matrix[x][y] = sc.nextDouble();             }                                    }                                           System.out.print(""Sum of the elements in the major  diagonal is  ""+ HitungDiagonal(matrix));     }     public static double HitungDiagonal(double[][] matriks) {         double total = 0;         for (int i = 0; i < matriks.length; i++) {             total += matriks[i][i];         }         return total;     } } ",1
1294,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class arraylebihdarisatu {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                           System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[4][4];                                                for (int x = 0; x < 4; x++) {             for (int y = 0; y< 4; y++) {                 matrix[x][y] = sc.nextDouble();             }                                    }         double hasil;         hasil = 0;         for (int i = 0; i < matrix.length; i++) {             hasil += matrix[i][i];         }                                   System.out.print(""Sum of the elements in the major  diagonal is  ""+ hasil);     } }    ",1
1295,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class arraylebihdarisatu {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                           System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[4][4];                                                for (int x = 0; x < 4; x++) {             for (int y = 0; y< 4; y++) {                 matrix[x][y] = sc.nextDouble();             }                                    }         double hasil;         hasil=HitungDiagonal(matrix);                                  System.out.print(""Sum of the elements in the major  diagonal is  ""+ hasil);     }     public static double HitungDiagonal(double[][] matriks) {         double total;         total = 0;         for (int i = 0; i < matriks.length; i++) {             total += matriks[i][i];         }         return total;     } } ",1
1296,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class arraylebihdarisatu {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                           System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[4][4];                                                for (int x = 0; x < 4; x++) {             for (int y = 0; y< 4; y++) {                 matrix[x][y] = sc.nextDouble();             }                                    }         double hasil;         hasil=HitungDiagonal(matrix);                                  System.out.print(""Sum of the elements in the major  diagonal is  ""+ hasil);     }     public static double HitungDiagonal(double[][] matriks) {         double total;         total = 0;         int i;         i=0;         while(i<matriks.length){          total+=matriks[i][i];          i++;         }         return total;     } } ",1
1297,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class multiarray {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                           System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] m = new double[4][4];                                                for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = input.nextDouble();             }                                    }                                           System.out.print(""Sum of the elements in the major  diagonal is  ""+ sumMajorDiagonal(m));     }     public static double sumMajorDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < m.length; i++) {             sum += m[i][i];         }         return sum;     } } ",1
1298,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7 {          public static void sumMajorDiagonal(double[][] matrix, int n) {         double sum = 0;         Scanner sc = new Scanner(System.in);                  for (int i = 0; i < n; i++) {             int j=0;             while(j<n) {                  matrix[i][j] = sc.nextDouble();                 j++;             }         }                  for (int i = 0; i < matrix.length; i++) {             sum += matrix[i][i];         }         System.out.println(""Sum of the elements in the major diagonal is "" + sum);     }          public static void main(String[] args) {                  int n=4;         System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[n][n];                  sumMajorDiagonal(matrix , n);     } } ",1
1299,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7 {     public static void inputMatrix(double[][] matrix, int n) {         Scanner sc = new Scanner(System.in);                  for (int i = 0; i < n; i++) {             for (int j = 0; j < n; j++) {                 matrix[i][j] = sc.nextDouble();             }         }     }          public static double sumMajorDiagonal(double[][] matrix, int n) {         if(n>=0) {             return matrix[n][n] + sumMajorDiagonal(matrix, --n);         }         else             return 0;     }          public static void main(String[] args) {                  int n=4;         System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[n][n];                  inputMatrix(matrix, n);         System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(matrix, --n));     } } ",1
1300,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7 {     public static void inputMatrix(double[][] matrix, int n) {         Scanner sc = new Scanner(System.in);                  for (int i = 0; i < n; i++) {             for (int j = 0; j < n; j++) {                 matrix[i][j] = sc.nextDouble();             }         }     }          public static void sumMajorDiagonal(double[][] matrix) {         double sum = 0;         for (int i = 0; i < matrix.length; i++) {             sum += matrix[i][i];         }         System.out.println(""Sum of the elements in the major diagonal is "" + sum);     }          public static void main(String[] args) {                  int n=4;         System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[n][n];                  inputMatrix(matrix, n);         sumMajorDiagonal(matrix);     } } ",1
1301,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7L1 {     public static void main(String[] args) {                  Scanner input = new Scanner(System.in);         System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] m = new double[4][4];                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = input.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));     }     public static double sumMajorDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < m.length; i++) {             sum += m[i][i];         }         return sum;     } } ",1
1302,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7L2 {     public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[4][4];                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 matrix[i][j] = inp.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonalKanan(matrix));     }     public static double jumlahDiagonalKanan(double[][] matrix) {         double sum = 0;         for (int i = 0; i < matrix.length; i++) {             sum += matrix[i][i];         }         return sum;     } } ",1
1303,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7L3 {     public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         double[][] matrix = new double[4][4];         System.out.print(""Enter a 4 by 4 matrix row by row: "");                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 matrix[i][j] = inp.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonalKanan(matrix));     }     public static double jumlahDiagonalKanan(double[][] matrix) {         double sum = 0;         for (int i = 0; i < matrix.length; i++) {             sum += matrix[i][i];         }         return sum;     } } ",1
1304,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7L4 {     public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         double[][] matrix = new double[4][4];         System.out.print(""Enter a 4 by 4 matrix row by row: "");                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 matrix[i][j] = inp.nextDouble();             }         }         double sum = 0;         for (int i = 0; i < matrix.length; i++) {             sum += matrix[i][i];         }         System.out.print(""Sum of the elements in the major diagonal is "" + sum);     } } ",1
1305,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7L5 {     public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         double[][] matrix = new double[4][4];         int i = 0;         double sum = 0;         System.out.print(""Enter a 4 by 4 matrix row by row: "");                  while (i < 4) {             int j = 0;             while (j < 4) {                 matrix[i][j] = inp.nextDouble();                 j++;             }             i++;         }         i = 0;         while (i < matrix.length) {             sum += matrix[i][i];             i++;         }         System.out.print(""Sum of the elements in the major diagonal is "" + sum);     } } ",1
1306,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Kasus7L6 {     public static void main(String[] args) {                  Scanner inp = new Scanner(System.in);         double[][] matrix = new double[4][4];         int i = 0;         double sum = 0;         System.out.print(""Enter a 4 by 4 matrix row by row: "");                  while (i < 4) {             int j = 0;             while (j < 4) {                 matrix[i][j] = inp.nextDouble();                                  if(i == j){                     sum += matrix[i][j];                 }                                  j++;             }             i++;         }         System.out.print(""Sum of the elements in the major diagonal is "" + sum);     } } ",1
1307,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Level2  {     public static void main(String[] args)      {         Scanner sc = new Scanner(System.in);         System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] matrix = new double[4][4];         for (int x = 0; x < 4; x++)          {             for (int y = 0; y < 4; y++)              {                 matrix[x][y] = sc.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is ""                 + hitungDiagonal(matrix));     }     public static double hitungDiagonal(double[][] matrix)      {         double jumlah = 0;         for (int i = 0; i < matrix.length; i++)          {             jumlah += matrix[i][i];         }         return jumlah;     } } ",1
1308,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Level4 {     public static void main(String[] args) {         Scanner in = new Scanner(System.in);         double[][] matriks;         matriks = new double[4][4];         double sum = 0;                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         for (int b = 0; b < 4; b++) {             for (int k = 0; k < 4; k++) {                 matriks[b][k] = in.nextDouble();             }         }                  for (int x = 0; x < matriks.length; x++){             sum += matriks[x][x];         }                      System.out.print(""Sum of the elements in the major diagonal is "" + sum);     } } ",1
1309,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Level6  {     public static void main(String[] args)      {         Scanner masukkan = new Scanner(System.in);         double[][] mat = new double[4][4];                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         for (int baris = 0; baris < 4; baris+=1)          {             for (int kolom = 0; kolom < 4; kolom+=1)              {                 mat[baris][kolom] = masukkan.nextDouble();             }         }                  ngitung(mat);     }     public static void ngitung(double[][] matriks)      {         double jumlah = 0;         int i = 3;         while(i >= 0){             jumlah += matriks[i][i];             i--;         }         System.out.print(""Sum of the elements in the major diagonal is ""+ jumlah);     } } ",1
1310,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static double hasilPertambahanDiagonal(double[][] m) {         double sum = 0;                  for (int i = 0; i < m.length; i++)             sum += m[i][i];                  return sum;     }          public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] n = new double[4][4];                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 n[i][j] = input.nextDouble();             }         }                  System.out.print(""Sum of the elements in the major diagonal is "" + hasilPertambahanDiagonal(n));     } } ",1
1311,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static double sumMajorDiagonal(double[][] m){         double hasil=0;         for(int i=0;i<4;i++){             hasil+=m[i][i];         }         return hasil;     }     public static void main(String[] args) {         Scanner sc=new Scanner(System.in);         double[][] m=new double[4][4];         System.out.println(""Enter a 4-by-4 matrix row by row:"");         for(int i=0;i<4;i++){             for(int j=0;j<4;j++){                 m[i][j]=sc.nextDouble();             }         }         System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(m));     } } ",0
1312,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] arr = new double[4][4];         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 arr[i][j] = input.nextDouble();             }         }                  System.out.print(""Sum of the elements in the major diagonal is ""                 + sumMajorDiagonal(arr));     }     public static double sumMajorDiagonal(double[][] m) {                  double sum = 0;         for (int i = 0; i < m.length; i++) {             sum += m[i][i];         }         return sum;     } } ",1
1313,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] m = new double[4][4];                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = input.nextDouble();             }         }                  System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));     }     public static double sumMajorDiagonal(double[][] m) {         double sum = 0;                  for (int i = 0; i < m.length; i++)             sum += m[i][i];                  return sum;     } } ",1
1314,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] m = new double[4][4];         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = input.nextDouble();             }         }                  System.out.print(""Sum of the elements in the major diagonal is ""                 + sumMajorDiagonal(m));     }     public static double sumMajorDiagonal(double[][] m) {                  double sum = 0;         for (int i = 0; i < m.length; i++) {             sum += m[i][i];         }         return sum;     } } ",1
1315,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] n = new double[4][4];                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 n[i][j] = input.nextDouble();             }         }                  System.out.print(""Sum of the elements in the major diagonal is "" + hasilPertambahanDiagonal(n));     }     public static double hasilPertambahanDiagonal(double[][] m) {         double sum = 0;                  for (int i = 0; i < m.length; i++)             sum += m[i][i];                  return sum;     } } ",1
1316,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] n = new double[4][4];                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 n[i][j] = input.nextDouble();             }         }                  double sum = 0;                  for (int i = 0; i < n.length; i++)             sum += n[i][i];                  System.out.print(""Sum of the elements in the major diagonal is "" + sum);     } } ",1
1317,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] n = new double[4][4];                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 n[i][j] = input.nextDouble();             }         }                  double sum = 0;                  int i=0;         while(i<n.length){             sum += n[i][i];             i++;         }                               System.out.print(""Sum of the elements in the major diagonal is "" + sum);     } } ",1
1318,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] n = new double[4][4];                  for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 n[i][j] = input.nextDouble();             }         }                  double sum = 0;                  int i=0;         while(i<n.length){             sum += n[i][i];         }                               System.out.print(""Sum of the elements in the major diagonal is "" + sum);     } } ",1
1319,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         double[][] arr;         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         arr = new double[4][4];         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 arr[i][j] = input.nextDouble();             }         }                  System.out.print(""Sum of the elements in the major diagonal is ""                 + sumMajorDiagonal(arr));     }     public static double sumMajorDiagonal(double[][] m) {                  double sum = 0;         for (int i = 0; i < m.length; i++) {             sum += m[i][i];         }         return sum;     } } ",1
1320,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         double[][] arr;         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         arr = new double[4][4];         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 arr[i][j] = input.nextDouble();             }         }                  double sum = 0;         for (int i = 0; i < arr.length; i++) {             sum += arr[i][i];         }                  System.out.print(""Sum of the elements in the major diagonal is ""                 + sum);     } } ",1
1321,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         double[][] arr;         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         arr = new double[4][4];         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 arr[i][j] = input.nextDouble();             }         }                  double sum;         sum = 0;         for (int i = 0; i < arr.length; i = i + 1) {             sum += arr[i][i];         }                  System.out.print(""Sum of the elements in the major diagonal is ""                 + sum);     } } ",1
1322,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Main {     public static void main(String[] args) {         double[][] arr;         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         arr = new double[4][4];         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 arr[i][j] = input.nextDouble();             }         }                  double sum;         sum = 0;         for (int i = 0; i < arr.length; i++) {             sum += arr[i][i];         }                  System.out.print(""Sum of the elements in the major diagonal is ""                 + sum);     } } ",1
1323,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class No7 {          public static void main(String[] args) {         double[][] matrix = new double[4][4];         Scanner sc = new Scanner(System.in);         System.out.println(""Enter a 4-by-4 matrix row by row"");         for(int i=0;i<4;i++){             for(int j=0;j<4;j++){                 matrix[i][j] = sc.nextDouble();             }         }         System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(matrix));     }          public static double sumMajorDiagonal(double[][] m){         double sum = 0;         for(int i=0;i<4;i++){             sum += m[i][i];         }         return sum;     }      } ",0
1324,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Nomor7_2451041557A22145B3701B0184109CAB013 {          public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int [][] matrix = new int [4][4];         int sum =0;         System.out.println(""Enter a 4-by-4 matrix row by row: "");         for(int i =0 ;i<4;i++){             for(int j=0;j<4;j++){                 matrix[i][j]= sc.nextInt();                 if(i==j){                     sum += matrix[i][j];                 }             }         }         System.out.println(""Sum of the elements in the major diagonal is ""+sum);     }      } ",0
1325,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class Soal7 {          public static double sumMajorDiagonal(double[][] m){         double hasil=0;         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 if(i==j){                     hasil += m[i][j];                 }             }         }         return hasil;     }          public static void main(String[] args) {         double[][] m = new double[4][4];         Scanner sc = new Scanner(System.in);         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = sc.nextDouble();             }         }         System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));     }                } ",0
1326,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class T07 {          public static void main(String[] args) {         double[][] matrix = new double[4][4];         Scanner sc = new Scanner(System.in);         System.out.println(""Enter a 4-by-4 matrix row by row"");         for(int i=0;i<4;i++){             for(int j=0;j<4;j++){                 matrix[i][j] = sc.nextDouble();             }         }         System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(matrix));     }          public static double sumMajorDiagonal(double[][] m){         double sum = 0;         for(int i=0;i<4;i++){             sum += m[i][i];         }         return sum;     } } ",0
1327,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class T07 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         System.out.println(""Enter a 4-by-4 matrix row by row"");         double[][] a = new double[4][4];         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 a[i][j] = s.nextDouble();             }         }         System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(a));     }     public static double sumMajorDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 if(i==j)                     sum += m[i][j];             }         }         return sum;     } } ",0
1328,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class T07 {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);         System.out.println(""Enter a 4-by-4 matrix row by row:"");         double[][] m=new double[4][4];         for(int i=0;i<4;i++){             for(int j=0;j<4;j++){                 m[i][j]=s.nextDouble();             }         }         System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(m));     }     public static double sumMajorDiagonal(double[][] m){         double temp=0;         for(int i=0;i<4;i++){             for(int j=0;j<4;j++){                 if(i==j){                     temp=temp+m[i][j];                 }             }         }         return temp;     } } ",0
1329,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class T07 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] arr = new double[4][4];                  System.out.println(""Enter a 4-by-4 row by row: "");         for(int i = 0; i < 4; i++) {             for(int j = 0; j < 4; j++) {                 arr[i][j] = sc.nextDouble();             }             System.out.print("""");         }         sumMajorDiagonal(arr);     }          public static double sumMajorDiagonal(double[][] m) {         double total = m[0][0] + m[1][1] + m[2][2] + m[3][3];         System.out.println(""Sum of the elements in the major diagonal is "" + total);         return total;     } } ",0
1330,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class T07 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] m = new double[4][4];         System.out.println(""Enter a 4-by-4 matrix row by row: "");         for (int i = 0; i < m.length; i++) {             for (int j = 0; j < m.length; j++) {                 m[i][j] = sc.nextDouble();             }         }         System.out.println(""Sum of the elements in the major diagonal is ""                 + sumMajorDiagonal(m));     }     public static double sumMajorDiagonal(double[][] m) {         double tambah = m[0][0] + m[1][1] + m[2][2] + m[3][3];         return tambah;     } } ",0
1331,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class T07 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] matrix = new double[4][4];         System.out.println(""Enter a 4-by-4 matrix row to row : "");         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 matrix[i][j] = sc.nextDouble();             }         }         double result = sumMajorDiagonal(matrix);         System.out.println(""Sum of the element in the major diagonal is "" + result);     }     public static double sumMajorDiagonal(double[][] m) {         double result = 0;         for (int i = 0; i < 4; i++) {             result+=m[i][i];         }         return result;     } } ",0
1332,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class T07 {     public static void main(String[] args){                  Scanner sc = new Scanner(System.in);                  double[][] m = new double[4][4];                  System.out.println(""Enter a 4-by-4 matrix row by row: "");                  for(int i = 0; i < m.length; i++){             for(int j = 0; j < m[0].length; j++){                 m[i][j] = sc.nextDouble();             }         }                  System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));              }          public static double sumMajorDiagonal(double[][] m){         double sum = 0;         for(int i = 0; i < m.length; i++){             sum += m[i][i];         }         return sum;     } } ",0
1333,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class T07 {     static Scanner sc = new Scanner(System.in);     public static double sumMajorDiagonal(double[][] m) {         double hasil = 0;         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = sc.nextDouble();                 if(i==j){                     hasil += m[i][j];                 }             }         }         return hasil;     }     public static void main(String[] args) {                  double[][] m = new double[4][4];         System.out.println(""Enter a 4-by-4 matrix row by row:"");         System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(m));     } } ",0
1334,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } "," import java.util.Scanner; public class t07 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] matriks = new double[4][4];         System.out.println(""Enter a 4-by-4 matrix row by row: "");         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 matriks[i][j] = sc.nextDouble();             }         }         System.out.println(""Sum of the elements in the major diagonal is ""                 + sumMajorDiagonal(matriks));     }     public static double sumMajorDiagonal(double[][] m) {         double hasil = 0;         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 if (i == j) {                     hasil += m[i][j];                 }             }         }         return hasil;     } } ",0
1335,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.*; class multiarray { public static double sum(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } public static void main(String[] args) { int i,j; System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] ma = new double[4][4]; Scanner input = new Scanner(System.in); for (i = 0; i < 4; i++) for (j = 0; j < 4; j++) ma[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is ""+ sum(ma)); } }",1
1336,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.*; class multiarray { public static double sum(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } public static void main(String[] args) { int i,j; System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] ma = new double[4][4]; Scanner input = new Scanner(System.in); for (i = 0; i < 4; i++) for (j = 0; j < 4; j++) ma[i][j] = input.nextDouble(); double sum = 0; for ( i = 0; i < ma.length; i++) sum += ma[i][i]; System.out.print(""Sum of the elements in the major diagonal is ""+ sum); } }",1
1337,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.*; class multiarray { public static double sum(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } public static void main(String[] args) { int i,j; System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] ma = new double[4][4]; Scanner input = new Scanner(System.in); for (i = 0; i < 4; i++) for (j = 0; j < 4; j++) ma[i][j] = input.nextDouble(); double sum = 0; i=0; while(i<ma.length) { sum += ma[i][i]; i++; } System.out.print(""Sum of the elements in the major diagonal is ""+ sum); } }",1
1338,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.*; class multiarray { public static double sum(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } public static void main(String[] args) { int i,j; System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] ma = new double[4][4]; Scanner input = new Scanner(System.in); for (i = 3; i >=0; i--) for (j = 3; j >= 0; j--) ma[3-i][3-j] = input.nextDouble(); double sum = 1; i=1; while(i<=ma.length) { sum += ma[i][i]; i++; } System.out.print(""Sum of the elements in the major diagonal is ""+ (sum-1)); } }",1
1339,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.*; class multiarray { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } }",1
1340,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.*; class multiarray { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] ma = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) ma[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is ""+ sum(ma)); } public static double sum(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } }",1
1341,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Level1 {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);          System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] m = new double[4][4];         for (int i = 0; i < 4; i++) {             for (int j = 0; j < 4; j++) {                 m[i][j] = input.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is ""                 + sumMajorDiagonal(m));     }          public static double sumMajorDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < m.length; i++) {             sum += m[i][i];         }         return sum;     } } ",1
1342,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Level3 {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         double[][] matriks = new double[4][4];                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         for (int bar = 0; bar < 4; bar++) {             for (int kol = 0; kol < 4; kol++) {                 matriks[bar][kol] = scan.nextDouble();             }         }         System.out.print(""Sum of the elements in the major diagonal is ""                 + diagonal(matriks));     }     public static double diagonal(double[][] x) {         double jumlah = 0;         for (int i = 0; i < x.length; i++)             jumlah += x[i][i];         return jumlah;     } } ",1
1343,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Level5 {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         double[][] matriks = new double[4][4];                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         for (int bar = 0; bar < 4; bar++) {             for (int kol = 0; kol < 4; kol++) {                 matriks[bar][kol] = sc.nextDouble();             }         }                  hasil(matriks);     }     public static double sum(double[][] x) {         double jumlah = 0;         int i = 0;         while(i < 4){             jumlah += x[i][i];             i++;         }         return jumlah;     }          private static void hasil(double[][] x) {         System.out.print(""Sum of the elements in the major diagonal is ""+ sum(x));     } } ",1
1344,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Main {          public static double sumMajorDiagonal(double[][] mtx) {         double sum = 0;         for (int i = 0; i < mtx.length; i++)             sum += mtx[i][i];         return sum;     }     public static void main(String[] args) {         double[][] mtx = new double[4][4];         Scanner s = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         for (int i = 0; i < 4; i++)             for (int j = 0; j < 4; j++)                 mtx[i][j] = s.nextDouble();         System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));     } } ",1
1345,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner input = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] m = new double[4][4];         for (int i = 0; i < 4; i++)             for (int j = 0; j < 4; j++)                 m[i][j] = input.nextDouble();         System.out.print(""Sum of the elements in the major diagonal is ""          + sumMajorDiagonal(m));         }          public static double sumMajorDiagonal(double[][] m) {         double sum = 0;         for (int i = 0; i < m.length; i++)             sum += m[i][i];         return sum;     } } ",1
1346,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner s = new Scanner(System.in);                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         double[][] mtx = new double[4][4];         for (int i = 0; i < 4; i++)             for (int j = 0; j < 4; j++)                 mtx[i][j] = s.nextDouble();         System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));     }          public static double sumMajorDiagonal(double[][] mtx) {         double sum = 0;         for (int i = 0; i < mtx.length; i++)             sum += mtx[i][i];         return sum;     } } ",1
1347,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Main {     static Scanner s = new Scanner(System.in);     public static void inputData(double[][] mtx){         for (int i = 0; i < 4; i++)             for (int j = 0; j < 4; j++)                 mtx[i][j] = s.nextDouble();     }          public static double sumMajorDiagonal(double[][] mtx) {         double sum = 0;         for (int i = 0; i < mtx.length; i++)             sum += mtx[i][i];         return sum;     }     public static void main(String[] args) {         double[][] mtx = new double[4][4];                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         inputData(mtx);         System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));     } } ",1
1348,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Main {     static Scanner s = new Scanner(System.in);     public static void inputData(double[][] mtx){         int i =0;         int j=0;         while(i<4) {             while(j<4){                 mtx[i][j] = s.nextDouble();                 j++;             } j = 0;             i++;         }     }          public static double sumMajorDiagonal(double[][] mtx) {         double sum = 0;         for (int i = 0; i < mtx.length; i=+2)             sum += mtx[i][i]+mtx[i+1][i+1];         return sum;     }     public static void main(String[] args) {         double[][] mtx = new double[4][4];                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         inputData(mtx);         System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));     } } ",1
1349,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class Main {     static Scanner s = new Scanner(System.in);     public static void inputData(double[][] mtx){         int i =0;         int j=0;         while(i<4) {             while(j<4){                 mtx[i][j] = s.nextDouble();                 j++;             } j=0;         i++;         }     }          public static double sumMajorDiagonal(double[][] mtx) {         double sum = 0;         for (int i = 0; i < mtx.length; i++)             sum += mtx[i][i];         return sum;     }     public static void main(String[] args) {         double[][] mtx = new double[4][4];                  System.out.print(""Enter a 4 by 4 matrix row by row: "");         inputData(mtx);         System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));     } } ",1
1350,"import java.util.Scanner; public class T7 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(""Enter a 4 by 4 matrix row by row: ""); double[][] m = new double[4][4]; for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) m[i][j] = input.nextDouble(); System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m)); } public static double sumMajorDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) sum += m[i][i]; return sum; } } ","import java.util.Scanner; public class T07 {    public static void main(String[] args)    {              Scanner sc = new Scanner(System.in);       double[][] numbers = new double[4][4];       System.out.println(""Enter a 4-by4 matrix row by row:"");       for(int i=0;i < 4;i++)       {          String rows = sc.nextLine();          String[] rowssplit = rows.split(""\\s+"");          for (int j = 0; j < 4; j++)          {             numbers[i][j] = Double.parseDouble(rowssplit[j]);          }       }      System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(numbers));    }    public static double sumMajorDiagonal (double[][] m)    {       double jumdiagonal = 0;       for(int i=0;i < 4;i++)       {          for(int j = 0; j < 4; j++)          {             if(i == j)             {                jumdiagonal = jumdiagonal + m[i][j];             }          }        }        return jumdiagonal;     } }",0
1351,"import java.util.Scanner; public class fifth {     public static void main(String[] args) {         Scanner scn = new Scanner(System.in);         int t = scn.nextInt();         for (int i = 0; i < t; i++) {             int n = scn.nextInt();             int k = scn.nextInt();             int[] a = new int[k];             int[] b = new int[k];             for (int j = 0; j < k; j++)                 a[j] = scn.nextInt();             for (int j = 0; j < k; j++)                 b[j] = scn.nextInt();             fun(n, a, b);         }     }     public static void fun(int n, int[] a, int[] b) {         int[] ans = new int[n];         for (int i = 0; i < n; i++)             ans[i] = Integer.MAX_VALUE;         for (int i = 0; i < a.length; i++)             ans[a[i] - 1] = b[i];         for (int i = 1; i < n; i++)             if (ans[i - 1] != Integer.MAX_VALUE)                 ans[i] = Math.min(ans[i], ans[i - 1] + 1);         for (int i = n - 2; i >= 0; i--)             ans[i] = Math.min(ans[i], ans[i + 1] + 1);         for (int ele : ans)             System.out.print(ele + "" "");         System.out.println();     } } ","import java.util.*; import java.io.*; public class E {     public static void main(String[] args) throws IOException {         setIO();         int INF = 2000000000;         int Q = ni();         while (Q-- > 0) {         rl();         st = nl();         int N = ni(st), K = ni(st);         int[] P = nia(K);         int[] T = nia(K);         int[] A = new int[N];         Arrays.fill(A, INF);         for (int i = 0; i < K; i++) {         A[P[i]-1] = T[i]; }         int[] R = new int[N];         R[N-1] = A[N-1];         for (int i = N-2; i >= 0; i--) { R[i] = Math.min(R[i+1] + 1, A[i]); }         int[] L = new int[N];         L[0] = A[0];         for (int i = 1; i < N; i++) {         L[i] = Math.min(L[i-1] + 1, A[i]); }         for (int i = 0; i < N; i++) {         out.print(Math.min(L[i], R[i]) + "" ""); }         out.println(); }         f.close();         out.close();     }     static BufferedReader f;     static PrintWriter out;     static StringTokenizer st;     static String rl() throws IOException {         return f.readLine();     }     static int ni(StringTokenizer st) {         return Integer.parseInt(st.nextToken());     }          static int ni() throws IOException {         return Integer.parseInt(rl());     }          static StringTokenizer nl() throws IOException {         return new StringTokenizer(rl());     }     static int[] nia(int N) throws IOException {         StringTokenizer st = nl();         int[] A = new int[N];         for (int i = 0; i < N; i++)             A[i] = ni(st);         return A;     }     static void setIn() {         f = new BufferedReader(new InputStreamReader(System.in));     }     static void setOut() {         out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));     }          static void setIO() {         setIn();         setOut();     } } ",0
1352,"import java.util.StringTokenizer; import java.io.*; public class CF_1551c{     public static final void main(String[] args){         Kattio io= new Kattio();         int t= io.getInt();         while(t-->0){             int n= io.getInt();             int[][] ps= new int[5][n];             for(int i=0; i<n; i++){                 String w= io.getWord();                 int len= w.length();                                  for(int j=0; j<len; j++)                     ps[w.charAt(j)-'a'][i]++;                                                      for(int k=0; k<5; k++)                     ps[k][i]+= ps[k][i]-len;                }                          for(int k=0; k<5; k++)                 mergeSort(ps[k]);                                                    int max= 0;             for(int k=0; k<5; k++){                 if(ps[k][n-1]<=0) continue;                 if(max==0) max= 1;                 for(int i=2; i<=n; i++){                     ps[k][n-i]+= ps[k][n-i+1];                     if(ps[k][n-i]<=0) break;                     if(i>max) max= i;                 }             }             io.println(max);         }         io.close();     }          static void mergeSort(int arr[]){         int n= arr.length;         for (int sz= 1; sz<=n-1; sz=2*sz){             for (int l= 0; l<n-1; l+=2*sz){                 int m= Math.min(l + sz-1, n-1);                 int r= Math.min(l + 2*sz-1, n-1);                 int n1= m-l+1, n2= r-m;                 int L[] = new int[n1];                 for (int i= 0; i<n1; i++) L[i]= arr[l+i];                 int R[] = new int[n2];                 for (int j= 0; j<n2; j++) R[j]= arr[m+1+j];                 int i= 0, j= 0, k= l;                 for(;i<n1 && j<n2; k++){                     if(L[i]<=R[j]){arr[k]= L[i]; i++;}                     else{arr[k] = R[j]; j++;}                 }                 for(;i<n1; i++, k++) arr[k]= L[i];                 for(;j<n2; j++, k++) arr[k]= R[j];             }         }     }              static class Kattio extends PrintWriter {         private BufferedReader r;         private String line, token;         private StringTokenizer st;              public Kattio(){this(System.in);}         public Kattio(InputStream i){         super(new BufferedOutputStream(System.out));             r= new BufferedReader(new InputStreamReader(i));         }         public Kattio(InputStream i, OutputStream o){         super(new BufferedOutputStream(o));             r= new BufferedReader(new InputStreamReader(i));         }                  public boolean hasMoreTokens(){             return peekToken()!=null;         }         public int getInt(){             return Integer.parseInt(nextToken());         }                           public String getWord(){             return nextToken();         }                  private String peekToken(){             if(token==null) try {                 while(st==null || !st.hasMoreTokens()) {                     line= r.readLine();                     if(line==null) return null;                     st= new StringTokenizer(line);                 }                 token= st.nextToken();             }catch(IOException e){}             return token;         }         private String nextToken() {             String ans= peekToken();             token= null;             return ans;         }     } } ","import java.util.*; import java.io.*; public class CF_1551c{     public static final void main(String[] args){         Kattio io= new Kattio();         int t= io.getInt();         while(t-->0){             int n= io.getInt();             int[][] ps= new int[5][n];             for(int i=0; i<n; i++){                 String w= io.getWord();                 int len= w.length();                                  for(int j=0; j<len; j++)                     ps[w.charAt(j)-'a'][i]++;                                                      for(int k=0; k<5; k++)                     ps[k][i]+= ps[k][i]-len;                }                          for(int k=0; k<5; k++)                                  Arrays.sort(ps[k]);                                                    int max= 0;             for(int k=0; k<5; k++){                 if(ps[k][n-1]<=0) continue;                 if(max==0) max= 1;                 for(int i=2; i<=n; i++){                     ps[k][n-i]+= ps[k][n-i+1];                     if(ps[k][n-i]<=0) break;                     if(i>max) max= i;                 }             }             io.println(max);         }         io.close();     }                        static class Kattio extends PrintWriter {         private BufferedReader r;         private String line, token;         private StringTokenizer st;              public Kattio(){this(System.in);}         public Kattio(InputStream i){         super(new BufferedOutputStream(System.out));             r= new BufferedReader(new InputStreamReader(i));         }         public Kattio(InputStream i, OutputStream o){         super(new BufferedOutputStream(o));             r= new BufferedReader(new InputStreamReader(i));         }                  public boolean hasMoreTokens(){             return peekToken()!=null;         }         public int getInt(){             return Integer.parseInt(nextToken());         }                           public String getWord(){             return nextToken();         }                  private String peekToken(){             if(token==null) try {                 while(st==null || !st.hasMoreTokens()) {                     line= r.readLine();                     if(line==null) return null;                     st= new StringTokenizer(line);                 }                 token= st.nextToken();             }catch(IOException e){}             return token;         }         private String nextToken() {             String ans= peekToken();             token= null;             return ans;         }     } } ",1
1353,"import java.util.function.Consumer; import java.util.*; import java.math.BigDecimal; import java.math.BigInteger; import java.math.RoundingMode; import java.text.DecimalFormat; import java.io.*; import java.lang.Math.*;  public class KickStart2020{           public static void main(String[] args) throws Exception{ FastReader sc = new FastReader(); PrintWriter out = new PrintWriter(System.out);           int t = sc.nextInt();           while(t-- > 0) {            int n = sc.nextInt();            int k = sc.nextInt();            int arr[] = new int[k];            int temp[] = new int[k];            for(int i = 0; i < k; i++) arr[i] = sc.nextInt();            for(int i = 0; i < k; i++) temp[i] = sc.nextInt();            long brr[] = new long[n];            Arrays.fill(brr, Integer.MAX_VALUE);            for(int i = 0; i < k; i++) brr[arr[i] - 1] = temp[i];            for(int i = 1; i < n; i++) {            brr[i] = Math.min(brr[i], brr[i - 1] + 1);            }            for(int i = n - 2; i >= 0; i--) {            brr[i] = Math.min(brr[i], brr[i + 1] + 1);            }            for(long e: brr) out.print(e + "" "");            out.println();                         }                  out.close(); } } ","import java.util.*; import java.lang.*; import java.io.*; public class cf {     static PrintWriter out;     static FastReader scan;               public static int ni() {         return scan.nextInt();     }                                             static void lPA(long arr[]) {         StringBuilder output = new StringBuilder();         for (int i = 0; i < arr.length; i++) output.append(arr[i] + "" "");         out.println(output);     }                    static void iIA(int arr[]) {         for (int i = 0; i < arr.length; i++) arr[i] = ni();     }                                                                      static final Random random = new Random();                              public static void main(String[] args) throws java.lang.Exception {         OutputStream outputStream = System.out;         out = new PrintWriter(outputStream);         scan = new FastReader();                  StringBuilder sb = new StringBuilder();         int t = ni();         while (t-- != 0) {             int n=ni();             int k=ni();             int[] a=new int[k];             int[] temp=new int[k];             iIA(a);             iIA(temp);             long dp[]=new long[n];             Arrays.fill(dp,Integer.MAX_VALUE);             for(int i=0;i<k;i++){                 dp[a[i]-1]=temp[i];             }                          for(int i=1;i<n;i++){                 dp[i]=Math.min(dp[i-1]+1,dp[i]);             }                          for(int i=n-2;i>=0;i--){                 dp[i]=Math.min(dp[i+1]+1,dp[i]);             }             lPA(dp);                      }         out.flush();         out.close();     } } ",1
1354,"import java.util.function.Consumer; import java.util.*; import java.math.BigDecimal; import java.math.BigInteger; import java.math.RoundingMode; import java.text.DecimalFormat; import java.io.*; import java.lang.Math.*;  public class KickStart2020{           public static void main(String[] args) throws Exception{ FastReader sc = new FastReader(); PrintWriter out = new PrintWriter(System.out);           int t = sc.nextInt();           while(t-- > 0) {            int n = sc.nextInt();            int k = sc.nextInt();            int arr[] = new int[k];            int temp[] = new int[k];            for(int i = 0; i < k; i++) arr[i] = sc.nextInt();            for(int i = 0; i < k; i++) temp[i] = sc.nextInt();            long brr[] = new long[n];            Arrays.fill(brr, Integer.MAX_VALUE);            for(int i = 0; i < k; i++) brr[arr[i] - 1] = temp[i];            for(int i = 1; i < n; i++) {            brr[i] = Math.min(brr[i], brr[i - 1] + 1);            }            for(int i = n - 2; i >= 0; i--) {            brr[i] = Math.min(brr[i], brr[i + 1] + 1);            }            for(long e: brr) out.print(e + "" "");            out.println();                         }                  out.close(); } } ","import java.util.*; import java.util.Map.Entry; import java.lang.*; import java.io.*; import java.math.BigInteger; public class CF { private static FS sc = new FS(); private static class extra { static int[] intArr(int size) { int[] a = new int[size]; for(int i = 0; i < size; i++) a[i] = sc.nextInt(); return a; } } static int mod = (int) 1e9 + 9; static int max = (int) 1e6, sq = 316; static LinkedList<Integer>[] temp; public static void main(String[] args) { int t = sc.nextInt(); StringBuilder ret = new StringBuilder(); while(t-- > 0) { int n = sc.nextInt(); int m = sc.nextInt(); int[] a = extra.intArr(m); int[] b = extra.intArr(m); long[] c = new long[n]; Arrays.fill(c, (int)1e18); for(int i = 0; i < m; i++) c[a[i]-1] = b[i]; long[] l = new long[n]; long[] r = new long[n]; Arrays.fill(l, (int)1e18); Arrays.fill(r, (int)1e18); long min = (long)1e18; for(int i = 0; i < n; i++) { min = Math.min(min+1, c[i]); l[i] = min; } min = (int)1e18; for(int i = n-1; i >= 0; i--) { min = Math.min(min+1, c[i]); r[i] = min; } for(int i = 0; i < n; i++) { ret.append(Math.min(l[i], r[i]) + "" ""); } ret.append(""\n"");  } System.out.println(ret); } } ",0
1355,"import javax.print.DocFlavor; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class BST {          public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-->0){             int n = Integer.parseInt(br.readLine());             long [] arr = new long[n];             StringTokenizer st = new StringTokenizer(br.readLine());             for (int i = 0; i < n; i++) {                 long tmp = Long.parseLong(st.nextToken());                 arr[i] = tmp;             }             int h = 1;             int v = 1;             long minHor = arr[0];             long minVir = arr[1];             long sum0 = arr[0];             long sum1 = arr[1];             long total = (arr[0] + arr[1])*n;             for (int i = 2; i < n; i++) {                 if(i%2==0){                     h++;                     sum0 += arr[i];                     minHor = Math.min(arr[i] , minHor);                     total = Math.min(total , minHor*(n-h+1)+(sum0-minHor)+minVir*(n-v+1)+(sum1-minVir));                 }else {                     v++;                     sum1 += arr[i];                     minVir = Math.min(arr[i] , minVir);                     total = Math.min(total , minHor*(n-h+1)+(sum0-minHor)+minVir*(n-v+1)+(sum1-minVir));                 }             }             System.out.println(total);         }     } } ","import java.io.BufferedReader; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; import java.io.PrintStream;                      public class Solution {             public static final boolean LOCAL = System.getProperty(""ONLINE_JUDGE"")==null;                                                                                 public static void main(String[] args) throws Exception {                          FastScanner s = new FastScanner();             PrintStream debug = null;                          if(LOCAL){                 s = new FastScanner(""src/input.txt"");                 PrintStream o = new PrintStream(""src/sampleout.txt"");                 debug = new PrintStream(""src/debug.txt"");                 System.setOut(o);             }                          int tcr = s.nextInt();                          for(int tc=0;tc<tcr;tc++){                 int n = s.nextInt();                 long arr[] = new long[n];                 for(int i=0;i<n;i++){                     arr[i] = s.nextLong();                 }                 long min1 = arr[0];                 long min2 = arr[1];                 long sum1 = arr[0];                 long sum2 = arr[1];                 int cnt1 = 1;                 int cnt2 = 1;                 long ans = arr[0]*(n) + arr[1]*(n);                 for(int i=2;i<n;i++){                     if((i % 2) == 0){                         min1 = Math.min(min1,arr[i]);                         sum1 += arr[i];                         cnt1++;                     }else{                         min2 = Math.min(min2,arr[i]);                         sum2 += arr[i];                         cnt2++;                     }                     long temp = min1*(n - cnt1 + 1) + (sum1 - min1) + (min2*(n- cnt2 + 1) + (sum2 - min2));                     ans = Math.min(ans,temp);                 }                 println(ans);             }                         }                                                                                                                                                                         public static void println(Object obj){             System.out.println(obj.toString());         }                                                                                                } ",0
1356,"import javax.print.DocFlavor; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class BST {          public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-->0){             int n = Integer.parseInt(br.readLine());             long [] arr = new long[n];             StringTokenizer st = new StringTokenizer(br.readLine());             for (int i = 0; i < n; i++) {                 long tmp = Long.parseLong(st.nextToken());                 arr[i] = tmp;             }             int h = 1;             int v = 1;             long minHor = arr[0];             long minVir = arr[1];             long sum0 = arr[0];             long sum1 = arr[1];             long total = (arr[0] + arr[1])*n;             for (int i = 2; i < n; i++) {                 if(i%2==0){                     h++;                     sum0 += arr[i];                     minHor = Math.min(arr[i] , minHor);                     total = Math.min(total , minHor*(n-h+1)+(sum0-minHor)+minVir*(n-v+1)+(sum1-minVir));                 }else {                     v++;                     sum1 += arr[i];                     minVir = Math.min(arr[i] , minVir);                     total = Math.min(total , minHor*(n-h+1)+(sum0-minHor)+minVir*(n-v+1)+(sum1-minVir));                 }             }             System.out.println(total);         }     } } ","import java.util.*; import java.io.*; import java.math.*; public class Coder {   static int n;   static long c[];   static StringBuilder str = new StringBuilder("""");   static void solve() {       long mne=c[0];       long mno=c[1];       long ans=(c[0]+c[1])*n;       long se=c[0];       long so=c[1];       long ecnt=1,ocnt=1;       for(int i=2;i<n;i++){           if(i%2==0){mne=Math.min(mne, c[i]);se+=c[i];ecnt++;}           else{mno=Math.min(mno, c[i]);so+=c[i];ocnt++;}                      ans=Math.min(ans, se+mne*(n-ecnt)+so+mno*(n-ocnt));       }       str.append(ans).append(""\n"");   }   public static void main(String[] args) throws java.lang.Exception {     BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));     int q = Integer.parseInt(bf.readLine().trim());     while(q-->0) {         n=Integer.parseInt(bf.readLine().trim());         c=new long[n];         String s[]=bf.readLine().trim().split(""\\s+"");         for(int i=0;i<n;i++) c[i]=Long.parseLong(s[i]);       solve();     }     System.out.print(str);   } } ",0
1357,"import javax.print.DocFlavor; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*; public class BST {          public static void main(String[] args) throws IOException{         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-->0){             int n = Integer.parseInt(br.readLine());             long [] arr = new long[n];             StringTokenizer st = new StringTokenizer(br.readLine());             for (int i = 0; i < n; i++) {                 long tmp = Long.parseLong(st.nextToken());                 arr[i] = tmp;             }             int h = 1;             int v = 1;             long minHor = arr[0];             long minVir = arr[1];             long sum0 = arr[0];             long sum1 = arr[1];             long total = (arr[0] + arr[1])*n;             for (int i = 2; i < n; i++) {                 if(i%2==0){                     h++;                     sum0 += arr[i];                     minHor = Math.min(arr[i] , minHor);                     total = Math.min(total , minHor*(n-h+1)+(sum0-minHor)+minVir*(n-v+1)+(sum1-minVir));                 }else {                     v++;                     sum1 += arr[i];                     minVir = Math.min(arr[i] , minVir);                     total = Math.min(total , minHor*(n-h+1)+(sum0-minHor)+minVir*(n-v+1)+(sum1-minVir));                 }             }             System.out.println(total);         }     } } ","import javax.print.DocFlavor; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.*;   public class BST {              public static void main(String[] args) throws IOException{           BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         int t = Integer.parseInt(br.readLine());         while (t-->0){               int n = Integer.parseInt(br.readLine());             long [] arr = new long[n];             StringTokenizer st = new StringTokenizer(br.readLine());             for (int i = 0; i < n; i++) {                 long tmp = Long.parseLong(st.nextToken());                 arr[i] = tmp;               }               int h = 1;             int v = 1;             long minHor = arr[0];             long minVir = arr[1];             long sum0 = arr[0];             long sum1 = arr[1];             long total = (arr[0] + arr[1])*n;                 for (int i = 2; i < n; i++) {                   if(i%2==0){                     h++;                     sum0 += arr[i];                     minHor = Math.min(arr[i] , minHor);                     total = Math.min(total , minHor*(n-h+1)+(sum0-minHor)+minVir*(n-v+1)+(sum1-minVir));                 }else {                     v++;                     sum1 += arr[i];                     minVir = Math.min(arr[i] , minVir);                     total = Math.min(total , minHor*(n-h+1)+(sum0-minHor)+minVir*(n-v+1)+(sum1-minVir));                 }               }                 System.out.println(total);           }           }         } ",1
1358,"import javax.print.attribute.standard.MediaSize; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.lang.reflect.Array; import java.util.*; import java.util.stream.Stream; public class Program {     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));     static BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));     public static void main(String[] args) throws NumberFormatException, IOException {         int cases = Integer.parseInt(reader.readLine());         int mod = 998244353;         while(cases-- > 0) {             String[] firstLine = reader.readLine().split("" "");             int n = Integer.parseInt(firstLine[0]);             String a = reader.readLine();             String b = reader.readLine();             int ans = Integer.MAX_VALUE;             int oneZeroPos = -1;             int oneOnePos = -1;             int oneZero = 0;             int zeroOne = 0;             for(int i=0;i<n;i++) {                 if(a.charAt(i)=='0' && b.charAt(i)=='1') {                     zeroOne++;                 }                 if(a.charAt(i)=='1' && b.charAt(i)=='0') {                     oneZero++;                 }                 if(a.charAt(i)=='1' && b.charAt(i)=='0' && oneZeroPos == -1) {                     oneZeroPos = i;                 }                 if(a.charAt(i)=='1' && b.charAt(i)=='1' && oneOnePos == -1) {                     oneOnePos = i;                 }             }             if(oneZero==0&&zeroOne==0) {                 printNumber(0);                 continue;             }             if(oneZero==zeroOne) {                 ans = oneZero+zeroOne;             }             int a1 = func(a, b, oneZeroPos);             int b1 = func(a, b, oneOnePos);             if(a1 != Integer.MAX_VALUE) {                 ans = Math.min(ans, 1+a1);             }             if(b1 != Integer.MAX_VALUE) {                 ans = Math.min(ans, 1+b1);             }             if(ans == Integer.MAX_VALUE) {                 printNumber(-1);             } else {                 printNumber(ans);             }         }         out.flush();     }     public static int func(String str, String comparing, int index) {         if(index==-1) return Integer.MAX_VALUE;         char[] ch = str.toCharArray();         char[] comp = comparing.toCharArray();         for(int i=0;i<ch.length;i++) {             if(i!=index) {                 if(ch[i]=='1') ch[i] = '0';                 else ch[i] = '1';             }         }         int oneZero = 0;         int zeroOne = 0;         for(int i=0;i<str.length();i++) {             if(ch[i] == '1' && comp[i] == '0') {                 oneZero++;             } else if(ch[i] == '0' && comp[i] == '1') {                 zeroOne++;             }         }         if(oneZero == zeroOne) {             return oneZero+zeroOne;         }         return Integer.MAX_VALUE;     }                                         public static void printNumber(long num) throws IOException {         out.append(num + ""\n"");     }                                              } ","import java.util.Scanner; public class Menorah {     public static void main(String[] args) {         Scanner scan = new Scanner(System.in);         int t = scan.nextInt();         k:         while (t-- > 0) {             int n = scan.nextInt();             String a = scan.next();             String b = scan.next();             int zo = 0;             int oz = 0;             int ind = -1;             for (int i = 0; i < n; i++) {                 if (a.charAt(i) == '0' && b.charAt(i) == '1') {                     ++zo;                 } else if (a.charAt(i) == '1' && b.charAt(i) == '0') {                     ++oz;                 } else if (a.charAt(i) == '1' && b.charAt(i) == '1') {                     ind = i;                 }             }             int res = 1000000000;             int res2 = 1000000000;             if (zo == oz) {                 res = zo + oz;             }             if (ind != -1) {                 char[] s = a.toCharArray();                 for (int i = 0; i < n; i++) {                     if (i == ind) {                         continue;                     }                     if (s[i] == '0') {                         s[i] = '1';                     } else {                         s[i] = '0';                     }                 }                 zo = 0;                 oz = 0;                 for (int i = 0; i < n; i++) {                     if (s[i] == '0' && b.charAt(i) == '1') {                         ++zo;                     } else if (s[i] == '1' && b.charAt(i) == '0') {                         ++oz;                     }                 }                 if (zo == oz) {                     res2 = zo + oz + 1;                 }             }             if (res == 1000000000 && res2 == 1000000000) {                 System.out.println(""-1"");             } else {                 System.out.println(Math.min(res, res2));             }         }     } } ",0
1359,"import javax.swing.plaf.IconUIResource; import java.lang.reflect.Array; import java.text.CollationElementIterator; import java.util.*; import java.io.*; public class Main {               public static int mod = (int) (1e9 + 7);     static int ans = Integer.MAX_VALUE;     public static void main(String hi[]) throws Exception {         FastReader sc = new FastReader();         int t =sc.nextInt();         while(t-->0)         {             int n =sc.nextInt();             String a = sc.nextLine(),b=sc.nextLine();             int count1=0,count2=0,count3=0,count4=0;             for(int i=0;i<n;i++)             {                 if(a.charAt(i)=='0'&&b.charAt(i)=='0')                     count1++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='1')                     count2++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='0')                     count3++;                 else  if(a.charAt(i)=='0'&&b.charAt(i)=='1')                     count4++;             }             int ans=Integer.MAX_VALUE;             if(count3==count4)                 ans=Math.min(count3*2,ans);             if(count2==count1+1)                 ans=Math.min(ans,2*count1+1);             if(count2==1&&count1==0)                 ans=1;             if(count3==0&&count4==0)                 ans=0;             if(ans==Integer.MAX_VALUE)                 System.out.println(-1);             else System.out.println(ans);         }     }                                         } ","import java.util.*; import java.io.*; import java.math.BigInteger; import java.nio.charset.StandardCharsets; public class Main { private static FS sc = new FS(); static int mod = (int) 1e9; static LinkedList<Integer>[] temp, idx; static long inf = (long) Long.MAX_VALUE; public static void main(String[] args) {  int t = sc.nextInt(); StringBuilder ret = new StringBuilder(); while(t-- > 0) { int n = sc.nextInt(); String a = sc.next(), b = sc.next(); int _00 = 0, _01 = 0, _10 = 0, _11 = 0; for(int i = 0; i < n; i++) { if(a.charAt(i) == '0' && b.charAt(i) == '0') _00++; if(a.charAt(i) == '0' && b.charAt(i) == '1') _01++; if(a.charAt(i) == '1' && b.charAt(i) == '0') _10++; if(a.charAt(i) == '1' && b.charAt(i) == '1') _11++; } int ans = Integer.MAX_VALUE; if(_10 == _01) ans = _01 + _10; if(_10 > 0) { int n00 = _10 - 1;             int n01 = _11;             int n10 = _00 + 1;             int n11 = _01;             if (n01 == n10) {                 ans = Math.min(ans, 1 + n01 + n10);             } } if(_11 > 0) { int n00 = _10;             int n01 = _11 - 1;             int n10 = _00;             int n11 = _01 + 1;             if (n01 == n10) {                 ans = Math.min(ans, 1 + n01 + n10);             } } ret.append(ans == Integer.MAX_VALUE ? -1 : ans); ret.append(""\n""); } System.out.println(ret); } } ",0
1360,"import javax.swing.plaf.IconUIResource; import java.lang.reflect.Array; import java.text.CollationElementIterator; import java.util.*; import java.io.*; public class Main {               public static int mod = (int) (1e9 + 7);     static int ans = Integer.MAX_VALUE;     public static void main(String hi[]) throws Exception {         FastReader sc = new FastReader();         int t =sc.nextInt();         while(t-->0)         {             int n =sc.nextInt();             String a = sc.nextLine(),b=sc.nextLine();             int count1=0,count2=0,count3=0,count4=0;             for(int i=0;i<n;i++)             {                 if(a.charAt(i)=='0'&&b.charAt(i)=='0')                     count1++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='1')                     count2++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='0')                     count3++;                 else  if(a.charAt(i)=='0'&&b.charAt(i)=='1')                     count4++;             }             int ans=Integer.MAX_VALUE;             if(count3==count4)                 ans=Math.min(count3*2,ans);             if(count2==count1+1)                 ans=Math.min(ans,2*count1+1);             if(count2==1&&count1==0)                 ans=1;             if(count3==0&&count4==0)                 ans=0;             if(ans==Integer.MAX_VALUE)                 System.out.println(-1);             else System.out.println(ans);         }     }                                         } ","import java.util.*; import java.lang.*; import java.io.*; public class Codechef { public static void main (String[] args) throws java.lang.Exception {         Scanner sc = new Scanner(System.in);         int t = sc.nextInt();         int sm, n;         while(t > 0) {             t--;             n = sc.nextInt();             String s1,s2;             s1 = sc.next();             s2 = sc.next();             int a[] = new int[4];             a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0;             for(int i = 0 ; i < n ; i++) {                 if(s1.charAt(i) == '0'&& s2.charAt(i) == '1') a[0]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '0') a[1]++;                 else if(s1.charAt(i) == '1'&& s2.charAt(i) == '1') a[2]++;                 else a[3]++;             }                          int n1 = Integer.MAX_VALUE, n2 = Integer.MAX_VALUE, n3 = Integer.MAX_VALUE;                          if (a[0] == a[1]) {                 n1 = 2*a[0];             }             if((a[2] - 1) == a[3]) {                                  n2 = 2*a[3] + 1;             }              if((a[3] + 1) == a[2]) {                                  n3 = 2*a[2] + 1;             }              int ans = Math.min(n1, Math.min(n2,n3));             if(ans == Integer.MAX_VALUE) {                 System.out.println(""-1"");             } else {                 System.out.println(ans);             }         } } } ",0
1361,"import javax.swing.plaf.IconUIResource; import java.lang.reflect.Array; import java.text.CollationElementIterator; import java.util.*; import java.io.*; public class Main {               public static int mod = (int) (1e9 + 7);     static int ans = Integer.MAX_VALUE;     public static void main(String hi[]) throws Exception {         FastReader sc = new FastReader();         int t =sc.nextInt();         while(t-->0)         {             int n =sc.nextInt();             String a = sc.nextLine(),b=sc.nextLine();             int count1=0,count2=0,count3=0,count4=0;             for(int i=0;i<n;i++)             {                 if(a.charAt(i)=='0'&&b.charAt(i)=='0')                     count1++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='1')                     count2++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='0')                     count3++;                 else  if(a.charAt(i)=='0'&&b.charAt(i)=='1')                     count4++;             }             int ans=Integer.MAX_VALUE;             if(count3==count4)                 ans=Math.min(count3*2,ans);             if(count2==count1+1)                 ans=Math.min(ans,2*count1+1);             if(count2==1&&count1==0)                 ans=1;             if(count3==0&&count4==0)                 ans=0;             if(ans==Integer.MAX_VALUE)                 System.out.println(-1);             else System.out.println(ans);         }     }                                         } ","import javax.swing.plaf.IconUIResource; import java.lang.reflect.Array; import java.text.CollationElementIterator; import java.util.*; import java.io.*;       public class Main {                           public static int mod = (int) (1e9 + 7);     static int ans = Integer.MAX_VALUE;       public static void main(String hi[]) throws Exception {         FastReader sc = new FastReader();         int t =sc.nextInt();         while(t-->0)         {             int n =sc.nextInt();             String a = sc.nextLine(),b=sc.nextLine();               int count1=0,count2=0,count3=0,count4=0;               for(int i=0;i<n;i++)             {                 if(a.charAt(i)=='0'&&b.charAt(i)=='0')                     count1++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='1')                     count2++;                 else  if(a.charAt(i)=='1'&&b.charAt(i)=='0')                     count3++;                 else  if(a.charAt(i)=='0'&&b.charAt(i)=='1')                     count4++;             }             int ans=Integer.MAX_VALUE;               if(count3==count4)                 ans=Math.min(count3*2,ans);               if(count2==count1+1)                 ans=Math.min(ans,2*count1+1);                           if(ans==Integer.MAX_VALUE)                 System.out.println(-1);             else System.out.println(ans);           }       }                                                                 } ",1
1362,"import javax.swing.text.html.parser.Entity; import java.io.*; import java.util.*; import java.math.BigInteger; public class Main{     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Task solver = new Task();         solver.solve(in, out);         out.close();     }          static class Task{         double eps= 0.00000001;         static final int MAXN = 1010;         static final int MOD= 1000000007;                  static int spf[] = new int[MAXN];         static boolean[] prime;                                                                                                                                       public int add(int a, int b){             a+=b;             if(a>=MOD) a-=MOD;             else if(a<0) a+=MOD;             return a;         }                           int[] fact= new int[MAXN];         int[] inv= new int[MAXN];                                                                                          InputReader in; PrintWriter out;         static int mod = 1000000007;         int ans = 0;         ArrayList<Integer>g[] = new ArrayList[101];         int cnt[][] = new int[101][101];         int dp[][] = new int[101][101];                                    public void solve(InputReader in, PrintWriter out) {            int t = in.nextInt();            while (t-- > 0){                int n = in.nextInt();                String[] str = new String[n];                ArrayList<Integer> diff[] = new ArrayList[5];                for (int i = 0; i < 5; i++) diff[i] = new ArrayList<>();                for (int i = 0; i < n; i++){                    str[i] = in.nextToken();                    int[] cnt = new int[5];                    for (int j = 0; j < str[i].length(); j++){                        cnt[str[i].charAt(j) - 'a']++;                    }                    for (int j = 0; j < 5; j++){                        diff[j].add(cnt[j] * 2 - str[i].length());                    }                }                int ans = 0;                for (int i = 0; i < 5; i++){                    Collections.sort(diff[i]);                    Collections.reverse(diff[i]);                    int cur = 0, x = 0;                    for (int j = 0; j < diff[i].size(); j++){                        cur+=diff[i].get(j);                        if (cur <= 0){                            break;                        }                        x++;                    }                    ans = Math.max(ans, x);                }                out.println(ans);            }         }              }                                                        } ","import java.io.*; import java.util.*;  public class Solution{     public static void main (String[] args) throws java.lang.Exception {         FastReader sc = new FastReader();         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));         int testCase = sc.nextInt();         while (testCase-->0){             int n = sc.nextInt();             String[] strArr = new String[n];             for(int i=0; i<n; i++) {                 strArr[i]=sc.nextLine();             }             int[] total = new int[5];             ArrayList<int[]> al = new ArrayList<>();             for(int i=0; i<n; i++){                 int[] arr= new int[5];                 for(int j=0; j<strArr[i].length(); j++){                     arr[strArr[i].charAt(j)-'a']++;                 }                 for(int j=0; j<5; j++){                     total[j]+=arr[j];                 }                 al.add(arr);             }             int ans=0;             for(int i=0; i<5; i++){                 ArrayList<Integer> all = new ArrayList<>();                 for(int j=0; j<n; j++){                     all.add(strArr[j].length()-2*al.get(j)[i]);                 }                 java.util.Collections.sort(all);                 int c=0, d=0;                 for(int j=0; j<n; j++){                     c+=all.get(j);                     if(c<0) d=j+1;                 }                 ans = Math.max(ans,d);             }             System.out.println(ans);         }     }           } ",0
1363,"import javax.swing.text.html.parser.Entity; import java.io.*; import java.util.*; import java.math.BigInteger; public class Main{     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         Task solver = new Task();         solver.solve(in, out);         out.close();     }          static class Task{         double eps= 0.00000001;         static final int MAXN = 1010;         static final int MOD= 1000000007;                  static int spf[] = new int[MAXN];         static boolean[] prime;                                                                                                                                       public int add(int a, int b){             a+=b;             if(a>=MOD) a-=MOD;             else if(a<0) a+=MOD;             return a;         }                           int[] fact= new int[MAXN];         int[] inv= new int[MAXN];                                                                                          InputReader in; PrintWriter out;         static int mod = 1000000007;         int ans = 0;         ArrayList<Integer>g[] = new ArrayList[101];         int cnt[][] = new int[101][101];         int dp[][] = new int[101][101];                                    public void solve(InputReader in, PrintWriter out) {            int t = in.nextInt();            while (t-- > 0){                int n = in.nextInt();                String[] str = new String[n];                ArrayList<Integer> diff[] = new ArrayList[5];                for (int i = 0; i < 5; i++) diff[i] = new ArrayList<>();                for (int i = 0; i < n; i++){                    str[i] = in.nextToken();                    int[] cnt = new int[5];                    for (int j = 0; j < str[i].length(); j++){                        cnt[str[i].charAt(j) - 'a']++;                    }                    for (int j = 0; j < 5; j++){                        diff[j].add(cnt[j] * 2 - str[i].length());                    }                }                int ans = 0;                for (int i = 0; i < 5; i++){                    Collections.sort(diff[i]);                    Collections.reverse(diff[i]);                    int cur = 0, x = 0;                    for (int j = 0; j < diff[i].size(); j++){                        cur+=diff[i].get(j);                        if (cur <= 0){                            break;                        }                        x++;                    }                    ans = Math.max(ans, x);                }                out.println(ans);            }         }              }                                                        } ","import java.io.*; import java.util.*; import java.math.*; import java.math.BigInteger; public final class A {     static PrintWriter out = new PrintWriter(System.out);  static StringBuilder ans=new StringBuilder(); static FastReader in=new FastReader(); public static void main(String args[])throws IOException { int T=i(); outer:while(T-->0) { int N=i(); int size[]=new int[N]; PriorityQueue<node1> q[]=new PriorityQueue[6]; for(int i=0; i<5; i++)q[i]=new PriorityQueue<node1>(); for(int i=0; i<N; i++) { char X[]=in.next().toCharArray(); int s=X.length; size[i]=s; int f[]=new int[5]; for(char x:X)f[x-'a']++; for(int j=0; j<5; j++)q[j].add(new node1(f[j],i,s)); } int max=0; for(int i=0; i<5; i++) { PriorityQueue<node1> q_new=new PriorityQueue<>(); q_new=q[i]; int c=0; long f=0; while(q_new.size()>0) { node1 x=q_new.remove(); f+=x.a; if(f>0) { c++; max=Math.max(max, c); } else break; } } out.println(max); } out.close(); }           static int i() { return in.nextInt(); } } class node1 implements Comparable<node1> { int index,f,size; long a; node1(int f,int i,int size) { this.f=f; this.index=i; this.size=size; a=2*f-size; } } ",0
1364,"import static java.lang.Integer.MAX_VALUE; import static java.lang.Integer.parseInt; import static java.lang.Long.parseLong; import static java.lang.System.exit; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.HashMap; import java.util.HashSet; import java.util.Map; import java.util.Map.Entry; import java.util.StringTokenizer; public class B {     static void solve() throws Exception {         int t=scanInt();         while (t-->0){             int n=scanInt();             int []arr=new int[n];             int low=Integer.MAX_VALUE;             int high=0;             for (int i=0;i<n;i++){                 arr[i]=scanInt();                 low=Math.min(low,arr[i]);                 high=Math.max(high,arr[i]);             }             int ans=low;             while (low<=high){                 int mid=low+(high-low)/2;                 boolean flag=true;                 int []temp=new int[n];                 for (int i=0;i<n;i++){                     temp[i]=arr[i];                 }                 for (int i=n-1;i>=2;i--){                     if(temp[i]<mid){                         flag=false;                         break;                     }                     int rem=Math.min(temp[i]-mid,arr[i]);                     int taken=rem/3;                     temp[i]-=3*taken;                     temp[i-1]+=taken;                     temp[i-2]+=2*taken;                 }                 if(temp[0]<mid || temp[1]<mid){                     flag=false;                 }                 if(flag){                     low=mid+1;                     ans=mid;                 }else {                     high=mid-1;                 }             }             System.out.println(ans);         }     }     static int scanInt() throws IOException {         return parseInt(scanString());     }          static String scanString() throws IOException {         while (tok == null || !tok.hasMoreTokens()) {             tok = new StringTokenizer(in.readLine());         }         return tok.nextToken();     }     static BufferedReader in;     static PrintWriter out;     static StringTokenizer tok;     public static void main(String[] args) {         try {             in = new BufferedReader(new InputStreamReader(System.in));             out = new PrintWriter(System.out);             solve();             in.close();             out.close();         } catch (Throwable e) {             e.printStackTrace();             exit(1);         }     } } ","import java.io.*; import java.util.*; import javax.sound.midi.MidiChannel; public class Main {     static PrintWriter out;     static FastReader sc;     public static void main(String[] args) throws FileNotFoundException {         boolean t = true;         boolean f = false;         if (f) {             out = new PrintWriter(""output.txt"");             sc = new FastReader(""input.txt"");         } else {             out = new PrintWriter((System.out));             sc = new FastReader();         }         int tt = 1;         tt = sc.nextInt();         while (tt-- > 0) {             solve();         }         out.flush();         out.close();     }     static boolean bs(int[] arr, int a){                   int[] curr = Arrays.copyOf(arr, arr.length);      for(int i = arr.length - 1; i >= 2; i--){        if(arr[i] < a){          return false;        }        int min = Math.min(arr[i] - a, curr[i]);        min = min/3;        arr[i] -= 3*min;        arr[i - 1] += min;        arr[i-2] += 2*min;      }       for(int i: arr){         if(i < a){           return false;         }       }       return true;     }     public static void solve() {        int n = sc.nextInt();        int[] arr = new int[n];        int max = Integer.MIN_VALUE;        for(int i = 0; i < n; i++){          arr[i] = sc.nextInt();          max = Math.max(max, arr[i]);        }        int l = 0, r = max, ans = 0;        while(l <= r){          int mid = (l+r)/2;                   int[] aa = Arrays.copyOf(arr, arr.length);          if(bs(aa, mid)){                        ans = mid;             l = mid+1;          }else{            r = mid-1;          }        }        out.println(ans);     }                     } ",0
1365,"import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import java.util.*; import java.io.*; import java.math.*; public class A { public static void process() throws IOException { int n = sc.nextInt(); String s = sc.next(),t = sc.next(); int zs = 0, zt = 0; for(int i = 0; i<n; i++) { if(s.charAt(i) == '0')zs++; if(t.charAt(i) == '0')zt++; } int ans = n+1; if(zs == zt) { int min = 0; for(int i = 0; i<n; i++)if(s.charAt(i) != t.charAt(i))min++; ans = min(ans, min); } if(n-zs-1 == zt) { int min = 0; for(int i = 0; i<n; i++)if(s.charAt(i) == t.charAt(i))min++; ans = min(ans, min); } if(ans == n+1)ans = -1; System.out.println(ans); } private static long INF = 2000000000000000000L, M = 1000000007, MM = 998244353; private static int N = 0; static FastScanner sc; static FastWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new FastWriter(System.out); } else { sc = new FastScanner(""input.txt""); out = new FastWriter(""output.txt""); } long s = System.currentTimeMillis(); int t = 1; t = sc.nextInt(); int TTT = 1; while (t-- > 0) { process(); } out.flush(); } private static boolean oj = System.getProperty(""ONLINE_JUDGE"") != null; } ","import java.util.*; import java.io.*; public class Main {   public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); PrintWriter pw = new PrintWriter(System.out); StringTokenizer st; int t = Integer.parseInt(br.readLine()); while (t --> 0) { int n = Integer.parseInt(br.readLine()); String a = br.readLine(); String b = br.readLine(); int alit = 0; int blit = 0; int ans = Integer.MAX_VALUE; for (int i = 0; i < n; i++) { if (a.charAt(i) == '1') alit++; if (b.charAt(i) == '1') blit++; } if (alit == blit) { int count = 0; for (int i = 0; i < n; i++) if (a.charAt(i) != b.charAt(i)) count++; ans = Math.min(count, ans); } if (alit == n - blit + 1) { int count = 0; for (int i = 0; i < n; i++) if (a.charAt(i) == b.charAt(i)) count++; ans = Math.min(ans, count); } if (ans == Integer.MAX_VALUE) { pw.println(""-1""); } else { pw.println(ans); } } pw.close();   } } ",1
1366,"import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import java.util.*; import java.io.*; import java.math.*; public class E { public static void process() throws IOException { int n = sc.nextInt(),k = sc.nextInt(); int index[] = sc.readArray(k); long t[] = sc.readArrayLong(k); PriorityQueue<Pair> q = new PriorityQueue<Pair>(); for(int i = 0; i<k; i++)q.add(new Pair(t[i]+index[i], index[i])); long ans[] = new long[n+1]; Arrays.fill(ans, INF); int i = 1; while(!q.isEmpty() && i<=n) { while(!q.isEmpty() && q.peek().y < i) { q.poll(); } if(q.isEmpty())break; Pair e = q.peek(); ans[i]=min(ans[i],e.x-i); i++; } q.clear(); for(i = 0; i<k; i++) { q.add(new Pair(t[i]+n-index[i], index[i])); } i = n; while(!q.isEmpty() && i>=1) { while(!q.isEmpty() && q.peek().y > i) { q.poll(); } if(q.isEmpty())break; Pair e = q.peek(); ans[i]=min(ans[i],e.x-(n-i)); i--; } for( i = 1; i<=n; i++)out.print(ans[i]+"" ""); out.println(); } private static long INF = 2000000000000000000L, M = 1000000007, MM = 998244353; private static int N = 0; static FastScanner sc; static FastWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new FastWriter(System.out); } else { sc = new FastScanner(""input.txt""); out = new FastWriter(""output.txt""); } long s = System.currentTimeMillis(); int t = 1; t = sc.nextInt(); int TTT = 1; while (t-- > 0) { process(); } out.flush(); } private static boolean oj = System.getProperty(""ONLINE_JUDGE"") != null; static class Pair implements Comparable<Pair> { long x; int y; Pair(long x, int y) { this.x = x; this.y = y; } } } ","import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import java.util.*; import java.io.*; import java.math.*; public class E { public static void process() throws IOException { int n = sc.nextInt(),k = sc.nextInt(); int index[] = sc.readArray(k); long t[] = sc.readArrayLong(k); PriorityQueue<Pair> q = new PriorityQueue<Pair>(); for(int i = 0; i<k; i++)q.add(new Pair(t[i]+index[i], index[i])); long ans[] = new long[n+1]; Arrays.fill(ans, INF); int i = 1; while(!q.isEmpty() && i<=n) { while(!q.isEmpty() && q.peek().y < i) { q.poll(); } if(q.isEmpty())break; Pair e = q.peek(); ans[i]=min(ans[i],e.x-i); i++; } q.clear(); for(i = 0; i<k; i++) { q.add(new Pair(t[i]+n-index[i], index[i])); } i = n; while(!q.isEmpty() && i>=1) { while(!q.isEmpty() && q.peek().y > i) { q.poll(); } if(q.isEmpty())break; Pair e = q.peek(); ans[i]=min(ans[i],e.x-(n-i)); i--; } for( i = 1; i<=n; i++)out.print(ans[i]+"" ""); out.println(); } private static long INF = 2000000000000000000L, M = 1000000007, MM = 998244353; private static int N = 0; static FastScanner sc; static FastWriter out; public static void main(String[] args) throws IOException { boolean oj = true; if (oj) { sc = new FastScanner(); out = new FastWriter(System.out); } else { sc = new FastScanner(""input.txt""); out = new FastWriter(""output.txt""); } long s = System.currentTimeMillis(); int t = 1; t = sc.nextInt(); int TTT = 1; while (t-- > 0) { process(); } out.flush(); } private static boolean oj = System.getProperty(""ONLINE_JUDGE"") != null; static class Pair implements Comparable<Pair> { long x; int y; Pair(long x, int y) { this.x = x; this.y = y; } } } ",1
1367,"import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class Template {      static int mod = 1000000007; public static void main(String[] args){         FastScanner sc = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int N = 100001;         int yo = sc.nextInt();         while (yo-- > 0) {             List<List<Integer>> list = new ArrayList<>();             int n = sc.nextInt();             for(int i = 0; i < n; i++){                 list.add(new ArrayList<>());             }                          List<Pair> res = new ArrayList<>();             for(int i = 0; i < n-1; i++){                 int u = sc.nextInt()-1;                 int v = sc.nextInt()-1;                 res.add(new Pair(u+1,v+1));                 list.get(v).add(u);                 list.get(u).add(v);             }                          boolean ok = helper(0,list,n,-1);             if(ok){                 out.println(-1);                 continue;             }             map.clear();             dfs(0,list,n,-1,-1);             for(Pair p : res){                 int x = p.x;                 int y = p.y;                 out.print(map.get(x + "" "" + y) + "" "" );             }             out.println();                      }         out.close(); }          static Map<String,Integer> map = new HashMap<>();     static void dfs(int curr, List<List<Integer>> list, int n, int par, int what){         List<Integer> neighbours = list.get(curr);         if(what == -1){             boolean three = true;             for(int e : neighbours){                 String str1 = (curr+1) + "" "" + (e+1);                 String str2 = (e+1) + "" "" + (curr+1);                                  if(three){                     map.put(str1,3); map.put(str2,3);                     three = false;                 }                 else {                     map.put(str1,2);map.put(str2,2);                 }                 dfs(e,list,n,curr,map.get(str1));             }         }         else {             for(int e : neighbours){                 if(e == par) continue;                 String str1 = (curr+1) + "" "" + (e+1);                 String str2 = (e+1) + "" "" + (curr+1);                 if(what == 2){                     map.put(str1,3);map.put(str2,3);                 }                 else {                     map.put(str1,2); map.put(str2,2);                 }                 dfs(e,list,n,curr,map.get(str1));             }             }              }          static boolean helper(int curr, List<List<Integer>> list, int n, int par){         if(par != -1){             if(list.get(curr).size() >= 3){                 return true;             }         }         else {             if(list.get(curr).size() > 2){                 return true;             }         }         List<Integer> neighbours = list.get(curr);         for(int e : neighbours){             if(e == par) continue;             if(helper(e,list,n,curr)){                 return true;             }         }         return false;     }                    public static class Pair { int x; int y; public Pair(int x, int y) { this.x = x; this.y = y; } } public static void print(int[] arr, PrintWriter out) { for (int x : arr) out.print(x + "" ""); out.println(); }                     } ","import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import java.util.*; import java.io.*; import java.math.*; public class C{     static int mod = (int) (Math.pow(10, 9)+7); static final int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 }; static final int[] dx8 = { -1, -1, -1, 0, 0, 1, 1, 1 }, dy8 = { -1, 0, 1, -1, 1, -1, 0, 1 }; static final int[] dx9 = { -1, -1, -1, 0, 0, 0, 1, 1, 1 }, dy9 = { -1, 0, 1, -1, 0, 1, -1, 0, 1 }; static final double eps = 1e-10; static List<Integer> primeNumbers = new ArrayList<>();     public static void main(String[] args) {         MyScanner sc = new MyScanner();         out = new PrintWriter(new BufferedOutputStream(System.out));                  int test = sc.nextInt();         while(test --> 0){             int n = sc.nextInt();             int[][] data = new int[n-1][2];             Map<Integer, Integer> count = new HashMap<>();             Graph g = new Graph(n+1);             for(int i= 0; i < n-1; i++){                 int x = sc.nextInt();                 int y = sc.nextInt();                 data[i][0] = x;                 data[i][1] = y;                 g.addEdge(x, y);                              count.putIfAbsent(x, 0);                 count.put(x, count.get(x)+1);                 count.putIfAbsent(y, 0);                 count.put(y, count.get(y)+1);             }                          int one = 0;             int two = 0;             boolean flag = true;             int start = 0;             for(int i : count.keySet()){                 if(count.get(i) == 1){                       start = i;                     one++;                 }else if(count.get(i) == 2){                     two++;                 }else{                     flag = false;                     break;                 }             }             if(one != 2){                 flag = false;             }             if(!flag){                 out.println(-1);                 continue;             }                                       Map<Integer, ArrayList<Pair>> fuck = new HashMap<>();             g.addData(start, fuck);                          for(int i = 0; i < n-1; i++){                 int x = data[i][0];                 int y = data[i][1];                                  ArrayList<Pair> temp = fuck.get(x);                 for(Pair curr : temp){                     if(curr.a == y){                         out.print(curr.b + "" "");                         break;                     }                 }             }                          out.println();         }         out.close();     }                                                                                                                                                                public static class Graph{         public int V;         public ArrayList<ArrayList<Integer>> edges;                  Graph(int V){             this.V  = V;             edges = new ArrayList<>(V+1);             for(int i= 0; i <= V; i++){                 edges.add(new ArrayList<>());             }         }         public void addEdge(int from , int to){             edges.get(from).add(to);             edges.get(to).add(from);         }         public void addData(int start, Map<Integer, ArrayList<Pair>> fuck){                          int curr = start;             int[] visited = new int[V+1];             visited[curr] = 1;             int index = 0;             while(true){                 int make = 0;                 boolean last = true;                 for(int edge : edges.get(curr)){                     if(visited[edge] == 1){                         continue;                     }else{                         make = edge;                          last = false;                         break;                     }                 }                 if(last){                     break;                 }                                  fuck.putIfAbsent(curr, new ArrayList<>());                 fuck.putIfAbsent(make, new ArrayList<>());                 fuck.get(curr).add(new Pair(make, index %2 == 0 ? 2 : 3));                 fuck.get(make).add(new Pair(curr, index %2 == 0 ? 2 : 3));                 visited[make] = 1;                 curr = make;                 index++;             }         }     }                                                                                                                           public static class Pair{         public int a;         public int b;         Pair(int a , int b){             this.a = a;             this.b = b;         }              }                                                                                                                                                                               public static PrintWriter out;                      } ",0
1368,"import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class Template {      static int mod = 1000000007; public static void main(String[] args){         FastScanner sc = new FastScanner();         PrintWriter out = new PrintWriter(System.out);         int yo = sc.nextInt();         while (yo-- > 0) {             int n = sc.nextInt();             int m = sc.nextInt();             int[][] arr = new int[n][m];             for(int i = 0; i < n; i++){                 String s = sc.next();                 for(int j = 0; j < m; j++){                     arr[i][j] = s.charAt(j)-'0';                 }             }                          List<String> list = new ArrayList<>();             for(int i = 0; i < n-1; i++){                 for(int j = 0; j < m-1; j++){                     check(list,i,j,n,m,arr);                 }             }                                                                                                                     out.println(list.size()/3);             for(int i = 0; i < list.size(); i+=3){                 out.println(list.get(i) + "" "" + list.get(i+1) + "" "" + list.get(i+2));             }                                                             }         out.close();     }          static void check(List<String> list, int i, int j, int n, int m, int[][] arr){         int[][] a = new int[2][2];         a[0][0] = arr[i][j];         a[0][1] = arr[i][j+1];         a[1][0] = arr[i+1][j];         a[1][1] = arr[i+1][j+1];                  int ones = 0;         for(int x = 0; x < 2; x++){             for(int y = 0; y < 2; y++){                 if(a[x][y] == 1) ones++;             }         }                  if(ones == 0) return;                  if(ones == 1){             ones(i,j,list,a);             twos(i,j,list,a);             threes(i,j,list,a);         }         else if(ones == 2){             twos(i,j,list,a);             threes(i,j,list,a);         }         else if(ones == 3){             threes(i,j,list,a);         }         else if(ones == 4){             fours(i,j,list,a);                                                                                           ones(i,j,list,a);                                                                                           twos(i,j,list,a);                                                                                           threes(i,j,list,a);                                                                                       }                  arr[i][j] = a[0][0];         arr[i+1][j] = a[1][0];         arr[i][j+1] = a[0][1];         arr[i+1][j+1] = a[1][1];     }          public static void twos(int i, int j, List<String> list, int[][] a){         int count = 0;         for(int x = 0; x < 2; x++){             for(int y = 0; y < 2; y++){                 if(a[x][y] == 1 && count < 1) {                     count++;                     a[x][y] = 0;                     list.add(get(x,y,i,j));                 }                 else if(a[x][y] == 0){                     list.add(get(x,y,i,j));                     a[x][y] = 1;                 }             }         }     }          public static void threes(int i, int j, List<String> list, int[][] a){         int count = 0;         for(int x = 0; x < 2; x++){             for(int y = 0; y < 2; y++){                 if(a[x][y] == 1) {                     a[x][y] = 0;                     list.add(get(x,y,i,j));                 }             }         }     }          public static void fours(int i, int j, List<String> list, int[][] a){         int count = 0;         for(int x = 0; x < 2; x++){             for(int y = 0; y < 2; y++){                 if(a[x][y] == 1 && count < 3) {                     count++;                     a[x][y] = 0;                     list.add(get(x,y,i,j));                 }             }         }     }          public static void ones(int i, int j, List<String> list, int[][] a){         int count = 0;         for(int x = 0; x < 2; x++){             for(int y = 0; y < 2; y++){                 if(a[x][y] == 1) {                     a[x][y] = 0;                     list.add(get(x,y,i,j));                 }                 else if(a[x][y] == 0 && count < 2){                     a[x][y] = 1;                     count++;                     list.add(get(x,y,i,j));                 }             }         }     }          public static String get(int x, int y, int i, int j){         if(x == 0 && y == 0) {             return (i+1) + "" "" + (j+1);         }         else if(x == 0 && y == 1){             return (i+1) + "" "" + (j+2);         }         else if(x == 1 && y == 0){             return (i+2) + "" "" + (j+1);         }         else {             return (i+2) + "" "" + (j+2);         }     }                         } ","import java.util.*; import java.math.*; public class Solution { final static int MOD = 1000000007; public static void main(String[] args) { Scanner in = new Scanner(System.in); int t = Integer.parseInt(in.next()); for(int tt = 0; tt < t; tt++) { int n = Integer.parseInt(in.next()); int m = Integer.parseInt(in.next()); char[][] grid = new char[n][m]; List<Integer> ans = new ArrayList<>(); for(int i = 0; i < n; i++) { grid[i] = in.next().toCharArray(); } int iii = 0; int jjj = 0; if(n % 2 != 0) { iii = 1; for(int j = 0; j + 1 < m; j++) { if(grid[0][j] == '1') { grid[0][j] = '0'; grid[1][j] = (grid[1][j] == '1') ? '0' : '1'; grid[1][j + 1] = (grid[1][j + 1] == '1') ? '0' : '1'; ans.add(1); ans.add(j + 1); ans.add(2); ans.add(j + 1); ans.add(2); ans.add(j + 2); } if(grid[0][j + 1] == '1') { grid[0][j + 1] = '0'; grid[1][j] = (grid[1][j] == '1') ? '0' : '1'; grid[1][j + 1] = (grid[1][j + 1] == '1') ? '0' : '1'; ans.add(1); ans.add(j + 2); ans.add(2); ans.add(j + 1); ans.add(2); ans.add(j + 2); } } } if(m % 2 != 0) { jjj = 1; for(int i = (n % 2 == 0) ? 0 : 1; i + 1 < n; i++) { if(grid[i][0] == '1') { grid[i][0] = '0'; grid[i][1] = (grid[i][1] == '1') ? '0' : '1'; grid[i + 1][1] = (grid[i + 1][1] == '1') ? '0' : '1'; ans.add(i + 1); ans.add(1); ans.add(i + 1); ans.add(2); ans.add(i + 2); ans.add(2); } if(grid[i + 1][0] == '1') { grid[i + 1][0] = '0'; grid[i][1] = (grid[i][1] == '1') ? '0' : '1'; grid[i + 1][1] = (grid[i + 1][1] == '1') ? '0' : '1'; ans.add(i + 2); ans.add(1); ans.add(i + 1); ans.add(2); ans.add(i + 2); ans.add(2); } } } for(int i = iii; i < n; i += 2) { for(int j = jjj; j < m; j += 2) { int cnt = count(grid, i, j); while(cnt > 0) { List<G> g = new ArrayList<>(); for(int k = i; k < i + 2; k++) { for(int l = j; l < j + 2; l++) { g.add(new G(grid[k][l], k, l)); } } Collections.sort(g); int l = 0; int r = 0; if(cnt == 1 || cnt == 3) { l = 1; r = 3; }else { l = 0; r = 2; } for(int k = l; k <= r; k++) { int ii = g.get(k).i; int jj = g.get(k).j; grid[ii][jj] = (grid[ii][jj] == '1') ? '0' : '1'; ans.add(ii + 1); ans.add(jj + 1); } cnt = count(grid, i, j); } } } System.out.println(ans.size() / 6); for(int i = 0; i < ans.size(); i += 6) { for(int j = i; j < i + 6; j++) { System.out.print(ans.get(j) + "" "" ); } System.out.println(); } } } public static int count(char[][] grid, int i, int j) { int cnt = 0; for(int k = i; k < i + 2; k++) { for(int l = j; l < j + 2; l++) { if(grid[k][l] == '1') cnt += 1; } } return cnt; } } class G implements Comparable <G> { Character val; int i; int j; public G(char val, int i, int j) { this.val = val; this.i = i; this.j = j; } } ",0
1369,"import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class Template { static int mod = 1000000007; public static void main(String[] args) { FastScanner sc = new FastScanner(); int yo = sc.nextInt(); while (yo-- > 0) { int n = sc.nextInt();             int a = sc.nextInt()-1;             int b = sc.nextInt()-1;             int da = sc.nextInt();             int db = sc.nextInt();                          List<List<Integer>> list = new ArrayList<>();             for(int i = 0; i < n; i++) list.add(new ArrayList<>());                          for(int i = 0; i < n-1; i++){                 int x = sc.nextInt()-1;                 int y = sc.nextInt()-1;                 list.get(x).add(y);                 list.get(y).add(x);             }                          for(int i = 0; i <= n; i++) depth[i] = 0;             diam = 0;             dfs(a,-1,list);                          if(2 * da >= min(diam, db) || depth[b] <= da){                 out.println(""Alice"");             }             else {                 out.println(""Bob"");             }              } }          static int[] depth = new int[200001];     static int diam = 0;     static int dfs(int x, int p, List<List<Integer>> list) {         int len = 0;         List<Integer> ne = list.get(x);         for(int y : ne) {             if(y != p) {                 depth[y] = depth[x] + 1;                 int cur = 1 + dfs(y, x,list);                 diam = max(diam, cur + len);                 len = max(len, cur);             }         }         return len;     }     } ","import java.io.*; import java.util.*; public class Main {     private static final boolean N_CASE = true;     private List<List<Integer>> g;     private int a;     private int b;     private int da;     private int db;     private int max;     private int ab;     private int dfs(int u, int fa, int depth) {         if (u == a) {             ab = depth;         }         int m1 = 0, m2 = 0;         for (int v : g.get(u)) {             if (v != fa) {                 int m = dfs(v, u, depth + 1) + 1;                 if (m > m1) { m2 = m1; m1 = m; }                 else if (m > m2) { m2 = m; }             }         }         max = Math.max(max, m1 + m2);         int cmax = Math.max(m1, m2);         max = Math.max(max, cmax + depth);         return cmax;     }     private void solve() {         int n = sc.nextInt();         a = sc.nextInt() - 1; b = sc.nextInt() - 1;         da = sc.nextInt(); db = sc.nextInt();         g = createGraph(n);         for (int i = 0; i < n - 1; ++i) {             int u = sc.nextInt() - 1, v = sc.nextInt() - 1;             g.get(u).add(v);             g.get(v).add(u);         }         max = 0;         dfs(b, -1, 0);         db = Math.min(max, db);         boolean win = true;         if (ab > da) {             if (db > da * 2) {                 win = false;             }         }         out.println(win ? ""Alice"" : ""Bob"");     }     private void run() {         int T = N_CASE ? sc.nextInt() : 1;         for (int t = 0; t < T; ++t) {             solve();         }     }     private static MyWriter out;     private static MyScanner sc;          private static class MyWriter extends PrintWriter {         private MyWriter(OutputStream outputStream) {             super(outputStream);         }                           void println(int[] a) {             for (int v : a) {                 println(v);             }         }                  void println(List<Integer> list) {             list.forEach(this::println);         }     }     private <T> List<List<T>> createGraph(int n) {         List<List<T>> g = new ArrayList<>();         for (int i = 0; i < n; ++i) {             g.add(new ArrayList<>());         }         return g;     }               public static void main(String[] args) {         out = new MyWriter(new BufferedOutputStream(System.out));         sc = new MyScanner();         new Main().run();         out.close();     } } ",0
1370,"import static java.lang.Math.max; import static java.lang.Math.min; import static java.lang.Math.abs; import static java.lang.System.out; import java.util.*; import java.io.*; import java.math.*; public class Template { static int mod = 1000000007; public static void main(String[] args) { FastScanner sc = new FastScanner(); int yo = sc.nextInt(); while (yo-- > 0) { int n = sc.nextInt();             int a = sc.nextInt()-1;             int b = sc.nextInt()-1;             int da = sc.nextInt();             int db = sc.nextInt();                          List<List<Integer>> list = new ArrayList<>();             for(int i = 0; i < n; i++) list.add(new ArrayList<>());                          for(int i = 0; i < n-1; i++){                 int x = sc.nextInt()-1;                 int y = sc.nextInt()-1;                 list.get(x).add(y);                 list.get(y).add(x);             }                          for(int i = 0; i <= n; i++) depth[i] = 0;             diam = 0;             dfs(a,-1,list);                          if(2 * da >= min(diam, db) || depth[b] <= da){                 out.println(""Alice"");             }             else {                 out.println(""Bob"");             }              } }          static int[] depth = new int[200001];     static int diam = 0;     static int dfs(int x, int p, List<List<Integer>> list) {         int len = 0;         List<Integer> ne = list.get(x);         for(int y : ne) {             if(y != p) {                 depth[y] = depth[x] + 1;                 int cur = 1 + dfs(y, x,list);                 diam = max(diam, cur + len);                 len = max(len, cur);             }         }         return len;     }     } ","import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.StringTokenizer; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.ArrayList; import java.io.InputStream; public class Main {     public static void main(String[] args) {         InputStream inputStream = System.in;         OutputStream outputStream = System.out;         InputReader in = new InputReader(inputStream);         PrintWriter out = new PrintWriter(outputStream);         DTreeTag solver = new DTreeTag();         int testCount = Integer.parseInt(in.next());         for (int i = 1; i <= testCount; i++)             solver.solve(i, in, out);         out.close();     }     static class DTreeTag {         int diam = 0;         public int dfs(ArrayList<Integer> g[], int x, int depth[], int p) {             int len = 0;             for (int y : g[x]) {                 if (y != p) {                     depth[y] = depth[x] + 1;                     int cur = 1 + dfs(g, y, depth, x);                     diam = Math.max(diam, cur + len);                     len = Math.max(len, cur);                 }             }             return len;         }         public void solve(int testNumber, InputReader in, PrintWriter out) {             int n = in.nextInt();             int a = in.nextInt() - 1;             int b = in.nextInt() - 1;             int da = in.nextInt();             int db = in.nextInt();             int dis[] = new int[n];             ArrayList<Integer> g[] = new ArrayList[n];             for (int i = 0; i < n; i++) g[i] = new ArrayList<>();             for (int i = 0; i < n - 1; i++) {                 int u = in.nextInt() - 1;                 int v = in.nextInt() - 1;                 g[u].add(v);                 g[v].add(u);             }             diam = 0;             dfs(g, a, dis, -1);             int disb = dis[b];             if (2 * da >= Math.min(diam, db) || disb <= da) {                 out.println(""Alice"");             } else {                 out.println(""Bob"");             }         }     }      } ",1
